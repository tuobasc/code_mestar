[
    {
        "problem_description": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "ground truth": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
        "instances": [
            {
                "input": "has_close_elements([3.97, 5.8, 2.61, 3.55, 6.67, 3.38], 0.26637639316574935)",
                "output": "True"
            },
            {
                "input": "has_close_elements([2.69, 7.45, 2.68, 3.48, 7.09], 4.18)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.58, 2.5, 8.69, 9.82, 9.86], 1.77)",
                "output": "True"
            },
            {
                "input": "has_close_elements([3.18, 5.84, 3.87, 7.15, 8.43], 1.44)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.95, 2.49, 8.58, 2.07, 9.65], 2.54)",
                "output": "True"
            },
            {
                "input": "has_close_elements([5.7, 2.8, 1.31, 9.15, 10.4], 6.45)",
                "output": "True"
            },
            {
                "input": "has_close_elements([3.2, 2.38, 8.15, 6.82, 7.64, 1.09], 0.3617420469176341)",
                "output": "False"
            },
            {
                "input": "has_close_elements([3.56, 7.26, 7.92, 3.79, 2.48], 5.03)",
                "output": "True"
            },
            {
                "input": "has_close_elements([4.56, 3.74, 5.5, 5.04, 6.97], 0.0011630148061070322)",
                "output": "False"
            },
            {
                "input": "has_close_elements([2.08, 4.46, 5.6, 8.32, 6.69], 0.5273362445063764)",
                "output": "False"
            },
            {
                "input": "has_close_elements([1.29, 2.74, 4.85, 7.84, 7.55], 0.16553567344199593)",
                "output": "False"
            },
            {
                "input": "has_close_elements([2.71, 4.38, 4.62, 7.54, 8.62, 2.13], 2.6)",
                "output": "True"
            },
            {
                "input": "has_close_elements([2.77, 1.01, 1.32, 9.39, 6.21], 5.39)",
                "output": "True"
            },
            {
                "input": "has_close_elements([5.69, 4.54, 3.55, 8.95, 9.95, 5.06], 3.37)",
                "output": "True"
            },
            {
                "input": "has_close_elements([3.79, 4.72, 8.74, 1.79, 7.28, 7.79], 2.99)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)",
                "output": "False"
            },
            {
                "input": "has_close_elements([6.22, 6.62, 6.89, 9.54, 4.65, 3.22], 5.32)",
                "output": "True"
            },
            {
                "input": "has_close_elements([2.55, 1.39, 5.57, 6.98, 9.11, 5.54], 1.11)",
                "output": "True"
            },
            {
                "input": "has_close_elements([5.72, 4.52, 8.45, 1.43, 4.88, 7.28], 0.6213126721754707)",
                "output": "True"
            },
            {
                "input": "has_close_elements([2.67, 2.26, 3.14, 1.9, 2.88], 0.05407902838980738)",
                "output": "False"
            },
            {
                "input": "has_close_elements([5.07, 5.12, 1.02, 9.07, 3.75], 2.11)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.27, 7.68, 8.1, 9.7, 1.83, 2.72], 3.86)",
                "output": "True"
            },
            {
                "input": "has_close_elements([2.88, 2.26, 5.77, 1.77, 3.17, 4.82], 1.29)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05)",
                "output": "False"
            },
            {
                "input": "has_close_elements([6.07, 2.35, 3.41, 7.98, 2.12, 4.52], 5.15)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.37, 7.95, 9.41, 7.57, 2.66], 2.27)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.03, 6.9, 5.3, 4.65, 7.97], 0.7606715861237912)",
                "output": "True"
            },
            {
                "input": "has_close_elements([5.37, 7.66, 6.14, 4.75, 1.54, 2.89], 0.410138035984677)",
                "output": "False"
            },
            {
                "input": "has_close_elements([3.37, 3.0, 1.92, 9.63, 2.6], 0.6269462195500632)",
                "output": "True"
            },
            {
                "input": "has_close_elements([5.2, 5.9, 4.37, 9.33, 10.95], 6.27)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.58, 5.04, 3.18, 7.46, 1.48, 1.12], 4.99)",
                "output": "True"
            },
            {
                "input": "has_close_elements([2.57, 2.86, 1.22, 3.7, 2.5], 3.12)",
                "output": "True"
            },
            {
                "input": "has_close_elements([2.86, 6.89, 5.19, 6.56, 2.63], 4.64)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.17, 6.26, 6.12, 4.42, 5.85, 2.93], 4.66)",
                "output": "True"
            },
            {
                "input": "has_close_elements([5.51, 7.57, 2.46, 3.85, 2.75], 0.2787247504152883)",
                "output": "False"
            },
            {
                "input": "has_close_elements([6.08, 7.89, 2.32, 3.29, 6.24], 0.11700796032131644)",
                "output": "False"
            },
            {
                "input": "has_close_elements([4.57, 2.9, 5.05, 6.42, 5.88, 7.55], 0.916840133124239)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.12, 6.51, 4.58, 5.18, 4.54], 2.1)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.58, 7.87, 1.73, 5.48, 8.73, 7.95], 4.5)",
                "output": "True"
            },
            {
                "input": "has_close_elements([4.11, 4.75, 5.02, 1.23, 2.81], 4.72)",
                "output": "True"
            },
            {
                "input": "has_close_elements([3.06, 7.17, 7.8, 3.14, 9.9, 3.32], 0.15562526330040638)",
                "output": "True"
            },
            {
                "input": "has_close_elements([5.52, 7.52, 2.2, 4.41, 5.02, 5.9], 4.09)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)",
                "output": "False"
            },
            {
                "input": "has_close_elements([6.78, 5.17, 2.34, 3.59, 9.96, 7.42], 4.52)",
                "output": "True"
            },
            {
                "input": "has_close_elements([2.71, 6.22, 2.09, 3.25, 1.78], 4.42)",
                "output": "True"
            },
            {
                "input": "has_close_elements([4.47, 3.29, 8.27, 4.83, 3.2], 2.53)",
                "output": "True"
            },
            {
                "input": "has_close_elements([4.54, 6.22, 9.83, 9.14, 2.33], 3.07)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.81, 6.92, 8.55, 9.5, 3.57], 5.9)",
                "output": "True"
            },
            {
                "input": "has_close_elements([4.07, 4.35, 4.03, 8.01, 9.69, 7.45], 0.4062541056462473)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.54, 4.43, 7.01, 6.17, 10.01], 0.2314054295285396)",
                "output": "False"
            },
            {
                "input": "has_close_elements([3.22, 7.97, 3.43, 2.69, 3.66, 7.9], 3.98)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.08, 6.79, 2.08, 4.21, 3.08], 0.9637210131339815)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.14, 5.85, 4.03, 8.5, 4.75], 1.63)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.01, 2.06, 6.72, 8.86, 8.3, 1.48], 1.91)",
                "output": "True"
            },
            {
                "input": "has_close_elements([2.23, 5.08, 6.75, 5.08, 2.12], 0.10128793009561687)",
                "output": "True"
            },
            {
                "input": "has_close_elements([5.4, 6.12, 6.47, 8.31, 1.75, 5.74], 2.76)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.84, 6.19, 1.07, 6.85, 10.02], 0.06327986170932154)",
                "output": "False"
            },
            {
                "input": "has_close_elements([1.45, 7.66, 4.78, 9.93, 7.72, 4.82], 0.6004288435422835)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.92, 2.86, 2.83, 5.78, 1.86], 5.46)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.8, 7.7, 7.97, 9.22, 1.04], 0.5420385167082946)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.9, 2.21, 7.1, 3.79, 4.04], 0.396996215155218)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.06, 3.37, 7.46, 2.39, 2.71], 4.84)",
                "output": "True"
            },
            {
                "input": "has_close_elements([4.52, 5.0, 1.27, 3.61, 1.81, 7.06], 2.01)",
                "output": "True"
            },
            {
                "input": "has_close_elements([5.38, 4.86, 7.17, 3.08, 4.81, 5.82], 3.78)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.39, 4.68, 10.85, 1.28, 9.9], 0.7720416915105155)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.99, 3.18, 8.31, 2.38, 8.73, 4.14], 0.21143607107881202)",
                "output": "False"
            },
            {
                "input": "has_close_elements([2.92, 6.36, 8.63, 3.92, 8.74, 5.18], 0.8508754629067022)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.08, 2.32, 5.58, 8.46, 8.4, 1.07], 0.8176950844959172)",
                "output": "True"
            },
            {
                "input": "has_close_elements([4.74, 3.86, 1.63, 2.89, 5.88], 0.28615090391667286)",
                "output": "False"
            },
            {
                "input": "has_close_elements([1.63, 6.76, 6.72, 3.26, 9.6, 4.07], 3.45)",
                "output": "True"
            },
            {
                "input": "has_close_elements([5.74, 3.9, 5.02, 1.13, 9.57, 5.45], 1.09)",
                "output": "True"
            },
            {
                "input": "has_close_elements([4.88, 7.89, 3.67, 5.68, 4.88], 2.06)",
                "output": "True"
            },
            {
                "input": "has_close_elements([5.54, 7.22, 5.99, 5.53, 10.8], 0.6856823622260582)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.98, 7.24, 6.66, 7.33, 2.07], 0.7288255470454569)",
                "output": "True"
            },
            {
                "input": "has_close_elements([5.91, 1.51, 6.23, 2.37, 10.9], 0.7038961471044487)",
                "output": "True"
            },
            {
                "input": "has_close_elements([3.94, 4.37, 7.66, 8.74, 3.11], 0.6678682747553127)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)",
                "output": "True"
            },
            {
                "input": "has_close_elements([4.84, 6.99, 5.41, 9.14, 10.84, 1.19], 1.27)",
                "output": "True"
            },
            {
                "input": "has_close_elements([4.72, 1.92, 3.55, 3.94, 1.4, 1.93], 3.6)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.78, 4.67, 3.31, 3.15, 5.1], 0.027645872133869043)",
                "output": "False"
            },
            {
                "input": "has_close_elements([1.5, 3.29, 4.99, 2.43, 9.05, 5.29], 0.7306459844437514)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.17, 1.93, 4.45, 7.98, 8.76], 0.7343118568223004)",
                "output": "False"
            },
            {
                "input": "has_close_elements([4.31, 7.57, 1.44, 1.06, 7.74], 4.89)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.65, 3.51, 4.77, 4.7, 9.45, 4.71], 1.74)",
                "output": "True"
            },
            {
                "input": "has_close_elements([2.74, 2.59, 8.75, 2.64, 3.41, 6.83], 0.47037584760808515)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.93, 1.88, 9.12, 8.43, 7.79], 0.9733063912369614)",
                "output": "True"
            },
            {
                "input": "has_close_elements([4.87, 4.55, 1.43, 2.32, 9.0], 4.1)",
                "output": "True"
            },
            {
                "input": "has_close_elements([3.26, 1.07, 7.95, 8.07, 7.15, 4.9], 2.86)",
                "output": "True"
            },
            {
                "input": "has_close_elements([2.27, 7.74, 3.08, 2.91, 7.28], 2.18)",
                "output": "True"
            },
            {
                "input": "has_close_elements([4.64, 3.07, 5.48, 4.14, 1.86], 1.5)",
                "output": "True"
            },
            {
                "input": "has_close_elements([5.33, 2.33, 1.36, 1.54, 6.95], 0.07523209090543603)",
                "output": "False"
            },
            {
                "input": "has_close_elements([6.66, 1.15, 3.17, 9.74, 6.17], 0.8580780500021119)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.39, 4.67, 9.22, 6.4, 5.71], 4.81)",
                "output": "True"
            },
            {
                "input": "has_close_elements([2.35, 3.12, 1.26, 4.93, 8.6, 2.24], 0.22075974625982897)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.74, 6.46, 9.13, 1.64, 2.87], 0.2749641428006748)",
                "output": "False"
            },
            {
                "input": "has_close_elements([1.41, 1.47, 5.8, 5.5, 9.64], 0.4422265315774656)",
                "output": "True"
            },
            {
                "input": "has_close_elements([4.55, 3.22, 2.64, 7.89, 4.11, 7.23], 5.08)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.13, 7.18, 6.73, 4.67, 6.32, 5.25], 4.08)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.12, 1.1, 1.8, 1.42, 10.81, 2.61], 1.43)",
                "output": "True"
            },
            {
                "input": "has_close_elements([2.68, 2.36, 6.38, 7.89, 1.98], 2.88)",
                "output": "True"
            },
            {
                "input": "has_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)",
                "output": "True"
            },
            {
                "input": "has_close_elements([6.9, 3.28, 6.53, 9.09, 9.27], 0.27823425350535214)",
                "output": "True"
            },
            {
                "input": "has_close_elements([3.84, 5.76, 5.19, 2.7, 10.51, 4.31], 4.14)",
                "output": "True"
            }
        ]
    },
    {
        "problem_description": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
        "ground truth": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
        "instances": [
            {
                "input": "separate_paren_groups(\"()((())()())((())()())((()))\")",
                "output": "['()', '((())()())', '((())()())', '((()))']"
            },
            {
                "input": "separate_paren_groups(\"((()))(()())()((())()())\")",
                "output": "['((()))', '(()())', '()', '((())()())']"
            },
            {
                "input": "separate_paren_groups(\"()(())(())\")",
                "output": "['()', '(())', '(())']"
            },
            {
                "input": "separate_paren_groups(\"(()())((()))((())()())(()())\")",
                "output": "['(()())', '((()))', '((())()())', '(()())']"
            },
            {
                "input": "separate_paren_groups(\"(((())))((()))((()))(((())))\")",
                "output": "['(((())))', '((()))', '((()))', '(((())))']"
            },
            {
                "input": "separate_paren_groups(\"((()))()((())()())(()())\")",
                "output": "['((()))', '()', '((())()())', '(()())']"
            },
            {
                "input": "separate_paren_groups(\"()()()((())()())\")",
                "output": "['()', '()', '()', '((())()())']"
            },
            {
                "input": "separate_paren_groups(\"()(((())))(((())))(())\")",
                "output": "['()', '(((())))', '(((())))', '(())']"
            },
            {
                "input": "separate_paren_groups(\"((()))()()(((())))\")",
                "output": "['((()))', '()', '()', '(((())))']"
            },
            {
                "input": "separate_paren_groups(\"(()())(()())(()())\")",
                "output": "['(()())', '(()())', '(()())']"
            },
            {
                "input": "separate_paren_groups(\"()(())(()())\")",
                "output": "['()', '(())', '(()())']"
            },
            {
                "input": "separate_paren_groups(\"((()))(((())))(())()\")",
                "output": "['((()))', '(((())))', '(())', '()']"
            },
            {
                "input": "separate_paren_groups(\"(()())(()())((()))((()))\")",
                "output": "['(()())', '(()())', '((()))', '((()))']"
            },
            {
                "input": "separate_paren_groups(\"(((())))(((())))(())(())\")",
                "output": "['(((())))', '(((())))', '(())', '(())']"
            },
            {
                "input": "separate_paren_groups(\"(())((()))()(((())))\")",
                "output": "['(())', '((()))', '()', '(((())))']"
            },
            {
                "input": "separate_paren_groups(\"()(()())(()())((()))\")",
                "output": "['()', '(()())', '(()())', '((()))']"
            },
            {
                "input": "separate_paren_groups(\"(()())(()())()((())()())\")",
                "output": "['(()())', '(()())', '()', '((())()())']"
            },
            {
                "input": "separate_paren_groups(\"()()()\")",
                "output": "['()', '()', '()']"
            },
            {
                "input": "separate_paren_groups(\"(()())()((()))()\")",
                "output": "['(()())', '()', '((()))', '()']"
            },
            {
                "input": "separate_paren_groups(\"()(((())))()(())\")",
                "output": "['()', '(((())))', '()', '(())']"
            },
            {
                "input": "separate_paren_groups(\"((()))(())((()))(((())))\")",
                "output": "['((()))', '(())', '((()))', '(((())))']"
            },
            {
                "input": "separate_paren_groups(\"((())()())((())()())((())()())()\")",
                "output": "['((())()())', '((())()())', '((())()())', '()']"
            },
            {
                "input": "separate_paren_groups(\"((())()())(()())((())()())()\")",
                "output": "['((())()())', '(()())', '((())()())', '()']"
            },
            {
                "input": "separate_paren_groups(\"()()(()())\")",
                "output": "['()', '()', '(()())']"
            },
            {
                "input": "separate_paren_groups(\"()(())(((())))(((())))\")",
                "output": "['()', '(())', '(((())))', '(((())))']"
            },
            {
                "input": "separate_paren_groups(\"(((())))(())(())(((())))\")",
                "output": "['(((())))', '(())', '(())', '(((())))']"
            },
            {
                "input": "separate_paren_groups(\"()(())()(())\")",
                "output": "['()', '(())', '()', '(())']"
            },
            {
                "input": "separate_paren_groups(\"(()())()(())\")",
                "output": "['(()())', '()', '(())']"
            },
            {
                "input": "separate_paren_groups(\"((()))()(()())((()))\")",
                "output": "['((()))', '()', '(()())', '((()))']"
            },
            {
                "input": "separate_paren_groups(\"(((())))(())()()\")",
                "output": "['(((())))', '(())', '()', '()']"
            },
            {
                "input": "separate_paren_groups(\"(())(())()()\")",
                "output": "['(())', '(())', '()', '()']"
            },
            {
                "input": "separate_paren_groups(\"(())()(())\")",
                "output": "['(())', '()', '(())']"
            },
            {
                "input": "separate_paren_groups(\"((()))()()((()))\")",
                "output": "['((()))', '()', '()', '((()))']"
            },
            {
                "input": "separate_paren_groups(\"()(())()\")",
                "output": "['()', '(())', '()']"
            },
            {
                "input": "separate_paren_groups(\"(())()(())(((())))\")",
                "output": "['(())', '()', '(())', '(((())))']"
            },
            {
                "input": "separate_paren_groups(\"(())(()())(())\")",
                "output": "['(())', '(()())', '(())']"
            },
            {
                "input": "separate_paren_groups(\"(()())(()())(())\")",
                "output": "['(()())', '(()())', '(())']"
            },
            {
                "input": "separate_paren_groups(\"(((())))((()))(((())))((()))\")",
                "output": "['(((())))', '((()))', '(((())))', '((()))']"
            },
            {
                "input": "separate_paren_groups(\"()((())()())((())()())()\")",
                "output": "['()', '((())()())', '((())()())', '()']"
            },
            {
                "input": "separate_paren_groups(\"()()(())\")",
                "output": "['()', '()', '(())']"
            },
            {
                "input": "separate_paren_groups(\"((()))(()())((()))()\")",
                "output": "['((()))', '(()())', '((()))', '()']"
            },
            {
                "input": "separate_paren_groups(\"(())(())(()())\")",
                "output": "['(())', '(())', '(()())']"
            },
            {
                "input": "separate_paren_groups(\"((()))(())(())(())\")",
                "output": "['((()))', '(())', '(())', '(())']"
            },
            {
                "input": "separate_paren_groups('( ) (( )) (( )( ))')",
                "output": "['()', '(())', '(()())']"
            },
            {
                "input": "separate_paren_groups(\"(())(())(())\")",
                "output": "['(())', '(())', '(())']"
            },
            {
                "input": "separate_paren_groups(\"(()())()(()())(()())\")",
                "output": "['(()())', '()', '(()())', '(()())']"
            },
            {
                "input": "separate_paren_groups(\"(())(()())()\")",
                "output": "['(())', '(()())', '()']"
            },
            {
                "input": "separate_paren_groups(\"((()))(())(())()\")",
                "output": "['((()))', '(())', '(())', '()']"
            },
            {
                "input": "separate_paren_groups(\"((())()())((()))((())()())((())()())\")",
                "output": "['((())()())', '((()))', '((())()())', '((())()())']"
            },
            {
                "input": "separate_paren_groups(\"()()(())((()))\")",
                "output": "['()', '()', '(())', '((()))']"
            },
            {
                "input": "separate_paren_groups(\"(())(((())))(((())))(((())))\")",
                "output": "['(())', '(((())))', '(((())))', '(((())))']"
            },
            {
                "input": "separate_paren_groups(\"()(())((()))(())\")",
                "output": "['()', '(())', '((()))', '(())']"
            },
            {
                "input": "separate_paren_groups(\"()(()())(()())()\")",
                "output": "['()', '(()())', '(()())', '()']"
            },
            {
                "input": "separate_paren_groups(\"()(((())))(())((()))\")",
                "output": "['()', '(((())))', '(())', '((()))']"
            },
            {
                "input": "separate_paren_groups(\"((()))()()((())()())\")",
                "output": "['((()))', '()', '()', '((())()())']"
            },
            {
                "input": "separate_paren_groups(\"((())()())((()))((()))((()))\")",
                "output": "['((())()())', '((()))', '((()))', '((()))']"
            },
            {
                "input": "separate_paren_groups(\"(())((()))((()))(((())))\")",
                "output": "['(())', '((()))', '((()))', '(((())))']"
            },
            {
                "input": "separate_paren_groups(\"(()(())((())))\")",
                "output": "['(()(())((())))']"
            },
            {
                "input": "separate_paren_groups(\"((()))(((())))((()))((()))\")",
                "output": "['((()))', '(((())))', '((()))', '((()))']"
            },
            {
                "input": "separate_paren_groups(\"(())()()\")",
                "output": "['(())', '()', '()']"
            },
            {
                "input": "separate_paren_groups(\"(())()(()())\")",
                "output": "['(())', '()', '(()())']"
            },
            {
                "input": "separate_paren_groups(\"()()()((()))\")",
                "output": "['()', '()', '()', '((()))']"
            },
            {
                "input": "separate_paren_groups(\"(()())()(()())\")",
                "output": "['(()())', '()', '(()())']"
            },
            {
                "input": "separate_paren_groups(\"()(()())(())\")",
                "output": "['()', '(()())', '(())']"
            },
            {
                "input": "separate_paren_groups(\"(()())()((())()())((()))\")",
                "output": "['(()())', '()', '((())()())', '((()))']"
            },
            {
                "input": "separate_paren_groups(\"()((())()())((()))((())()())\")",
                "output": "['()', '((())()())', '((()))', '((())()())']"
            }
        ]
    },
    {
        "problem_description": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
        "ground truth": "def truncate_number(number: float) -> float:\n    return number % 1.0\n",
        "instances": [
            {
                "input": "truncate_number(7.733)",
                "output": "0.733"
            },
            {
                "input": "truncate_number(3.533)",
                "output": "0.533"
            },
            {
                "input": "truncate_number(5.309)",
                "output": "0.309"
            },
            {
                "input": "truncate_number(1.661)",
                "output": "0.661"
            },
            {
                "input": "truncate_number(4.532)",
                "output": "0.532"
            },
            {
                "input": "truncate_number(7.016)",
                "output": "0.016"
            },
            {
                "input": "truncate_number(8.268)",
                "output": "0.268"
            },
            {
                "input": "truncate_number(3.908)",
                "output": "0.908"
            },
            {
                "input": "truncate_number(6.058)",
                "output": "0.058"
            },
            {
                "input": "truncate_number(2.584)",
                "output": "0.584"
            },
            {
                "input": "truncate_number(8.827)",
                "output": "0.827"
            },
            {
                "input": "truncate_number(1.319)",
                "output": "0.319"
            },
            {
                "input": "truncate_number(3.194)",
                "output": "0.194"
            },
            {
                "input": "truncate_number(6.424)",
                "output": "0.424"
            },
            {
                "input": "truncate_number(3.505)",
                "output": "0.505"
            },
            {
                "input": "truncate_number(8.957)",
                "output": "0.957"
            },
            {
                "input": "truncate_number(7.194)",
                "output": "0.194"
            },
            {
                "input": "truncate_number(6.248)",
                "output": "0.248"
            },
            {
                "input": "truncate_number(2.561)",
                "output": "0.561"
            },
            {
                "input": "truncate_number(7.997)",
                "output": "0.997"
            },
            {
                "input": "truncate_number(1.98)",
                "output": "0.98"
            },
            {
                "input": "truncate_number(2.996)",
                "output": "0.996"
            },
            {
                "input": "truncate_number(3.904)",
                "output": "0.904"
            },
            {
                "input": "truncate_number(1.338)",
                "output": "0.338"
            },
            {
                "input": "truncate_number(1.471)",
                "output": "0.471"
            },
            {
                "input": "truncate_number(2.72)",
                "output": "0.72"
            },
            {
                "input": "truncate_number(3.416)",
                "output": "0.416"
            },
            {
                "input": "truncate_number(3.723)",
                "output": "0.723"
            },
            {
                "input": "truncate_number(5.246)",
                "output": "0.246"
            },
            {
                "input": "truncate_number(3.2)",
                "output": "0.2"
            },
            {
                "input": "truncate_number(2.918)",
                "output": "0.918"
            },
            {
                "input": "truncate_number(1.496)",
                "output": "0.496"
            },
            {
                "input": "truncate_number(8.66)",
                "output": "0.66"
            },
            {
                "input": "truncate_number(2.562)",
                "output": "0.562"
            },
            {
                "input": "truncate_number(7.871)",
                "output": "0.871"
            },
            {
                "input": "truncate_number(4.441)",
                "output": "0.441"
            },
            {
                "input": "truncate_number(6.86)",
                "output": "0.86"
            },
            {
                "input": "truncate_number(8.976)",
                "output": "0.976"
            },
            {
                "input": "truncate_number(3.753)",
                "output": "0.753"
            },
            {
                "input": "truncate_number(5.987)",
                "output": "0.987"
            },
            {
                "input": "truncate_number(6.826)",
                "output": "0.826"
            },
            {
                "input": "truncate_number(4.046)",
                "output": "0.046"
            },
            {
                "input": "truncate_number(8.878)",
                "output": "0.878"
            },
            {
                "input": "truncate_number(6.333)",
                "output": "0.333"
            },
            {
                "input": "truncate_number(1.689)",
                "output": "0.689"
            },
            {
                "input": "truncate_number(6.094)",
                "output": "0.094"
            },
            {
                "input": "truncate_number(6.63)",
                "output": "0.63"
            },
            {
                "input": "truncate_number(7.378)",
                "output": "0.378"
            },
            {
                "input": "truncate_number(2.296)",
                "output": "0.296"
            },
            {
                "input": "truncate_number(5.029)",
                "output": "0.029"
            },
            {
                "input": "truncate_number(6.558)",
                "output": "0.558"
            },
            {
                "input": "truncate_number(1.615)",
                "output": "0.615"
            },
            {
                "input": "truncate_number(7.768)",
                "output": "0.768"
            },
            {
                "input": "truncate_number(3.452)",
                "output": "0.452"
            },
            {
                "input": "truncate_number(8.788)",
                "output": "0.788"
            },
            {
                "input": "truncate_number(5.276)",
                "output": "0.276"
            },
            {
                "input": "truncate_number(6.05)",
                "output": "0.05"
            },
            {
                "input": "truncate_number(7.831)",
                "output": "0.831"
            },
            {
                "input": "truncate_number(4.337)",
                "output": "0.337"
            },
            {
                "input": "truncate_number(3.225)",
                "output": "0.225"
            },
            {
                "input": "truncate_number(4.914)",
                "output": "0.914"
            },
            {
                "input": "truncate_number(6.471)",
                "output": "0.471"
            },
            {
                "input": "truncate_number(6.824)",
                "output": "0.824"
            },
            {
                "input": "truncate_number(3.127)",
                "output": "0.127"
            },
            {
                "input": "truncate_number(1.641)",
                "output": "0.641"
            },
            {
                "input": "truncate_number(6.664)",
                "output": "0.664"
            },
            {
                "input": "truncate_number(7.798)",
                "output": "0.798"
            },
            {
                "input": "truncate_number(6.382)",
                "output": "0.382"
            },
            {
                "input": "truncate_number(7.299)",
                "output": "0.299"
            },
            {
                "input": "truncate_number(7.69)",
                "output": "0.69"
            },
            {
                "input": "truncate_number(6.191)",
                "output": "0.191"
            },
            {
                "input": "truncate_number(3.952)",
                "output": "0.952"
            },
            {
                "input": "truncate_number(6.499)",
                "output": "0.499"
            },
            {
                "input": "truncate_number(1.657)",
                "output": "0.657"
            },
            {
                "input": "truncate_number(4.245)",
                "output": "0.245"
            },
            {
                "input": "truncate_number(8.063)",
                "output": "0.063"
            },
            {
                "input": "truncate_number(5.319)",
                "output": "0.319"
            },
            {
                "input": "truncate_number(3.5)",
                "output": "0.5"
            },
            {
                "input": "truncate_number(4.396)",
                "output": "0.396"
            },
            {
                "input": "truncate_number(7.256)",
                "output": "0.256"
            },
            {
                "input": "truncate_number(1.683)",
                "output": "0.683"
            },
            {
                "input": "truncate_number(2.856)",
                "output": "0.856"
            },
            {
                "input": "truncate_number(8.588)",
                "output": "0.588"
            },
            {
                "input": "truncate_number(3.948)",
                "output": "0.948"
            },
            {
                "input": "truncate_number(7.971)",
                "output": "0.971"
            },
            {
                "input": "truncate_number(1.767)",
                "output": "0.767"
            },
            {
                "input": "truncate_number(7.545)",
                "output": "0.545"
            },
            {
                "input": "truncate_number(2.622)",
                "output": "0.622"
            },
            {
                "input": "truncate_number(7.001)",
                "output": "0.001"
            },
            {
                "input": "truncate_number(1.055)",
                "output": "0.055"
            },
            {
                "input": "truncate_number(1.823)",
                "output": "0.823"
            },
            {
                "input": "truncate_number(8.419)",
                "output": "0.419"
            },
            {
                "input": "truncate_number(6.682)",
                "output": "0.682"
            },
            {
                "input": "truncate_number(7.062)",
                "output": "0.062"
            },
            {
                "input": "truncate_number(3.719)",
                "output": "0.719"
            },
            {
                "input": "truncate_number(5.168)",
                "output": "0.168"
            },
            {
                "input": "truncate_number(8.631)",
                "output": "0.631"
            },
            {
                "input": "truncate_number(5.623)",
                "output": "0.623"
            },
            {
                "input": "truncate_number(5.473)",
                "output": "0.473"
            },
            {
                "input": "truncate_number(4.261)",
                "output": "0.261"
            },
            {
                "input": "truncate_number(7.662)",
                "output": "0.662"
            }
        ]
    },
    {
        "problem_description": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "ground truth": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
        "instances": [
            {
                "input": "below_zero([3, 6, -3, 3, 1, -1])",
                "output": "False"
            },
            {
                "input": "below_zero([4, 0, 6, -7, 1, -6, 6, -2])",
                "output": "True"
            },
            {
                "input": "below_zero([6, 5, -4, 10, 6])",
                "output": "False"
            },
            {
                "input": "below_zero([6, -4, 3, -3, 10, -5, 7, -2])",
                "output": "False"
            },
            {
                "input": "below_zero([4, 7, 2, 6, 3, -6])",
                "output": "False"
            },
            {
                "input": "below_zero([3, 2, -2, 6, 7, -3])",
                "output": "False"
            },
            {
                "input": "below_zero([6, 1, 2, -4, 5, -5, 1, -3])",
                "output": "False"
            },
            {
                "input": "below_zero([3, 2, 6, 3, 10, -6, 4, -9])",
                "output": "False"
            },
            {
                "input": "below_zero([1, 3, 5, -5, 4, -5, 4, 1])",
                "output": "False"
            },
            {
                "input": "below_zero([6, 4, 1, 1, 9])",
                "output": "False"
            },
            {
                "input": "below_zero([6, 1, 1, -2, 9, -9, 9, 0])",
                "output": "False"
            },
            {
                "input": "below_zero([5, -7, 2, -2, 2, -3, 6, 1])",
                "output": "True"
            },
            {
                "input": "below_zero([4, -6, 5, -5, 4, -1, 1, -2])",
                "output": "True"
            },
            {
                "input": "below_zero([4, 5, -7, 5, 11])",
                "output": "False"
            },
            {
                "input": "below_zero([1, -3, 5, 2, 2, -9, 8, -4])",
                "output": "True"
            },
            {
                "input": "below_zero([5, -1, 3, 1, 5, -3, 3, -7])",
                "output": "False"
            },
            {
                "input": "below_zero([5, 4, 1, 1, 6, -2])",
                "output": "False"
            },
            {
                "input": "below_zero([2, -3, 5, 2, 2, -4, 6, -2])",
                "output": "True"
            },
            {
                "input": "below_zero([1, 2, 1, 3, 7, 0, 4, -4])",
                "output": "False"
            },
            {
                "input": "below_zero([2, 6, -1, 2, 5])",
                "output": "False"
            },
            {
                "input": "below_zero([6, 3, 6, -5, 3, -1, 1, -6])",
                "output": "False"
            },
            {
                "input": "below_zero([5, 6, -5, 9, 2])",
                "output": "False"
            },
            {
                "input": "below_zero([1, -3, 3, -3, 1, -9, 7, 1])",
                "output": "True"
            },
            {
                "input": "below_zero([6, -5, 6, -1, 5, -2, 5, -1])",
                "output": "False"
            },
            {
                "input": "below_zero([4, 1, -7, 1, 4, -4])",
                "output": "True"
            },
            {
                "input": "below_zero([4, 2, -7, 6, 1, -7])",
                "output": "True"
            },
            {
                "input": "below_zero([2, 1, -4, 6, 6])",
                "output": "True"
            },
            {
                "input": "below_zero([4, 4, -2, 1, 1, -6])",
                "output": "False"
            },
            {
                "input": "below_zero([6, 3, -4, 4, 10])",
                "output": "False"
            },
            {
                "input": "below_zero([5, 0, 1, 3, 10, -8, 2, 1])",
                "output": "False"
            },
            {
                "input": "below_zero([5, -5, 4, -3, 3, -2, 1, 0])",
                "output": "False"
            },
            {
                "input": "below_zero([1, 7, -7, 1, 2, 2])",
                "output": "False"
            },
            {
                "input": "below_zero([5, 2, 2, 1, 6, 1])",
                "output": "False"
            },
            {
                "input": "below_zero([1, -1, 2, -2, 5, -5, 4, -5])",
                "output": "True"
            },
            {
                "input": "below_zero([5, -6, 2, -3, 6, -1, 1, -6])",
                "output": "True"
            },
            {
                "input": "below_zero([5, -6, 4, -1, 1, -10, 9, -1])",
                "output": "True"
            },
            {
                "input": "below_zero([4, -6, 6, -2, 5, -6, 3, -3])",
                "output": "True"
            },
            {
                "input": "below_zero([5, 1, -8, 1, 6, -2])",
                "output": "True"
            },
            {
                "input": "below_zero([2, -6, 2, 0, 3, -7, 7, -10])",
                "output": "True"
            },
            {
                "input": "below_zero([2, 4, 5, 3, 6, 0, 8, 0])",
                "output": "False"
            },
            {
                "input": "below_zero([1, 4, -4, 1, 1, -1])",
                "output": "False"
            },
            {
                "input": "below_zero([])",
                "output": "False"
            },
            {
                "input": "below_zero([2, 3, -9, 10, 10])",
                "output": "True"
            },
            {
                "input": "below_zero([4, 4, -8, 1, 6, 0])",
                "output": "False"
            },
            {
                "input": "below_zero([2, 5, -3, 1, 2, -4])",
                "output": "False"
            },
            {
                "input": "below_zero([1, 2, -3, 1, 2, -3])",
                "output": "False"
            },
            {
                "input": "below_zero([1, -1, 2, -2, 5, -5, 4, -4])",
                "output": "False"
            },
            {
                "input": "below_zero([6, 6, -4, 3, 2, -4])",
                "output": "False"
            },
            {
                "input": "below_zero([4, 5, -8, 5, 1, -5])",
                "output": "False"
            },
            {
                "input": "below_zero([3, 4, 0, 4, 11])",
                "output": "False"
            },
            {
                "input": "below_zero([1, -4, 3, 0, 1, -1, 4, -5])",
                "output": "True"
            },
            {
                "input": "below_zero([4, -4, 5, -1, 7, -9, 8, -3])",
                "output": "False"
            },
            {
                "input": "below_zero([2, -6, 3, 0, 3, -8, 7, -9])",
                "output": "True"
            },
            {
                "input": "below_zero([4, 3, 1, 0, 6, -10, 6, 1])",
                "output": "False"
            },
            {
                "input": "below_zero([5, 1, -5, 7, 10])",
                "output": "False"
            },
            {
                "input": "below_zero([5, 7, -1, 7, 11])",
                "output": "False"
            },
            {
                "input": "below_zero([2, 0, 4, -2, 2, -2, 5, -8])",
                "output": "False"
            },
            {
                "input": "below_zero([4, -6, 5, 3, 8, -8, 9, -1])",
                "output": "True"
            },
            {
                "input": "below_zero([4, -1, 7, 1, 9, -5, 8, -1])",
                "output": "False"
            },
            {
                "input": "below_zero([1, -1, 6, -6, 8, -9, 9, 0])",
                "output": "True"
            },
            {
                "input": "below_zero([1, -1, 7, -6, 8, -10, 5, -9])",
                "output": "True"
            },
            {
                "input": "below_zero([2, 7, -2, 3, 1, -1])",
                "output": "False"
            },
            {
                "input": "below_zero([3, 7, -2, 2, 2, 1])",
                "output": "False"
            },
            {
                "input": "below_zero([3, 0, 7, -3, 8, -6, 6, -7])",
                "output": "False"
            },
            {
                "input": "below_zero([3, -3, 7, 1, 8, -1, 9, 0])",
                "output": "False"
            },
            {
                "input": "below_zero([6, 0, 5, 1, 3, -5, 1, -6])",
                "output": "False"
            },
            {
                "input": "below_zero([6, 0, 7, 3, 4, -8, 4, -4])",
                "output": "False"
            },
            {
                "input": "below_zero([1, -2, 2, -2, 5, -5, 4, -4])",
                "output": "True"
            },
            {
                "input": "below_zero([4, 6, -4, 1, 4])",
                "output": "False"
            },
            {
                "input": "below_zero([2, 3, 3, 2, 8, -2, 1, 1])",
                "output": "False"
            },
            {
                "input": "below_zero([2, -6, 5, -3, 1, -1, 5, -8])",
                "output": "True"
            },
            {
                "input": "below_zero([3, 5, -5, 1, 5])",
                "output": "False"
            },
            {
                "input": "below_zero([5, -5, 2, -4, 10, -3, 5, -1])",
                "output": "True"
            },
            {
                "input": "below_zero([4, -5, 5, -6, 8, -6, 5, -6])",
                "output": "True"
            },
            {
                "input": "below_zero([2, 3, -8, 2, 3])",
                "output": "True"
            },
            {
                "input": "below_zero([3, -7, 5, -3, 9, -1, 6, -1])",
                "output": "True"
            },
            {
                "input": "below_zero([5, 2, 5, 1, 2, -7, 9, -4])",
                "output": "False"
            },
            {
                "input": "below_zero([2, -2, 1, -7, 1, -9, 6, 0])",
                "output": "True"
            },
            {
                "input": "below_zero([4, -7, 2, -5, 2, -5, 1, -2])",
                "output": "True"
            },
            {
                "input": "below_zero([6, 6, -3, 8, 6])",
                "output": "False"
            },
            {
                "input": "below_zero([1, -5, 3, -2, 1, -10, 1, -9])",
                "output": "True"
            },
            {
                "input": "below_zero([3, 1, 4, -3, 7, -9, 9, -5])",
                "output": "False"
            },
            {
                "input": "below_zero([6, 1, -1, 10, 2])",
                "output": "False"
            },
            {
                "input": "below_zero([5, 3, 3, 3, 1, -9, 5, -6])",
                "output": "False"
            },
            {
                "input": "below_zero([3, -3, 2, -1, 10, -9, 3, -8])",
                "output": "True"
            },
            {
                "input": "below_zero([1, 1, 6, 1, 7, -7, 1, -9])",
                "output": "False"
            },
            {
                "input": "below_zero([1, 2, -4, 5, 6])",
                "output": "True"
            },
            {
                "input": "below_zero([3, 5, 1, 8, 7])",
                "output": "False"
            },
            {
                "input": "below_zero([2, -6, 5, 2, 7, -8, 1, -9])",
                "output": "True"
            },
            {
                "input": "below_zero([1, -6, 6, -4, 3, -10, 2, -7])",
                "output": "True"
            },
            {
                "input": "below_zero([5, 4, 3, -3, 1, -5, 9, -6])",
                "output": "False"
            }
        ]
    },
    {
        "problem_description": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "ground truth": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
        "instances": []
    },
    {
        "problem_description": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
        "ground truth": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
        "instances": [
            {
                "input": "intersperse([9, 8, 8, 2], 3)",
                "output": "[9, 3, 8, 3, 8, 3, 2]"
            },
            {
                "input": "intersperse([8, 7, 4, 3], 9)",
                "output": "[8, 9, 7, 9, 4, 9, 3]"
            },
            {
                "input": "intersperse([7, 10, 8, 7], 11)",
                "output": "[7, 11, 10, 11, 8, 11, 7]"
            },
            {
                "input": "intersperse([2, 1, 1, 1], 9)",
                "output": "[2, 9, 1, 9, 1, 9, 1]"
            },
            {
                "input": "intersperse([1, 7, 2, 3], 10)",
                "output": "[1, 10, 7, 10, 2, 10, 3]"
            },
            {
                "input": "intersperse([2, 3, 5], 2)",
                "output": "[2, 2, 3, 2, 5]"
            },
            {
                "input": "intersperse([2, 3, 1], 3)",
                "output": "[2, 3, 3, 3, 1]"
            },
            {
                "input": "intersperse([8, 11, 2, 1], 3)",
                "output": "[8, 3, 11, 3, 2, 3, 1]"
            },
            {
                "input": "intersperse([2, 1, 5], 6)",
                "output": "[2, 6, 1, 6, 5]"
            },
            {
                "input": "intersperse([7, 1, 5], 6)",
                "output": "[7, 6, 1, 6, 5]"
            },
            {
                "input": "intersperse([1, 2, 3], 3)",
                "output": "[1, 3, 2, 3, 3]"
            },
            {
                "input": "intersperse([7, 3, 4], 3)",
                "output": "[7, 3, 3, 3, 4]"
            },
            {
                "input": "intersperse([5, 5, 4, 4], 4)",
                "output": "[5, 4, 5, 4, 4, 4, 4]"
            },
            {
                "input": "intersperse([5, 5, 6], 2)",
                "output": "[5, 2, 5, 2, 6]"
            },
            {
                "input": "intersperse([9, 6, 5, 1], 13)",
                "output": "[9, 13, 6, 13, 5, 13, 1]"
            },
            {
                "input": "intersperse([3, 1, 5], 7)",
                "output": "[3, 7, 1, 7, 5]"
            },
            {
                "input": "intersperse([9, 1, 5, 5], 6)",
                "output": "[9, 6, 1, 6, 5, 6, 5]"
            },
            {
                "input": "intersperse([4, 5, 4], 5)",
                "output": "[4, 5, 5, 5, 4]"
            },
            {
                "input": "intersperse([1, 4, 6, 4], 8)",
                "output": "[1, 8, 4, 8, 6, 8, 4]"
            },
            {
                "input": "intersperse([8, 11, 6, 4], 5)",
                "output": "[8, 5, 11, 5, 6, 5, 4]"
            },
            {
                "input": "intersperse([7, 9, 8, 6], 9)",
                "output": "[7, 9, 9, 9, 8, 9, 6]"
            },
            {
                "input": "intersperse([], 2)",
                "output": "[]"
            },
            {
                "input": "intersperse([5, 5, 7], 7)",
                "output": "[5, 7, 5, 7, 7]"
            },
            {
                "input": "intersperse([4, 1, 5], 5)",
                "output": "[4, 5, 1, 5, 5]"
            },
            {
                "input": "intersperse([8, 7, 4, 5], 11)",
                "output": "[8, 11, 7, 11, 4, 11, 5]"
            },
            {
                "input": "intersperse([6, 4, 6, 5], 6)",
                "output": "[6, 6, 4, 6, 6, 6, 5]"
            },
            {
                "input": "intersperse([6, 3, 8, 3], 6)",
                "output": "[6, 6, 3, 6, 8, 6, 3]"
            },
            {
                "input": "intersperse([5, 6, 7], 1)",
                "output": "[5, 1, 6, 1, 7]"
            },
            {
                "input": "intersperse([5, 7, 4, 6], 10)",
                "output": "[5, 10, 7, 10, 4, 10, 6]"
            },
            {
                "input": "intersperse([], 3)",
                "output": "[]"
            },
            {
                "input": "intersperse([1, 7, 7, 2], 12)",
                "output": "[1, 12, 7, 12, 7, 12, 2]"
            },
            {
                "input": "intersperse([], 9)",
                "output": "[]"
            },
            {
                "input": "intersperse([1, 1, 5, 4], 12)",
                "output": "[1, 12, 1, 12, 5, 12, 4]"
            },
            {
                "input": "intersperse([1, 7, 3], 1)",
                "output": "[1, 1, 7, 1, 3]"
            },
            {
                "input": "intersperse([1, 6, 2], 5)",
                "output": "[1, 5, 6, 5, 2]"
            },
            {
                "input": "intersperse([3, 3, 3], 5)",
                "output": "[3, 5, 3, 5, 3]"
            },
            {
                "input": "intersperse([3, 2, 1], 5)",
                "output": "[3, 5, 2, 5, 1]"
            },
            {
                "input": "intersperse([6, 2, 5], 4)",
                "output": "[6, 4, 2, 4, 5]"
            },
            {
                "input": "intersperse([6, 7, 2], 1)",
                "output": "[6, 1, 7, 1, 2]"
            },
            {
                "input": "intersperse([6, 7, 3], 7)",
                "output": "[6, 7, 7, 7, 3]"
            },
            {
                "input": "intersperse([9, 8, 7, 5], 3)",
                "output": "[9, 3, 8, 3, 7, 3, 5]"
            },
            {
                "input": "intersperse([5, 4, 6, 7], 13)",
                "output": "[5, 13, 4, 13, 6, 13, 7]"
            },
            {
                "input": "intersperse([4, 1, 6, 2], 3)",
                "output": "[4, 3, 1, 3, 6, 3, 2]"
            },
            {
                "input": "intersperse([3, 2, 7], 1)",
                "output": "[3, 1, 2, 1, 7]"
            },
            {
                "input": "intersperse([2, 1, 3], 3)",
                "output": "[2, 3, 1, 3, 3]"
            },
            {
                "input": "intersperse([1, 7, 6, 7], 3)",
                "output": "[1, 3, 7, 3, 6, 3, 7]"
            },
            {
                "input": "intersperse([7, 6, 4], 3)",
                "output": "[7, 3, 6, 3, 4]"
            },
            {
                "input": "intersperse([2, 7, 8, 1], 8)",
                "output": "[2, 8, 7, 8, 8, 8, 1]"
            },
            {
                "input": "intersperse([2, 3, 7, 2], 11)",
                "output": "[2, 11, 3, 11, 7, 11, 2]"
            },
            {
                "input": "intersperse([10, 6, 2, 7], 11)",
                "output": "[10, 11, 6, 11, 2, 11, 7]"
            },
            {
                "input": "intersperse([5, 11, 4, 2], 11)",
                "output": "[5, 11, 11, 11, 4, 11, 2]"
            },
            {
                "input": "intersperse([3, 3, 5], 5)",
                "output": "[3, 5, 3, 5, 5]"
            },
            {
                "input": "intersperse([6, 11, 8, 6], 10)",
                "output": "[6, 10, 11, 10, 8, 10, 6]"
            },
            {
                "input": "intersperse([6, 3, 4, 2], 12)",
                "output": "[6, 12, 3, 12, 4, 12, 2]"
            },
            {
                "input": "intersperse([9, 4, 5, 6], 4)",
                "output": "[9, 4, 4, 4, 5, 4, 6]"
            },
            {
                "input": "intersperse([7, 2, 6], 2)",
                "output": "[7, 2, 2, 2, 6]"
            },
            {
                "input": "intersperse([9, 3, 5, 4], 8)",
                "output": "[9, 8, 3, 8, 5, 8, 4]"
            },
            {
                "input": "intersperse([7, 2, 5, 2], 3)",
                "output": "[7, 3, 2, 3, 5, 3, 2]"
            },
            {
                "input": "intersperse([3, 4, 3], 4)",
                "output": "[3, 4, 4, 4, 3]"
            },
            {
                "input": "intersperse([5, 2, 3], 5)",
                "output": "[5, 5, 2, 5, 3]"
            },
            {
                "input": "intersperse([10, 1, 5, 4], 7)",
                "output": "[10, 7, 1, 7, 5, 7, 4]"
            },
            {
                "input": "intersperse([2, 4, 2], 6)",
                "output": "[2, 6, 4, 6, 2]"
            },
            {
                "input": "intersperse([4, 1, 7, 3], 12)",
                "output": "[4, 12, 1, 12, 7, 12, 3]"
            },
            {
                "input": "intersperse([3, 2, 7], 7)",
                "output": "[3, 7, 2, 7, 7]"
            },
            {
                "input": "intersperse([7, 8, 4, 2], 10)",
                "output": "[7, 10, 8, 10, 4, 10, 2]"
            },
            {
                "input": "intersperse([2, 7, 2, 4], 12)",
                "output": "[2, 12, 7, 12, 2, 12, 4]"
            },
            {
                "input": "intersperse([5, 5, 3, 5], 13)",
                "output": "[5, 13, 5, 13, 3, 13, 5]"
            },
            {
                "input": "intersperse([2, 2, 6, 4], 13)",
                "output": "[2, 13, 2, 13, 6, 13, 4]"
            },
            {
                "input": "intersperse([7, 2, 5, 7], 6)",
                "output": "[7, 6, 2, 6, 5, 6, 7]"
            },
            {
                "input": "intersperse([5, 3, 3], 2)",
                "output": "[5, 2, 3, 2, 3]"
            },
            {
                "input": "intersperse([2, 3, 4], 2)",
                "output": "[2, 2, 3, 2, 4]"
            },
            {
                "input": "intersperse([3, 7, 4], 4)",
                "output": "[3, 4, 7, 4, 4]"
            },
            {
                "input": "intersperse([3, 6, 2, 4], 4)",
                "output": "[3, 4, 6, 4, 2, 4, 4]"
            },
            {
                "input": "intersperse([], 11)",
                "output": "[]"
            },
            {
                "input": "intersperse([1, 7, 5], 2)",
                "output": "[1, 2, 7, 2, 5]"
            },
            {
                "input": "intersperse([], 10)",
                "output": "[]"
            },
            {
                "input": "intersperse([6, 2, 7], 4)",
                "output": "[6, 4, 2, 4, 7]"
            },
            {
                "input": "intersperse([2, 1, 1], 3)",
                "output": "[2, 3, 1, 3, 1]"
            },
            {
                "input": "intersperse([5, 1, 6], 7)",
                "output": "[5, 7, 1, 7, 6]"
            },
            {
                "input": "intersperse([5, 6, 7, 6], 3)",
                "output": "[5, 3, 6, 3, 7, 3, 6]"
            },
            {
                "input": "intersperse([6, 9, 7, 3], 10)",
                "output": "[6, 10, 9, 10, 7, 10, 3]"
            },
            {
                "input": "intersperse([5, 6, 3, 2], 8)",
                "output": "[5, 8, 6, 8, 3, 8, 2]"
            },
            {
                "input": "intersperse([7, 5, 7], 5)",
                "output": "[7, 5, 5, 5, 7]"
            },
            {
                "input": "intersperse([7, 4, 6], 7)",
                "output": "[7, 7, 4, 7, 6]"
            },
            {
                "input": "intersperse([6, 5, 6], 3)",
                "output": "[6, 3, 5, 3, 6]"
            },
            {
                "input": "intersperse([9, 1, 7, 7], 5)",
                "output": "[9, 5, 1, 5, 7, 5, 7]"
            },
            {
                "input": "intersperse([6, 1, 3], 4)",
                "output": "[6, 4, 1, 4, 3]"
            },
            {
                "input": "intersperse([4, 5, 1], 1)",
                "output": "[4, 1, 5, 1, 1]"
            },
            {
                "input": "intersperse([], 4)",
                "output": "[]"
            },
            {
                "input": "intersperse([2, 2, 2], 2)",
                "output": "[2, 2, 2, 2, 2]"
            },
            {
                "input": "intersperse([7, 1, 2], 7)",
                "output": "[7, 7, 1, 7, 2]"
            },
            {
                "input": "intersperse([6, 7, 2, 7], 3)",
                "output": "[6, 3, 7, 3, 2, 3, 7]"
            },
            {
                "input": "intersperse([4, 5, 2], 3)",
                "output": "[4, 3, 5, 3, 2]"
            },
            {
                "input": "intersperse([3, 7, 3], 7)",
                "output": "[3, 7, 7, 7, 3]"
            },
            {
                "input": "intersperse([1, 4, 7, 7], 10)",
                "output": "[1, 10, 4, 10, 7, 10, 7]"
            },
            {
                "input": "intersperse([2, 10, 7, 3], 5)",
                "output": "[2, 5, 10, 5, 7, 5, 3]"
            },
            {
                "input": "intersperse([1, 7, 2], 4)",
                "output": "[1, 4, 7, 4, 2]"
            },
            {
                "input": "intersperse([5, 1, 2], 6)",
                "output": "[5, 6, 1, 6, 2]"
            },
            {
                "input": "intersperse([7, 3, 3], 1)",
                "output": "[7, 1, 3, 1, 3]"
            },
            {
                "input": "intersperse([5, 9, 4, 3], 3)",
                "output": "[5, 3, 9, 3, 4, 3, 3]"
            },
            {
                "input": "intersperse([2, 11, 3, 4], 12)",
                "output": "[2, 12, 11, 12, 3, 12, 4]"
            },
            {
                "input": "intersperse([7, 2, 3, 4], 6)",
                "output": "[7, 6, 2, 6, 3, 6, 4]"
            },
            {
                "input": "intersperse([2, 10, 1, 1], 3)",
                "output": "[2, 3, 10, 3, 1, 3, 1]"
            },
            {
                "input": "intersperse([7, 4, 5], 7)",
                "output": "[7, 7, 4, 7, 5]"
            },
            {
                "input": "intersperse([2, 5, 1], 6)",
                "output": "[2, 6, 5, 6, 1]"
            },
            {
                "input": "intersperse([10, 5, 7, 7], 10)",
                "output": "[10, 10, 5, 10, 7, 10, 7]"
            },
            {
                "input": "intersperse([], 7)",
                "output": "[]"
            },
            {
                "input": "intersperse([], 6)",
                "output": "[]"
            },
            {
                "input": "intersperse([1, 3, 5], 5)",
                "output": "[1, 5, 3, 5, 5]"
            },
            {
                "input": "intersperse([7, 2, 4], 1)",
                "output": "[7, 1, 2, 1, 4]"
            }
        ]
    },
    {
        "problem_description": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
        "ground truth": "def parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
        "instances": [
            {
                "input": "parse_nested_parens(\"(((()))) () (((()))) (()()) ((())) () (()()) (((()))) (()()) (((()))) () ()\")",
                "output": "[4, 1, 4, 2, 3, 1, 2, 4, 2, 4, 1, 1]"
            },
            {
                "input": "parse_nested_parens(\"(()()) (((()))) () (()) (()) ((())) (()()) () () ((())()()) (()) ((()))\")",
                "output": "[2, 4, 1, 2, 2, 3, 2, 1, 1, 3, 2, 3]"
            },
            {
                "input": "parse_nested_parens('(()(())((())))')",
                "output": "[4]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) ((())) ((())) () () () () (()()) (()()) (()()) ((())()()) ()\")",
                "output": "[3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 3, 1]"
            },
            {
                "input": "parse_nested_parens(\"(()()) (()()) (()()) () () ((())) ((())()()) ()\")",
                "output": "[2, 2, 2, 1, 1, 3, 3, 1]"
            },
            {
                "input": "parse_nested_parens(\"(()) (()()) ((())()()) (()()) () () ((())) () ((())()()) (((()))) (((()))) ()\")",
                "output": "[2, 2, 3, 2, 1, 1, 3, 1, 3, 4, 4, 1]"
            },
            {
                "input": "parse_nested_parens(\"((())) () (()) (()()) ((())) ((())()())\")",
                "output": "[3, 1, 2, 2, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"(()) (()) (()()) ((())()()) (()) (()()) ((())) (()()) (()(())((()))) (()(())((()))) ((())()()) ((())) (((()))) (()(())((()))) ((())) ((())) (()(())((()))) () ((())) ((())) ((())()())\")",
                "output": "[2, 2, 2, 3, 2, 2, 3, 2, 4, 4, 3, 3, 4, 4, 3, 3, 4, 1, 3, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"(((()))) ((())) (()) ((())) () () () (((()))) (()()) (()()) (((()))) (()) (()) (((())))\")",
                "output": "[4, 3, 2, 3, 1, 1, 1, 4, 2, 2, 4, 2, 2, 4]"
            },
            {
                "input": "parse_nested_parens('(()()) ((())) () ((())()())')",
                "output": "[2, 3, 1, 3]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) ((())()()) ((())()()) ((())) (()()) ((())) ((())()()) ((())()()) ((())()()) () ((())) (()())\")",
                "output": "[3, 3, 3, 3, 2, 3, 3, 3, 3, 1, 3, 2]"
            },
            {
                "input": "parse_nested_parens(\"(()()) (((()))) (()) ((())()()) () () ((())) ((())) (((()))) () (()()) (((())))\")",
                "output": "[2, 4, 2, 3, 1, 1, 3, 3, 4, 1, 2, 4]"
            },
            {
                "input": "parse_nested_parens('() (()) ((())) (((())))')",
                "output": "[1, 2, 3, 4]"
            },
            {
                "input": "parse_nested_parens(\"(()()) (()()) () (()) () (()()) (()) (()) (((()))) () (()()) (())\")",
                "output": "[2, 2, 1, 2, 1, 2, 2, 2, 4, 1, 2, 2]"
            },
            {
                "input": "parse_nested_parens(\"(()) (()()) () (()()) ((())()()) ((())) ((())) (()) ((())()()) () ((())()()) (()()) () (()) ((())) (()()) (()()) ((())()())\")",
                "output": "[2, 2, 1, 2, 3, 3, 3, 2, 3, 1, 3, 2, 1, 2, 3, 2, 2, 3]"
            },
            {
                "input": "parse_nested_parens(\"((())) (()) (((()))) () (()()) (((()))) ((())()()) ((())) (()()) ((())()()) (((()))) ((())) (()) ((())) ((())) () ((())) ((())()())\")",
                "output": "[3, 2, 4, 1, 2, 4, 3, 3, 2, 3, 4, 3, 2, 3, 3, 1, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) (((()))) ((())) ((())) ((())) ((())()()) ((())()()) (()()) () () (()(())((()))) ((())) ((())()()) (()(())((()))) () ((())()()) (((()))) (((()))) (()(())((()))) ((())()()) ()\")",
                "output": "[3, 4, 3, 3, 3, 3, 3, 2, 1, 1, 4, 3, 3, 4, 1, 3, 4, 4, 4, 3, 1]"
            },
            {
                "input": "parse_nested_parens(\"((())) ((())) (()()) (()()) ((())()()) ((())) ((())) ((())()())\")",
                "output": "[3, 3, 2, 2, 3, 3, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"(((()))) () (()) (((()))) ((())) (()) ((())()()) ((())()()) () ((())()()) (()) ((())()())\")",
                "output": "[4, 1, 2, 4, 3, 2, 3, 3, 1, 3, 2, 3]"
            },
            {
                "input": "parse_nested_parens(\"(((()))) ((())) () ((())()()) (()()) (()()) () ((())) ((())) (()()) (((()))) (()())\")",
                "output": "[4, 3, 1, 3, 2, 2, 1, 3, 3, 2, 4, 2]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) (()(())((()))) (()()) (()()) ((())()()) (()()) ((())) () () (()()) (()(())((()))) ((())()()) (()()) ((())()()) (((()))) (()(())((()))) (()()) () ((())()()) ((())()()) ()\")",
                "output": "[3, 4, 2, 2, 3, 2, 3, 1, 1, 2, 4, 3, 2, 3, 4, 4, 2, 1, 3, 3, 1]"
            },
            {
                "input": "parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) () (()) () ((())) (()) (()()) (((()))) ((())) () () (()) () () (()) () ((())) (()(())((()))) ((()))\")",
                "output": "[4, 4, 4, 1, 2, 1, 3, 2, 2, 4, 3, 1, 1, 2, 1, 1, 2, 1, 3, 4, 3]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) ((())) ((())) (()()) ((())()()) () () ()\")",
                "output": "[3, 3, 3, 2, 3, 1, 1, 1]"
            },
            {
                "input": "parse_nested_parens(\"(()) ((())) ((())) ((())()()) () ((()))\")",
                "output": "[2, 3, 3, 3, 1, 3]"
            },
            {
                "input": "parse_nested_parens(\"(()()) () ((())()()) () ((())) () ((())) ()\")",
                "output": "[2, 1, 3, 1, 3, 1, 3, 1]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) () ((())) () (()()) ((())) ((())()()) () () ((())()()) () (()())\")",
                "output": "[3, 1, 3, 1, 2, 3, 3, 1, 1, 3, 1, 2]"
            },
            {
                "input": "parse_nested_parens(\"(()()) ((())()()) (()()) ()\")",
                "output": "[2, 3, 2, 1]"
            },
            {
                "input": "parse_nested_parens(\"((())) (()()) ((())()()) ((())()()) (()()) ((())) () () ((())) () () (()())\")",
                "output": "[3, 2, 3, 3, 2, 3, 1, 1, 3, 1, 1, 2]"
            },
            {
                "input": "parse_nested_parens(\"((())) ((())()()) () ((()))\")",
                "output": "[3, 3, 1, 3]"
            },
            {
                "input": "parse_nested_parens(\"((())) ((())()()) ((())) (()()) ((())()()) () (()()) ((()))\")",
                "output": "[3, 3, 3, 2, 3, 1, 2, 3]"
            },
            {
                "input": "parse_nested_parens(\"((())) ((())) ((())()()) ((())) ((())()()) ((())) () ()\")",
                "output": "[3, 3, 3, 3, 3, 3, 1, 1]"
            },
            {
                "input": "parse_nested_parens(\"(()) (((()))) (()) (()) ((())) () ((())) ((())()()) ((())) (()) (()()) (((())))\")",
                "output": "[2, 4, 2, 2, 3, 1, 3, 3, 3, 2, 2, 4]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) (((()))) ((())()()) ((())) ((())()()) (())\")",
                "output": "[3, 4, 3, 3, 3, 2]"
            },
            {
                "input": "parse_nested_parens(\"((())) () ((())()()) (((()))) (()) (((()))) () ((())) (()()) (()) (((()))) (()())\")",
                "output": "[3, 1, 3, 4, 2, 4, 1, 3, 2, 2, 4, 2]"
            },
            {
                "input": "parse_nested_parens(\"((())) ((())) ((())()()) (()()) () (()(())((()))) (()()) (((()))) (((()))) ((())()()) (()()) () () ((())) (((()))) (()(())((()))) (((()))) ((())()()) ((())) (()(())((()))) (())\")",
                "output": "[3, 3, 3, 2, 1, 4, 2, 4, 4, 3, 2, 1, 1, 3, 4, 4, 4, 3, 3, 4, 2]"
            },
            {
                "input": "parse_nested_parens(\"() ((())) ((())()()) ((())) () (()()) () (()())\")",
                "output": "[1, 3, 3, 3, 1, 2, 1, 2]"
            },
            {
                "input": "parse_nested_parens(\"((())) ((())) (()()) ((())()()) () ((())()()) ((())()()) ((())) (()()) ((())) () ((())()())\")",
                "output": "[3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 1, 3]"
            },
            {
                "input": "parse_nested_parens(\"(()) ((())) (()) (()()) ((())()()) ((())()())\")",
                "output": "[2, 3, 2, 2, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"() ((())) () (()()) (((()))) ((())) (()()) () (()) (((()))) (()(())((()))) (((()))) (((()))) ()\")",
                "output": "[1, 3, 1, 2, 4, 3, 2, 1, 2, 4, 4, 4, 4, 1]"
            },
            {
                "input": "parse_nested_parens(\"(()) (()) (()(())((()))) (()) (((()))) (((()))) ((())()())\")",
                "output": "[2, 2, 4, 2, 4, 4, 3]"
            },
            {
                "input": "parse_nested_parens(\"(((()))) () (()) () (()) (())\")",
                "output": "[4, 1, 2, 1, 2, 2]"
            },
            {
                "input": "parse_nested_parens(\"() ((())()()) () ((())) (()()) () () () () (()()) ((())) ((()))\")",
                "output": "[1, 3, 1, 3, 2, 1, 1, 1, 1, 2, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"(()(())((()))) ((())) (((()))) ((())()()) (()()) (()(())((()))) ((())()()) ((())) ((())) (()()) ((())()()) ((())) (()) (()(())((()))) () () (()(())((()))) (()()) (((()))) (((()))) ()\")",
                "output": "[4, 3, 4, 3, 2, 4, 3, 3, 3, 2, 3, 3, 2, 4, 1, 1, 4, 2, 4, 4, 1]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) () (()()) ((())) (()()) () ((())()()) ((()))\")",
                "output": "[3, 1, 2, 3, 2, 1, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"() ((())()()) (()()) (()) ((())()()) () (((()))) ((())()()) () (()) (()) ((())()()) (()) (()) (()) ((())) ((())) (((())))\")",
                "output": "[1, 3, 2, 2, 3, 1, 4, 3, 1, 2, 2, 3, 2, 2, 2, 3, 3, 4]"
            },
            {
                "input": "parse_nested_parens(\"\")",
                "output": "[]"
            },
            {
                "input": "parse_nested_parens(\"((())) () (()(())((()))) (((()))) ((())) (()) () ((())) ((())) (()()) ((())()()) (()()) () (()) (((()))) (()) ((())) (((()))) ((())) ((())()()) ((())()())\")",
                "output": "[3, 1, 4, 4, 3, 2, 1, 3, 3, 2, 3, 2, 1, 2, 4, 2, 3, 4, 3, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"(()) (()(())((()))) ((())()()) (()()) (((()))) ((())()()) ((())()())\")",
                "output": "[2, 4, 3, 2, 4, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) (()) () (((()))) ((())()()) ((())()()) (((()))) (()) (((()))) () (((()))) ((())()()) (()()) (()) (()) (()) () (())\")",
                "output": "[3, 2, 1, 4, 3, 3, 4, 2, 4, 1, 4, 3, 2, 2, 2, 2, 1, 2]"
            },
            {
                "input": "parse_nested_parens(\"(()()) (()()) () (()()) ((())()()) (()()) () (()()) ((())) () () (()())\")",
                "output": "[2, 2, 1, 2, 3, 2, 1, 2, 3, 1, 1, 2]"
            },
            {
                "input": "parse_nested_parens(\"(((()))) ((())) ((())()()) (()) (()()) ((())) ((())) () () ((())()()) (()()) () (((()))) ((())()()) () (((()))) (((()))) ()\")",
                "output": "[4, 3, 3, 2, 2, 3, 3, 1, 1, 3, 2, 1, 4, 3, 1, 4, 4, 1]"
            },
            {
                "input": "parse_nested_parens(\"(((()))) (()) (()()) (()()) (()()) ((())) (((()))) (()(())((()))) (()) () (((()))) (()) ((())) (())\")",
                "output": "[4, 2, 2, 2, 2, 3, 4, 4, 2, 1, 4, 2, 3, 2]"
            },
            {
                "input": "parse_nested_parens(\"(()()) (()()) () ((()))\")",
                "output": "[2, 2, 1, 3]"
            },
            {
                "input": "parse_nested_parens(\"() (()(())((()))) (()) (()()) ((())()()) (()()) (()())\")",
                "output": "[1, 4, 2, 2, 3, 2, 2]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) () (()()) ((())) ((())()()) ((())()())\")",
                "output": "[3, 1, 2, 3, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) (()(())((()))) (()) (()(())((()))) (((()))) (()(())((()))) (())\")",
                "output": "[3, 4, 2, 4, 4, 4, 2]"
            },
            {
                "input": "parse_nested_parens(\"(()(())((()))) () (()(())((()))) (()) (((()))) ((())()()) ((())()()) ((())) ((())()()) (()(())((()))) ((())) (()(())((()))) ((())) ((())()())\")",
                "output": "[4, 1, 4, 2, 4, 3, 3, 3, 3, 4, 3, 4, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) ((())()()) (((()))) (()(())((()))) ((())()())\")",
                "output": "[4, 4, 4, 3, 4, 4, 3]"
            },
            {
                "input": "parse_nested_parens(\"((())) (()()) () ((())()()) () () ((())) ((())) (()()) () () (()())\")",
                "output": "[3, 2, 1, 3, 1, 1, 3, 3, 2, 1, 1, 2]"
            },
            {
                "input": "parse_nested_parens(\"((())) (()()) ((())()()) ((())) (()()) () ((())()()) (()()) ((())()()) ((())) ((())) (()())\")",
                "output": "[3, 2, 3, 3, 2, 1, 3, 2, 3, 3, 3, 2]"
            },
            {
                "input": "parse_nested_parens(\"(()) ((())()()) ((())()()) () (((()))) ((())()()) ((())()()) (()()) (()()) (()) ((())) (()())\")",
                "output": "[2, 3, 3, 1, 4, 3, 3, 2, 2, 2, 3, 2]"
            },
            {
                "input": "parse_nested_parens(\"(((()))) (((()))) () (()()) ((())()()) () (()(())((()))) (()(())((()))) (()()) () (()()) (()) (()) ((())()())\")",
                "output": "[4, 4, 1, 2, 3, 1, 4, 4, 2, 1, 2, 2, 2, 3]"
            },
            {
                "input": "parse_nested_parens(\"(()) ((())()()) (()()) ((())()()) (((()))) (()()) (()(())((()))) (()()) (()(())((()))) ((())) (()) ((())) (()()) (()) (()()) () ((())) ((())) ((())) ((())) (()())\")",
                "output": "[2, 3, 2, 3, 4, 2, 4, 2, 4, 3, 2, 3, 2, 2, 2, 1, 3, 3, 3, 3, 2]"
            },
            {
                "input": "parse_nested_parens(\"(()) () (((()))) () (((()))) (()()) (()) (((()))) (()(())((()))) (((()))) () (()()) (()(())((()))) (()()) (()(())((()))) (()()) (((()))) (()()) (((()))) (()) (()())\")",
                "output": "[2, 1, 4, 1, 4, 2, 2, 4, 4, 4, 1, 2, 4, 2, 4, 2, 4, 2, 4, 2, 2]"
            },
            {
                "input": "parse_nested_parens(\"(()(())((()))) ((())) ((())) ((())) (()) (()(())((()))) () ((())) (((()))) (()) ((())) ((())) () (()(())((())))\")",
                "output": "[4, 3, 3, 3, 2, 4, 1, 3, 4, 2, 3, 3, 1, 4]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) () ((())()()) ((())()()) ((())) () ((())()()) ((())) () ((())()()) (()()) (()())\")",
                "output": "[3, 1, 3, 3, 3, 1, 3, 3, 1, 3, 2, 2]"
            },
            {
                "input": "parse_nested_parens(\"(()()) (()) ((())) () () () ((()))\")",
                "output": "[2, 2, 3, 1, 1, 1, 3]"
            },
            {
                "input": "parse_nested_parens(\"(()()) () (()()) ((())) () ((())()()) (()()) ((())()())\")",
                "output": "[2, 1, 2, 3, 1, 3, 2, 3]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) (()()) () ((())) (()()) () ((())()()) ((())) ((())) ((())) ((())) ((()))\")",
                "output": "[3, 2, 1, 3, 2, 1, 3, 3, 3, 3, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) (()()) ((())) (((()))) (((()))) (()) ()\")",
                "output": "[3, 2, 3, 4, 4, 2, 1]"
            },
            {
                "input": "parse_nested_parens(\"((())) ((())) ((())()()) () ((())) ((())) (()()) ((())()()) (((()))) () (()) (((())))\")",
                "output": "[3, 3, 3, 1, 3, 3, 2, 3, 4, 1, 2, 4]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) () () (()()) (()()) (()()) ((())) (()())\")",
                "output": "[3, 1, 1, 2, 2, 2, 3, 2]"
            },
            {
                "input": "parse_nested_parens(\"(()) ((())()()) (()) ((())) ((())) ((())()()) (((()))) () ((())()()) (()(())((()))) ((())) ((())()()) ((())()()) (())\")",
                "output": "[2, 3, 2, 3, 3, 3, 4, 1, 3, 4, 3, 3, 3, 2]"
            },
            {
                "input": "parse_nested_parens(\"(()()) (((()))) (((()))) (()) (()()) (((()))) () (((()))) (()) ((())) () ()\")",
                "output": "[2, 4, 4, 2, 2, 4, 1, 4, 2, 3, 1, 1]"
            },
            {
                "input": "parse_nested_parens(\"((())) ((())) (((()))) (()) (()()) (()()) () ((())) ((())()()) () (()(())((()))) (()()) (()(())((()))) ((()))\")",
                "output": "[3, 3, 4, 2, 2, 2, 1, 3, 3, 1, 4, 2, 4, 3]"
            },
            {
                "input": "parse_nested_parens(\"() ((())) ((())()()) () ((())()()) (()()) () () ((())) (()()) ((())) ((())()())\")",
                "output": "[1, 3, 3, 1, 3, 2, 1, 1, 3, 2, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"() (()()) ((())()()) (()(())((()))) (((()))) (()(())((()))) ((())()()) (()) (()()) (((()))) (()) (()) (()()) (((()))) (((()))) () (()) ((())) () (()) (()())\")",
                "output": "[1, 2, 3, 4, 4, 4, 3, 2, 2, 4, 2, 2, 2, 4, 4, 1, 2, 3, 1, 2, 2]"
            },
            {
                "input": "parse_nested_parens(\"((())) () (()()) ()\")",
                "output": "[3, 1, 2, 1]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) (()) (()()) ((())) () ((())) ((())()()) () () (()) (()) (((()))) (((()))) ((())) () () (()()) (())\")",
                "output": "[3, 2, 2, 3, 1, 3, 3, 1, 1, 2, 2, 4, 4, 3, 1, 1, 2, 2]"
            },
            {
                "input": "parse_nested_parens(\"((())) (()()) () ((())()())\")",
                "output": "[3, 2, 1, 3]"
            },
            {
                "input": "parse_nested_parens(\"(()()) () (()()) (()())\")",
                "output": "[2, 1, 2, 2]"
            },
            {
                "input": "parse_nested_parens(\"(()()) ((())()()) ((())) (()())\")",
                "output": "[2, 3, 3, 2]"
            },
            {
                "input": "parse_nested_parens(\"(()()) (()()) () (()())\")",
                "output": "[2, 2, 1, 2]"
            },
            {
                "input": "parse_nested_parens(\"((())) (((()))) ((())) (()()) (()()) ((())()()) (()) (()(())((()))) (()) ((())) (()) ((())) () (((())))\")",
                "output": "[3, 4, 3, 2, 2, 3, 2, 4, 2, 3, 2, 3, 1, 4]"
            },
            {
                "input": "parse_nested_parens(\"(()()) ((())) (()()) () () (()()) () ()\")",
                "output": "[2, 3, 2, 1, 1, 2, 1, 1]"
            },
            {
                "input": "parse_nested_parens(\"(()()) (((()))) (((()))) (()()) (((()))) ((())) ((())()()) (()) ((())()()) (((()))) (()()) () (()) (((()))) () (()(())((()))) () (()) (()(())((()))) ((())) ((())()())\")",
                "output": "[2, 4, 4, 2, 4, 3, 3, 2, 3, 4, 2, 1, 2, 4, 1, 4, 1, 2, 4, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"((())) () (()) ((())()()) (()()) ((())) (()) () () (((()))) (((()))) (())\")",
                "output": "[3, 1, 2, 3, 2, 3, 2, 1, 1, 4, 4, 2]"
            },
            {
                "input": "parse_nested_parens(\"(()()) ((())) ((())) ((())()())\")",
                "output": "[2, 3, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"() ((())) (()()) (((()))) () ((())) (((()))) () (()) () () ((())()()) (()) (()()) ((())) (((()))) (()) (())\")",
                "output": "[1, 3, 2, 4, 1, 3, 4, 1, 2, 1, 1, 3, 2, 2, 3, 4, 2, 2]"
            },
            {
                "input": "parse_nested_parens(\"(((()))) (()) () ((())()()) (()()) () (()()) (()(())((()))) (()(())((()))) ((())) (((()))) (()(())((()))) ((())()()) ()\")",
                "output": "[4, 2, 1, 3, 2, 1, 2, 4, 4, 3, 4, 4, 3, 1]"
            },
            {
                "input": "parse_nested_parens(\"((())) (()) (()()) ((())) (((()))) () ((())()()) ((())) (()()) (()()) (()) ((())()())\")",
                "output": "[3, 2, 2, 3, 4, 1, 3, 3, 2, 2, 2, 3]"
            },
            {
                "input": "parse_nested_parens(\"(()()) (()) (()) (()()) (()()) (((()))) (()) (((()))) (()(())((()))) ((())) ((())) ((())()()) () (((())))\")",
                "output": "[2, 2, 2, 2, 2, 4, 2, 4, 4, 3, 3, 3, 1, 4]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) ((())) ((())()()) (()()) (()) ((())()()) (((()))) (((()))) ((())()()) ((())) ((())()()) () (()()) (()()) ((())()()) (()) ((())) ((())()())\")",
                "output": "[3, 3, 3, 2, 2, 3, 4, 4, 3, 3, 3, 1, 2, 2, 3, 2, 3, 3]"
            },
            {
                "input": "parse_nested_parens(\"((())()()) ((())) ((())()()) () ((())) (()()) ((())()()) (()())\")",
                "output": "[3, 3, 3, 1, 3, 2, 3, 2]"
            },
            {
                "input": "parse_nested_parens(\"((())) () (((()))) (((()))) (()()) (((())))\")",
                "output": "[3, 1, 4, 4, 2, 4]"
            },
            {
                "input": "parse_nested_parens(\"(()(())((()))) ((())()()) (((()))) (()(())((()))) () (()(())((()))) ()\")",
                "output": "[4, 3, 4, 4, 1, 4, 1]"
            },
            {
                "input": "parse_nested_parens(\"((())) (((()))) ((())()()) (()()) () (((())))\")",
                "output": "[3, 4, 3, 2, 1, 4]"
            },
            {
                "input": "parse_nested_parens(\"((())) () ((())()()) ((())()()) (((()))) ((())()()) (((())))\")",
                "output": "[3, 1, 3, 3, 4, 3, 4]"
            },
            {
                "input": "parse_nested_parens(\"(()()) (()) ((())()()) ((())()()) () ((()))\")",
                "output": "[2, 2, 3, 3, 1, 3]"
            }
        ]
    },
    {
        "problem_description": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
        "ground truth": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n",
        "instances": [
            {
                "input": "filter_by_substring(['jmftlg', 'svpf', 'ahstcm', 'ulxugoklqs'], 's')",
                "output": "['svpf', 'ahstcm', 'ulxugoklqs']"
            },
            {
                "input": "filter_by_substring(['gfikjrgy', 'onqcptegu', 'eyzyby', 'wbixoc ym', 'FHqsfXhbS', 'ark'], 'yz')",
                "output": "['eyzyby']"
            },
            {
                "input": "filter_by_substring([], 'john')",
                "output": "[]"
            },
            {
                "input": "filter_by_substring(['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg'], '')",
                "output": "['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg']"
            },
            {
                "input": "filter_by_substring(['tbbahnqmx', 'yaw', 'upedb', 'bwz', 'xptoH', 'wxhm'], 'pe')",
                "output": "['upedb']"
            },
            {
                "input": "filter_by_substring(['vlzqs', 'vaa', 'jyokyuek', 'blq'], 'va')",
                "output": "['vaa']"
            },
            {
                "input": "filter_by_substring(['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj'], '')",
                "output": "['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj']"
            },
            {
                "input": "filter_by_substring(['usmxmm', 'lewsordxonk', 'ozdow', 'fgacbnf'], 'u')",
                "output": "['usmxmm']"
            },
            {
                "input": "filter_by_substring(['oqoinujt', 'rkikbewjm', 'zpgfpdmyn', 'dmwxjss', 'qcgDNg', 'rmpqswrd'], 'ki')",
                "output": "['rkikbewjm']"
            },
            {
                "input": "filter_by_substring(['dhpuhk', 'cmayyfjgv', 'grutd', ' tu hovh', 'QGCCvFPAXHHQ', 'mbxovs'], 'm')",
                "output": "['cmayyfjgv', 'mbxovs']"
            },
            {
                "input": "filter_by_substring(['dgscqyaz', 'dykyill', 'lvher', 'ibqz', 'SmsHmLTEgw', 'keisthr'], 'e')",
                "output": "['lvher', 'keisthr']"
            },
            {
                "input": "filter_by_substring(['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp'], '')",
                "output": "['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp']"
            },
            {
                "input": "filter_by_substring(['oni', 'zleaohlkif', 'grzeqgllx', 'xsavijydab'], 'sa')",
                "output": "['xsavijydab']"
            },
            {
                "input": "filter_by_substring(['jfgi', 'exrlzppdsje', 'tdpgsobl', 'yjok'], 't')",
                "output": "['tdpgsobl']"
            },
            {
                "input": "filter_by_substring(['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv'], '')",
                "output": "['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv']"
            },
            {
                "input": "filter_by_substring(['wfvacvya', 'rrz', 'vgsagcsb', 'mvn', 'aDs', 'mphoywuq'], 'fv')",
                "output": "['wfvacvya']"
            },
            {
                "input": "filter_by_substring(['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq'], '')",
                "output": "['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq']"
            },
            {
                "input": "filter_by_substring([], 'u')",
                "output": "[]"
            },
            {
                "input": "filter_by_substring([], 'agw')",
                "output": "[]"
            },
            {
                "input": "filter_by_substring(['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf'], '')",
                "output": "['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf']"
            },
            {
                "input": "filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')",
                "output": "['grunt', 'prune']"
            },
            {
                "input": "filter_by_substring(['yrbqlzt', 'yoljy', 'hgnst', 'egwkaepxkr', 'pHPzwAlLi', 'jnzsvjnqd'], 'j')",
                "output": "['yoljy', 'jnzsvjnqd']"
            },
            {
                "input": "filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')",
                "output": "['xxx', 'xxxAAA', 'xxx']"
            },
            {
                "input": "filter_by_substring(['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig'], '')",
                "output": "['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig']"
            },
            {
                "input": "filter_by_substring(['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym'], '')",
                "output": "['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym']"
            },
            {
                "input": "filter_by_substring(['kdtqsykk', 'bgykpzt', 'tkht', 'bgr'], 't')",
                "output": "['kdtqsykk', 'bgykpzt', 'tkht']"
            },
            {
                "input": "filter_by_substring(['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw'], '')",
                "output": "['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw']"
            },
            {
                "input": "filter_by_substring(['jwzdw', 'cft', 'tvleiwn', 'wnbp', 'yQfFUrje', 'uhg'], 'bp')",
                "output": "['wnbp']"
            },
            {
                "input": "filter_by_substring(['tjbhxevmk', 'lutcztrn', 'vzwocf', 'lxmhqfqzcidl'], 'zw')",
                "output": "['vzwocf']"
            },
            {
                "input": "filter_by_substring(['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz'], '')",
                "output": "['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz']"
            },
            {
                "input": "filter_by_substring(['btfesq', 'rkagnsvsnzrs', 'eubbokyrm', 'gaxepuosip'], 'ga')",
                "output": "['gaxepuosip']"
            },
            {
                "input": "filter_by_substring(['augunz', 'fsyn', 'rzbjmi', 'nesckl', 'oCjPtbazAEsA', 'eyxtyx'], 'b')",
                "output": "['rzbjmi', 'oCjPtbazAEsA']"
            },
            {
                "input": "filter_by_substring(['dkgduwon', 'gxku', 'dou', 'yuidgjkbxe'], 'id')",
                "output": "['yuidgjkbxe']"
            },
            {
                "input": "filter_by_substring(['dmnu', 'snp', 'khydvutwhm', 'cgv', 'LClfX', 'wihfwkg'], 'ih')",
                "output": "['wihfwkg']"
            },
            {
                "input": "filter_by_substring(['onw', 'vxqogmm', 'igoksz', 'sug xjoxjadz', 'PDxYMxKzL', 'caez'], 'P')",
                "output": "['PDxYMxKzL']"
            },
            {
                "input": "filter_by_substring(['eqthk', 'hnfe', 'ywjz', 'pntutudpdu', 'yJmt', 'eufmcif'], 'nf')",
                "output": "['hnfe']"
            },
            {
                "input": "filter_by_substring(['scuasnve', 'yydy', 'fbjkc', 'syqw', 'zvO', 'pdlry'], 'y')",
                "output": "['yydy', 'syqw', 'pdlry']"
            },
            {
                "input": "filter_by_substring(['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag'], '')",
                "output": "['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag']"
            },
            {
                "input": "filter_by_substring(['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq'], '')",
                "output": "['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq']"
            },
            {
                "input": "filter_by_substring(['tcvb', 'idguap', 'ukgtnfzqj', 'vfwmburpzqgg', 'jDFfcfd', 'cfbauoso'], 'c')",
                "output": "['tcvb', 'jDFfcfd', 'cfbauoso']"
            },
            {
                "input": "filter_by_substring(['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt'], '')",
                "output": "['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt']"
            },
            {
                "input": "filter_by_substring(['hvoihyj', 'ulmqpwdl', 'crhrgo', 'ukcsrdksd', 'jsNWfXSsxHE', 'mla'], 'a')",
                "output": "['mla']"
            },
            {
                "input": "filter_by_substring(['rdce', 'pepwrjoo', 'ozdnanxsiqj', ' jclyvgb', 'sfsgenBWtFR', 'ozpzyu'], 's')",
                "output": "['ozdnanxsiqj', 'sfsgenBWtFR']"
            },
            {
                "input": "filter_by_substring([], 'y')",
                "output": "[]"
            },
            {
                "input": "filter_by_substring(['rei', 'lfmvyvcl', 'uodn', 'bwbaijeudy'], 'od')",
                "output": "['uodn']"
            },
            {
                "input": "filter_by_substring(['shxzctwmk', 'sdwufvy', 'olicmd', ' qjur', 'zTRvOovqTV', 'ehumiisy'], 'ol')",
                "output": "['olicmd']"
            },
            {
                "input": "filter_by_substring(['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz'], '')",
                "output": "['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz']"
            },
            {
                "input": "filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')",
                "output": "['xxx', 'aaaxxy', 'xxxAAA', 'xxx']"
            },
            {
                "input": "filter_by_substring(['jaqamxam', 'racvaeu', 'gpshdiwef', 'gmcaonpp'], 'ps')",
                "output": "['gpshdiwef']"
            },
            {
                "input": "filter_by_substring(['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp'], '')",
                "output": "['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp']"
            },
            {
                "input": "filter_by_substring(['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh'], '')",
                "output": "['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh']"
            },
            {
                "input": "filter_by_substring(['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn'], '')",
                "output": "['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn']"
            },
            {
                "input": "filter_by_substring(['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr'], '')",
                "output": "['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr']"
            },
            {
                "input": "filter_by_substring(['ffq', 'ymkokonn', 'vtu', 'nzghjgyk'], 'm')",
                "output": "['ymkokonn']"
            },
            {
                "input": "filter_by_substring(['xjp', 'mpsdixcyw', 'mfqlwxatj', 'fiorka', 'kJUIVY', 'dekjfnmm'], 'ek')",
                "output": "['dekjfnmm']"
            },
            {
                "input": "filter_by_substring(['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej'], '')",
                "output": "['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej']"
            },
            {
                "input": "filter_by_substring(['oxmaldkqp', 'oksz', 'mjo', 'hlyomadtjj'], 'ma')",
                "output": "['oxmaldkqp', 'hlyomadtjj']"
            },
            {
                "input": "filter_by_substring(['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje'], '')",
                "output": "['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje']"
            },
            {
                "input": "filter_by_substring(['zupqmk', 'rwsqpdth', 'nlocbgvg', 'icfuzakjtknb', 'hyo', 'bqtjtn'], 'oc')",
                "output": "['nlocbgvg']"
            },
            {
                "input": "filter_by_substring(['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf'], '')",
                "output": "['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf']"
            },
            {
                "input": "filter_by_substring(['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx'], '')",
                "output": "['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx']"
            },
            {
                "input": "filter_by_substring(['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd'], '')",
                "output": "['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd']"
            },
            {
                "input": "filter_by_substring(['vuk', 'miq', 'lpogymr', 'dwxkxx', 'zpZrzWLRQz', 'iygu'], 'yg')",
                "output": "['iygu']"
            },
            {
                "input": "filter_by_substring([], 'hm')",
                "output": "[]"
            },
            {
                "input": "filter_by_substring(['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd'], '')",
                "output": "['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd']"
            },
            {
                "input": "filter_by_substring(['mskf', 'qltsxwf', 'vuxg', 'jty', 'rnyqYyDjQ', 'opmcslazf'], 'pm')",
                "output": "['opmcslazf']"
            },
            {
                "input": "filter_by_substring(['potgjni', 'snwj', 'pzzoklax', 'wnxdznip', 'JTlXExklWu', 'wgb'], 'n')",
                "output": "['potgjni', 'snwj', 'wnxdznip']"
            },
            {
                "input": "filter_by_substring(['smcse', 'gxzwz', 'olbea', 'yukag', 'JaDjvdHbtfLM', 'kncvrbzg'], 'yu')",
                "output": "['yukag']"
            },
            {
                "input": "filter_by_substring(['exkbpmyod', 'wafdw', 'essen', 'gycuxrrp'], 'af')",
                "output": "['wafdw']"
            },
            {
                "input": "filter_by_substring(['ysuub', 'ebnfgbery', 'scgbpwkjl', 'adenslpxeqwf'], 'u')",
                "output": "['ysuub']"
            },
            {
                "input": "filter_by_substring([], 'ii')",
                "output": "[]"
            },
            {
                "input": "filter_by_substring(['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy'], '')",
                "output": "['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy']"
            },
            {
                "input": "filter_by_substring(['sxivcdjg', 'npgx', 'inpeumlqwmth', 'fckeci', 'LsDtYSsBmG', 'qicaol'], 'c')",
                "output": "['sxivcdjg', 'fckeci', 'qicaol']"
            },
            {
                "input": "filter_by_substring(['ugk', 'lxpl', 'dofffwbjmkjs', 'dakolixjey', 'EKbFGGOve', 'jcu'], 'ak')",
                "output": "['dakolixjey']"
            },
            {
                "input": "filter_by_substring(['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg'], '')",
                "output": "['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg']"
            },
            {
                "input": "filter_by_substring(['fimum', 'xmnmw', 'chbdrhlkt', 'difxuhc', 'gTlhU', 'qdikcnl'], 'im')",
                "output": "['fimum']"
            },
            {
                "input": "filter_by_substring(['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo'], '')",
                "output": "['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo']"
            },
            {
                "input": "filter_by_substring(['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq'], '')",
                "output": "['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq']"
            },
            {
                "input": "filter_by_substring(['avdkvxgq', 'tcln', 'vvvmj', 'hgidnvs'], 'v')",
                "output": "['avdkvxgq', 'vvvmj', 'hgidnvs']"
            },
            {
                "input": "filter_by_substring(['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk'], '')",
                "output": "['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk']"
            },
            {
                "input": "filter_by_substring(['usqvhbm', 'igpyd', 'gszactxzm', 'vqiyslsqnfe', 'vOhpjWbUu', 'awuwl'], 'w')",
                "output": "['awuwl']"
            },
            {
                "input": "filter_by_substring([], 'p')",
                "output": "[]"
            },
            {
                "input": "filter_by_substring(['ntbtue', 'xfmvt', 'wtrzaz', 'wuyjr ldgwwm', 'RxIxdKCol', 'hmt'], 'xf')",
                "output": "['xfmvt']"
            },
            {
                "input": "filter_by_substring(['gnu', 'qounpksy', 'atrzxeqfp', 'lurboel', 'RjIGVEs', 'nwiq'], 'qo')",
                "output": "['qounpksy']"
            },
            {
                "input": "filter_by_substring(['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj'], '')",
                "output": "['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj']"
            },
            {
                "input": "filter_by_substring(['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb'], 's')",
                "output": "['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb']"
            },
            {
                "input": "filter_by_substring(['rzlmq', 'nypmkzsg', 'aqngjmg', 'hldubutw', 'ZoTIDt', 'fgohcqf'], 'zl')",
                "output": "['rzlmq']"
            },
            {
                "input": "filter_by_substring(['cst', 'akmh', 'lva', 'fpy fm', 'gfqijgxkhm', 'jkriy'], 'k')",
                "output": "['akmh', 'gfqijgxkhm', 'jkriy']"
            },
            {
                "input": "filter_by_substring(['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh'], '')",
                "output": "['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh']"
            },
            {
                "input": "filter_by_substring(['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq'], '')",
                "output": "['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq']"
            },
            {
                "input": "filter_by_substring(['fjtbhk', 'zagej', 'ecstspbf', 'dpftwhjpsdon', 'RcVDi', 'mmrqfzoed'], 'ag')",
                "output": "['zagej']"
            },
            {
                "input": "filter_by_substring(['sftm', 'dioyco', 'iuuqfi', 'rbqlkpykbbzf', 'bWJjEcloelv', 'bfbjmgjql'], 'W')",
                "output": "['bWJjEcloelv']"
            },
            {
                "input": "filter_by_substring(['kqox', 'knr', 'qlaaxt', 'pst', 'XduWEmb', 'egaqop'], 'ps')",
                "output": "['pst']"
            },
            {
                "input": "filter_by_substring(['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg'], '')",
                "output": "['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg']"
            },
            {
                "input": "filter_by_substring(['ygndao', 'umazijg', 'ujv', 'i kyrfjq', 'nyXNlvWstDr', 'kioxvagx'], 'u')",
                "output": "['umazijg', 'ujv']"
            },
            {
                "input": "filter_by_substring(['qsut', 'igzl', 'zpaen', 'yphoctvqw'], 'yp')",
                "output": "['yphoctvqw']"
            },
            {
                "input": "filter_by_substring(['fot', 'eum', 'pxgsbphx', 'gzaorjz', 'KFVOhWwpoC', 'leht'], 'le')",
                "output": "['leht']"
            },
            {
                "input": "filter_by_substring(['nkvfmcpka', 'iugtl', 'tvjvei', 'vnhwdmwc i', 'ZzXH', 'bbh'], 'n')",
                "output": "['nkvfmcpka', 'vnhwdmwc i']"
            },
            {
                "input": "filter_by_substring(['eilf', 'mpj', 'nhqktxlz', 'tafvngt', 'rgP', 'lqedsgz'], 'h')",
                "output": "['nhqktxlz']"
            },
            {
                "input": "filter_by_substring(['puma', 'ahtk', 'glkv', 'vkdc'], 'um')",
                "output": "['puma']"
            },
            {
                "input": "filter_by_substring(['fekndc', 'bey', 'xhysf', 'pwobsqo l', 'OSx', 'ftpidu'], 'p')",
                "output": "['pwobsqo l', 'ftpidu']"
            },
            {
                "input": "filter_by_substring(['jfrgxtn', 'emgcjlv', 'kzfda', 'wsgvtzsoe', 'ALCGgsNR', 'ryv'], 'e')",
                "output": "['emgcjlv', 'wsgvtzsoe']"
            },
            {
                "input": "filter_by_substring(['qaplgtthu', 'ylkvtgeipq', 'qseb', 'ghigzmkfxss'], 'qa')",
                "output": "['qaplgtthu']"
            },
            {
                "input": "filter_by_substring(['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn'], '')",
                "output": "['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn']"
            },
            {
                "input": "filter_by_substring(['tconue', 'mlney', 'akxtnzl', 'edrad'], 'on')",
                "output": "['tconue']"
            },
            {
                "input": "filter_by_substring(['jqbhage', 'ydq', 'ddcagpb', 'edvnjuevted', 'DZcBCg', 'hyrsi'], 'q')",
                "output": "['jqbhage', 'ydq']"
            }
        ]
    },
    {
        "problem_description": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
        "ground truth": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
        "instances": [
            {
                "input": "sum_product([3, 2, 2])",
                "output": "(7, 12)"
            },
            {
                "input": "sum_product([2, 2, 6])",
                "output": "(10, 24)"
            },
            {
                "input": "sum_product([6, 2, 5])",
                "output": "(13, 60)"
            },
            {
                "input": "sum_product([2, 5, 3])",
                "output": "(10, 30)"
            },
            {
                "input": "sum_product([96, 4])",
                "output": "(100, 384)"
            },
            {
                "input": "sum_product([5, 1, 2])",
                "output": "(8, 10)"
            },
            {
                "input": "sum_product([99, 2])",
                "output": "(101, 198)"
            },
            {
                "input": "sum_product([8, 7, 7])",
                "output": "(22, 392)"
            },
            {
                "input": "sum_product([6, 3, 6])",
                "output": "(15, 108)"
            },
            {
                "input": "sum_product([5, 8, 12])",
                "output": "(25, 480)"
            },
            {
                "input": "sum_product([8, 4, 8])",
                "output": "(20, 256)"
            },
            {
                "input": "sum_product([5, 3, 6])",
                "output": "(14, 90)"
            },
            {
                "input": "sum_product([102, 1])",
                "output": "(103, 102)"
            },
            {
                "input": "sum_product([104, 1])",
                "output": "(105, 104)"
            },
            {
                "input": "sum_product([5])",
                "output": "(5, 5)"
            },
            {
                "input": "sum_product([10])",
                "output": "(10, 10)"
            },
            {
                "input": "sum_product([5, 2, 8])",
                "output": "(15, 80)"
            },
            {
                "input": "sum_product([1, 5, 12])",
                "output": "(18, 60)"
            },
            {
                "input": "sum_product([12])",
                "output": "(12, 12)"
            },
            {
                "input": "sum_product([100, 1])",
                "output": "(101, 100)"
            },
            {
                "input": "sum_product([3, 1, 3])",
                "output": "(7, 9)"
            },
            {
                "input": "sum_product([5, 8, 9])",
                "output": "(22, 360)"
            },
            {
                "input": "sum_product([98, 3])",
                "output": "(101, 294)"
            },
            {
                "input": "sum_product([5, 2, 1])",
                "output": "(8, 10)"
            },
            {
                "input": "sum_product([2, 9, 4])",
                "output": "(15, 72)"
            },
            {
                "input": "sum_product([14])",
                "output": "(14, 14)"
            },
            {
                "input": "sum_product([7, 7, 2])",
                "output": "(16, 98)"
            },
            {
                "input": "sum_product([3, 6, 7])",
                "output": "(16, 126)"
            },
            {
                "input": "sum_product([105, 4])",
                "output": "(109, 420)"
            },
            {
                "input": "sum_product([95, 4])",
                "output": "(99, 380)"
            },
            {
                "input": "sum_product([11])",
                "output": "(11, 11)"
            },
            {
                "input": "sum_product([8, 9, 9])",
                "output": "(26, 648)"
            },
            {
                "input": "sum_product([102, 3])",
                "output": "(105, 306)"
            },
            {
                "input": "sum_product([103, 1])",
                "output": "(104, 103)"
            },
            {
                "input": "sum_product([4, 6, 3])",
                "output": "(13, 72)"
            },
            {
                "input": "sum_product([1, 8, 12])",
                "output": "(21, 96)"
            },
            {
                "input": "sum_product([8])",
                "output": "(8, 8)"
            },
            {
                "input": "sum_product([101, 1])",
                "output": "(102, 101)"
            },
            {
                "input": "sum_product([8, 5, 2])",
                "output": "(15, 80)"
            },
            {
                "input": "sum_product([4, 1, 6])",
                "output": "(11, 24)"
            },
            {
                "input": "sum_product([2, 2, 5])",
                "output": "(9, 20)"
            },
            {
                "input": "sum_product([3, 5, 6])",
                "output": "(14, 90)"
            },
            {
                "input": "sum_product([6, 5, 4])",
                "output": "(15, 120)"
            },
            {
                "input": "sum_product([103, 2])",
                "output": "(105, 206)"
            },
            {
                "input": "sum_product([13])",
                "output": "(13, 13)"
            },
            {
                "input": "sum_product([101, 3])",
                "output": "(104, 303)"
            },
            {
                "input": "sum_product([98, 4])",
                "output": "(102, 392)"
            },
            {
                "input": "sum_product([2, 1, 2])",
                "output": "(5, 4)"
            },
            {
                "input": "sum_product([3, 3, 5])",
                "output": "(11, 45)"
            },
            {
                "input": "sum_product([6, 5, 1])",
                "output": "(12, 30)"
            },
            {
                "input": "sum_product([5, 5, 5])",
                "output": "(15, 125)"
            },
            {
                "input": "sum_product([2, 1, 6])",
                "output": "(9, 12)"
            },
            {
                "input": "sum_product([])",
                "output": "(0, 1)"
            },
            {
                "input": "sum_product([98, 1])",
                "output": "(99, 98)"
            },
            {
                "input": "sum_product([3, 6, 3])",
                "output": "(12, 54)"
            },
            {
                "input": "sum_product([5, 5, 1])",
                "output": "(11, 25)"
            },
            {
                "input": "sum_product([97, 2])",
                "output": "(99, 194)"
            },
            {
                "input": "sum_product([104, 5])",
                "output": "(109, 520)"
            },
            {
                "input": "sum_product([7, 6, 8])",
                "output": "(21, 336)"
            },
            {
                "input": "sum_product([6])",
                "output": "(6, 6)"
            },
            {
                "input": "sum_product([2, 7, 3])",
                "output": "(12, 42)"
            },
            {
                "input": "sum_product([1, 3, 3])",
                "output": "(7, 9)"
            },
            {
                "input": "sum_product([1, 2, 12])",
                "output": "(15, 24)"
            },
            {
                "input": "sum_product([1, 1, 1])",
                "output": "(3, 1)"
            },
            {
                "input": "sum_product([4, 2, 6])",
                "output": "(12, 48)"
            },
            {
                "input": "sum_product([2, 6, 3])",
                "output": "(11, 36)"
            },
            {
                "input": "sum_product([7, 1, 12])",
                "output": "(20, 84)"
            },
            {
                "input": "sum_product([7])",
                "output": "(7, 7)"
            },
            {
                "input": "sum_product([5, 4, 1])",
                "output": "(10, 20)"
            },
            {
                "input": "sum_product([95, 3])",
                "output": "(98, 285)"
            },
            {
                "input": "sum_product([8, 7, 11])",
                "output": "(26, 616)"
            },
            {
                "input": "sum_product([102, 2])",
                "output": "(104, 204)"
            },
            {
                "input": "sum_product([7, 4, 10])",
                "output": "(21, 280)"
            },
            {
                "input": "sum_product([102, 4])",
                "output": "(106, 408)"
            },
            {
                "input": "sum_product([6, 2, 2])",
                "output": "(10, 24)"
            },
            {
                "input": "sum_product([8, 8, 4])",
                "output": "(20, 256)"
            },
            {
                "input": "sum_product([7, 9, 8])",
                "output": "(24, 504)"
            },
            {
                "input": "sum_product([1, 3, 5])",
                "output": "(9, 15)"
            },
            {
                "input": "sum_product([6, 4, 4])",
                "output": "(14, 96)"
            },
            {
                "input": "sum_product([15])",
                "output": "(15, 15)"
            },
            {
                "input": "sum_product([9])",
                "output": "(9, 9)"
            },
            {
                "input": "sum_product([100, 0])",
                "output": "(100, 0)"
            },
            {
                "input": "sum_product([2, 5, 5])",
                "output": "(12, 50)"
            },
            {
                "input": "sum_product([2, 6, 10])",
                "output": "(18, 120)"
            },
            {
                "input": "sum_product([4, 2, 9])",
                "output": "(15, 72)"
            },
            {
                "input": "sum_product([7, 6, 3])",
                "output": "(16, 126)"
            },
            {
                "input": "sum_product([1, 4, 2])",
                "output": "(7, 8)"
            },
            {
                "input": "sum_product([99, 1])",
                "output": "(100, 99)"
            },
            {
                "input": "sum_product([3, 1, 10])",
                "output": "(14, 30)"
            },
            {
                "input": "sum_product([105, 5])",
                "output": "(110, 525)"
            },
            {
                "input": "sum_product([5, 1, 6])",
                "output": "(12, 30)"
            },
            {
                "input": "sum_product([98, 5])",
                "output": "(103, 490)"
            },
            {
                "input": "sum_product([2, 9, 3])",
                "output": "(14, 54)"
            }
        ]
    },
    {
        "problem_description": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
        "ground truth": "def rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
        "instances": [
            {
                "input": "rolling_max([5, 6, 1, 4])",
                "output": "[5, 6, 6, 6]"
            },
            {
                "input": "rolling_max([6, 8, 3, 1])",
                "output": "[6, 8, 8, 8]"
            },
            {
                "input": "rolling_max([9, 7, 1, 5])",
                "output": "[9, 9, 9, 9]"
            },
            {
                "input": "rolling_max([4, 7, 7, 5])",
                "output": "[4, 7, 7, 7]"
            },
            {
                "input": "rolling_max([6, 2, 3, 101, 7])",
                "output": "[6, 6, 6, 101, 101]"
            },
            {
                "input": "rolling_max([7, 3, 6, 96, 1])",
                "output": "[7, 7, 7, 96, 96]"
            },
            {
                "input": "rolling_max([2, 7, 1, 1])",
                "output": "[2, 7, 7, 7]"
            },
            {
                "input": "rolling_max([2, 4, 7, 96, 6])",
                "output": "[2, 4, 7, 96, 96]"
            },
            {
                "input": "rolling_max([8, 5, 3, 95, 2])",
                "output": "[8, 8, 8, 95, 95]"
            },
            {
                "input": "rolling_max([3, 1, 2, 4])",
                "output": "[3, 3, 3, 4]"
            },
            {
                "input": "rolling_max([2, 3, 4, 6])",
                "output": "[2, 3, 4, 6]"
            },
            {
                "input": "rolling_max([3, 7, 7, 2])",
                "output": "[3, 7, 7, 7]"
            },
            {
                "input": "rolling_max([1, 2, 1, 5])",
                "output": "[1, 2, 2, 5]"
            },
            {
                "input": "rolling_max([6, 5, 2, 5])",
                "output": "[6, 6, 6, 6]"
            },
            {
                "input": "rolling_max([4, 3, 2, 1])",
                "output": "[4, 4, 4, 4]"
            },
            {
                "input": "rolling_max([3, 7, 1, 4])",
                "output": "[3, 7, 7, 7]"
            },
            {
                "input": "rolling_max([1, 5, 2, 9])",
                "output": "[1, 5, 5, 9]"
            },
            {
                "input": "rolling_max([7, 4, 2, 1])",
                "output": "[7, 7, 7, 7]"
            },
            {
                "input": "rolling_max([1, 2, 3, 4])",
                "output": "[1, 2, 3, 4]"
            },
            {
                "input": "rolling_max([9, 8, 4, 6])",
                "output": "[9, 9, 9, 9]"
            },
            {
                "input": "rolling_max([6, 1, 4, 3])",
                "output": "[6, 6, 6, 6]"
            },
            {
                "input": "rolling_max([3, 8, 2, 3])",
                "output": "[3, 8, 8, 8]"
            },
            {
                "input": "rolling_max([4, 1, 4, 7])",
                "output": "[4, 4, 4, 7]"
            },
            {
                "input": "rolling_max([3, 2, 7, 97, 6])",
                "output": "[3, 3, 7, 97, 97]"
            },
            {
                "input": "rolling_max([3, 4, 5, 4])",
                "output": "[3, 4, 5, 5]"
            },
            {
                "input": "rolling_max([2, 2, 1, 5])",
                "output": "[2, 2, 2, 5]"
            },
            {
                "input": "rolling_max([4, 4, 7, 5])",
                "output": "[4, 4, 7, 7]"
            },
            {
                "input": "rolling_max([8, 1, 4, 1])",
                "output": "[8, 8, 8, 8]"
            },
            {
                "input": "rolling_max([1, 8, 4, 6])",
                "output": "[1, 8, 8, 8]"
            },
            {
                "input": "rolling_max([3, 6, 3, 9])",
                "output": "[3, 6, 6, 9]"
            },
            {
                "input": "rolling_max([7, 3, 6, 96, 2])",
                "output": "[7, 7, 7, 96, 96]"
            },
            {
                "input": "rolling_max([2, 5, 5, 100, 1])",
                "output": "[2, 5, 5, 100, 100]"
            },
            {
                "input": "rolling_max([2, 1, 6, 8])",
                "output": "[2, 2, 6, 8]"
            },
            {
                "input": "rolling_max([5, 2, 5, 6])",
                "output": "[5, 5, 5, 6]"
            },
            {
                "input": "rolling_max([8, 6, 4, 95, 4])",
                "output": "[8, 8, 8, 95, 95]"
            },
            {
                "input": "rolling_max([9, 3, 7, 6])",
                "output": "[9, 9, 9, 9]"
            },
            {
                "input": "rolling_max([4, 1, 5, 5])",
                "output": "[4, 4, 5, 5]"
            },
            {
                "input": "rolling_max([2, 2, 5, 105, 2])",
                "output": "[2, 2, 5, 105, 105]"
            },
            {
                "input": "rolling_max([7, 7, 7, 100, 4])",
                "output": "[7, 7, 7, 100, 100]"
            },
            {
                "input": "rolling_max([2, 4, 3, 102, 6])",
                "output": "[2, 4, 4, 102, 102]"
            },
            {
                "input": "rolling_max([5, 5, 6, 6])",
                "output": "[5, 5, 6, 6]"
            },
            {
                "input": "rolling_max([6, 6, 4, 2])",
                "output": "[6, 6, 6, 6]"
            },
            {
                "input": "rolling_max([1, 1, 1, 98, 4])",
                "output": "[1, 1, 1, 98, 98]"
            },
            {
                "input": "rolling_max([7, 1, 6, 6])",
                "output": "[7, 7, 7, 7]"
            },
            {
                "input": "rolling_max([7, 5, 8, 103, 6])",
                "output": "[7, 7, 8, 103, 103]"
            },
            {
                "input": "rolling_max([1, 3, 5, 97, 1])",
                "output": "[1, 3, 5, 97, 97]"
            },
            {
                "input": "rolling_max([1, 6, 8, 5])",
                "output": "[1, 6, 8, 8]"
            },
            {
                "input": "rolling_max([7, 4, 3, 3])",
                "output": "[7, 7, 7, 7]"
            },
            {
                "input": "rolling_max([3, 2, 3, 100, 3])",
                "output": "[3, 3, 3, 100, 100]"
            },
            {
                "input": "rolling_max([3, 1, 2, 5])",
                "output": "[3, 3, 3, 5]"
            },
            {
                "input": "rolling_max([2, 1, 2, 3])",
                "output": "[2, 2, 2, 3]"
            },
            {
                "input": "rolling_max([3, 6, 2, 3])",
                "output": "[3, 6, 6, 6]"
            },
            {
                "input": "rolling_max([2, 6, 8, 9])",
                "output": "[2, 6, 8, 9]"
            },
            {
                "input": "rolling_max([3, 5, 8, 102, 8])",
                "output": "[3, 5, 8, 102, 102]"
            },
            {
                "input": "rolling_max([1, 1, 6, 2])",
                "output": "[1, 1, 6, 6]"
            },
            {
                "input": "rolling_max([5, 3, 2, 5])",
                "output": "[5, 5, 5, 5]"
            },
            {
                "input": "rolling_max([3, 1, 5, 1])",
                "output": "[3, 3, 5, 5]"
            },
            {
                "input": "rolling_max([5, 4, 5, 98, 2])",
                "output": "[5, 5, 5, 98, 98]"
            },
            {
                "input": "rolling_max([4, 4, 3, 103, 2])",
                "output": "[4, 4, 4, 103, 103]"
            },
            {
                "input": "rolling_max([5, 1, 4, 2])",
                "output": "[5, 5, 5, 5]"
            },
            {
                "input": "rolling_max([2, 2, 7, 5])",
                "output": "[2, 2, 7, 7]"
            },
            {
                "input": "rolling_max([1, 5, 6, 6])",
                "output": "[1, 5, 6, 6]"
            },
            {
                "input": "rolling_max([9, 4, 6, 6])",
                "output": "[9, 9, 9, 9]"
            },
            {
                "input": "rolling_max([5, 7, 4, 96, 4])",
                "output": "[5, 7, 7, 96, 96]"
            },
            {
                "input": "rolling_max([7, 7, 1, 105, 6])",
                "output": "[7, 7, 7, 105, 105]"
            },
            {
                "input": "rolling_max([1, 4, 6, 7])",
                "output": "[1, 4, 6, 7]"
            },
            {
                "input": "rolling_max([1, 3, 5, 2])",
                "output": "[1, 3, 5, 5]"
            },
            {
                "input": "rolling_max([3, 4, 3, 4])",
                "output": "[3, 4, 4, 4]"
            },
            {
                "input": "rolling_max([4, 5, 7, 3])",
                "output": "[4, 5, 7, 7]"
            },
            {
                "input": "rolling_max([1, 6, 7, 2])",
                "output": "[1, 6, 7, 7]"
            },
            {
                "input": "rolling_max([5, 7, 6, 9])",
                "output": "[5, 7, 7, 9]"
            },
            {
                "input": "rolling_max([9, 7, 3, 5])",
                "output": "[9, 9, 9, 9]"
            },
            {
                "input": "rolling_max([1, 7, 2, 1])",
                "output": "[1, 7, 7, 7]"
            },
            {
                "input": "rolling_max([1, 3, 2, 3])",
                "output": "[1, 3, 3, 3]"
            },
            {
                "input": "rolling_max([3, 7, 2, 100, 4])",
                "output": "[3, 7, 7, 100, 100]"
            },
            {
                "input": "rolling_max([3, 2, 3, 1])",
                "output": "[3, 3, 3, 3]"
            },
            {
                "input": "rolling_max([])",
                "output": "[]"
            },
            {
                "input": "rolling_max([7, 6, 6, 99, 2])",
                "output": "[7, 7, 7, 99, 99]"
            },
            {
                "input": "rolling_max([3, 1, 5, 4])",
                "output": "[3, 3, 5, 5]"
            },
            {
                "input": "rolling_max([1, 4, 2, 99, 4])",
                "output": "[1, 4, 4, 99, 99]"
            },
            {
                "input": "rolling_max([1, 4, 8, 100, 8])",
                "output": "[1, 4, 8, 100, 100]"
            },
            {
                "input": "rolling_max([2, 7, 3, 7])",
                "output": "[2, 7, 7, 7]"
            },
            {
                "input": "rolling_max([6, 4, 8, 6])",
                "output": "[6, 6, 8, 8]"
            },
            {
                "input": "rolling_max([4, 2, 1, 105, 8])",
                "output": "[4, 4, 4, 105, 105]"
            },
            {
                "input": "rolling_max([1, 6, 3, 105, 7])",
                "output": "[1, 6, 6, 105, 105]"
            },
            {
                "input": "rolling_max([6, 7, 3, 3])",
                "output": "[6, 7, 7, 7]"
            },
            {
                "input": "rolling_max([5, 6, 5, 2])",
                "output": "[5, 6, 6, 6]"
            },
            {
                "input": "rolling_max([8, 2, 4, 100, 7])",
                "output": "[8, 8, 8, 100, 100]"
            },
            {
                "input": "rolling_max([6, 3, 7, 99, 5])",
                "output": "[6, 6, 7, 99, 99]"
            },
            {
                "input": "rolling_max([3, 6, 6, 104, 5])",
                "output": "[3, 6, 6, 104, 104]"
            },
            {
                "input": "rolling_max([4, 1, 7, 101, 4])",
                "output": "[4, 4, 7, 101, 101]"
            },
            {
                "input": "rolling_max([7, 4, 2, 103, 2])",
                "output": "[7, 7, 7, 103, 103]"
            },
            {
                "input": "rolling_max([7, 2, 2, 105, 8])",
                "output": "[7, 7, 7, 105, 105]"
            },
            {
                "input": "rolling_max([8, 6, 5, 6])",
                "output": "[8, 8, 8, 8]"
            },
            {
                "input": "rolling_max([5, 5, 2, 7])",
                "output": "[5, 5, 5, 7]"
            },
            {
                "input": "rolling_max([6, 1, 5, 8])",
                "output": "[6, 6, 6, 8]"
            },
            {
                "input": "rolling_max([3, 2, 7, 4])",
                "output": "[3, 3, 7, 7]"
            },
            {
                "input": "rolling_max([6, 5, 4, 2])",
                "output": "[6, 6, 6, 6]"
            },
            {
                "input": "rolling_max([8, 7, 2, 105, 1])",
                "output": "[8, 8, 8, 105, 105]"
            }
        ]
    },
    {
        "problem_description": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
        "ground truth": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n",
        "instances": [
            {
                "input": "greatest_common_divisor(6, 3)",
                "output": "3"
            },
            {
                "input": "greatest_common_divisor(2, 6)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(50, 10)",
                "output": "10"
            },
            {
                "input": "greatest_common_divisor(5, 16)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(10, 17)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(15, 19)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(44, 10)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(49, 14)",
                "output": "7"
            },
            {
                "input": "greatest_common_divisor(4, 7)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(6, 13)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(2, 4)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(147, 61)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(48, 12)",
                "output": "12"
            },
            {
                "input": "greatest_common_divisor(11, 19)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(3, 12)",
                "output": "3"
            },
            {
                "input": "greatest_common_divisor(13, 17)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(11, 10)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(6, 4)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(141, 61)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(46, 10)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(47, 19)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(4, 6)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(11, 17)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(3, 9)",
                "output": "3"
            },
            {
                "input": "greatest_common_divisor(6, 2)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(3, 7)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(14, 20)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(50, 11)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(1, 3)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(44, 16)",
                "output": "4"
            },
            {
                "input": "greatest_common_divisor(46, 12)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(51, 11)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(44, 12)",
                "output": "4"
            },
            {
                "input": "greatest_common_divisor(142, 55)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(142, 57)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(4, 4)",
                "output": "4"
            },
            {
                "input": "greatest_common_divisor(148, 64)",
                "output": "4"
            },
            {
                "input": "greatest_common_divisor(12, 16)",
                "output": "4"
            },
            {
                "input": "greatest_common_divisor(141, 59)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(144, 62)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(145, 55)",
                "output": "5"
            },
            {
                "input": "greatest_common_divisor(49, 13)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(49, 15)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(5, 2)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(53, 16)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(147, 65)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(46, 14)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(12, 20)",
                "output": "4"
            },
            {
                "input": "greatest_common_divisor(44, 9)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(2, 7)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(141, 65)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(8, 6)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(10, 15)",
                "output": "5"
            },
            {
                "input": "greatest_common_divisor(148, 60)",
                "output": "4"
            },
            {
                "input": "greatest_common_divisor(148, 58)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(5, 9)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(8, 9)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(148, 62)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(5, 12)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(13, 15)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(144, 60)",
                "output": "12"
            },
            {
                "input": "greatest_common_divisor(4, 12)",
                "output": "4"
            },
            {
                "input": "greatest_common_divisor(144, 58)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(49, 9)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(6, 17)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(12, 13)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(140, 65)",
                "output": "5"
            },
            {
                "input": "greatest_common_divisor(50, 14)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(149, 64)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(1, 7)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(48, 18)",
                "output": "6"
            },
            {
                "input": "greatest_common_divisor(141, 63)",
                "output": "3"
            },
            {
                "input": "greatest_common_divisor(54, 9)",
                "output": "9"
            },
            {
                "input": "greatest_common_divisor(54, 19)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(143, 62)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(147, 64)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(8, 16)",
                "output": "8"
            },
            {
                "input": "greatest_common_divisor(46, 13)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(143, 59)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(5, 5)",
                "output": "5"
            },
            {
                "input": "greatest_common_divisor(6, 9)",
                "output": "3"
            },
            {
                "input": "greatest_common_divisor(12, 11)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(6, 16)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(8, 18)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(12, 14)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(49, 16)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(44, 15)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(145, 63)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(139, 61)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(2, 9)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(1, 11)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(15, 20)",
                "output": "5"
            },
            {
                "input": "greatest_common_divisor(8, 11)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(139, 65)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(7, 10)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(147, 62)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(53, 14)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(146, 55)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(48, 15)",
                "output": "3"
            },
            {
                "input": "greatest_common_divisor(1, 6)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(144, 59)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(1, 9)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(6, 14)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(14, 13)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(140, 63)",
                "output": "7"
            },
            {
                "input": "greatest_common_divisor(148, 55)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(5, 11)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(6, 6)",
                "output": "6"
            },
            {
                "input": "greatest_common_divisor(46, 18)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(12, 10)",
                "output": "2"
            },
            {
                "input": "greatest_common_divisor(142, 63)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(5, 13)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(15, 16)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(45, 15)",
                "output": "15"
            },
            {
                "input": "greatest_common_divisor(11, 12)",
                "output": "1"
            },
            {
                "input": "greatest_common_divisor(52, 19)",
                "output": "1"
            }
        ]
    },
    {
        "problem_description": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
        "ground truth": "def all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "instances": [
            {
                "input": "all_prefixes(\"dim\")",
                "output": "['d', 'di', 'dim']"
            },
            {
                "input": "all_prefixes(\"jv\")",
                "output": "['j', 'jv']"
            },
            {
                "input": "all_prefixes(\"tht\")",
                "output": "['t', 'th', 'tht']"
            },
            {
                "input": "all_prefixes(\"r\")",
                "output": "['r']"
            },
            {
                "input": "all_prefixes(\"vu\")",
                "output": "['v', 'vu']"
            },
            {
                "input": "all_prefixes(\"KSLBUOMQ\")",
                "output": "['K', 'KS', 'KSL', 'KSLB', 'KSLBU', 'KSLBUO', 'KSLBUOM', 'KSLBUOMQ']"
            },
            {
                "input": "all_prefixes(\"ayu\")",
                "output": "['a', 'ay', 'ayu']"
            },
            {
                "input": "all_prefixes(\"a\")",
                "output": "['a']"
            },
            {
                "input": "all_prefixes(\"z\")",
                "output": "['z']"
            },
            {
                "input": "all_prefixes(\"iwtoy\")",
                "output": "['i', 'iw', 'iwt', 'iwto', 'iwtoy']"
            },
            {
                "input": "all_prefixes(\"aiu\")",
                "output": "['a', 'ai', 'aiu']"
            },
            {
                "input": "all_prefixes(\"f\")",
                "output": "['f']"
            },
            {
                "input": "all_prefixes(\"OCEWQCB\")",
                "output": "['O', 'OC', 'OCE', 'OCEW', 'OCEWQ', 'OCEWQC', 'OCEWQCB']"
            },
            {
                "input": "all_prefixes(\"ebm\")",
                "output": "['e', 'eb', 'ebm']"
            },
            {
                "input": "all_prefixes(\"UTT\")",
                "output": "['U', 'UT', 'UTT']"
            },
            {
                "input": "all_prefixes(\"fz\")",
                "output": "['f', 'fz']"
            },
            {
                "input": "all_prefixes(\"CEHRRF\")",
                "output": "['C', 'CE', 'CEH', 'CEHR', 'CEHRR', 'CEHRRF']"
            },
            {
                "input": "all_prefixes('WWW')",
                "output": "['W', 'WW', 'WWW']"
            },
            {
                "input": "all_prefixes(\"rk\")",
                "output": "['r', 'rk']"
            },
            {
                "input": "all_prefixes(\"QTLN\")",
                "output": "['Q', 'QT', 'QTL', 'QTLN']"
            },
            {
                "input": "all_prefixes(\"XIYOET\")",
                "output": "['X', 'XI', 'XIY', 'XIYO', 'XIYOE', 'XIYOET']"
            },
            {
                "input": "all_prefixes(\"i\")",
                "output": "['i']"
            },
            {
                "input": "all_prefixes(\"IDRTXBQ\")",
                "output": "['I', 'ID', 'IDR', 'IDRT', 'IDRTX', 'IDRTXB', 'IDRTXBQ']"
            },
            {
                "input": "all_prefixes(\"BEIPFLDD\")",
                "output": "['B', 'BE', 'BEI', 'BEIP', 'BEIPF', 'BEIPFL', 'BEIPFLD', 'BEIPFLDD']"
            },
            {
                "input": "all_prefixes(\"tktjg\")",
                "output": "['t', 'tk', 'tkt', 'tktj', 'tktjg']"
            },
            {
                "input": "all_prefixes(\"JFLH\")",
                "output": "['J', 'JF', 'JFL', 'JFLH']"
            },
            {
                "input": "all_prefixes(\"xb\")",
                "output": "['x', 'xb']"
            },
            {
                "input": "all_prefixes(\"rhc\")",
                "output": "['r', 'rh', 'rhc']"
            },
            {
                "input": "all_prefixes(\"REUNT\")",
                "output": "['R', 'RE', 'REU', 'REUN', 'REUNT']"
            },
            {
                "input": "all_prefixes(\"v\")",
                "output": "['v']"
            },
            {
                "input": "all_prefixes(\"kyt\")",
                "output": "['k', 'ky', 'kyt']"
            },
            {
                "input": "all_prefixes(\"iy\")",
                "output": "['i', 'iy']"
            },
            {
                "input": "all_prefixes(\"PPSY\")",
                "output": "['P', 'PP', 'PPS', 'PPSY']"
            },
            {
                "input": "all_prefixes(\"SHMDGI\")",
                "output": "['S', 'SH', 'SHM', 'SHMD', 'SHMDG', 'SHMDGI']"
            },
            {
                "input": "all_prefixes('')",
                "output": "[]"
            },
            {
                "input": "all_prefixes(\"QGZFIN\")",
                "output": "['Q', 'QG', 'QGZ', 'QGZF', 'QGZFI', 'QGZFIN']"
            },
            {
                "input": "all_prefixes(\"fb\")",
                "output": "['f', 'fb']"
            },
            {
                "input": "all_prefixes(\"OTQXZF\")",
                "output": "['O', 'OT', 'OTQ', 'OTQX', 'OTQXZ', 'OTQXZF']"
            },
            {
                "input": "all_prefixes(\"puf\")",
                "output": "['p', 'pu', 'puf']"
            },
            {
                "input": "all_prefixes(\"MPOFCXOL\")",
                "output": "['M', 'MP', 'MPO', 'MPOF', 'MPOFC', 'MPOFCX', 'MPOFCXO', 'MPOFCXOL']"
            },
            {
                "input": "all_prefixes(\"mp\")",
                "output": "['m', 'mp']"
            },
            {
                "input": "all_prefixes(\"RJXCAY\")",
                "output": "['R', 'RJ', 'RJX', 'RJXC', 'RJXCA', 'RJXCAY']"
            },
            {
                "input": "all_prefixes(\"ojigt\")",
                "output": "['o', 'oj', 'oji', 'ojig', 'ojigt']"
            },
            {
                "input": "all_prefixes(\"JZMMI\")",
                "output": "['J', 'JZ', 'JZM', 'JZMM', 'JZMMI']"
            },
            {
                "input": "all_prefixes(\"s\")",
                "output": "['s']"
            },
            {
                "input": "all_prefixes(\"n\")",
                "output": "['n']"
            },
            {
                "input": "all_prefixes(\"bwufz\")",
                "output": "['b', 'bw', 'bwu', 'bwuf', 'bwufz']"
            },
            {
                "input": "all_prefixes(\"EPBMY\")",
                "output": "['E', 'EP', 'EPB', 'EPBM', 'EPBMY']"
            },
            {
                "input": "all_prefixes(\"dmhwsbf\")",
                "output": "['d', 'dm', 'dmh', 'dmhw', 'dmhws', 'dmhwsb', 'dmhwsbf']"
            },
            {
                "input": "all_prefixes(\"xwxghx\")",
                "output": "['x', 'xw', 'xwx', 'xwxg', 'xwxgh', 'xwxghx']"
            },
            {
                "input": "all_prefixes(\"HTV\")",
                "output": "['H', 'HT', 'HTV']"
            },
            {
                "input": "all_prefixes(\"yrx\")",
                "output": "['y', 'yr', 'yrx']"
            },
            {
                "input": "all_prefixes(\"fkkzva\")",
                "output": "['f', 'fk', 'fkk', 'fkkz', 'fkkzv', 'fkkzva']"
            },
            {
                "input": "all_prefixes(\"qta\")",
                "output": "['q', 'qt', 'qta']"
            },
            {
                "input": "all_prefixes(\"sm\")",
                "output": "['s', 'sm']"
            },
            {
                "input": "all_prefixes(\"yqhwkt\")",
                "output": "['y', 'yq', 'yqh', 'yqhw', 'yqhwk', 'yqhwkt']"
            },
            {
                "input": "all_prefixes(\"tp\")",
                "output": "['t', 'tp']"
            },
            {
                "input": "all_prefixes(\"xqqbtqs\")",
                "output": "['x', 'xq', 'xqq', 'xqqb', 'xqqbt', 'xqqbtq', 'xqqbtqs']"
            },
            {
                "input": "all_prefixes(\"sg\")",
                "output": "['s', 'sg']"
            },
            {
                "input": "all_prefixes(\"PFTHZB\")",
                "output": "['P', 'PF', 'PFT', 'PFTH', 'PFTHZ', 'PFTHZB']"
            },
            {
                "input": "all_prefixes(\"ZXWA\")",
                "output": "['Z', 'ZX', 'ZXW', 'ZXWA']"
            },
            {
                "input": "all_prefixes(\"DMNCTHY\")",
                "output": "['D', 'DM', 'DMN', 'DMNC', 'DMNCT', 'DMNCTH', 'DMNCTHY']"
            },
            {
                "input": "all_prefixes(\"kxem\")",
                "output": "['k', 'kx', 'kxe', 'kxem']"
            },
            {
                "input": "all_prefixes(\"lpkhdk\")",
                "output": "['l', 'lp', 'lpk', 'lpkh', 'lpkhd', 'lpkhdk']"
            },
            {
                "input": "all_prefixes(\"pjxmq\")",
                "output": "['p', 'pj', 'pjx', 'pjxm', 'pjxmq']"
            },
            {
                "input": "all_prefixes(\"EFDX\")",
                "output": "['E', 'EF', 'EFD', 'EFDX']"
            },
            {
                "input": "all_prefixes(\"cpz\")",
                "output": "['c', 'cp', 'cpz']"
            },
            {
                "input": "all_prefixes(\"u\")",
                "output": "['u']"
            },
            {
                "input": "all_prefixes('asdfgh')",
                "output": "['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']"
            },
            {
                "input": "all_prefixes(\"KCDHZFX\")",
                "output": "['K', 'KC', 'KCD', 'KCDH', 'KCDHZ', 'KCDHZF', 'KCDHZFX']"
            },
            {
                "input": "all_prefixes(\"jjr\")",
                "output": "['j', 'jj', 'jjr']"
            },
            {
                "input": "all_prefixes(\"b\")",
                "output": "['b']"
            },
            {
                "input": "all_prefixes(\"dgx\")",
                "output": "['d', 'dg', 'dgx']"
            },
            {
                "input": "all_prefixes(\"m\")",
                "output": "['m']"
            },
            {
                "input": "all_prefixes(\"KOIA\")",
                "output": "['K', 'KO', 'KOI', 'KOIA']"
            },
            {
                "input": "all_prefixes(\"gaepxli\")",
                "output": "['g', 'ga', 'gae', 'gaep', 'gaepx', 'gaepxl', 'gaepxli']"
            },
            {
                "input": "all_prefixes(\"zk\")",
                "output": "['z', 'zk']"
            },
            {
                "input": "all_prefixes(\"er\")",
                "output": "['e', 'er']"
            },
            {
                "input": "all_prefixes(\"xpvvkp\")",
                "output": "['x', 'xp', 'xpv', 'xpvv', 'xpvvk', 'xpvvkp']"
            },
            {
                "input": "all_prefixes(\"OGGXLN\")",
                "output": "['O', 'OG', 'OGG', 'OGGX', 'OGGXL', 'OGGXLN']"
            },
            {
                "input": "all_prefixes(\"hffq\")",
                "output": "['h', 'hf', 'hff', 'hffq']"
            },
            {
                "input": "all_prefixes(\"dm\")",
                "output": "['d', 'dm']"
            },
            {
                "input": "all_prefixes(\"lfx\")",
                "output": "['l', 'lf', 'lfx']"
            },
            {
                "input": "all_prefixes(\"dsdapg\")",
                "output": "['d', 'ds', 'dsd', 'dsda', 'dsdap', 'dsdapg']"
            },
            {
                "input": "all_prefixes(\"IESMY\")",
                "output": "['I', 'IE', 'IES', 'IESM', 'IESMY']"
            },
            {
                "input": "all_prefixes(\"h\")",
                "output": "['h']"
            },
            {
                "input": "all_prefixes(\"nco\")",
                "output": "['n', 'nc', 'nco']"
            },
            {
                "input": "all_prefixes(\"HRKB\")",
                "output": "['H', 'HR', 'HRK', 'HRKB']"
            },
            {
                "input": "all_prefixes(\"FNWOUNG\")",
                "output": "['F', 'FN', 'FNW', 'FNWO', 'FNWOU', 'FNWOUN', 'FNWOUNG']"
            },
            {
                "input": "all_prefixes(\"sjie\")",
                "output": "['s', 'sj', 'sji', 'sjie']"
            },
            {
                "input": "all_prefixes(\"fnvuag\")",
                "output": "['f', 'fn', 'fnv', 'fnvu', 'fnvua', 'fnvuag']"
            },
            {
                "input": "all_prefixes(\"ov\")",
                "output": "['o', 'ov']"
            },
            {
                "input": "all_prefixes(\"OXUAIVN\")",
                "output": "['O', 'OX', 'OXU', 'OXUA', 'OXUAI', 'OXUAIV', 'OXUAIVN']"
            },
            {
                "input": "all_prefixes(\"CDFGF\")",
                "output": "['C', 'CD', 'CDF', 'CDFG', 'CDFGF']"
            },
            {
                "input": "all_prefixes(\"KVKDKNQN\")",
                "output": "['K', 'KV', 'KVK', 'KVKD', 'KVKDK', 'KVKDKN', 'KVKDKNQ', 'KVKDKNQN']"
            },
            {
                "input": "all_prefixes(\"BFMGS\")",
                "output": "['B', 'BF', 'BFM', 'BFMG', 'BFMGS']"
            },
            {
                "input": "all_prefixes(\"iiryo\")",
                "output": "['i', 'ii', 'iir', 'iiry', 'iiryo']"
            },
            {
                "input": "all_prefixes(\"IBJBYYF\")",
                "output": "['I', 'IB', 'IBJ', 'IBJB', 'IBJBY', 'IBJBYY', 'IBJBYYF']"
            },
            {
                "input": "all_prefixes(\"ryxwg\")",
                "output": "['r', 'ry', 'ryx', 'ryxw', 'ryxwg']"
            },
            {
                "input": "all_prefixes(\"ehcx\")",
                "output": "['e', 'eh', 'ehc', 'ehcx']"
            },
            {
                "input": "all_prefixes(\"SCITGFWZ\")",
                "output": "['S', 'SC', 'SCI', 'SCIT', 'SCITG', 'SCITGF', 'SCITGFW', 'SCITGFWZ']"
            },
            {
                "input": "all_prefixes(\"hqj\")",
                "output": "['h', 'hq', 'hqj']"
            },
            {
                "input": "all_prefixes(\"JJGOX\")",
                "output": "['J', 'JJ', 'JJG', 'JJGO', 'JJGOX']"
            }
        ]
    },
    {
        "problem_description": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
        "ground truth": "def is_palindrome(string: str) -> bool:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
        "instances": []
    },
    {
        "problem_description": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
        "ground truth": "def string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
        "instances": [
            {
                "input": "string_xor('3', '6')",
                "output": "'1'"
            },
            {
                "input": "string_xor('8056450', '074')",
                "output": "'111'"
            },
            {
                "input": "string_xor('7', '1')",
                "output": "'1'"
            },
            {
                "input": "string_xor('0596148', '368805')",
                "output": "'111111'"
            },
            {
                "input": "string_xor('9753739', '294')",
                "output": "'111'"
            },
            {
                "input": "string_xor('43059110372', '017')",
                "output": "'111'"
            },
            {
                "input": "string_xor('8', '6')",
                "output": "'1'"
            },
            {
                "input": "string_xor('920098', '233')",
                "output": "'111'"
            },
            {
                "input": "string_xor('90100457', '5308')",
                "output": "'1111'"
            },
            {
                "input": "string_xor('784857', '858')",
                "output": "'111'"
            },
            {
                "input": "string_xor('4', '3')",
                "output": "'1'"
            },
            {
                "input": "string_xor('27159', '558123715')",
                "output": "'11111'"
            },
            {
                "input": "string_xor('564339962', '449')",
                "output": "'111'"
            },
            {
                "input": "string_xor('586252954', '887')",
                "output": "'101'"
            },
            {
                "input": "string_xor('4', '8')",
                "output": "'1'"
            },
            {
                "input": "string_xor('525', '466409050')",
                "output": "'111'"
            },
            {
                "input": "string_xor('7', '6')",
                "output": "'1'"
            },
            {
                "input": "string_xor('57986', '889283')",
                "output": "'11011'"
            },
            {
                "input": "string_xor('0', '0')",
                "output": "'0'"
            },
            {
                "input": "string_xor('8', '8')",
                "output": "'0'"
            },
            {
                "input": "string_xor('969623', '400762')",
                "output": "'111111'"
            },
            {
                "input": "string_xor('446018', '2463876')",
                "output": "'100111'"
            },
            {
                "input": "string_xor('302502', '55997103')",
                "output": "'111111'"
            },
            {
                "input": "string_xor('9970115', '917398033')",
                "output": "'0101111'"
            },
            {
                "input": "string_xor('966', '709')",
                "output": "'111'"
            },
            {
                "input": "string_xor('4773', '6421')",
                "output": "'1111'"
            },
            {
                "input": "string_xor('9', '3')",
                "output": "'1'"
            },
            {
                "input": "string_xor('71241', '7116729')",
                "output": "'00111'"
            },
            {
                "input": "string_xor('4912', '990')",
                "output": "'101'"
            },
            {
                "input": "string_xor('581505516', '940241')",
                "output": "'111111'"
            },
            {
                "input": "string_xor('9', '7')",
                "output": "'1'"
            },
            {
                "input": "string_xor('81305', '9261')",
                "output": "'1111'"
            },
            {
                "input": "string_xor('09325353248', '91364')",
                "output": "'11011'"
            },
            {
                "input": "string_xor('02019515907', '87905461167')",
                "output": "'11111111110'"
            },
            {
                "input": "string_xor('7', '8')",
                "output": "'1'"
            },
            {
                "input": "string_xor('65556467', '402342810')",
                "output": "'11111111'"
            },
            {
                "input": "string_xor('63454936', '348894740')",
                "output": "'11111111'"
            },
            {
                "input": "string_xor('7', '3')",
                "output": "'1'"
            },
            {
                "input": "string_xor('9068664', '79920')",
                "output": "'11111'"
            },
            {
                "input": "string_xor('308666', '1276408')",
                "output": "'111011'"
            },
            {
                "input": "string_xor('77682', '987')",
                "output": "'111'"
            },
            {
                "input": "string_xor('502', '8992')",
                "output": "'111'"
            },
            {
                "input": "string_xor('6', '6')",
                "output": "'0'"
            },
            {
                "input": "string_xor('262', '88203')",
                "output": "'110'"
            },
            {
                "input": "string_xor('828885', '745813')",
                "output": "'111011'"
            },
            {
                "input": "string_xor('8', '5')",
                "output": "'1'"
            },
            {
                "input": "string_xor('2981', '9889755')",
                "output": "'1101'"
            },
            {
                "input": "string_xor('21309979', '2956795')",
                "output": "'0111101'"
            },
            {
                "input": "string_xor('7', '7')",
                "output": "'0'"
            },
            {
                "input": "string_xor('1891385', '765985')",
                "output": "'111111'"
            },
            {
                "input": "string_xor('188', '13905421')",
                "output": "'011'"
            },
            {
                "input": "string_xor('7452630', '007')",
                "output": "'111'"
            },
            {
                "input": "string_xor('4', '6')",
                "output": "'1'"
            },
            {
                "input": "string_xor('6871809', '969729928')",
                "output": "'1111110'"
            },
            {
                "input": "string_xor('45138778', '911')",
                "output": "'110'"
            },
            {
                "input": "string_xor('4231', '393022564')",
                "output": "'1101'"
            },
            {
                "input": "string_xor('163', '213854')",
                "output": "'110'"
            },
            {
                "input": "string_xor('818407301754', '019251')",
                "output": "'101111'"
            },
            {
                "input": "string_xor('4', '5')",
                "output": "'1'"
            },
            {
                "input": "string_xor('5646686', '345080742')",
                "output": "'1111111'"
            },
            {
                "input": "string_xor('6', '3')",
                "output": "'1'"
            },
            {
                "input": "string_xor('9573751', '75368805939')",
                "output": "'1011111'"
            },
            {
                "input": "string_xor('341196', '68732979')",
                "output": "'111111'"
            },
            {
                "input": "string_xor('111000', '101010')",
                "output": "'010010'"
            },
            {
                "input": "string_xor('219748', '214571')",
                "output": "'001111'"
            },
            {
                "input": "string_xor('8', '3')",
                "output": "'1'"
            },
            {
                "input": "string_xor('899', '032215787')",
                "output": "'111'"
            },
            {
                "input": "string_xor('580832803496', '965967940')",
                "output": "'111111111'"
            },
            {
                "input": "string_xor('5', '9')",
                "output": "'1'"
            },
            {
                "input": "string_xor('143632', '98540370')",
                "output": "'111111'"
            },
            {
                "input": "string_xor('0101', '0000')",
                "output": "'0101'"
            },
            {
                "input": "string_xor('55807480', '832')",
                "output": "'111'"
            },
            {
                "input": "string_xor('0', '9')",
                "output": "'1'"
            },
            {
                "input": "string_xor('68692', '9172861308')",
                "output": "'11111'"
            },
            {
                "input": "string_xor('42050340', '79670144')",
                "output": "'11110101'"
            },
            {
                "input": "string_xor('242706', '5764123')",
                "output": "'111111'"
            },
            {
                "input": "string_xor('009', '24212066790')",
                "output": "'111'"
            },
            {
                "input": "string_xor('5', '4')",
                "output": "'1'"
            },
            {
                "input": "string_xor('155', '668')",
                "output": "'111'"
            },
            {
                "input": "string_xor('978782669', '48854526')",
                "output": "'11011110'"
            },
            {
                "input": "string_xor('8949369', '71815551543')",
                "output": "'1111111'"
            },
            {
                "input": "string_xor('3354233639', '09534218574')",
                "output": "'1101111111'"
            },
            {
                "input": "string_xor('9899538', '0376864')",
                "output": "'1111111'"
            },
            {
                "input": "string_xor('3477', '68716')",
                "output": "'1101'"
            },
            {
                "input": "string_xor('061320025', '0614320')",
                "output": "'0001110'"
            },
            {
                "input": "string_xor('8431492', '610532216')",
                "output": "'1111110'"
            },
            {
                "input": "string_xor('30420', '432199542')",
                "output": "'11111'"
            },
            {
                "input": "string_xor('934724', '63870')",
                "output": "'10101'"
            },
            {
                "input": "string_xor('24156285', '30566576223')",
                "output": "'11110111'"
            },
            {
                "input": "string_xor('6', '8')",
                "output": "'1'"
            },
            {
                "input": "string_xor('8376875', '71354')",
                "output": "'11111'"
            },
            {
                "input": "string_xor('2', '1')",
                "output": "'1'"
            },
            {
                "input": "string_xor('5', '5')",
                "output": "'0'"
            },
            {
                "input": "string_xor('065', '74271')",
                "output": "'111'"
            },
            {
                "input": "string_xor('963723613', '61310046')",
                "output": "'11011111'"
            },
            {
                "input": "string_xor('5227581', '061361100')",
                "output": "'1111110'"
            },
            {
                "input": "string_xor('81716', '73979')",
                "output": "'11111'"
            },
            {
                "input": "string_xor('062', '421')",
                "output": "'111'"
            },
            {
                "input": "string_xor('688788780', '095726163')",
                "output": "'111011111'"
            },
            {
                "input": "string_xor('1', '1')",
                "output": "'0'"
            },
            {
                "input": "string_xor('78657', '1224857')",
                "output": "'11111'"
            },
            {
                "input": "string_xor('7936', '5693')",
                "output": "'1111'"
            },
            {
                "input": "string_xor('475556220', '9713')",
                "output": "'1011'"
            },
            {
                "input": "string_xor('7709390', '47300796')",
                "output": "'1011111'"
            },
            {
                "input": "string_xor('80747', '92881900875')",
                "output": "'11111'"
            },
            {
                "input": "string_xor('32623710', '611798')",
                "output": "'111111'"
            },
            {
                "input": "string_xor('821475', '500530947158')",
                "output": "'111111'"
            },
            {
                "input": "string_xor('8', '4')",
                "output": "'1'"
            },
            {
                "input": "string_xor('3', '8')",
                "output": "'1'"
            },
            {
                "input": "string_xor('3', '3')",
                "output": "'0'"
            },
            {
                "input": "string_xor('047134191178', '059757641')",
                "output": "'011111110'"
            },
            {
                "input": "string_xor('087055037', '185352')",
                "output": "'101101'"
            },
            {
                "input": "string_xor('740979023', '722542442')",
                "output": "'011111111'"
            },
            {
                "input": "string_xor('3220495', '674784')",
                "output": "'111111'"
            },
            {
                "input": "string_xor('9', '6')",
                "output": "'1'"
            },
            {
                "input": "string_xor('56057', '4625439')",
                "output": "'10101'"
            },
            {
                "input": "string_xor('8', '7')",
                "output": "'1'"
            }
        ]
    },
    {
        "problem_description": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
        "ground truth": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
        "instances": []
    },
    {
        "problem_description": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
        "ground truth": "def string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n",
        "instances": [
            {
                "input": "string_sequence(49)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49'"
            },
            {
                "input": "string_sequence(20)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'"
            },
            {
                "input": "string_sequence(43)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43'"
            },
            {
                "input": "string_sequence(48)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48'"
            },
            {
                "input": "string_sequence(21)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21'"
            },
            {
                "input": "string_sequence(47)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47'"
            },
            {
                "input": "string_sequence(45)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45'"
            },
            {
                "input": "string_sequence(40)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40'"
            },
            {
                "input": "string_sequence(29)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29'"
            },
            {
                "input": "string_sequence(13)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13'"
            },
            {
                "input": "string_sequence(16)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16'"
            },
            {
                "input": "string_sequence(46)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46'"
            },
            {
                "input": "string_sequence(11)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11'"
            },
            {
                "input": "string_sequence(27)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27'"
            },
            {
                "input": "string_sequence(23)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23'"
            },
            {
                "input": "string_sequence(10)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10'"
            },
            {
                "input": "string_sequence(38)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38'"
            },
            {
                "input": "string_sequence(3)",
                "output": "'0 1 2 3'"
            },
            {
                "input": "string_sequence(36)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36'"
            },
            {
                "input": "string_sequence(42)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42'"
            },
            {
                "input": "string_sequence(2)",
                "output": "'0 1 2'"
            },
            {
                "input": "string_sequence(18)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18'"
            },
            {
                "input": "string_sequence(14)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14'"
            },
            {
                "input": "string_sequence(8)",
                "output": "'0 1 2 3 4 5 6 7 8'"
            },
            {
                "input": "string_sequence(26)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26'"
            },
            {
                "input": "string_sequence(33)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33'"
            },
            {
                "input": "string_sequence(32)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32'"
            },
            {
                "input": "string_sequence(19)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19'"
            },
            {
                "input": "string_sequence(25)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25'"
            },
            {
                "input": "string_sequence(5)",
                "output": "'0 1 2 3 4 5'"
            },
            {
                "input": "string_sequence(31)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31'"
            },
            {
                "input": "string_sequence(50)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50'"
            },
            {
                "input": "string_sequence(6)",
                "output": "'0 1 2 3 4 5 6'"
            },
            {
                "input": "string_sequence(39)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39'"
            },
            {
                "input": "string_sequence(41)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41'"
            },
            {
                "input": "string_sequence(15)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'"
            },
            {
                "input": "string_sequence(24)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24'"
            },
            {
                "input": "string_sequence(12)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12'"
            },
            {
                "input": "string_sequence(37)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37'"
            },
            {
                "input": "string_sequence(28)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28'"
            },
            {
                "input": "string_sequence(35)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35'"
            },
            {
                "input": "string_sequence(34)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34'"
            },
            {
                "input": "string_sequence(30)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30'"
            },
            {
                "input": "string_sequence(44)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44'"
            },
            {
                "input": "string_sequence(22)",
                "output": "'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22'"
            },
            {
                "input": "string_sequence(1)",
                "output": "'0 1'"
            },
            {
                "input": "string_sequence(0)",
                "output": "'0'"
            },
            {
                "input": "string_sequence(4)",
                "output": "'0 1 2 3 4'"
            }
        ]
    },
    {
        "problem_description": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
        "ground truth": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n",
        "instances": [
            {
                "input": "count_distinct_characters(\"iir\")",
                "output": "2"
            },
            {
                "input": "count_distinct_characters(\"smvgbMkhwLhoRln\")",
                "output": "12"
            },
            {
                "input": "count_distinct_characters(\"ldz\")",
                "output": "3"
            },
            {
                "input": "count_distinct_characters(\"FycYSU cvudKrbVisFTIlgl\")",
                "output": "15"
            },
            {
                "input": "count_distinct_characters(\"femphduq\")",
                "output": "8"
            },
            {
                "input": "count_distinct_characters(\"nInnuRSwrqxcojIIwy\")",
                "output": "12"
            },
            {
                "input": "count_distinct_characters(\"iwrnzam\")",
                "output": "7"
            },
            {
                "input": "count_distinct_characters(\"atRLcmATkWMkiuMFjp\")",
                "output": "13"
            },
            {
                "input": "count_distinct_characters(\"JmPaTrSczRkX\")",
                "output": "11"
            },
            {
                "input": "count_distinct_characters(\"FUXHhvGoXRhkAxAZ\")",
                "output": "11"
            },
            {
                "input": "count_distinct_characters(\"esu\")",
                "output": "3"
            },
            {
                "input": "count_distinct_characters(\"HOGRmvTANUhMvONn\")",
                "output": "10"
            },
            {
                "input": "count_distinct_characters(\"otaZOB Pyaztqcfd \")",
                "output": "12"
            },
            {
                "input": "count_distinct_characters(\"hdvzMhkHU ZWPT M\")",
                "output": "11"
            },
            {
                "input": "count_distinct_characters(\"wKJjFHVncyJqtCJzyUD\")",
                "output": "14"
            },
            {
                "input": "count_distinct_characters(\"InXkmhzjgPkxGvmw\")",
                "output": "12"
            },
            {
                "input": "count_distinct_characters(\"UIWbIZNIppW\")",
                "output": "7"
            },
            {
                "input": "count_distinct_characters(\"unkhr\")",
                "output": "5"
            },
            {
                "input": "count_distinct_characters(\"WfnXXAOonzYJHsFb\")",
                "output": "12"
            },
            {
                "input": "count_distinct_characters(\"GKKGkHiMc\")",
                "output": "6"
            },
            {
                "input": "count_distinct_characters(\"l\")",
                "output": "1"
            },
            {
                "input": "count_distinct_characters(\"lvPZKdAVLulCscvG\")",
                "output": "11"
            },
            {
                "input": "count_distinct_characters(\"RvubWTBuPdEIKRDWAH\")",
                "output": "13"
            },
            {
                "input": "count_distinct_characters('abcde' + 'cade' + 'CADE')",
                "output": "5"
            },
            {
                "input": "count_distinct_characters(\"jxc\")",
                "output": "3"
            },
            {
                "input": "count_distinct_characters(\"pVOOHkDZJ\")",
                "output": "8"
            },
            {
                "input": "count_distinct_characters(\"vc\")",
                "output": "2"
            },
            {
                "input": "count_distinct_characters(\"ljRgJlzHTQBAAbgwEl\")",
                "output": "12"
            },
            {
                "input": "count_distinct_characters(\"kxx\")",
                "output": "2"
            },
            {
                "input": "count_distinct_characters(\"upir\")",
                "output": "4"
            },
            {
                "input": "count_distinct_characters(\"txjolkwt\")",
                "output": "7"
            },
            {
                "input": "count_distinct_characters(\"ohtqe\")",
                "output": "5"
            },
            {
                "input": "count_distinct_characters(\"jYnrJXIcXKGEZVo\")",
                "output": "13"
            },
            {
                "input": "count_distinct_characters(\"nHtVTgYRztQ\")",
                "output": "9"
            },
            {
                "input": "count_distinct_characters(\"rrnjzpuu\")",
                "output": "6"
            },
            {
                "input": "count_distinct_characters('aaaaAAAAaaaa')",
                "output": "1"
            },
            {
                "input": "count_distinct_characters(\"dCaNheOPBLJAAlmRiq\")",
                "output": "15"
            },
            {
                "input": "count_distinct_characters(\"LnFlIbomxdvveccGHsakJ\")",
                "output": "18"
            },
            {
                "input": "count_distinct_characters(\"uqfitri\")",
                "output": "6"
            },
            {
                "input": "count_distinct_characters(\"clGPOVWLcboDuAvmks\")",
                "output": "14"
            },
            {
                "input": "count_distinct_characters(\"bQxCKyKcntHHYeEXVj\")",
                "output": "12"
            },
            {
                "input": "count_distinct_characters(\"RblfAbqWjlGb\")",
                "output": "9"
            },
            {
                "input": "count_distinct_characters(\"MtLuTBbVXUGUlJvca\")",
                "output": "11"
            },
            {
                "input": "count_distinct_characters(\"HxlgTM upaEvXetVo\")",
                "output": "13"
            },
            {
                "input": "count_distinct_characters(\"MUOgmWwmwjWfcnVPba\")",
                "output": "13"
            },
            {
                "input": "count_distinct_characters(\"CHorbExVwH\")",
                "output": "9"
            },
            {
                "input": "count_distinct_characters(\"tASyULIbokwr\")",
                "output": "12"
            },
            {
                "input": "count_distinct_characters(\"zntaswi\")",
                "output": "7"
            },
            {
                "input": "count_distinct_characters(\"ka\")",
                "output": "2"
            },
            {
                "input": "count_distinct_characters(\"CkCPdWkXENxGL\")",
                "output": "10"
            },
            {
                "input": "count_distinct_characters(\"nzf\")",
                "output": "3"
            },
            {
                "input": "count_distinct_characters(\"yl\")",
                "output": "2"
            },
            {
                "input": "count_distinct_characters(\"s iRxpKsyfxPoWQMD\")",
                "output": "14"
            },
            {
                "input": "count_distinct_characters(\"YOYqwkoPDfAxdiSTgveN\")",
                "output": "17"
            },
            {
                "input": "count_distinct_characters(\"j\")",
                "output": "1"
            },
            {
                "input": "count_distinct_characters(\"n\")",
                "output": "1"
            },
            {
                "input": "count_distinct_characters(\"EYJKqrJyAm\")",
                "output": "8"
            },
            {
                "input": "count_distinct_characters(\"ufqgMhqrauVyUULZkrjh\")",
                "output": "14"
            },
            {
                "input": "count_distinct_characters(\"lio\")",
                "output": "3"
            },
            {
                "input": "count_distinct_characters(\"aGkvHvzRTyirmeGZC\")",
                "output": "13"
            },
            {
                "input": "count_distinct_characters(\"urra\")",
                "output": "3"
            },
            {
                "input": "count_distinct_characters(\"wqu\")",
                "output": "3"
            },
            {
                "input": "count_distinct_characters(\"nvxkl\")",
                "output": "5"
            },
            {
                "input": "count_distinct_characters(\"nsv\")",
                "output": "3"
            },
            {
                "input": "count_distinct_characters(\"dxofvtop\")",
                "output": "7"
            },
            {
                "input": "count_distinct_characters(\"uYQSGSfGa\")",
                "output": "7"
            },
            {
                "input": "count_distinct_characters(\"mNuEPdroYuxj\")",
                "output": "11"
            },
            {
                "input": "count_distinct_characters(\"EUMYPPMNBmwMUMf\")",
                "output": "9"
            },
            {
                "input": "count_distinct_characters(\"gvRubuESIkrZ\")",
                "output": "10"
            },
            {
                "input": "count_distinct_characters(\"jIqutIUuTqJkqvufly\")",
                "output": "10"
            },
            {
                "input": "count_distinct_characters(\"hjfLMEhQbeOopYBuToCxkJ\")",
                "output": "16"
            },
            {
                "input": "count_distinct_characters(\"TjkfWbUyuBlElbU\")",
                "output": "10"
            },
            {
                "input": "count_distinct_characters(\"cGapAoOkAs\")",
                "output": "7"
            },
            {
                "input": "count_distinct_characters(\"qslq\")",
                "output": "3"
            },
            {
                "input": "count_distinct_characters(\"iZiIACOjGbab\")",
                "output": "8"
            },
            {
                "input": "count_distinct_characters(\"cCaIjZBhhYWNDOiV\")",
                "output": "13"
            },
            {
                "input": "count_distinct_characters(\"kee\")",
                "output": "2"
            },
            {
                "input": "count_distinct_characters(\"TLQvGLpcjPHrCKFl\")",
                "output": "12"
            },
            {
                "input": "count_distinct_characters(\"EMtSdVgYJlMwbj\")",
                "output": "12"
            },
            {
                "input": "count_distinct_characters(\"tZuBlwhSlQLVugh\")",
                "output": "11"
            },
            {
                "input": "count_distinct_characters(\"QbfkjShfzGeBKdoRMxcF\")",
                "output": "16"
            },
            {
                "input": "count_distinct_characters(\"xyxm\")",
                "output": "3"
            },
            {
                "input": "count_distinct_characters(\"ooj\")",
                "output": "2"
            },
            {
                "input": "count_distinct_characters(\"t\")",
                "output": "1"
            },
            {
                "input": "count_distinct_characters(\"czcmhqowv\")",
                "output": "8"
            },
            {
                "input": "count_distinct_characters(\"dvUoRAqoszDQJ\")",
                "output": "10"
            },
            {
                "input": "count_distinct_characters(\"uwDWXwsJclzqiVYrtu\")",
                "output": "15"
            },
            {
                "input": "count_distinct_characters(\"iTTDUEsZTXGRPVROVLAXHZF\")",
                "output": "17"
            },
            {
                "input": "count_distinct_characters(\"wdjtlARsrwKK\")",
                "output": "9"
            },
            {
                "input": "count_distinct_characters(\"jzatha\")",
                "output": "5"
            },
            {
                "input": "count_distinct_characters(\"FdvjkekrDvMxdP\")",
                "output": "10"
            },
            {
                "input": "count_distinct_characters(\"agfbll\")",
                "output": "5"
            },
            {
                "input": "count_distinct_characters(\"q\")",
                "output": "1"
            },
            {
                "input": "count_distinct_characters(\"ADUyBFimKBrPz\")",
                "output": "12"
            },
            {
                "input": "count_distinct_characters(\"ozt\")",
                "output": "3"
            },
            {
                "input": "count_distinct_characters(\"otifwyf\")",
                "output": "6"
            },
            {
                "input": "count_distinct_characters(\"hxpxzqo\")",
                "output": "6"
            },
            {
                "input": "count_distinct_characters(\"ffGJKHLgYtdrUNG\")",
                "output": "12"
            },
            {
                "input": "count_distinct_characters(\"HYSpuFbvSsu\")",
                "output": "8"
            },
            {
                "input": "count_distinct_characters(\"VFKpqZXDMClGMFlrUL\")",
                "output": "14"
            },
            {
                "input": "count_distinct_characters(\"lcBMHAxSzIayT\")",
                "output": "12"
            },
            {
                "input": "count_distinct_characters(\"zn\")",
                "output": "2"
            },
            {
                "input": "count_distinct_characters(\"kz\")",
                "output": "2"
            },
            {
                "input": "count_distinct_characters('abcde')",
                "output": "5"
            },
            {
                "input": "count_distinct_characters(\"r\")",
                "output": "1"
            },
            {
                "input": "count_distinct_characters(\"QZnK QcEIfLoqkAuviX\")",
                "output": "15"
            },
            {
                "input": "count_distinct_characters(\"b\")",
                "output": "1"
            },
            {
                "input": "count_distinct_characters(\"OZcKqLtxovbrdMH\")",
                "output": "14"
            },
            {
                "input": "count_distinct_characters(\"dKmNZkVVglVIkueSlUQW\")",
                "output": "14"
            },
            {
                "input": "count_distinct_characters(\"DZDQAWXHSw\")",
                "output": "8"
            },
            {
                "input": "count_distinct_characters(\"jwFRUyssbSoqWiO\")",
                "output": "11"
            },
            {
                "input": "count_distinct_characters(\"k\")",
                "output": "1"
            },
            {
                "input": "count_distinct_characters(\"hqzz\")",
                "output": "3"
            },
            {
                "input": "count_distinct_characters(\"DOMJVxYZSmRvpWdYKm\")",
                "output": "13"
            },
            {
                "input": "count_distinct_characters(\"pJdVyTwDKELVgUZIx\")",
                "output": "15"
            },
            {
                "input": "count_distinct_characters(\"wJUxzBTdbiANdnKbjnrMEqu\")",
                "output": "16"
            },
            {
                "input": "count_distinct_characters(\"LumPVjeiLbebI\")",
                "output": "9"
            },
            {
                "input": "count_distinct_characters('Jerry jERRY JeRRRY')",
                "output": "5"
            },
            {
                "input": "count_distinct_characters(\"pqwv\")",
                "output": "4"
            },
            {
                "input": "count_distinct_characters(\"rnnvtkti\")",
                "output": "6"
            },
            {
                "input": "count_distinct_characters(\"XJGLcPMiAJHh\")",
                "output": "10"
            },
            {
                "input": "count_distinct_characters(\"GbGqxgAwwHVqX\")",
                "output": "8"
            },
            {
                "input": "count_distinct_characters(\"DqmriBBthVs\")",
                "output": "10"
            },
            {
                "input": "count_distinct_characters('')",
                "output": "0"
            },
            {
                "input": "count_distinct_characters(\"lnr\")",
                "output": "3"
            },
            {
                "input": "count_distinct_characters(\"IKihunRBNqFCI\")",
                "output": "10"
            },
            {
                "input": "count_distinct_characters(\"tCXKMaJRhU\")",
                "output": "10"
            },
            {
                "input": "count_distinct_characters(\"ol\")",
                "output": "2"
            },
            {
                "input": "count_distinct_characters(\"gvXcdjVQzWEZOdtJSCpl\")",
                "output": "15"
            }
        ]
    },
    {
        "problem_description": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
        "ground truth": "def parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
        "instances": [
            {
                "input": "parse_music(\"o o o| .| o| .| .| .| o| o o\")",
                "output": "[4, 4, 2, 1, 2, 1, 1, 1, 2, 4, 4]"
            },
            {
                "input": "parse_music(\"o o .| o| o o o o| .| o o o o| o .|\")",
                "output": "[4, 4, 1, 2, 4, 4, 4, 2, 1, 4, 4, 4, 2, 4, 1]"
            },
            {
                "input": "parse_music(\".| o| .| o .| o .| .| o .| o o o .| o o .| .|\")",
                "output": "[1, 2, 1, 4, 1, 4, 1, 1, 4, 1, 4, 4, 4, 1, 4, 4, 1, 1]"
            },
            {
                "input": "parse_music(\"o .| o|\")",
                "output": "[4, 1, 2]"
            },
            {
                "input": "parse_music(\".| o| o .| .|\")",
                "output": "[1, 2, 4, 1, 1]"
            },
            {
                "input": "parse_music(\".| o| .| o| o .| o| o| .| o| o| o| .| o|\")",
                "output": "[1, 2, 1, 2, 4, 1, 2, 2, 1, 2, 2, 2, 1, 2]"
            },
            {
                "input": "parse_music(\"o o o| o| o| o| o| o| o|\")",
                "output": "[4, 4, 2, 2, 2, 2, 2, 2, 2]"
            },
            {
                "input": "parse_music(\".| .| .| o| .| o| .| o o| o\")",
                "output": "[1, 1, 1, 2, 1, 2, 1, 4, 2, 4]"
            },
            {
                "input": "parse_music(\".| o| o| .| o\")",
                "output": "[1, 2, 2, 1, 4]"
            },
            {
                "input": "parse_music(\"o| o| o .| o| o o o| o o .|\")",
                "output": "[2, 2, 4, 1, 2, 4, 4, 2, 4, 4, 1]"
            },
            {
                "input": "parse_music(\".| o .| o .| o| .| o .| o|\")",
                "output": "[1, 4, 1, 4, 1, 2, 1, 4, 1, 2]"
            },
            {
                "input": "parse_music(\".| o o| o| .| o .| .| o\")",
                "output": "[1, 4, 2, 2, 1, 4, 1, 1, 4]"
            },
            {
                "input": "parse_music(\"o o o .| o| o| o\")",
                "output": "[4, 4, 4, 1, 2, 2, 4]"
            },
            {
                "input": "parse_music(\"o o o .| o|\")",
                "output": "[4, 4, 4, 1, 2]"
            },
            {
                "input": "parse_music(\"o| o| o o| o| o o| o| .| .| o o .| .| o o o .|\")",
                "output": "[2, 2, 4, 2, 2, 4, 2, 2, 1, 1, 4, 4, 1, 1, 4, 4, 4, 1]"
            },
            {
                "input": "parse_music(\"o| .| .| .| .|\")",
                "output": "[2, 1, 1, 1, 1]"
            },
            {
                "input": "parse_music(\".| o| o| o| o o| o| o| o| o o| .| o\")",
                "output": "[1, 2, 2, 2, 4, 2, 2, 2, 2, 4, 2, 1, 4]"
            },
            {
                "input": "parse_music(\"o| o|\")",
                "output": "[2, 2]"
            },
            {
                "input": "parse_music(\"o o| o| .|\")",
                "output": "[4, 2, 2, 1]"
            },
            {
                "input": "parse_music(\".| .| o .| o| o o| o o| o .| .| o o o .| o\")",
                "output": "[1, 1, 4, 1, 2, 4, 2, 4, 2, 4, 1, 1, 4, 4, 4, 1, 4]"
            },
            {
                "input": "parse_music(\"o .| o o| o o o o o| .| o o o| .|\")",
                "output": "[4, 1, 4, 2, 4, 4, 4, 4, 2, 1, 4, 4, 2, 1]"
            },
            {
                "input": "parse_music(\"o| o o| .| .| .| .| o| o| .| o o| o| o| .| .| o|\")",
                "output": "[2, 4, 2, 1, 1, 1, 1, 2, 2, 1, 4, 2, 2, 2, 1, 1, 2]"
            },
            {
                "input": "parse_music(\"o .| o o .| o o| o| o o .|\")",
                "output": "[4, 1, 4, 4, 1, 4, 2, 2, 4, 4, 1]"
            },
            {
                "input": "parse_music('o o o o')",
                "output": "[4, 4, 4, 4]"
            },
            {
                "input": "parse_music(\".| .| o o .| o|\")",
                "output": "[1, 1, 4, 4, 1, 2]"
            },
            {
                "input": "parse_music(\"o| o .| .| o| .| o| o| o\")",
                "output": "[2, 4, 1, 1, 2, 1, 2, 2, 4]"
            },
            {
                "input": "parse_music(\"o o| o o o| .| o| o .|\")",
                "output": "[4, 2, 4, 4, 2, 1, 2, 4, 1]"
            },
            {
                "input": "parse_music(\".| o o| o| o .| .| .| o .| o o| o| .| o| o o| o| .|\")",
                "output": "[1, 4, 2, 2, 4, 1, 1, 1, 4, 1, 4, 2, 2, 1, 2, 4, 2, 2, 1]"
            },
            {
                "input": "parse_music(\".| .| o o| o| .| o .| .| o .| .| .| o|\")",
                "output": "[1, 1, 4, 2, 2, 1, 4, 1, 1, 4, 1, 1, 1, 2]"
            },
            {
                "input": "parse_music(\"o| .| o| .| o o o| .|\")",
                "output": "[2, 1, 2, 1, 4, 4, 2, 1]"
            },
            {
                "input": "parse_music(\"o| o| o| o o o o o| .|\")",
                "output": "[2, 2, 2, 4, 4, 4, 4, 2, 1]"
            },
            {
                "input": "parse_music(\".| .| o o| o o o o o| .| .| o| .| .| o| .| o| .| o|\")",
                "output": "[1, 1, 4, 2, 4, 4, 4, 4, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2]"
            },
            {
                "input": "parse_music(\".| o| o|\")",
                "output": "[1, 2, 2]"
            },
            {
                "input": "parse_music(\".| .| .| o .| .| o| o o .| o| o o .| o| o| .|\")",
                "output": "[1, 1, 1, 4, 1, 1, 2, 4, 4, 1, 2, 4, 4, 1, 2, 2, 1]"
            },
            {
                "input": "parse_music(\".| o| o o o| o o|\")",
                "output": "[1, 2, 4, 4, 2, 4, 2]"
            },
            {
                "input": "parse_music(\".| .| o| .| .| o| o| .| o| o o| .| .| .|\")",
                "output": "[1, 1, 2, 1, 1, 2, 2, 1, 2, 4, 2, 1, 1, 1]"
            },
            {
                "input": "parse_music(\"o| .| o| o| o| o| o| o| o| .| o| o| o .| o o| .| o o|\")",
                "output": "[2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 4, 1, 4, 2, 1, 4, 2]"
            },
            {
                "input": "parse_music(\"o| o| o| o .| o o| o|\")",
                "output": "[2, 2, 2, 4, 1, 4, 2, 2]"
            },
            {
                "input": "parse_music(\".|\")",
                "output": "[1]"
            },
            {
                "input": "parse_music(\"o o| o o .| o| o|\")",
                "output": "[4, 2, 4, 4, 1, 2, 2]"
            },
            {
                "input": "parse_music(\"o .| o o| .| o| .| o o| .| o\")",
                "output": "[4, 1, 4, 2, 1, 2, 1, 4, 2, 1, 4]"
            },
            {
                "input": "parse_music(\".| o\")",
                "output": "[1, 4]"
            },
            {
                "input": "parse_music(\".| .| .| .| o| .| .| o o .| o| o .|\")",
                "output": "[1, 1, 1, 1, 2, 1, 1, 4, 4, 1, 2, 4, 1]"
            },
            {
                "input": "parse_music(\"o| o .| o| o| o| o .| .| o| .| o| .|\")",
                "output": "[2, 4, 1, 2, 2, 2, 4, 1, 1, 2, 1, 2, 1]"
            },
            {
                "input": "parse_music(\".| o o o .|\")",
                "output": "[1, 4, 4, 4, 1]"
            },
            {
                "input": "parse_music(\".| o o| o\")",
                "output": "[1, 4, 2, 4]"
            },
            {
                "input": "parse_music(\"o .| .|\")",
                "output": "[4, 1, 1]"
            },
            {
                "input": "parse_music(\"o o o o| o| o o| o\")",
                "output": "[4, 4, 4, 2, 2, 4, 2, 4]"
            },
            {
                "input": "parse_music('')",
                "output": "[]"
            },
            {
                "input": "parse_music(\"o| o o| .| .| o o o| .| o .| o| o\")",
                "output": "[2, 4, 2, 1, 1, 4, 4, 2, 1, 4, 1, 2, 4]"
            },
            {
                "input": "parse_music(\".| o| o o .| .| .| o .| o| .| .| .| o| o| o o .| .|\")",
                "output": "[1, 2, 4, 4, 1, 1, 1, 4, 1, 2, 1, 1, 1, 2, 2, 4, 4, 1, 1]"
            },
            {
                "input": "parse_music(\"o .| o| o|\")",
                "output": "[4, 1, 2, 2]"
            },
            {
                "input": "parse_music(\"o| o o| o| .| .| .| .| o|\")",
                "output": "[2, 4, 2, 2, 1, 1, 1, 1, 2]"
            },
            {
                "input": "parse_music(\".| o| o| .| o o| o o| o o .| o| o| o| o o .|\")",
                "output": "[1, 2, 2, 1, 4, 2, 4, 2, 4, 4, 1, 2, 2, 2, 4, 4, 1]"
            },
            {
                "input": "parse_music(\"o o o| o\")",
                "output": "[4, 4, 2, 4]"
            },
            {
                "input": "parse_music(\"o o o o o o| .| o| o .| o o|\")",
                "output": "[4, 4, 4, 4, 4, 2, 1, 2, 4, 1, 4, 2]"
            },
            {
                "input": "parse_music(\"o .| o| o .| .| .| o o| o\")",
                "output": "[4, 1, 2, 4, 1, 1, 1, 4, 2, 4]"
            },
            {
                "input": "parse_music(\"o| o .| .| o .| o o| .| o o| o| o\")",
                "output": "[2, 4, 1, 1, 4, 1, 4, 2, 1, 4, 2, 2, 4]"
            },
            {
                "input": "parse_music(\"o| o| .| o| .| o o o o| o o| o| .| o o o o|\")",
                "output": "[2, 2, 1, 2, 1, 4, 4, 4, 2, 4, 2, 2, 1, 4, 4, 4, 2]"
            },
            {
                "input": "parse_music(\"o .| .| o .| o| .| o|\")",
                "output": "[4, 1, 1, 4, 1, 2, 1, 2]"
            },
            {
                "input": "parse_music(\"o\")",
                "output": "[4]"
            },
            {
                "input": "parse_music(\".| o o o o o o o o| .| o o .| o o| o|\")",
                "output": "[1, 4, 4, 4, 4, 4, 4, 4, 2, 1, 4, 4, 1, 4, 2, 2]"
            },
            {
                "input": "parse_music(\".| .| o .| o| .| o .| o| o o| o|\")",
                "output": "[1, 1, 4, 1, 2, 1, 4, 1, 2, 4, 2, 2]"
            },
            {
                "input": "parse_music(\".| o| .| o .| o| o o .| o| o| o o .| o o .|\")",
                "output": "[1, 2, 1, 4, 1, 2, 4, 4, 1, 2, 2, 4, 4, 1, 4, 4, 1]"
            },
            {
                "input": "parse_music(\".| o| o o|\")",
                "output": "[1, 2, 4, 2]"
            },
            {
                "input": "parse_music(\"o| o| .| o .|\")",
                "output": "[2, 2, 1, 4, 1]"
            },
            {
                "input": "parse_music(\"o| o\")",
                "output": "[2, 4]"
            },
            {
                "input": "parse_music(\"o|\")",
                "output": "[2]"
            },
            {
                "input": "parse_music(\"o| o .| o o| .|\")",
                "output": "[2, 4, 1, 4, 2, 1]"
            },
            {
                "input": "parse_music(\"o o o .| o o| o| o .| o o o .| o o| o o\")",
                "output": "[4, 4, 4, 1, 4, 2, 2, 4, 1, 4, 4, 4, 1, 4, 2, 4, 4]"
            },
            {
                "input": "parse_music(\".| o| o o .| o|\")",
                "output": "[1, 2, 4, 4, 1, 2]"
            },
            {
                "input": "parse_music('o| o| .| .| o o o o')",
                "output": "[2, 2, 1, 1, 4, 4, 4, 4]"
            },
            {
                "input": "parse_music(\"o| .| o o| .| o .| o o .| o| .| o| o| .|\")",
                "output": "[2, 1, 4, 2, 1, 4, 1, 4, 4, 1, 2, 1, 2, 2, 1]"
            },
            {
                "input": "parse_music(\"o| .| o o| .| .| o .| o .| o .| .| o o .|\")",
                "output": "[2, 1, 4, 2, 1, 1, 4, 1, 4, 1, 4, 1, 1, 4, 4, 1]"
            },
            {
                "input": "parse_music(\"o o| .| .| o| .| .| .|\")",
                "output": "[4, 2, 1, 1, 2, 1, 1, 1]"
            },
            {
                "input": "parse_music(\".| o .| o o| .| o o o|\")",
                "output": "[1, 4, 1, 4, 2, 1, 4, 4, 2]"
            },
            {
                "input": "parse_music(\"o o| o .| o o| .| o| .| .| o o| o| o o| o| .|\")",
                "output": "[4, 2, 4, 1, 4, 2, 1, 2, 1, 1, 4, 2, 2, 4, 2, 2, 1]"
            },
            {
                "input": "parse_music(\".| o| .| o o .| .| o o| o| o o| .| .| .|\")",
                "output": "[1, 2, 1, 4, 4, 1, 1, 4, 2, 2, 4, 2, 1, 1, 1]"
            },
            {
                "input": "parse_music(\"o| o o| o\")",
                "output": "[2, 4, 2, 4]"
            },
            {
                "input": "parse_music(\".| .| o| o| o o o| o| o o| o o .| .| o o o\")",
                "output": "[1, 1, 2, 2, 4, 4, 2, 2, 4, 2, 4, 4, 1, 1, 4, 4, 4]"
            },
            {
                "input": "parse_music(\".| o| o .| o|\")",
                "output": "[1, 2, 4, 1, 2]"
            },
            {
                "input": "parse_music(\"o .| o| o| .| o .| o| .| o|\")",
                "output": "[4, 1, 2, 2, 1, 4, 1, 2, 1, 2]"
            },
            {
                "input": "parse_music(\"o| o| o|\")",
                "output": "[2, 2, 2]"
            },
            {
                "input": "parse_music(\"o o|\")",
                "output": "[4, 2]"
            },
            {
                "input": "parse_music(\"o o o| o o o| o\")",
                "output": "[4, 4, 2, 4, 4, 2, 4]"
            },
            {
                "input": "parse_music(\".| o o| .| o o o o| o .| o\")",
                "output": "[1, 4, 2, 1, 4, 4, 4, 2, 4, 1, 4]"
            },
            {
                "input": "parse_music(\"o| o o|\")",
                "output": "[2, 4, 2]"
            },
            {
                "input": "parse_music(\"o o .| o| o o o o o o| o o| .| o\")",
                "output": "[4, 4, 1, 2, 4, 4, 4, 4, 4, 2, 4, 2, 1, 4]"
            },
            {
                "input": "parse_music(\"o o| .| o| o .| o o| o| o o| o o\")",
                "output": "[4, 2, 1, 2, 4, 1, 4, 2, 2, 4, 2, 4, 4]"
            },
            {
                "input": "parse_music(\"o| .| o| o o o| o o o| o .| .| .| o .|\")",
                "output": "[2, 1, 2, 4, 4, 2, 4, 4, 2, 4, 1, 1, 1, 4, 1]"
            },
            {
                "input": "parse_music(\"o o o o| o| .| o o| o o .| o .| o|\")",
                "output": "[4, 4, 4, 2, 2, 1, 4, 2, 4, 4, 1, 4, 1, 2]"
            },
            {
                "input": "parse_music(\".| o| o o| o\")",
                "output": "[1, 2, 4, 2, 4]"
            },
            {
                "input": "parse_music(\".| o o| .| .|\")",
                "output": "[1, 4, 2, 1, 1]"
            },
            {
                "input": "parse_music(\".| o .| o o o o| o| o| .| o o o .| .|\")",
                "output": "[1, 4, 1, 4, 4, 4, 2, 2, 2, 1, 4, 4, 4, 1, 1]"
            },
            {
                "input": "parse_music(\".| .| .| o| o| o o .| o o .| o\")",
                "output": "[1, 1, 1, 2, 2, 4, 4, 1, 4, 4, 1, 4]"
            },
            {
                "input": "parse_music(\"o| .| o| o| .| o| .| o .| .| .| .| o o o| o\")",
                "output": "[2, 1, 2, 2, 1, 2, 1, 4, 1, 1, 1, 1, 4, 4, 2, 4]"
            },
            {
                "input": "parse_music(\"o| .| o| o\")",
                "output": "[2, 1, 2, 4]"
            },
            {
                "input": "parse_music(\".| o| .|\")",
                "output": "[1, 2, 1]"
            },
            {
                "input": "parse_music(\".| .| o| o o o .| o|\")",
                "output": "[1, 1, 2, 4, 4, 4, 1, 2]"
            },
            {
                "input": "parse_music(\"o o o .| o o| o| o o .| o| o| o| o\")",
                "output": "[4, 4, 4, 1, 4, 2, 2, 4, 4, 1, 2, 2, 2, 4]"
            },
            {
                "input": "parse_music(\"o o .|\")",
                "output": "[4, 4, 1]"
            },
            {
                "input": "parse_music(\".| o| .| o| o| .| o .| o\")",
                "output": "[1, 2, 1, 2, 2, 1, 4, 1, 4]"
            },
            {
                "input": "parse_music(\"o| o .| o|\")",
                "output": "[2, 4, 1, 2]"
            },
            {
                "input": "parse_music(\"o| o o o o o o .| o| o| o\")",
                "output": "[2, 4, 4, 4, 4, 4, 4, 1, 2, 2, 4]"
            },
            {
                "input": "parse_music('.| .| .| .|')",
                "output": "[1, 1, 1, 1]"
            },
            {
                "input": "parse_music(\"o .| .| o\")",
                "output": "[4, 1, 1, 4]"
            },
            {
                "input": "parse_music(\".| .| o o| .| o o .| o| o .| o o| .| o o| o o| o o\")",
                "output": "[1, 1, 4, 2, 1, 4, 4, 1, 2, 4, 1, 4, 2, 1, 4, 2, 4, 2, 4, 4]"
            },
            {
                "input": "parse_music(\"o .|\")",
                "output": "[4, 1]"
            },
            {
                "input": "parse_music(\"o| .| .| o .| o\")",
                "output": "[2, 1, 1, 4, 1, 4]"
            },
            {
                "input": "parse_music('o| .| o| .| o o| o o|')",
                "output": "[2, 1, 2, 1, 4, 2, 4, 2]"
            },
            {
                "input": "parse_music(\".| o| .| .| .| o .| o| o| o o .| o\")",
                "output": "[1, 2, 1, 1, 1, 4, 1, 2, 2, 4, 4, 1, 4]"
            },
            {
                "input": "parse_music(\"o .| o .| o o o| o| o| o| o o .| o|\")",
                "output": "[4, 1, 4, 1, 4, 4, 2, 2, 2, 2, 4, 4, 1, 2]"
            },
            {
                "input": "parse_music(\"o| o| o| o o o .| .| o o| o| o o| o o| o|\")",
                "output": "[2, 2, 2, 4, 4, 4, 1, 1, 4, 2, 2, 4, 2, 4, 2, 2]"
            },
            {
                "input": "parse_music(\"o| .| o| o| .| o| o| o .| .| .| o| o o| .| o .| .|\")",
                "output": "[2, 1, 2, 2, 1, 2, 2, 4, 1, 1, 1, 2, 4, 2, 1, 4, 1, 1]"
            },
            {
                "input": "parse_music(\".| o| o\")",
                "output": "[1, 2, 4]"
            },
            {
                "input": "parse_music(\"o o o\")",
                "output": "[4, 4, 4]"
            },
            {
                "input": "parse_music(\"o o| .| .|\")",
                "output": "[4, 2, 1, 1]"
            },
            {
                "input": "parse_music(\"o o| o| .| .| o| o|\")",
                "output": "[4, 2, 2, 1, 1, 2, 2]"
            },
            {
                "input": "parse_music(\"o o o| .| o\")",
                "output": "[4, 4, 2, 1, 4]"
            },
            {
                "input": "parse_music(\".| .| o| .| o|\")",
                "output": "[1, 1, 2, 1, 2]"
            },
            {
                "input": "parse_music(\".| .| o o| .| o .| o| o o| o o| o| .| o| o .|\")",
                "output": "[1, 1, 4, 2, 1, 4, 1, 2, 4, 2, 4, 2, 2, 1, 2, 4, 1]"
            },
            {
                "input": "parse_music(\"o| o o .| o o| o| o o| o o .|\")",
                "output": "[2, 4, 4, 1, 4, 2, 2, 4, 2, 4, 4, 1]"
            },
            {
                "input": "parse_music(\".| .|\")",
                "output": "[1, 1]"
            },
            {
                "input": "parse_music(\"o o .| o\")",
                "output": "[4, 4, 1, 4]"
            },
            {
                "input": "parse_music(\"o| .| o| .| o| o| o| .| o| .| o| o| o| o .| o o| o|\")",
                "output": "[2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 4, 1, 4, 2, 2]"
            },
            {
                "input": "parse_music(\"o| .| o| o| o| o| o .|\")",
                "output": "[2, 1, 2, 2, 2, 2, 4, 1]"
            },
            {
                "input": "parse_music(\"o o o o| o o|\")",
                "output": "[4, 4, 4, 2, 4, 2]"
            },
            {
                "input": "parse_music(\"o| .| .| o| o o o o o|\")",
                "output": "[2, 1, 1, 2, 4, 4, 4, 4, 2]"
            },
            {
                "input": "parse_music(\"o| o| .| .| o| .| o| o o| .| o| o| o|\")",
                "output": "[2, 2, 1, 1, 2, 1, 2, 4, 2, 1, 2, 2, 2]"
            }
        ]
    },
    {
        "problem_description": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "ground truth": "def how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
        "instances": [
            {
                "input": "how_many_times('eqnkivb', 'e')",
                "output": "1"
            },
            {
                "input": "how_many_times('clzgocfvbuefacz', 'c')",
                "output": "3"
            },
            {
                "input": "how_many_times('tsqxytjiivrz', 'ts')",
                "output": "1"
            },
            {
                "input": "how_many_times('lqzvrsvhs', 'q')",
                "output": "1"
            },
            {
                "input": "how_many_times(' ndohd', ' ')",
                "output": "1"
            },
            {
                "input": "how_many_times('ktxmngrvtzyagna', 'tx')",
                "output": "1"
            },
            {
                "input": "how_many_times('qkbdoiyfy', 'k')",
                "output": "1"
            },
            {
                "input": "how_many_times('srzn', 'r')",
                "output": "1"
            },
            {
                "input": "how_many_times('fhkoyhaus', 'h')",
                "output": "2"
            },
            {
                "input": "how_many_times('rmklhebu', 'r')",
                "output": "1"
            },
            {
                "input": "how_many_times('pwu', 'w')",
                "output": "1"
            },
            {
                "input": "how_many_times('nszheeqkvhn', 'ns')",
                "output": "1"
            },
            {
                "input": "how_many_times('wqgmsdi', 'qg')",
                "output": "1"
            },
            {
                "input": "how_many_times('xyxyxyx', 'x')",
                "output": "4"
            },
            {
                "input": "how_many_times('wnvgsxj', 'n')",
                "output": "1"
            },
            {
                "input": "how_many_times('qboo', 'qb')",
                "output": "1"
            },
            {
                "input": "how_many_times('scab dszdeft', 's')",
                "output": "2"
            },
            {
                "input": "how_many_times('je', 'e')",
                "output": "1"
            },
            {
                "input": "how_many_times('pvgwfhuopwremt', 'pv')",
                "output": "1"
            },
            {
                "input": "how_many_times('gat', 'a')",
                "output": "1"
            },
            {
                "input": "how_many_times('gmjlmoi', 'mj')",
                "output": "1"
            },
            {
                "input": "how_many_times('nkwawgxmpgpdbmk', 'kw')",
                "output": "1"
            },
            {
                "input": "how_many_times('bfnzwslcalkmsx', 'b')",
                "output": "1"
            },
            {
                "input": "how_many_times('icfpyzle', 'c')",
                "output": "1"
            },
            {
                "input": "how_many_times('dn', 'n')",
                "output": "1"
            },
            {
                "input": "how_many_times('k', 'k')",
                "output": "1"
            },
            {
                "input": "how_many_times('azhzsokbfol', 'z')",
                "output": "2"
            },
            {
                "input": "how_many_times('jrvzqqmmft', 'rv')",
                "output": "1"
            },
            {
                "input": "how_many_times('zxcpshdh', 'zx')",
                "output": "1"
            },
            {
                "input": "how_many_times('stng', 'tn')",
                "output": "1"
            },
            {
                "input": "how_many_times('aoi', 'oi')",
                "output": "1"
            },
            {
                "input": "how_many_times('avawcwvx', 'av')",
                "output": "1"
            },
            {
                "input": "how_many_times('bb ', 'b')",
                "output": "2"
            },
            {
                "input": "how_many_times('fmrlzbsunvxw', 'fm')",
                "output": "1"
            },
            {
                "input": "how_many_times('ofbjvtsddgre', 'f')",
                "output": "1"
            },
            {
                "input": "how_many_times('up', 'up')",
                "output": "1"
            },
            {
                "input": "how_many_times('kk', 'k')",
                "output": "2"
            },
            {
                "input": "how_many_times('rbomgmes', 'rb')",
                "output": "1"
            },
            {
                "input": "how_many_times('', 'x')",
                "output": "0"
            },
            {
                "input": "how_many_times('qwalaa', 'qw')",
                "output": "1"
            },
            {
                "input": "how_many_times('vyemhdw', 'ye')",
                "output": "1"
            },
            {
                "input": "how_many_times('vrx', 'v')",
                "output": "1"
            },
            {
                "input": "how_many_times('xugjvtx ', 'u')",
                "output": "1"
            },
            {
                "input": "how_many_times('rpwwqfxiizm', 'p')",
                "output": "1"
            },
            {
                "input": "how_many_times('l', '')",
                "output": "2"
            },
            {
                "input": "how_many_times('hmc', 'mc')",
                "output": "1"
            },
            {
                "input": "how_many_times('wfxkmyyktkkl', 'fx')",
                "output": "1"
            },
            {
                "input": "how_many_times('ivtarxrlxdy', 'vt')",
                "output": "1"
            },
            {
                "input": "how_many_times('spedonqop', 'sp')",
                "output": "1"
            },
            {
                "input": "how_many_times('t a', 't')",
                "output": "1"
            },
            {
                "input": "how_many_times('cacacacac', 'cac')",
                "output": "4"
            },
            {
                "input": "how_many_times('x', '')",
                "output": "2"
            },
            {
                "input": "how_many_times('gkfz', 'g')",
                "output": "1"
            },
            {
                "input": "how_many_times('uocfpojadumagm', 'u')",
                "output": "2"
            },
            {
                "input": "how_many_times('jdvktqcenyil', 'j')",
                "output": "1"
            },
            {
                "input": "how_many_times('jslhdijlb', 'j')",
                "output": "2"
            },
            {
                "input": "how_many_times('vq', 'v')",
                "output": "1"
            },
            {
                "input": "how_many_times('unttpexxmrb', 'n')",
                "output": "1"
            },
            {
                "input": "how_many_times('sfz', 'fz')",
                "output": "1"
            },
            {
                "input": "how_many_times('ucqgonvrjdrkq', 'uc')",
                "output": "1"
            },
            {
                "input": "how_many_times('syolthqzdqe', 'sy')",
                "output": "1"
            },
            {
                "input": "how_many_times('aakzdpfjy', 'a')",
                "output": "2"
            },
            {
                "input": "how_many_times('vjvezdoknedfm', 'v')",
                "output": "2"
            },
            {
                "input": "how_many_times('g', '')",
                "output": "2"
            },
            {
                "input": "how_many_times('hhuscpoywkov', 'hu')",
                "output": "1"
            },
            {
                "input": "how_many_times('pdvxbxv', 'p')",
                "output": "1"
            },
            {
                "input": "how_many_times('wkojkobxgk', 'k')",
                "output": "3"
            },
            {
                "input": "how_many_times(' dnddh', ' ')",
                "output": "1"
            },
            {
                "input": "how_many_times('upvl', 'up')",
                "output": "1"
            },
            {
                "input": "how_many_times('ujhki', 'j')",
                "output": "1"
            },
            {
                "input": "how_many_times('jzhmab vb', 'j')",
                "output": "1"
            },
            {
                "input": "how_many_times('cnsosehe', 'cn')",
                "output": "1"
            },
            {
                "input": "how_many_times('z', 'z')",
                "output": "1"
            },
            {
                "input": "how_many_times('vjxplzti', 'jx')",
                "output": "1"
            },
            {
                "input": "how_many_times('skvkibi', 'kv')",
                "output": "1"
            },
            {
                "input": "how_many_times('vrt', 'vr')",
                "output": "1"
            },
            {
                "input": "how_many_times('gykecbjj', 'g')",
                "output": "1"
            },
            {
                "input": "how_many_times('u', 'u')",
                "output": "1"
            },
            {
                "input": "how_many_times('kqd', 'q')",
                "output": "1"
            },
            {
                "input": "how_many_times('yhiofgbhza', 'hi')",
                "output": "1"
            },
            {
                "input": "how_many_times('anfovmji', 'a')",
                "output": "1"
            },
            {
                "input": "how_many_times('whizuczp', 'hi')",
                "output": "1"
            },
            {
                "input": "how_many_times('yvg', 'vg')",
                "output": "1"
            },
            {
                "input": "how_many_times('uxw', 'u')",
                "output": "1"
            },
            {
                "input": "how_many_times('mhf', 'mh')",
                "output": "1"
            },
            {
                "input": "how_many_times('otffpnivuj', 't')",
                "output": "1"
            },
            {
                "input": "how_many_times('zfkihkvbqgxoyqa', 'z')",
                "output": "1"
            },
            {
                "input": "how_many_times('mkrn yvnza', 'k')",
                "output": "1"
            },
            {
                "input": "how_many_times('yiklalp', 'y')",
                "output": "1"
            },
            {
                "input": "how_many_times('qcqg', 'qc')",
                "output": "1"
            },
            {
                "input": "how_many_times('nnkggonzeqndpfp', 'nk')",
                "output": "1"
            },
            {
                "input": "how_many_times('z', '')",
                "output": "2"
            },
            {
                "input": "how_many_times('at', 't')",
                "output": "1"
            },
            {
                "input": "how_many_times('ceakek', 'e')",
                "output": "2"
            },
            {
                "input": "how_many_times('aeapeggccxsumz', 'ea')",
                "output": "1"
            },
            {
                "input": "how_many_times('ijy', 'i')",
                "output": "1"
            },
            {
                "input": "how_many_times('nbhcp', 'bh')",
                "output": "1"
            },
            {
                "input": "how_many_times('nvdmrufrqwdqnn', 'n')",
                "output": "3"
            },
            {
                "input": "how_many_times('tlt', 'l')",
                "output": "1"
            },
            {
                "input": "how_many_times('c', 'c')",
                "output": "1"
            },
            {
                "input": "how_many_times('qhlqxeamji', 'q')",
                "output": "2"
            },
            {
                "input": "how_many_times('xrawl', 'x')",
                "output": "1"
            },
            {
                "input": "how_many_times('john doe', 'john')",
                "output": "1"
            },
            {
                "input": "how_many_times('mk', 'k')",
                "output": "1"
            },
            {
                "input": "how_many_times('kxit', 'xi')",
                "output": "1"
            },
            {
                "input": "how_many_times('sidvztfhtd', 'si')",
                "output": "1"
            },
            {
                "input": "how_many_times('evjis', 'ev')",
                "output": "1"
            },
            {
                "input": "how_many_times('llfcwot', 'lf')",
                "output": "1"
            },
            {
                "input": "how_many_times('mmegmdpv', 'm')",
                "output": "3"
            },
            {
                "input": "how_many_times('ke', 'ke')",
                "output": "1"
            },
            {
                "input": "how_many_times('hoviwyeolsvtwx', 'ho')",
                "output": "1"
            },
            {
                "input": "how_many_times('hrc', 'h')",
                "output": "1"
            },
            {
                "input": "how_many_times('ugkfkyg', 'ug')",
                "output": "1"
            },
            {
                "input": "how_many_times('caicghhyug', 'ai')",
                "output": "1"
            },
            {
                "input": "how_many_times('mch', 'ch')",
                "output": "1"
            },
            {
                "input": "how_many_times('be', 'b')",
                "output": "1"
            },
            {
                "input": "how_many_times('zjisbzekeudl', 'zj')",
                "output": "1"
            },
            {
                "input": "how_many_times('rcd', 'r')",
                "output": "1"
            },
            {
                "input": "how_many_times('yhk', 'h')",
                "output": "1"
            },
            {
                "input": "how_many_times('nujl', 'u')",
                "output": "1"
            },
            {
                "input": "how_many_times('qwwg', 'q')",
                "output": "1"
            },
            {
                "input": "how_many_times('mof', 'm')",
                "output": "1"
            },
            {
                "input": "how_many_times('ayz', 'yz')",
                "output": "1"
            },
            {
                "input": "how_many_times('jmgucrpprt', 'jm')",
                "output": "1"
            },
            {
                "input": "how_many_times('xalqwccwlzx', 'a')",
                "output": "1"
            },
            {
                "input": "how_many_times('rvzgt', 'vz')",
                "output": "1"
            },
            {
                "input": "how_many_times('nk', 'k')",
                "output": "1"
            },
            {
                "input": "how_many_times('aw', 'aw')",
                "output": "1"
            },
            {
                "input": "how_many_times('uciilfjx', 'ci')",
                "output": "1"
            },
            {
                "input": "how_many_times('eyeamwnvphy', 'e')",
                "output": "2"
            },
            {
                "input": "how_many_times('eeq', 'eq')",
                "output": "1"
            },
            {
                "input": "how_many_times('iu', 'i')",
                "output": "1"
            }
        ]
    },
    {
        "problem_description": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
        "ground truth": "def sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
        "instances": [
            {
                "input": "sort_numbers(\"three six four three zero\")",
                "output": "'zero three three four six'"
            },
            {
                "input": "sort_numbers(\"one four eight one eight zero\")",
                "output": "'zero one one four eight eight'"
            },
            {
                "input": "sort_numbers(\"four four six four one\")",
                "output": "'one four four four six'"
            },
            {
                "input": "sort_numbers(\"six five five five two one nine\")",
                "output": "'one two five five five six nine'"
            },
            {
                "input": "sort_numbers(\"two seven eight seven four seven\")",
                "output": "'two four seven seven seven eight'"
            },
            {
                "input": "sort_numbers(\"eight eight zero two two nine four zero\")",
                "output": "'zero zero two two four eight eight nine'"
            },
            {
                "input": "sort_numbers(\"six two two seven one\")",
                "output": "'one two two six seven'"
            },
            {
                "input": "sort_numbers(\"three\")",
                "output": "'three'"
            },
            {
                "input": "sort_numbers(\"one two four four three seven\")",
                "output": "'one two three four four seven'"
            },
            {
                "input": "sort_numbers(\"three two three four one eight five nine one\")",
                "output": "'one one two three three four five eight nine'"
            },
            {
                "input": "sort_numbers(\"four one nine three\")",
                "output": "'one three four nine'"
            },
            {
                "input": "sort_numbers(\"six zero four one\")",
                "output": "'zero one four six'"
            },
            {
                "input": "sort_numbers(\"zero seven four seven six seven seven\")",
                "output": "'zero four six seven seven seven seven'"
            },
            {
                "input": "sort_numbers(\"five zero one zero four eight\")",
                "output": "'zero zero one four five eight'"
            },
            {
                "input": "sort_numbers(\"five zero five three four nine\")",
                "output": "'zero three four five five nine'"
            },
            {
                "input": "sort_numbers(\"one nine seven eight two nine three two\")",
                "output": "'one two two three seven eight nine nine'"
            },
            {
                "input": "sort_numbers(\"five six four seven seven\")",
                "output": "'four five six seven seven'"
            },
            {
                "input": "sort_numbers(\"four\")",
                "output": "'four'"
            },
            {
                "input": "sort_numbers(\"three zero one nine nine three\")",
                "output": "'zero one three three nine nine'"
            },
            {
                "input": "sort_numbers(\"eight zero seven\")",
                "output": "'zero seven eight'"
            },
            {
                "input": "sort_numbers(\"four four three six\")",
                "output": "'three four four six'"
            },
            {
                "input": "sort_numbers(\"nine three four five\")",
                "output": "'three four five nine'"
            },
            {
                "input": "sort_numbers(\"three nine nine eight\")",
                "output": "'three eight nine nine'"
            },
            {
                "input": "sort_numbers(\"seven five one three seven one five\")",
                "output": "'one one three five five seven seven'"
            },
            {
                "input": "sort_numbers(\"two three four five eight nine\")",
                "output": "'two three four five eight nine'"
            },
            {
                "input": "sort_numbers(\"one nine one six six\")",
                "output": "'one one six six nine'"
            },
            {
                "input": "sort_numbers(\"nine two three two eight six four six\")",
                "output": "'two two three four six six eight nine'"
            },
            {
                "input": "sort_numbers(\"eight nine one one seven\")",
                "output": "'one one seven eight nine'"
            },
            {
                "input": "sort_numbers(\"seven two one four one nine five five\")",
                "output": "'one one two four five five seven nine'"
            },
            {
                "input": "sort_numbers(\"one six two seven\")",
                "output": "'one two six seven'"
            },
            {
                "input": "sort_numbers(\"five nine two four eight\")",
                "output": "'two four five eight nine'"
            },
            {
                "input": "sort_numbers(\"two one eight zero zero nine\")",
                "output": "'zero zero one two eight nine'"
            },
            {
                "input": "sort_numbers(\"three two four two eight five\")",
                "output": "'two two three four five eight'"
            },
            {
                "input": "sort_numbers(\"zero three\")",
                "output": "'zero three'"
            },
            {
                "input": "sort_numbers(\"six four five one four six eight zero five\")",
                "output": "'zero one four four five five six six eight'"
            },
            {
                "input": "sort_numbers(\"seven\")",
                "output": "'seven'"
            },
            {
                "input": "sort_numbers(\"zero one seven eight three\")",
                "output": "'zero one three seven eight'"
            },
            {
                "input": "sort_numbers(\"seven zero\")",
                "output": "'zero seven'"
            },
            {
                "input": "sort_numbers(\"nine one three zero nine\")",
                "output": "'zero one three nine nine'"
            },
            {
                "input": "sort_numbers(\"five six nine nine nine eight\")",
                "output": "'five six eight nine nine nine'"
            },
            {
                "input": "sort_numbers(\"eight three nine three one seven eight nine two\")",
                "output": "'one two three three seven eight eight nine nine'"
            },
            {
                "input": "sort_numbers(\"four one seven\")",
                "output": "'one four seven'"
            },
            {
                "input": "sort_numbers(\"five\")",
                "output": "'five'"
            },
            {
                "input": "sort_numbers(\"four five five one one\")",
                "output": "'one one four five five'"
            },
            {
                "input": "sort_numbers(\"eight three zero one five one nine\")",
                "output": "'zero one one three five eight nine'"
            },
            {
                "input": "sort_numbers(\"two five four zero\")",
                "output": "'zero two four five'"
            },
            {
                "input": "sort_numbers(\"six seven one three two eight\")",
                "output": "'one two three six seven eight'"
            },
            {
                "input": "sort_numbers(\"eight one five five six one\")",
                "output": "'one one five five six eight'"
            },
            {
                "input": "sort_numbers(\"seven zero seven seven two five nine six\")",
                "output": "'zero two five six seven seven seven nine'"
            },
            {
                "input": "sort_numbers(\"seven three\")",
                "output": "'three seven'"
            },
            {
                "input": "sort_numbers(\"four eight four nine three four three five eight\")",
                "output": "'three three four four four five eight eight nine'"
            },
            {
                "input": "sort_numbers(\"seven one one four seven seven\")",
                "output": "'one one four seven seven seven'"
            },
            {
                "input": "sort_numbers(\"seven six\")",
                "output": "'six seven'"
            },
            {
                "input": "sort_numbers(\"zero five six five eight zero three three six\")",
                "output": "'zero zero three three five five six six eight'"
            },
            {
                "input": "sort_numbers(\"five eight three nine\")",
                "output": "'three five eight nine'"
            },
            {
                "input": "sort_numbers('three five nine')",
                "output": "'three five nine'"
            },
            {
                "input": "sort_numbers(\"one eight five eight zero three five\")",
                "output": "'zero one three five five eight eight'"
            },
            {
                "input": "sort_numbers(\"two one two nine eight seven eight\")",
                "output": "'one two two seven eight eight nine'"
            },
            {
                "input": "sort_numbers(\"one\")",
                "output": "'one'"
            },
            {
                "input": "sort_numbers('six five four three two one zero')",
                "output": "'zero one two three four five six'"
            },
            {
                "input": "sort_numbers(\"eight six three\")",
                "output": "'three six eight'"
            },
            {
                "input": "sort_numbers(\"five three five\")",
                "output": "'three five five'"
            },
            {
                "input": "sort_numbers(\"six one seven two nine six two zero seven\")",
                "output": "'zero one two two six six seven seven nine'"
            },
            {
                "input": "sort_numbers(\"two seven zero nine three one eight\")",
                "output": "'zero one two three seven eight nine'"
            },
            {
                "input": "sort_numbers(\"four three zero\")",
                "output": "'zero three four'"
            },
            {
                "input": "sort_numbers(\"nine one six four\")",
                "output": "'one four six nine'"
            },
            {
                "input": "sort_numbers(\"one nine zero one nine three nine\")",
                "output": "'zero one one three nine nine nine'"
            },
            {
                "input": "sort_numbers(\"two three six seven nine four zero\")",
                "output": "'zero two three four six seven nine'"
            },
            {
                "input": "sort_numbers(\"three seven two\")",
                "output": "'two three seven'"
            },
            {
                "input": "sort_numbers(\"two five five one nine one two zero six\")",
                "output": "'zero one one two two five five six nine'"
            },
            {
                "input": "sort_numbers(\"eight five one eight five one\")",
                "output": "'one one five five eight eight'"
            },
            {
                "input": "sort_numbers(\"six three\")",
                "output": "'three six'"
            },
            {
                "input": "sort_numbers(\"six nine three\")",
                "output": "'three six nine'"
            },
            {
                "input": "sort_numbers(\"seven six four five six eight four\")",
                "output": "'four four five six six seven eight'"
            },
            {
                "input": "sort_numbers(\"three eight one one zero\")",
                "output": "'zero one one three eight'"
            },
            {
                "input": "sort_numbers(\"zero two two eight three nine four four four\")",
                "output": "'zero two two three four four four eight nine'"
            },
            {
                "input": "sort_numbers('five zero four seven nine eight')",
                "output": "'zero four five seven eight nine'"
            },
            {
                "input": "sort_numbers(\"nine nine five\")",
                "output": "'five nine nine'"
            },
            {
                "input": "sort_numbers(\"three six two five three six\")",
                "output": "'two three three five six six'"
            },
            {
                "input": "sort_numbers('three')",
                "output": "'three'"
            },
            {
                "input": "sort_numbers(\"one two\")",
                "output": "'one two'"
            },
            {
                "input": "sort_numbers(\"five zero one one two two three\")",
                "output": "'zero one one two two three five'"
            },
            {
                "input": "sort_numbers(\"five nine eight zero zero four five\")",
                "output": "'zero zero four five five eight nine'"
            },
            {
                "input": "sort_numbers(\"eight five\")",
                "output": "'five eight'"
            },
            {
                "input": "sort_numbers(\"two eight eight zero seven seven one four\")",
                "output": "'zero one two four seven seven eight eight'"
            },
            {
                "input": "sort_numbers(\"one six one six six seven\")",
                "output": "'one one six six six seven'"
            },
            {
                "input": "sort_numbers(\"six zero nine six four zero six six\")",
                "output": "'zero zero four six six six six nine'"
            },
            {
                "input": "sort_numbers('')",
                "output": "''"
            },
            {
                "input": "sort_numbers(\"four two seven\")",
                "output": "'two four seven'"
            },
            {
                "input": "sort_numbers(\"seven six six seven seven two\")",
                "output": "'two six six seven seven seven'"
            },
            {
                "input": "sort_numbers(\"nine three three four nine five five\")",
                "output": "'three three four five five nine nine'"
            },
            {
                "input": "sort_numbers(\"seven two one four two eight\")",
                "output": "'one two two four seven eight'"
            },
            {
                "input": "sort_numbers(\"three four zero\")",
                "output": "'zero three four'"
            },
            {
                "input": "sort_numbers(\"nine\")",
                "output": "'nine'"
            },
            {
                "input": "sort_numbers(\"seven three two four zero five three one\")",
                "output": "'zero one two three three four five seven'"
            },
            {
                "input": "sort_numbers(\"seven two six nine two zero zero\")",
                "output": "'zero zero two two six seven nine'"
            },
            {
                "input": "sort_numbers(\"nine six two three four one zero two seven\")",
                "output": "'zero one two two three four six seven nine'"
            },
            {
                "input": "sort_numbers(\"six\")",
                "output": "'six'"
            },
            {
                "input": "sort_numbers(\"eight eight seven seven two three nine two seven\")",
                "output": "'two two three seven seven seven eight eight nine'"
            },
            {
                "input": "sort_numbers(\"one five six eight five seven five six four\")",
                "output": "'one four five five five six six seven eight'"
            },
            {
                "input": "sort_numbers(\"five three nine four one\")",
                "output": "'one three four five nine'"
            },
            {
                "input": "sort_numbers(\"four zero two five\")",
                "output": "'zero two four five'"
            },
            {
                "input": "sort_numbers(\"zero seven zero three two nine\")",
                "output": "'zero zero two three seven nine'"
            },
            {
                "input": "sort_numbers(\"nine zero\")",
                "output": "'zero nine'"
            },
            {
                "input": "sort_numbers(\"six zero three eight five one two two seven\")",
                "output": "'zero one two two three five six seven eight'"
            },
            {
                "input": "sort_numbers(\"five five three nine three zero zero zero eight\")",
                "output": "'zero zero zero three three five five eight nine'"
            },
            {
                "input": "sort_numbers(\"seven one five five zero six four four zero\")",
                "output": "'zero zero one four four five five six seven'"
            },
            {
                "input": "sort_numbers(\"seven one zero nine eight\")",
                "output": "'zero one seven eight nine'"
            },
            {
                "input": "sort_numbers(\"zero three four five eight seven two eight\")",
                "output": "'zero two three four five seven eight eight'"
            },
            {
                "input": "sort_numbers(\"four eight four two eight zero four seven\")",
                "output": "'zero two four four four seven eight eight'"
            },
            {
                "input": "sort_numbers(\"six zero one eight one four two three\")",
                "output": "'zero one one two three four six eight'"
            },
            {
                "input": "sort_numbers(\"five four five two six two zero\")",
                "output": "'zero two two four five five six'"
            },
            {
                "input": "sort_numbers(\"zero\")",
                "output": "'zero'"
            },
            {
                "input": "sort_numbers(\"six eight eight two six zero\")",
                "output": "'zero two six six eight eight'"
            },
            {
                "input": "sort_numbers(\"eight\")",
                "output": "'eight'"
            },
            {
                "input": "sort_numbers(\"three five three nine zero\")",
                "output": "'zero three three five nine'"
            },
            {
                "input": "sort_numbers(\"seven zero three four four\")",
                "output": "'zero three four four seven'"
            },
            {
                "input": "sort_numbers(\"three two four seven one nine eight four\")",
                "output": "'one two three four four seven eight nine'"
            },
            {
                "input": "sort_numbers(\"five six eight six two three nine eight nine\")",
                "output": "'two three five six six eight eight nine nine'"
            },
            {
                "input": "sort_numbers(\"eight zero zero six\")",
                "output": "'zero zero six eight'"
            },
            {
                "input": "sort_numbers(\"two zero four six zero five\")",
                "output": "'zero zero two four five six'"
            }
        ]
    },
    {
        "problem_description": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
        "ground truth": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
        "instances": [
            {
                "input": "find_closest_elements([6.619, 4.238, 3.558, 1.332, 4.671, 3.48])",
                "output": "(3.48, 3.558)"
            },
            {
                "input": "find_closest_elements([4.149, 7.544, 8.706, 2.894, 6.973, 4.602])",
                "output": "(4.149, 4.602)"
            },
            {
                "input": "find_closest_elements([6.24, 5.278, 6.461, 4.531, 3.086, 3.952])",
                "output": "(6.24, 6.461)"
            },
            {
                "input": "find_closest_elements([1.881, 5.861, 7.574, 6.511, 9.97, 3.808])",
                "output": "(5.861, 6.511)"
            },
            {
                "input": "find_closest_elements([4.578, 7.334, 3.074, 7.698, 5.754, 3.228])",
                "output": "(3.074, 3.228)"
            },
            {
                "input": "find_closest_elements([4.093, 1.763, 6.268, 6.813, 7.613])",
                "output": "(6.268, 6.813)"
            },
            {
                "input": "find_closest_elements([5.884, 3.934, 2.135, 5.072, 6.536, 5.227])",
                "output": "(5.072, 5.227)"
            },
            {
                "input": "find_closest_elements([4.768, 3.585, 10.538, 2.821, 6.735])",
                "output": "(2.821, 3.585)"
            },
            {
                "input": "find_closest_elements([5.581, 3.297, 3.618, 7.633, 5.968])",
                "output": "(3.297, 3.618)"
            },
            {
                "input": "find_closest_elements([1.861, 2.25, 2.69, 7.092, 10.91, 2.034])",
                "output": "(1.861, 2.034)"
            },
            {
                "input": "find_closest_elements([1.75, 3.762, 8.084, 3.769, 7.086])",
                "output": "(3.762, 3.769)"
            },
            {
                "input": "find_closest_elements([5.359, 3.637, 6.71, 5.559, 6.655])",
                "output": "(6.655, 6.71)"
            },
            {
                "input": "find_closest_elements([4.026, 7.41, 7.265, 5.317, 5.086, 3.325])",
                "output": "(7.265, 7.41)"
            },
            {
                "input": "find_closest_elements([4.651, 4.954, 8.472, 5.048, 7.008, 1.21])",
                "output": "(4.954, 5.048)"
            },
            {
                "input": "find_closest_elements([1.817, 7.132, 7.831, 5.286, 5.238, 7.889])",
                "output": "(5.238, 5.286)"
            },
            {
                "input": "find_closest_elements([2.909, 1.804, 2.091, 6.56, 1.804, 1.317])",
                "output": "(1.804, 1.804)"
            },
            {
                "input": "find_closest_elements([2.184, 1.057, 6.418, 3.603, 4.392, 2.992])",
                "output": "(2.992, 3.603)"
            },
            {
                "input": "find_closest_elements([5.324, 7.792, 5.351, 2.783, 1.186])",
                "output": "(5.324, 5.351)"
            },
            {
                "input": "find_closest_elements([5.391, 7.059, 5.446, 8.009, 10.213, 7.823])",
                "output": "(5.391, 5.446)"
            },
            {
                "input": "find_closest_elements([2.934, 1.264, 5.155, 2.683, 6.177, 7.174])",
                "output": "(2.683, 2.934)"
            },
            {
                "input": "find_closest_elements([1.886, 6.604, 8.097, 2.398, 7.53])",
                "output": "(1.886, 2.398)"
            },
            {
                "input": "find_closest_elements([2.376, 5.979, 5.7, 1.555, 4.588])",
                "output": "(5.7, 5.979)"
            },
            {
                "input": "find_closest_elements([6.674, 2.703, 6.562, 7.232, 1.66])",
                "output": "(6.562, 6.674)"
            },
            {
                "input": "find_closest_elements([3.767, 6.465, 7.577, 9.717, 8.324])",
                "output": "(7.577, 8.324)"
            },
            {
                "input": "find_closest_elements([3.76, 5.019, 7.274, 5.739, 6.283, 3.921])",
                "output": "(3.76, 3.921)"
            },
            {
                "input": "find_closest_elements([1.407, 2.722, 9.408, 6.13, 8.484])",
                "output": "(8.484, 9.408)"
            },
            {
                "input": "find_closest_elements([6.04, 2.605, 5.636, 2.488, 2.464])",
                "output": "(2.464, 2.488)"
            },
            {
                "input": "find_closest_elements([3.902, 4.617, 5.353, 7.86, 4.224, 4.076])",
                "output": "(4.076, 4.224)"
            },
            {
                "input": "find_closest_elements([4.846, 5.266, 1.694, 4.9, 2.532])",
                "output": "(4.846, 4.9)"
            },
            {
                "input": "find_closest_elements([1.151, 7.331, 6.961, 1.121, 9.394])",
                "output": "(1.121, 1.151)"
            },
            {
                "input": "find_closest_elements([1.126, 4.13, 1.621, 5.694, 9.119, 6.507])",
                "output": "(1.126, 1.621)"
            },
            {
                "input": "find_closest_elements([2.122, 5.672, 3.248, 8.415, 7.934, 1.573])",
                "output": "(7.934, 8.415)"
            },
            {
                "input": "find_closest_elements([4.466, 5.158, 2.579, 6.165, 2.506])",
                "output": "(2.506, 2.579)"
            },
            {
                "input": "find_closest_elements([5.791, 5.048, 2.941, 6.309, 4.976, 3.933])",
                "output": "(4.976, 5.048)"
            },
            {
                "input": "find_closest_elements([6.835, 2.3, 5.897, 8.478, 8.459, 3.905])",
                "output": "(8.459, 8.478)"
            },
            {
                "input": "find_closest_elements([3.741, 3.162, 3.933, 7.305, 7.172])",
                "output": "(7.172, 7.305)"
            },
            {
                "input": "find_closest_elements([5.231, 5.467, 10.012, 5.877, 3.795])",
                "output": "(5.231, 5.467)"
            },
            {
                "input": "find_closest_elements([5.162, 1.625, 2.306, 7.743, 3.918, 7.365])",
                "output": "(7.365, 7.743)"
            },
            {
                "input": "find_closest_elements([6.581, 2.975, 1.545, 7.51, 1.984, 6.974])",
                "output": "(6.581, 6.974)"
            },
            {
                "input": "find_closest_elements([2.413, 6.334, 1.835, 7.668, 5.353, 3.727])",
                "output": "(1.835, 2.413)"
            },
            {
                "input": "find_closest_elements([3.851, 1.824, 8.417, 5.906, 3.636, 7.245])",
                "output": "(3.636, 3.851)"
            },
            {
                "input": "find_closest_elements([5.712, 1.274, 8.172, 4.921, 9.539, 4.876])",
                "output": "(4.876, 4.921)"
            },
            {
                "input": "find_closest_elements([6.401, 5.439, 7.455, 2.289, 3.226, 1.405])",
                "output": "(1.405, 2.289)"
            },
            {
                "input": "find_closest_elements([4.84, 6.872, 4.811, 6.062, 9.992, 1.229])",
                "output": "(4.811, 4.84)"
            },
            {
                "input": "find_closest_elements([4.742, 4.371, 3.74, 7.145, 7.351, 1.976])",
                "output": "(7.145, 7.351)"
            },
            {
                "input": "find_closest_elements([3.188, 2.948, 1.127, 2.701, 4.923])",
                "output": "(2.948, 3.188)"
            },
            {
                "input": "find_closest_elements([4.739, 5.317, 7.732, 9.028, 8.783])",
                "output": "(8.783, 9.028)"
            },
            {
                "input": "find_closest_elements([3.366, 3.412, 4.331, 6.475, 1.551])",
                "output": "(3.366, 3.412)"
            },
            {
                "input": "find_closest_elements([1.899, 5.546, 1.471, 7.277, 4.704, 2.178])",
                "output": "(1.899, 2.178)"
            },
            {
                "input": "find_closest_elements([4.005, 1.483, 4.773, 9.401, 10.654])",
                "output": "(4.005, 4.773)"
            },
            {
                "input": "find_closest_elements([3.643, 6.34, 1.179, 3.094, 4.846, 7.076])",
                "output": "(3.094, 3.643)"
            },
            {
                "input": "find_closest_elements([3.129, 5.724, 3.991, 5.781, 9.477, 2.189])",
                "output": "(5.724, 5.781)"
            },
            {
                "input": "find_closest_elements([2.095, 1.209, 3.629, 8.322, 2.181, 4.773])",
                "output": "(2.095, 2.181)"
            },
            {
                "input": "find_closest_elements([4.434, 3.213, 3.317, 2.077, 10.033])",
                "output": "(3.213, 3.317)"
            },
            {
                "input": "find_closest_elements([1.42, 5.997, 2.369, 3.775, 2.189])",
                "output": "(2.189, 2.369)"
            },
            {
                "input": "find_closest_elements([6.545, 1.304, 2.802, 2.275, 9.414, 3.214])",
                "output": "(2.802, 3.214)"
            },
            {
                "input": "find_closest_elements([4.684, 1.291, 6.624, 7.021, 4.234])",
                "output": "(6.624, 7.021)"
            },
            {
                "input": "find_closest_elements([2.355, 5.36, 5.435, 9.968, 5.954])",
                "output": "(5.36, 5.435)"
            },
            {
                "input": "find_closest_elements([5.658, 6.558, 7.895, 8.161, 9.407, 3.14])",
                "output": "(7.895, 8.161)"
            },
            {
                "input": "find_closest_elements([5.96, 6.282, 7.125, 3.733, 5.066])",
                "output": "(5.96, 6.282)"
            },
            {
                "input": "find_closest_elements([5.508, 7.684, 2.845, 8.601, 5.973])",
                "output": "(5.508, 5.973)"
            },
            {
                "input": "find_closest_elements([6.296, 2.382, 8.904, 7.696, 1.686, 6.854])",
                "output": "(6.296, 6.854)"
            },
            {
                "input": "find_closest_elements([5.052, 2.518, 4.847, 5.006, 4.581])",
                "output": "(5.006, 5.052)"
            },
            {
                "input": "find_closest_elements([1.808, 3.99, 2.648, 8.19, 10.03, 3.08])",
                "output": "(2.648, 3.08)"
            },
            {
                "input": "find_closest_elements([4.109, 4.434, 10.408, 1.231, 7.809])",
                "output": "(4.109, 4.434)"
            },
            {
                "input": "find_closest_elements([4.259, 1.581, 7.663, 8.805, 6.09])",
                "output": "(7.663, 8.805)"
            },
            {
                "input": "find_closest_elements([3.986, 5.241, 4.771, 9.313, 2.081, 4.192])",
                "output": "(3.986, 4.192)"
            },
            {
                "input": "find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])",
                "output": "(2.0, 2.0)"
            },
            {
                "input": "find_closest_elements([1.0, 2.0, 5.9, 4.0, 5.0])",
                "output": "(5.0, 5.9)"
            },
            {
                "input": "find_closest_elements([3.657, 2.81, 9.353, 1.637, 2.389])",
                "output": "(2.389, 2.81)"
            },
            {
                "input": "find_closest_elements([4.476, 2.311, 7.797, 6.765, 8.914])",
                "output": "(6.765, 7.797)"
            },
            {
                "input": "find_closest_elements([6.26, 6.141, 7.317, 7.204, 4.595, 2.319])",
                "output": "(7.204, 7.317)"
            },
            {
                "input": "find_closest_elements([5.682, 3.588, 6.756, 2.2, 6.169, 7.427])",
                "output": "(5.682, 6.169)"
            },
            {
                "input": "find_closest_elements([2.511, 2.209, 5.873, 5.542, 9.527])",
                "output": "(2.209, 2.511)"
            },
            {
                "input": "find_closest_elements([2.332, 2.681, 2.23, 8.684, 9.103])",
                "output": "(2.23, 2.332)"
            },
            {
                "input": "find_closest_elements([1.476, 2.717, 8.239, 7.924, 3.257])",
                "output": "(7.924, 8.239)"
            },
            {
                "input": "find_closest_elements([1.846, 2.086, 8.878, 1.452, 5.541, 5.4])",
                "output": "(5.4, 5.541)"
            },
            {
                "input": "find_closest_elements([1.747, 1.138, 2.993, 8.012, 9.711])",
                "output": "(1.138, 1.747)"
            },
            {
                "input": "find_closest_elements([5.266, 2.316, 2.106, 4.695, 7.829, 5.356])",
                "output": "(5.266, 5.356)"
            },
            {
                "input": "find_closest_elements([5.491, 2.311, 4.077, 8.943, 10.549, 2.901])",
                "output": "(2.311, 2.901)"
            },
            {
                "input": "find_closest_elements([2.738, 4.255, 2.797, 5.502, 4.96, 1.763])",
                "output": "(2.738, 2.797)"
            },
            {
                "input": "find_closest_elements([1.922, 7.851, 6.952, 7.923, 10.47, 2.667])",
                "output": "(7.851, 7.923)"
            },
            {
                "input": "find_closest_elements([3.404, 6.53, 2.433, 8.401, 10.403, 5.454])",
                "output": "(2.433, 3.404)"
            },
            {
                "input": "find_closest_elements([2.221, 4.878, 3.058, 5.94, 3.965])",
                "output": "(2.221, 3.058)"
            },
            {
                "input": "find_closest_elements([2.04, 4.721, 1.829, 8.584, 9.484])",
                "output": "(1.829, 2.04)"
            },
            {
                "input": "find_closest_elements([3.328, 3.637, 1.28, 2.154, 1.604, 2.649])",
                "output": "(3.328, 3.637)"
            },
            {
                "input": "find_closest_elements([4.826, 2.942, 3.366, 8.937, 5.509])",
                "output": "(2.942, 3.366)"
            },
            {
                "input": "find_closest_elements([1.939, 3.796, 8.864, 1.91, 4.997, 1.083])",
                "output": "(1.91, 1.939)"
            },
            {
                "input": "find_closest_elements([6.173, 5.936, 1.726, 2.43, 6.691, 3.497])",
                "output": "(5.936, 6.173)"
            },
            {
                "input": "find_closest_elements([1.738, 4.294, 4.231, 5.973, 7.751])",
                "output": "(4.231, 4.294)"
            },
            {
                "input": "find_closest_elements([2.409, 5.139, 3.874, 6.67, 1.106])",
                "output": "(3.874, 5.139)"
            },
            {
                "input": "find_closest_elements([3.457, 4.679, 1.687, 7.789, 3.562])",
                "output": "(3.457, 3.562)"
            },
            {
                "input": "find_closest_elements([2.03, 2.964, 6.733, 2.896, 6.259])",
                "output": "(2.896, 2.964)"
            },
            {
                "input": "find_closest_elements([5.751, 7.791, 7.706, 9.224, 4.141, 3.511])",
                "output": "(7.706, 7.791)"
            },
            {
                "input": "find_closest_elements([4.543, 1.53, 2.265, 7.111, 5.605, 3.81])",
                "output": "(3.81, 4.543)"
            },
            {
                "input": "find_closest_elements([2.799, 5.734, 9.072, 8.167, 1.17])",
                "output": "(8.167, 9.072)"
            },
            {
                "input": "find_closest_elements([2.455, 6.483, 4.497, 8.124, 9.81, 7.223])",
                "output": "(6.483, 7.223)"
            },
            {
                "input": "find_closest_elements([4.419, 7.367, 1.304, 6.596, 1.457])",
                "output": "(1.304, 1.457)"
            },
            {
                "input": "find_closest_elements([4.055, 7.398, 8.972, 3.325, 10.781, 6.26])",
                "output": "(3.325, 4.055)"
            },
            {
                "input": "find_closest_elements([1.432, 4.03, 4.335, 4.673, 7.481, 1.211])",
                "output": "(1.211, 1.432)"
            },
            {
                "input": "find_closest_elements([3.035, 3.043, 6.939, 3.285, 8.417, 2.245])",
                "output": "(3.035, 3.043)"
            },
            {
                "input": "find_closest_elements([2.123, 7.816, 7.076, 3.267, 1.127, 6.14])",
                "output": "(7.076, 7.816)"
            },
            {
                "input": "find_closest_elements([1.886, 7.694, 1.523, 9.933, 1.796, 7.99])",
                "output": "(1.796, 1.886)"
            },
            {
                "input": "find_closest_elements([6.888, 6.146, 4.217, 7.785, 1.434, 5.675])",
                "output": "(5.675, 6.146)"
            },
            {
                "input": "find_closest_elements([6.289, 5.037, 6.63, 6.769, 7.718, 6.371])",
                "output": "(6.289, 6.371)"
            },
            {
                "input": "find_closest_elements([3.163, 7.088, 2.137, 8.142, 10.34, 4.478])",
                "output": "(2.137, 3.163)"
            },
            {
                "input": "find_closest_elements([2.431, 3.098, 3.198, 1.749, 3.08, 5.905])",
                "output": "(3.08, 3.098)"
            },
            {
                "input": "find_closest_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])",
                "output": "(3.9, 4.0)"
            },
            {
                "input": "find_closest_elements([1.583, 1.622, 3.267, 1.369, 9.183, 1.109])",
                "output": "(1.583, 1.622)"
            },
            {
                "input": "find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])",
                "output": "(2.0, 2.2)"
            },
            {
                "input": "find_closest_elements([1.167, 6.164, 1.599, 3.39, 2.371, 3.681])",
                "output": "(3.39, 3.681)"
            },
            {
                "input": "find_closest_elements([5.706, 4.372, 5.028, 6.128, 1.755, 1.426])",
                "output": "(1.426, 1.755)"
            },
            {
                "input": "find_closest_elements([6.549, 5.576, 1.734, 5.487, 10.576, 4.603])",
                "output": "(5.487, 5.576)"
            },
            {
                "input": "find_closest_elements([6.325, 3.072, 5.428, 7.297, 4.089, 5.66])",
                "output": "(5.428, 5.66)"
            },
            {
                "input": "find_closest_elements([5.585, 6.614, 3.842, 7.308, 1.869, 4.385])",
                "output": "(3.842, 4.385)"
            },
            {
                "input": "find_closest_elements([5.728, 5.369, 2.503, 1.725, 2.121, 5.613])",
                "output": "(5.613, 5.728)"
            },
            {
                "input": "find_closest_elements([2.861, 5.281, 10.635, 6.34, 9.942])",
                "output": "(9.942, 10.635)"
            },
            {
                "input": "find_closest_elements([2.02, 2.285, 5.994, 4.996, 10.628, 1.044])",
                "output": "(2.02, 2.285)"
            },
            {
                "input": "find_closest_elements([1.869, 7.234, 3.548, 4.517, 10.721, 2.386])",
                "output": "(1.869, 2.386)"
            },
            {
                "input": "find_closest_elements([2.651, 7.485, 7.842, 8.402, 3.653])",
                "output": "(7.485, 7.842)"
            },
            {
                "input": "find_closest_elements([5.656, 4.706, 6.049, 4.432, 10.071, 6.621])",
                "output": "(4.432, 4.706)"
            },
            {
                "input": "find_closest_elements([1.1, 2.2, 3.1, 4.1, 5.1])",
                "output": "(2.2, 3.1)"
            },
            {
                "input": "find_closest_elements([4.849, 6.916, 2.678, 8.661, 1.55])",
                "output": "(1.55, 2.678)"
            },
            {
                "input": "find_closest_elements([6.018, 3.681, 9.699, 4.695, 2.75])",
                "output": "(2.75, 3.681)"
            },
            {
                "input": "find_closest_elements([4.547, 4.481, 3.379, 1.256, 1.726, 1.324])",
                "output": "(4.481, 4.547)"
            },
            {
                "input": "find_closest_elements([6.716, 6.469, 6.587, 9.729, 8.598, 6.662])",
                "output": "(6.662, 6.716)"
            },
            {
                "input": "find_closest_elements([2.887, 7.782, 8.023, 5.004, 6.454, 7.722])",
                "output": "(7.722, 7.782)"
            },
            {
                "input": "find_closest_elements([1.917, 3.618, 5.743, 5.077, 4.788, 2.651])",
                "output": "(4.788, 5.077)"
            },
            {
                "input": "find_closest_elements([6.723, 1.347, 1.701, 9.386, 7.071, 4.776])",
                "output": "(6.723, 7.071)"
            },
            {
                "input": "find_closest_elements([5.663, 5.943, 3.838, 8.325, 3.551])",
                "output": "(5.663, 5.943)"
            }
        ]
    },
    {
        "problem_description": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
        "ground truth": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
        "instances": [
            {
                "input": "rescale_to_unit([101.4, 46.5])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([4.2, 54.2])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([7.3, 1.5, 9.5, 4.6, 1.2])",
                "output": "[0.7349397590361445, 0.03614457831325302, 1.0, 0.40963855421686735, 0.0]"
            },
            {
                "input": "rescale_to_unit([1.5, 44.9])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([8.0, 9.3, 17.1, 18.5, 10.5])",
                "output": "[0.0, 0.12380952380952388, 0.8666666666666668, 1.0, 0.23809523809523808]"
            },
            {
                "input": "rescale_to_unit([14.6, 6.7, 19.2, 13.8, 13.5])",
                "output": "[0.632, 0.0, 1.0, 0.5680000000000001, 0.544]"
            },
            {
                "input": "rescale_to_unit([6.3, 5.8, 7.5, 4.0, 9.7])",
                "output": "[0.4035087719298246, 0.3157894736842105, 0.6140350877192983, 0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([99.6, 50.1])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([102.1, 48.9])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([10.6, 9.8, 13.5, 15.4, 15.5])",
                "output": "[0.14035087719298228, 0.0, 0.6491228070175438, 0.9824561403508772, 1.0]"
            },
            {
                "input": "rescale_to_unit([11.6, 9.7, 12.4, 18.9, 9.4])",
                "output": "[0.23157894736842102, 0.03157894736842095, 0.31578947368421056, 1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([5.5, 5.6, 3.1, 8.0, 9.4])",
                "output": "[0.3809523809523809, 0.3968253968253967, 0.0, 0.7777777777777778, 1.0]"
            },
            {
                "input": "rescale_to_unit([95.4, 48.0])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([98.3, 48.9])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([5.0, 1.6, 9.0, 8.2, 7.2])",
                "output": "[0.45945945945945943, 0.0, 1.0, 0.8918918918918918, 0.7567567567567567]"
            },
            {
                "input": "rescale_to_unit([10.1, 14.1, 14.5, 9.1, 9.5])",
                "output": "[0.18518518518518517, 0.9259259259259258, 1.0, 0.0, 0.07407407407407414]"
            },
            {
                "input": "rescale_to_unit([12.2, 12.9, 12.4, 11.6, 16.9])",
                "output": "[0.11320754716981128, 0.24528301886792472, 0.15094339622641526, 0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([2.3, 3.4, 7.0, 6.8, 4.4])",
                "output": "[0.0, 0.23404255319148937, 1.0, 0.9574468085106382, 0.44680851063829796]"
            },
            {
                "input": "rescale_to_unit([4.9, 4.1, 7.1, 9.3, 10.0])",
                "output": "[0.13559322033898316, 0.0, 0.5084745762711864, 0.8813559322033899, 1.0]"
            },
            {
                "input": "rescale_to_unit([17.5, 17.0, 13.4, 10.5, 15.8])",
                "output": "[1.0, 0.9285714285714286, 0.4142857142857143, 0.0, 0.7571428571428572]"
            },
            {
                "input": "rescale_to_unit([2.1, 51.4])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([2.4, 51.4])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([10.3, 9.9, 18.2, 18.6, 15.0])",
                "output": "[0.04597701149425291, 0.0, 0.9540229885057468, 1.0, 0.586206896551724]"
            },
            {
                "input": "rescale_to_unit([7.8, 52.2])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([100.7, 49.1])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([2.5, 5.5, 10.2, 3.9, 4.4])",
                "output": "[0.0, 0.38961038961038963, 1.0, 0.18181818181818182, 0.24675324675324684]"
            },
            {
                "input": "rescale_to_unit([3.1, 6.8, 5.3, 5.4, 5.5])",
                "output": "[0.0, 1.0, 0.5945945945945945, 0.6216216216216217, 0.6486486486486487]"
            },
            {
                "input": "rescale_to_unit([1.6, 3.4, 5.5, 9.4, 7.2])",
                "output": "[0.0, 0.23076923076923073, 0.49999999999999994, 1.0, 0.7179487179487178]"
            },
            {
                "input": "rescale_to_unit([5.0, 3.8, 8.2, 3.9, 1.1])",
                "output": "[0.5492957746478874, 0.38028169014084506, 1.0, 0.39436619718309857, 0.0]"
            },
            {
                "input": "rescale_to_unit([3.2, 51.8])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([12.0, 11.0, 15.0, 13.0, 14.0])",
                "output": "[0.25, 0.0, 1.0, 0.5, 0.75]"
            },
            {
                "input": "rescale_to_unit([4.9, 46.2])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([10.1, 12.6, 10.2, 16.8, 11.1])",
                "output": "[0.0, 0.3731343283582089, 0.014925373134328302, 1.0, 0.14925373134328357]"
            },
            {
                "input": "rescale_to_unit([105.8, 45.3])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([2.5, 54.9])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([2.5, 2.1, 4.3, 7.7, 9.7])",
                "output": "[0.05263157894736841, 0.0, 0.28947368421052627, 0.7368421052631579, 1.0]"
            },
            {
                "input": "rescale_to_unit([7.1, 4.6, 6.9, 5.1, 4.6])",
                "output": "[1.0, 0.0, 0.9200000000000003, 0.2, 0.0]"
            },
            {
                "input": "rescale_to_unit([2.1, 3.9, 4.9, 8.0, 3.4])",
                "output": "[0.0, 0.30508474576271183, 0.4745762711864407, 1.0, 0.22033898305084743]"
            },
            {
                "input": "rescale_to_unit([6.1, 6.1, 8.0, 6.4, 8.7])",
                "output": "[0.0, 0.0, 0.7307692307692311, 0.11538461538461567, 1.0]"
            },
            {
                "input": "rescale_to_unit([6.2, 53.8])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([9.7, 7.6, 13.7, 8.1, 10.3])",
                "output": "[0.34426229508196715, 0.0, 1.0, 0.0819672131147541, 0.44262295081967235]"
            },
            {
                "input": "rescale_to_unit([2.9, 5.9, 10.7, 3.0, 3.1])",
                "output": "[0.0, 0.38461538461538475, 1.0, 0.012820512820512834, 0.025641025641025668]"
            },
            {
                "input": "rescale_to_unit([7.6, 6.9, 7.0, 2.7, 4.9])",
                "output": "[1.0, 0.8571428571428573, 0.8775510204081634, 0.0, 0.4489795918367348]"
            },
            {
                "input": "rescale_to_unit([15.7, 12.5, 16.1, 8.7, 9.6])",
                "output": "[0.9459459459459457, 0.5135135135135135, 1.0, 0.0, 0.12162162162162163]"
            },
            {
                "input": "rescale_to_unit([6.5, 2.9, 6.4, 6.8, 1.0])",
                "output": "[0.9482758620689655, 0.3275862068965517, 0.9310344827586208, 1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([12.3, 14.5, 18.1, 18.3, 10.4])",
                "output": "[0.24050632911392408, 0.5189873417721518, 0.9746835443037976, 1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([6.2, 3.3, 2.1, 1.5, 5.7])",
                "output": "[1.0, 0.38297872340425526, 0.12765957446808512, 0.0, 0.8936170212765957]"
            },
            {
                "input": "rescale_to_unit([102.0, 48.9])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([100.0, 49.9])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([97.0, 52.7])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([16.2, 16.6, 16.6, 12.8, 18.2])",
                "output": "[0.6296296296296295, 0.703703703703704, 0.703703703703704, 0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([5.4, 1.8, 4.4, 7.7, 2.8])",
                "output": "[0.6101694915254238, 0.0, 0.44067796610169496, 1.0, 0.16949152542372878]"
            },
            {
                "input": "rescale_to_unit([98.8, 50.6])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([5.9, 2.9, 8.4, 9.6, 6.9])",
                "output": "[0.4477611940298509, 0.0, 0.8208955223880597, 1.0, 0.5970149253731344]"
            },
            {
                "input": "rescale_to_unit([7.0, 52.8])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([13.5, 11.1, 16.3, 15.7, 14.2])",
                "output": "[0.4615384615384615, 0.0, 1.0, 0.8846153846153844, 0.5961538461538459]"
            },
            {
                "input": "rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])",
                "output": "[0.0, 0.25, 0.5, 0.75, 1.0]"
            },
            {
                "input": "rescale_to_unit([4.6, 5.9, 2.8, 5.2, 11.0])",
                "output": "[0.21951219512195122, 0.378048780487805, 0.0, 0.2926829268292684, 1.0]"
            },
            {
                "input": "rescale_to_unit([2.0, 49.9])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([17.6, 8.7, 12.8, 9.2, 17.0])",
                "output": "[1.0, 0.0, 0.46067415730337086, 0.05617977528089886, 0.9325842696629212]"
            },
            {
                "input": "rescale_to_unit([6.7, 47.3])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([7.3, 7.4, 16.1, 10.7, 18.0])",
                "output": "[0.0, 0.009345794392523414, 0.8224299065420562, 0.3177570093457944, 1.0]"
            },
            {
                "input": "rescale_to_unit([1.6, 1.6, 4.7, 8.8, 6.6])",
                "output": "[0.0, 0.0, 0.4305555555555555, 1.0, 0.6944444444444443]"
            },
            {
                "input": "rescale_to_unit([3.5, 2.8, 8.2, 9.8, 6.8])",
                "output": "[0.10000000000000002, 0.0, 0.7714285714285712, 1.0, 0.5714285714285714]"
            },
            {
                "input": "rescale_to_unit([4.4, 2.6, 2.1, 7.0, 2.4])",
                "output": "[0.46938775510204084, 0.1020408163265306, 0.0, 1.0, 0.061224489795918324]"
            },
            {
                "input": "rescale_to_unit([1.9, 4.8, 3.2, 4.3, 1.4])",
                "output": "[0.14705882352941177, 1.0, 0.5294117647058825, 0.8529411764705882, 0.0]"
            },
            {
                "input": "rescale_to_unit([98.1, 46.8])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([105.5, 53.2])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([15.4, 13.2, 13.8, 17.0, 17.9])",
                "output": "[0.468085106382979, 0.0, 0.12765957446808543, 0.8085106382978726, 1.0]"
            },
            {
                "input": "rescale_to_unit([11.4, 11.3, 14.4, 18.1, 9.6])",
                "output": "[0.211764705882353, 0.2000000000000001, 0.5647058823529412, 1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([4.6, 4.5, 5.5, 2.4, 5.1])",
                "output": "[0.7096774193548386, 0.6774193548387097, 1.0, 0.0, 0.8709677419354838]"
            },
            {
                "input": "rescale_to_unit([95.7, 53.0])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([4.3, 4.4, 6.1, 8.4, 1.2])",
                "output": "[0.43055555555555547, 0.4444444444444445, 0.6805555555555555, 1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([5.0, 6.9, 8.3, 7.9, 6.9])",
                "output": "[0.0, 0.5757575757575757, 1.0, 0.8787878787878787, 0.5757575757575757]"
            },
            {
                "input": "rescale_to_unit([96.2, 53.9])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([4.2, 47.3])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([6.6, 1.6, 1.3, 6.9, 2.3])",
                "output": "[0.9464285714285713, 0.053571428571428575, 0.0, 1.0, 0.17857142857142852]"
            },
            {
                "input": "rescale_to_unit([6.1, 50.2])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([1.5, 1.4, 8.1, 4.2, 6.7])",
                "output": "[0.014925373134328374, 0.0, 1.0, 0.4179104477611941, 0.7910447761194032]"
            },
            {
                "input": "rescale_to_unit([100.4, 49.3])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([4.6, 5.7, 10.7, 5.4, 4.4])",
                "output": "[0.03174603174603164, 0.20634920634920637, 1.0, 0.15873015873015875, 0.0]"
            },
            {
                "input": "rescale_to_unit([3.4, 7.5, 6.4, 5.1, 10.6])",
                "output": "[0.0, 0.5694444444444444, 0.4166666666666668, 0.2361111111111111, 1.0]"
            },
            {
                "input": "rescale_to_unit([3.7, 1.2, 6.7, 3.4, 8.2])",
                "output": "[0.3571428571428572, 0.0, 0.7857142857142858, 0.31428571428571433, 1.0]"
            },
            {
                "input": "rescale_to_unit([1.3, 46.5])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([5.8, 6.5, 5.7, 1.4, 9.9])",
                "output": "[0.5176470588235295, 0.6, 0.5058823529411766, 0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([5.5, 46.2])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([3.7, 3.9, 1.2, 4.6, 7.1])",
                "output": "[0.42372881355932207, 0.45762711864406785, 0.0, 0.5762711864406779, 1.0]"
            },
            {
                "input": "rescale_to_unit([4.1, 51.2])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([4.4, 50.9])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([5.1, 5.6, 7.5, 4.7, 2.2])",
                "output": "[0.5471698113207546, 0.6415094339622641, 1.0, 0.4716981132075472, 0.0]"
            },
            {
                "input": "rescale_to_unit([105.8, 45.9])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([100.4, 48.1])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([102.9, 44.8])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([5.9, 4.4, 1.4, 3.4, 2.8])",
                "output": "[1.0, 0.6666666666666667, 0.0, 0.4444444444444444, 0.3111111111111111]"
            },
            {
                "input": "rescale_to_unit([7.2, 49.3])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([99.9, 47.9])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([7.5, 1.1, 2.9, 7.4, 5.1])",
                "output": "[1.0, 0.0, 0.28124999999999994, 0.9843750000000001, 0.6249999999999999]"
            },
            {
                "input": "rescale_to_unit([3.3, 4.4, 8.8, 2.9, 1.7])",
                "output": "[0.22535211267605632, 0.38028169014084506, 1.0, 0.16901408450704222, 0.0]"
            },
            {
                "input": "rescale_to_unit([2.0, 1.0, 5.0, 3.0, 4.0])",
                "output": "[0.25, 0.0, 1.0, 0.5, 0.75]"
            },
            {
                "input": "rescale_to_unit([2.5, 4.4, 8.0, 3.4, 10.2])",
                "output": "[0.0, 0.24675324675324684, 0.7142857142857143, 0.11688311688311688, 1.0]"
            },
            {
                "input": "rescale_to_unit([1.3, 5.4, 1.8, 4.3, 8.7])",
                "output": "[0.0, 0.5540540540540542, 0.06756756756756757, 0.40540540540540543, 1.0]"
            },
            {
                "input": "rescale_to_unit([102.4, 46.0])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([16.1, 13.0, 15.9, 9.1, 15.3])",
                "output": "[1.0, 0.557142857142857, 0.9714285714285713, 0.0, 0.8857142857142857]"
            },
            {
                "input": "rescale_to_unit([10.9, 13.2, 20.2, 11.2, 11.2])",
                "output": "[0.0, 0.24731182795698917, 1.0, 0.03225806451612892, 0.03225806451612892]"
            },
            {
                "input": "rescale_to_unit([1.0, 48.4])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([103.9, 44.1])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([7.9, 50.7])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([3.2, 2.1, 1.6, 6.4, 3.7])",
                "output": "[0.3333333333333333, 0.10416666666666666, 0.0, 1.0, 0.43749999999999994]"
            },
            {
                "input": "rescale_to_unit([12.4, 8.1, 15.5, 14.4, 15.1])",
                "output": "[0.5810810810810811, 0.0, 1.0, 0.8513513513513514, 0.9459459459459459]"
            },
            {
                "input": "rescale_to_unit([7.3, 7.5, 19.8, 18.8, 12.9])",
                "output": "[0.0, 0.016000000000000014, 1.0, 0.92, 0.44800000000000006]"
            },
            {
                "input": "rescale_to_unit([4.5, 5.1, 8.1, 7.0, 8.3])",
                "output": "[0.0, 0.15789473684210514, 0.9473684210526313, 0.6578947368421051, 1.0]"
            },
            {
                "input": "rescale_to_unit([2.9, 1.1, 1.7, 7.1, 4.6])",
                "output": "[0.3, 0.0, 0.09999999999999998, 1.0, 0.5833333333333333]"
            },
            {
                "input": "rescale_to_unit([17.6, 14.9, 12.4, 9.6, 14.2])",
                "output": "[1.0, 0.6625, 0.35000000000000003, 0.0, 0.5749999999999998]"
            },
            {
                "input": "rescale_to_unit([4.7, 51.3])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([2.8, 4.8, 4.5, 1.8, 1.7])",
                "output": "[0.3548387096774194, 1.0, 0.903225806451613, 0.032258064516129066, 0.0]"
            },
            {
                "input": "rescale_to_unit([5.7, 2.2, 4.7, 8.7, 7.8])",
                "output": "[0.5384615384615385, 0.0, 0.3846153846153847, 1.0, 0.8615384615384616]"
            },
            {
                "input": "rescale_to_unit([95.6, 46.0])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([104.6, 46.0])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([7.4, 45.9])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([7.0, 51.8])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([9.7, 13.8, 18.7, 15.3, 14.7])",
                "output": "[0.0, 0.4555555555555557, 1.0, 0.6222222222222223, 0.5555555555555556]"
            },
            {
                "input": "rescale_to_unit([5.7, 44.3])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([1.2, 52.9])",
                "output": "[0.0, 1.0]"
            },
            {
                "input": "rescale_to_unit([2.4, 3.2, 3.7, 8.2, 1.1])",
                "output": "[0.18309859154929575, 0.295774647887324, 0.36619718309859156, 1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([103.9, 51.6])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([102.3, 47.4])",
                "output": "[1.0, 0.0]"
            },
            {
                "input": "rescale_to_unit([2.6, 3.9, 10.6, 3.8, 9.3])",
                "output": "[0.0, 0.16249999999999998, 1.0, 0.14999999999999997, 0.8375000000000001]"
            },
            {
                "input": "rescale_to_unit([4.3, 2.5, 1.2, 4.0, 8.5])",
                "output": "[0.4246575342465753, 0.17808219178082194, 0.0, 0.3835616438356164, 1.0]"
            },
            {
                "input": "rescale_to_unit([7.2, 8.7, 11.8, 16.6, 14.9])",
                "output": "[0.0, 0.15957446808510625, 0.4893617021276595, 1.0, 0.8191489361702126]"
            },
            {
                "input": "rescale_to_unit([6.5, 4.5, 8.2, 6.4, 10.1])",
                "output": "[0.35714285714285715, 0.0, 0.6607142857142856, 0.33928571428571436, 1.0]"
            }
        ]
    },
    {
        "problem_description": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
        "ground truth": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n",
        "instances": []
    },
    {
        "problem_description": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
        "ground truth": "def strlen(string: str) -> int:\n    return len(string)\n",
        "instances": [
            {
                "input": "strlen(\"xjtufvdxuuo\")",
                "output": "11"
            },
            {
                "input": "strlen(\"iiapjyy\")",
                "output": "7"
            },
            {
                "input": "strlen(\"xl\")",
                "output": "2"
            },
            {
                "input": "strlen(\"k\")",
                "output": "1"
            },
            {
                "input": "strlen(\"y\")",
                "output": "1"
            },
            {
                "input": "strlen(\"ju\")",
                "output": "2"
            },
            {
                "input": "strlen(\"vc\")",
                "output": "2"
            },
            {
                "input": "strlen(\"ppfoxwul\")",
                "output": "8"
            },
            {
                "input": "strlen(\"zoxeghlpn\")",
                "output": "9"
            },
            {
                "input": "strlen(\"he\")",
                "output": "2"
            },
            {
                "input": "strlen(\"ocgxuaooxl\")",
                "output": "10"
            },
            {
                "input": "strlen(\"atxezdbptfkmt\")",
                "output": "13"
            },
            {
                "input": "strlen(\"n\")",
                "output": "1"
            },
            {
                "input": "strlen(\"w\")",
                "output": "1"
            },
            {
                "input": "strlen(\"ovx\")",
                "output": "3"
            },
            {
                "input": "strlen(\"ucwkvbqsngpf\")",
                "output": "12"
            },
            {
                "input": "strlen(\"nda\")",
                "output": "3"
            },
            {
                "input": "strlen(\"ri\")",
                "output": "2"
            },
            {
                "input": "strlen(\"a\")",
                "output": "1"
            },
            {
                "input": "strlen(\"mltzwtijfa\")",
                "output": "10"
            },
            {
                "input": "strlen(\"eldxchtrwpt\")",
                "output": "11"
            },
            {
                "input": "strlen(\"hctqxmha\")",
                "output": "8"
            },
            {
                "input": "strlen(\"hf\")",
                "output": "2"
            },
            {
                "input": "strlen('')",
                "output": "0"
            },
            {
                "input": "strlen(\"vnaevhphi\")",
                "output": "9"
            },
            {
                "input": "strlen(\"sk\")",
                "output": "2"
            },
            {
                "input": "strlen(\"gtamobyhrvxgvsr\")",
                "output": "15"
            },
            {
                "input": "strlen(\"ktb\")",
                "output": "3"
            },
            {
                "input": "strlen(\"o\")",
                "output": "1"
            },
            {
                "input": "strlen(\"tov\")",
                "output": "3"
            },
            {
                "input": "strlen(\"lvgulxd\")",
                "output": "7"
            },
            {
                "input": "strlen(\"htu\")",
                "output": "3"
            },
            {
                "input": "strlen(\"z\")",
                "output": "1"
            },
            {
                "input": "strlen(\"fghpnpcwbtt\")",
                "output": "11"
            },
            {
                "input": "strlen(\"zpjtjbmjiapixsz\")",
                "output": "15"
            },
            {
                "input": "strlen(\"lcyfivgvsc\")",
                "output": "10"
            },
            {
                "input": "strlen(\"ib\")",
                "output": "2"
            },
            {
                "input": "strlen(\"nys\")",
                "output": "3"
            },
            {
                "input": "strlen(\"t\")",
                "output": "1"
            },
            {
                "input": "strlen(\"pf\")",
                "output": "2"
            },
            {
                "input": "strlen(\"f\")",
                "output": "1"
            },
            {
                "input": "strlen(\"c\")",
                "output": "1"
            },
            {
                "input": "strlen(\"q\")",
                "output": "1"
            },
            {
                "input": "strlen(\"qoaiffxdphe\")",
                "output": "11"
            },
            {
                "input": "strlen(\"b\")",
                "output": "1"
            },
            {
                "input": "strlen(\"irxccu\")",
                "output": "6"
            },
            {
                "input": "strlen(\"e\")",
                "output": "1"
            },
            {
                "input": "strlen(\"synqrbip\")",
                "output": "8"
            },
            {
                "input": "strlen(\"bgrmakcbqpwyi\")",
                "output": "13"
            },
            {
                "input": "strlen(\"ysgcoonffvro\")",
                "output": "12"
            },
            {
                "input": "strlen(\"yb\")",
                "output": "2"
            },
            {
                "input": "strlen(\"yzzbses\")",
                "output": "7"
            },
            {
                "input": "strlen(\"uikrinzshur\")",
                "output": "11"
            },
            {
                "input": "strlen(\"gok\")",
                "output": "3"
            },
            {
                "input": "strlen(\"wmgueqfzkeltnzs\")",
                "output": "15"
            },
            {
                "input": "strlen(\"d\")",
                "output": "1"
            },
            {
                "input": "strlen(\"ul\")",
                "output": "2"
            },
            {
                "input": "strlen(\"ayl\")",
                "output": "3"
            },
            {
                "input": "strlen(\"m\")",
                "output": "1"
            },
            {
                "input": "strlen(\"j\")",
                "output": "1"
            },
            {
                "input": "strlen(\"dktbzie\")",
                "output": "7"
            },
            {
                "input": "strlen(\"ayuzaiwhczpz\")",
                "output": "12"
            },
            {
                "input": "strlen(\"mlibcojl\")",
                "output": "8"
            },
            {
                "input": "strlen(\"zq\")",
                "output": "2"
            },
            {
                "input": "strlen(\"hnleeqiivdnkcmg\")",
                "output": "15"
            },
            {
                "input": "strlen(\"zdr\")",
                "output": "3"
            },
            {
                "input": "strlen(\"v\")",
                "output": "1"
            },
            {
                "input": "strlen('asdasnakj')",
                "output": "9"
            },
            {
                "input": "strlen(\"luvpxrpa\")",
                "output": "8"
            },
            {
                "input": "strlen(\"wmprqbpl\")",
                "output": "8"
            },
            {
                "input": "strlen(\"xt\")",
                "output": "2"
            },
            {
                "input": "strlen(\"nkcxhu\")",
                "output": "6"
            },
            {
                "input": "strlen(\"u\")",
                "output": "1"
            },
            {
                "input": "strlen(\"s\")",
                "output": "1"
            },
            {
                "input": "strlen(\"ukycdfhgxcltpl\")",
                "output": "14"
            },
            {
                "input": "strlen(\"rt\")",
                "output": "2"
            },
            {
                "input": "strlen(\"jjw\")",
                "output": "3"
            },
            {
                "input": "strlen(\"dag\")",
                "output": "3"
            },
            {
                "input": "strlen(\"awa\")",
                "output": "3"
            },
            {
                "input": "strlen(\"rnlrddf\")",
                "output": "7"
            },
            {
                "input": "strlen('x')",
                "output": "1"
            },
            {
                "input": "strlen(\"ucomfyiviag\")",
                "output": "11"
            },
            {
                "input": "strlen(\"ioxinphe\")",
                "output": "8"
            },
            {
                "input": "strlen(\"ljrzldsvk\")",
                "output": "9"
            },
            {
                "input": "strlen(\"ebs\")",
                "output": "3"
            },
            {
                "input": "strlen(\"kehslysfoychuai\")",
                "output": "15"
            },
            {
                "input": "strlen(\"bfk\")",
                "output": "3"
            },
            {
                "input": "strlen(\"frawhhhlnxbht\")",
                "output": "13"
            },
            {
                "input": "strlen(\"mlymvigwgp\")",
                "output": "10"
            },
            {
                "input": "strlen(\"kvkjlinq\")",
                "output": "8"
            },
            {
                "input": "strlen(\"stf\")",
                "output": "3"
            },
            {
                "input": "strlen(\"jogcyuitzjrvh\")",
                "output": "13"
            },
            {
                "input": "strlen(\"i\")",
                "output": "1"
            },
            {
                "input": "strlen(\"zrmygypu\")",
                "output": "8"
            }
        ]
    },
    {
        "problem_description": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "ground truth": "def largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
        "instances": [
            {
                "input": "largest_divisor(97)",
                "output": "1"
            },
            {
                "input": "largest_divisor(53)",
                "output": "1"
            },
            {
                "input": "largest_divisor(103)",
                "output": "1"
            },
            {
                "input": "largest_divisor(14)",
                "output": "7"
            },
            {
                "input": "largest_divisor(101)",
                "output": "1"
            },
            {
                "input": "largest_divisor(11)",
                "output": "1"
            },
            {
                "input": "largest_divisor(9)",
                "output": "3"
            },
            {
                "input": "largest_divisor(13)",
                "output": "1"
            },
            {
                "input": "largest_divisor(4)",
                "output": "2"
            },
            {
                "input": "largest_divisor(49)",
                "output": "7"
            },
            {
                "input": "largest_divisor(45)",
                "output": "15"
            },
            {
                "input": "largest_divisor(100)",
                "output": "50"
            },
            {
                "input": "largest_divisor(8)",
                "output": "4"
            },
            {
                "input": "largest_divisor(105)",
                "output": "35"
            },
            {
                "input": "largest_divisor(48)",
                "output": "24"
            },
            {
                "input": "largest_divisor(3)",
                "output": "1"
            },
            {
                "input": "largest_divisor(15)",
                "output": "5"
            },
            {
                "input": "largest_divisor(47)",
                "output": "1"
            },
            {
                "input": "largest_divisor(2)",
                "output": "1"
            },
            {
                "input": "largest_divisor(46)",
                "output": "23"
            },
            {
                "input": "largest_divisor(99)",
                "output": "33"
            },
            {
                "input": "largest_divisor(104)",
                "output": "52"
            },
            {
                "input": "largest_divisor(54)",
                "output": "27"
            },
            {
                "input": "largest_divisor(7)",
                "output": "1"
            },
            {
                "input": "largest_divisor(51)",
                "output": "17"
            },
            {
                "input": "largest_divisor(5)",
                "output": "1"
            },
            {
                "input": "largest_divisor(10)",
                "output": "5"
            },
            {
                "input": "largest_divisor(12)",
                "output": "6"
            },
            {
                "input": "largest_divisor(102)",
                "output": "51"
            },
            {
                "input": "largest_divisor(44)",
                "output": "22"
            },
            {
                "input": "largest_divisor(6)",
                "output": "3"
            },
            {
                "input": "largest_divisor(98)",
                "output": "49"
            },
            {
                "input": "largest_divisor(95)",
                "output": "19"
            }
        ]
    },
    {
        "problem_description": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "ground truth": "def factorize(n: int) -> List[int]:\n    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
        "instances": [
            {
                "input": "factorize(184432)",
                "output": "[2, 2, 2, 2, 11527]"
            },
            {
                "input": "factorize(21448)",
                "output": "[2, 2, 2, 7, 383]"
            },
            {
                "input": "factorize(20929)",
                "output": "[20929]"
            },
            {
                "input": "factorize(20270)",
                "output": "[2, 5, 2027]"
            },
            {
                "input": "factorize(3 * 19 * 3 * 19 * 3 * 19)",
                "output": "[3, 3, 3, 19, 19, 19]"
            },
            {
                "input": "factorize(19879)",
                "output": "[103, 193]"
            },
            {
                "input": "factorize(185324)",
                "output": "[2, 2, 107, 433]"
            },
            {
                "input": "factorize(23)",
                "output": "[23]"
            },
            {
                "input": "factorize(4065)",
                "output": "[3, 5, 271]"
            },
            {
                "input": "factorize(3)",
                "output": "[3]"
            },
            {
                "input": "factorize(2894)",
                "output": "[2, 1447]"
            },
            {
                "input": "factorize(184240)",
                "output": "[2, 2, 2, 2, 5, 7, 7, 47]"
            },
            {
                "input": "factorize(20902)",
                "output": "[2, 7, 1493]"
            },
            {
                "input": "factorize(2344)",
                "output": "[2, 2, 2, 293]"
            },
            {
                "input": "factorize(56)",
                "output": "[2, 2, 2, 7]"
            },
            {
                "input": "factorize(20475)",
                "output": "[3, 3, 5, 5, 7, 13]"
            },
            {
                "input": "factorize(2939)",
                "output": "[2939]"
            },
            {
                "input": "factorize(12)",
                "output": "[2, 2, 3]"
            },
            {
                "input": "factorize(186028)",
                "output": "[2, 2, 46507]"
            },
            {
                "input": "factorize(20229)",
                "output": "[3, 11, 613]"
            },
            {
                "input": "factorize(2)",
                "output": "[2]"
            },
            {
                "input": "factorize(3307)",
                "output": "[3307]"
            },
            {
                "input": "factorize(6)",
                "output": "[2, 3]"
            },
            {
                "input": "factorize(185940)",
                "output": "[2, 2, 3, 3, 5, 1033]"
            },
            {
                "input": "factorize(16)",
                "output": "[2, 2, 2, 2]"
            },
            {
                "input": "factorize(185036)",
                "output": "[2, 2, 167, 277]"
            },
            {
                "input": "factorize(20807)",
                "output": "[20807]"
            },
            {
                "input": "factorize(22)",
                "output": "[2, 11]"
            },
            {
                "input": "factorize(13)",
                "output": "[13]"
            },
            {
                "input": "factorize(8)",
                "output": "[2, 2, 2]"
            },
            {
                "input": "factorize(185618)",
                "output": "[2, 92809]"
            },
            {
                "input": "factorize(3688)",
                "output": "[2, 2, 2, 461]"
            },
            {
                "input": "factorize(184579)",
                "output": "[131, 1409]"
            },
            {
                "input": "factorize(185555)",
                "output": "[5, 17, 37, 59]"
            },
            {
                "input": "factorize(54)",
                "output": "[2, 3, 3, 3]"
            },
            {
                "input": "factorize(185970)",
                "output": "[2, 3, 5, 6199]"
            },
            {
                "input": "factorize(184152)",
                "output": "[2, 2, 2, 3, 7673]"
            },
            {
                "input": "factorize(21091)",
                "output": "[7, 23, 131]"
            },
            {
                "input": "factorize(3 * 2 * 3)",
                "output": "[2, 3, 3]"
            },
            {
                "input": "factorize(2373)",
                "output": "[3, 7, 113]"
            },
            {
                "input": "factorize(21236)",
                "output": "[2, 2, 5309]"
            },
            {
                "input": "factorize(9)",
                "output": "[3, 3]"
            },
            {
                "input": "factorize(55)",
                "output": "[5, 11]"
            },
            {
                "input": "factorize(1)",
                "output": "[]"
            },
            {
                "input": "factorize(58)",
                "output": "[2, 29]"
            },
            {
                "input": "factorize(19)",
                "output": "[19]"
            },
            {
                "input": "factorize(3 * 19 * 19 * 19)",
                "output": "[3, 19, 19, 19]"
            },
            {
                "input": "factorize(3 * 19)",
                "output": "[3, 19]"
            },
            {
                "input": "factorize(61)",
                "output": "[61]"
            },
            {
                "input": "factorize(184984)",
                "output": "[2, 2, 2, 19, 1217]"
            },
            {
                "input": "factorize(10)",
                "output": "[2, 5]"
            },
            {
                "input": "factorize(19605)",
                "output": "[3, 5, 1307]"
            },
            {
                "input": "factorize(20094)",
                "output": "[2, 3, 17, 197]"
            },
            {
                "input": "factorize(3691)",
                "output": "[3691]"
            },
            {
                "input": "factorize(19880)",
                "output": "[2, 2, 2, 5, 7, 71]"
            },
            {
                "input": "factorize(185592)",
                "output": "[2, 2, 2, 3, 11, 19, 37]"
            },
            {
                "input": "factorize(15)",
                "output": "[3, 5]"
            },
            {
                "input": "factorize(2719)",
                "output": "[2719]"
            },
            {
                "input": "factorize(3 * 19 * 3 * 19)",
                "output": "[3, 3, 19, 19]"
            },
            {
                "input": "factorize(5)",
                "output": "[5]"
            },
            {
                "input": "factorize(7)",
                "output": "[7]"
            },
            {
                "input": "factorize(52)",
                "output": "[2, 2, 13]"
            },
            {
                "input": "factorize(4)",
                "output": "[2, 2]"
            },
            {
                "input": "factorize(14)",
                "output": "[2, 7]"
            },
            {
                "input": "factorize(3905)",
                "output": "[5, 11, 71]"
            },
            {
                "input": "factorize(184219)",
                "output": "[7, 26317]"
            },
            {
                "input": "factorize(3116)",
                "output": "[2, 2, 19, 41]"
            },
            {
                "input": "factorize(19825)",
                "output": "[5, 5, 13, 61]"
            },
            {
                "input": "factorize(62)",
                "output": "[2, 31]"
            },
            {
                "input": "factorize(4019)",
                "output": "[4019]"
            },
            {
                "input": "factorize(185727)",
                "output": "[3, 61909]"
            },
            {
                "input": "factorize(2979)",
                "output": "[3, 3, 331]"
            },
            {
                "input": "factorize(20644)",
                "output": "[2, 2, 13, 397]"
            },
            {
                "input": "factorize(2690)",
                "output": "[2, 5, 269]"
            },
            {
                "input": "factorize(2438)",
                "output": "[2, 23, 53]"
            }
        ]
    },
    {
        "problem_description": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
        "ground truth": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
        "instances": [
            {
                "input": "remove_duplicates([5, 2, 6, 7, 4, 1, 3])",
                "output": "[5, 2, 6, 7, 4, 1, 3]"
            },
            {
                "input": "remove_duplicates([5, 3, 2, 1])",
                "output": "[5, 3, 2, 1]"
            },
            {
                "input": "remove_duplicates([2, 6, 3, 7])",
                "output": "[2, 6, 3, 7]"
            },
            {
                "input": "remove_duplicates([1, 3, 4, 2])",
                "output": "[1, 3, 4, 2]"
            },
            {
                "input": "remove_duplicates([3, 1, 8, 7])",
                "output": "[3, 1, 8, 7]"
            },
            {
                "input": "remove_duplicates([6, 6, 3, 4, 3, 1, 3])",
                "output": "[4, 1]"
            },
            {
                "input": "remove_duplicates([4, 2, 5, 2])",
                "output": "[4, 5]"
            },
            {
                "input": "remove_duplicates([1, 7, 2, 4, 2, 4, 8])",
                "output": "[1, 7, 8]"
            },
            {
                "input": "remove_duplicates([6, 6, 6, 5])",
                "output": "[5]"
            },
            {
                "input": "remove_duplicates([3, 7, 3, 7, 5, 2, 4])",
                "output": "[5, 2, 4]"
            },
            {
                "input": "remove_duplicates([3, 5, 6, 6])",
                "output": "[3, 5]"
            },
            {
                "input": "remove_duplicates([5, 1, 1, 6, 8, 7, 3])",
                "output": "[5, 6, 8, 7, 3]"
            },
            {
                "input": "remove_duplicates([4, 4, 5, 4, 3, 8, 9])",
                "output": "[5, 3, 8, 9]"
            },
            {
                "input": "remove_duplicates([6, 1, 7, 5, 4, 3, 9])",
                "output": "[6, 1, 7, 5, 4, 3, 9]"
            },
            {
                "input": "remove_duplicates([5, 5, 2, 3])",
                "output": "[2, 3]"
            },
            {
                "input": "remove_duplicates([1, 1, 6, 6])",
                "output": "[]"
            },
            {
                "input": "remove_duplicates([1, 3, 4, 8])",
                "output": "[1, 3, 4, 8]"
            },
            {
                "input": "remove_duplicates([6, 1, 8, 6])",
                "output": "[1, 8]"
            },
            {
                "input": "remove_duplicates([2, 2, 4, 5])",
                "output": "[4, 5]"
            },
            {
                "input": "remove_duplicates([3, 1, 2, 3])",
                "output": "[1, 2]"
            },
            {
                "input": "remove_duplicates([4, 1, 2, 6, 7, 5, 3])",
                "output": "[4, 1, 2, 6, 7, 5, 3]"
            },
            {
                "input": "remove_duplicates([4, 6, 8, 3, 1, 8, 3])",
                "output": "[4, 6, 1]"
            },
            {
                "input": "remove_duplicates([4, 1, 1, 3, 1, 6, 8])",
                "output": "[4, 3, 6, 8]"
            },
            {
                "input": "remove_duplicates([2, 4, 6, 1, 1, 1, 2])",
                "output": "[4, 6]"
            },
            {
                "input": "remove_duplicates([3, 6, 8, 6])",
                "output": "[3, 8]"
            },
            {
                "input": "remove_duplicates([4, 2, 5, 8])",
                "output": "[4, 2, 5, 8]"
            },
            {
                "input": "remove_duplicates([1, 1, 5, 2, 2, 6, 7])",
                "output": "[5, 6, 7]"
            },
            {
                "input": "remove_duplicates([1, 2, 2, 8])",
                "output": "[1, 8]"
            },
            {
                "input": "remove_duplicates([1, 2, 4, 4, 3, 1, 6])",
                "output": "[2, 3, 6]"
            },
            {
                "input": "remove_duplicates([2, 6, 7, 9])",
                "output": "[2, 6, 7, 9]"
            },
            {
                "input": "remove_duplicates([1, 2, 3, 2, 4, 3, 5])",
                "output": "[1, 4, 5]"
            },
            {
                "input": "remove_duplicates([6, 2, 7, 2])",
                "output": "[6, 7]"
            },
            {
                "input": "remove_duplicates([6, 7, 3, 6])",
                "output": "[7, 3]"
            },
            {
                "input": "remove_duplicates([1, 7, 2, 6])",
                "output": "[1, 7, 2, 6]"
            },
            {
                "input": "remove_duplicates([6, 7, 2, 7, 7, 5, 9])",
                "output": "[6, 2, 5, 9]"
            },
            {
                "input": "remove_duplicates([3, 2, 2, 3])",
                "output": "[]"
            },
            {
                "input": "remove_duplicates([4, 3, 1, 5, 9, 7, 6])",
                "output": "[4, 3, 1, 5, 9, 7, 6]"
            },
            {
                "input": "remove_duplicates([5, 2, 7, 2, 1, 3, 1])",
                "output": "[5, 7, 3]"
            },
            {
                "input": "remove_duplicates([5, 3, 6, 1, 5, 5, 3])",
                "output": "[6, 1]"
            },
            {
                "input": "remove_duplicates([6, 1, 2, 4, 2, 4, 8])",
                "output": "[6, 1, 8]"
            },
            {
                "input": "remove_duplicates([4, 4, 2, 1, 9, 6, 4])",
                "output": "[2, 1, 9, 6]"
            },
            {
                "input": "remove_duplicates([4, 7, 7, 8])",
                "output": "[4, 8]"
            },
            {
                "input": "remove_duplicates([2, 7, 3, 2])",
                "output": "[7, 3]"
            },
            {
                "input": "remove_duplicates([3, 6, 2, 2, 6, 3, 7])",
                "output": "[7]"
            },
            {
                "input": "remove_duplicates([1, 2, 7, 4])",
                "output": "[1, 2, 7, 4]"
            },
            {
                "input": "remove_duplicates([4, 3, 8, 2])",
                "output": "[4, 3, 8, 2]"
            },
            {
                "input": "remove_duplicates([1, 3, 8, 9])",
                "output": "[1, 3, 8, 9]"
            },
            {
                "input": "remove_duplicates([2, 1, 2, 4])",
                "output": "[1, 4]"
            },
            {
                "input": "remove_duplicates([1, 2, 3, 4])",
                "output": "[1, 2, 3, 4]"
            },
            {
                "input": "remove_duplicates([6, 7, 7, 3, 9, 2, 8])",
                "output": "[6, 3, 9, 2, 8]"
            },
            {
                "input": "remove_duplicates([6, 2, 1, 3, 2, 5, 2])",
                "output": "[6, 1, 3, 5]"
            },
            {
                "input": "remove_duplicates([4, 2, 2, 6])",
                "output": "[4, 6]"
            },
            {
                "input": "remove_duplicates([6, 7, 6, 4, 2, 1, 7])",
                "output": "[4, 2, 1]"
            },
            {
                "input": "remove_duplicates([2, 5, 1, 2, 3, 8, 6])",
                "output": "[5, 1, 3, 8, 6]"
            },
            {
                "input": "remove_duplicates([1, 2, 1, 7, 6, 6, 10])",
                "output": "[2, 7, 10]"
            },
            {
                "input": "remove_duplicates([2, 1, 1, 2])",
                "output": "[]"
            },
            {
                "input": "remove_duplicates([6, 1, 1, 4, 3, 6, 3])",
                "output": "[4]"
            },
            {
                "input": "remove_duplicates([5, 2, 1, 4, 6, 4, 8])",
                "output": "[5, 2, 1, 6, 8]"
            },
            {
                "input": "remove_duplicates([6, 6, 1, 5, 4, 1, 10])",
                "output": "[5, 4, 10]"
            },
            {
                "input": "remove_duplicates([6, 2, 7, 1, 2, 1, 2])",
                "output": "[6, 7]"
            },
            {
                "input": "remove_duplicates([3, 2, 5, 4])",
                "output": "[3, 2, 5, 4]"
            },
            {
                "input": "remove_duplicates([1, 6, 8, 1, 7, 5, 8])",
                "output": "[6, 7, 5]"
            },
            {
                "input": "remove_duplicates([4, 6, 4, 3, 4, 3, 2])",
                "output": "[6, 2]"
            },
            {
                "input": "remove_duplicates([2, 2, 2, 4, 5, 7, 4])",
                "output": "[5, 7]"
            },
            {
                "input": "remove_duplicates([5, 7, 1, 1, 4, 3, 7])",
                "output": "[5, 4, 3]"
            },
            {
                "input": "remove_duplicates([5, 4, 3, 6, 2, 8, 2])",
                "output": "[5, 4, 3, 6, 8]"
            },
            {
                "input": "remove_duplicates([4, 6, 7, 6, 8, 1, 9])",
                "output": "[4, 7, 8, 1, 9]"
            },
            {
                "input": "remove_duplicates([2, 5, 6, 4, 8, 6, 6])",
                "output": "[2, 5, 4, 8]"
            },
            {
                "input": "remove_duplicates([])",
                "output": "[]"
            },
            {
                "input": "remove_duplicates([3, 7, 3, 3, 5, 4, 4])",
                "output": "[7, 5]"
            },
            {
                "input": "remove_duplicates([5, 5, 5, 5, 5, 2, 2])",
                "output": "[]"
            },
            {
                "input": "remove_duplicates([2, 6, 2, 7, 4, 2, 1])",
                "output": "[6, 7, 4, 1]"
            },
            {
                "input": "remove_duplicates([5, 4, 5, 8])",
                "output": "[4, 8]"
            },
            {
                "input": "remove_duplicates([5, 3, 1, 2])",
                "output": "[5, 3, 1, 2]"
            },
            {
                "input": "remove_duplicates([3, 7, 4, 3])",
                "output": "[7, 4]"
            },
            {
                "input": "remove_duplicates([1, 2, 8, 9])",
                "output": "[1, 2, 8, 9]"
            },
            {
                "input": "remove_duplicates([2, 6, 8, 6])",
                "output": "[2, 8]"
            },
            {
                "input": "remove_duplicates([3, 2, 8, 2])",
                "output": "[3, 8]"
            },
            {
                "input": "remove_duplicates([6, 7, 6, 2])",
                "output": "[7, 2]"
            },
            {
                "input": "remove_duplicates([5, 7, 4, 6])",
                "output": "[5, 7, 4, 6]"
            },
            {
                "input": "remove_duplicates([4, 4, 1, 5])",
                "output": "[1, 5]"
            },
            {
                "input": "remove_duplicates([5, 2, 8, 3])",
                "output": "[5, 2, 8, 3]"
            },
            {
                "input": "remove_duplicates([5, 3, 7, 2, 3, 1, 5])",
                "output": "[7, 2, 1]"
            },
            {
                "input": "remove_duplicates([4, 7, 5, 5])",
                "output": "[4, 7]"
            },
            {
                "input": "remove_duplicates([3, 3, 6, 1, 4, 4, 9])",
                "output": "[6, 1, 9]"
            },
            {
                "input": "remove_duplicates([4, 6, 3, 4, 2, 6, 5])",
                "output": "[3, 2, 5]"
            },
            {
                "input": "remove_duplicates([3, 3, 7, 5])",
                "output": "[7, 5]"
            }
        ]
    },
    {
        "problem_description": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
        "ground truth": "def flip_case(string: str) -> str:\n    return string.swapcase()\n",
        "instances": [
            {
                "input": "flip_case(\"xDFZwXjexGGcNsQGWKFfWrVIoHZYFFhWCRQJpnfL\")",
                "output": "'XdfzWxJEXggCnSqgwkfFwRviOhzyffHwcrqjPNFl'"
            },
            {
                "input": "flip_case(\"dWqb\")",
                "output": "'DwQB'"
            },
            {
                "input": "flip_case(\"NpFjCypU YkPuBLEfXMThREegzPXXT IgBpeyz \")",
                "output": "'nPfJcYPu yKpUbleFxmtHreEGZpxxt iGbPEYZ '"
            },
            {
                "input": "flip_case(\"yr\")",
                "output": "'YR'"
            },
            {
                "input": "flip_case(\"RbUFL/M\")",
                "output": "'rBufl/m'"
            },
            {
                "input": "flip_case(\"JXCxNsvL\")",
                "output": "'jxcXnSVl'"
            },
            {
                "input": "flip_case(\"rpd\")",
                "output": "'RPD'"
            },
            {
                "input": "flip_case(\"pG<wNz>Y/\")",
                "output": "'Pg<WnZ>y/'"
            },
            {
                "input": "flip_case(\"uRCphX cuIYmaTkfFCGBJrVUsjMustykG WqKcSc\")",
                "output": "'UrcPHx CUiyMAtKFfcgbjRvuSJmUSTYKg wQkCsC'"
            },
            {
                "input": "flip_case(\"pFEAIYkn|\")",
                "output": "'PfeaiyKN|'"
            },
            {
                "input": "flip_case(\"ugd\")",
                "output": "'UGD'"
            },
            {
                "input": "flip_case(\"gif\")",
                "output": "'GIF'"
            },
            {
                "input": "flip_case(\"WVlvlJraPwOUwyOOhbDSADCInroOCMzpaSnUubOH\")",
                "output": "'wvLVLjRApWouWYooHBdsadciNROocmZPAsNuUBoh'"
            },
            {
                "input": "flip_case(\"RvQa%\")",
                "output": "'rVqA%'"
            },
            {
                "input": "flip_case(\"AjUCdQIZXemhRaQZOkgJVvpYPUDPNmjKIPhQzZmAQIX\")",
                "output": "'aJucDqizxEMHrAqzoKGjvVPypudpnMJkipHqZzMaqix'"
            },
            {
                "input": "flip_case('Hello!')",
                "output": "'hELLO!'"
            },
            {
                "input": "flip_case(\"PnHqJfQuNAYhthlFbMAQuoFHTWWNssJuqEsyxCgEkcDUh\")",
                "output": "'pNhQjFqUnayHTHLfBmaqUOfhtwwnSSjUQeSYXcGeKCduH'"
            },
            {
                "input": "flip_case(\"&Py@\")",
                "output": "'&pY@'"
            },
            {
                "input": "flip_case(\"dTpPnvaddXtfDXGDaEPDaGkpESXxOLdIKySLcPdpU\")",
                "output": "'DtPpNVADDxTFdxgdAepdAgKPesxXolDikYslCpDPu'"
            },
            {
                "input": "flip_case(\"v\")",
                "output": "'V'"
            },
            {
                "input": "flip_case(\"~zUkkeFy\")",
                "output": "'~ZuKKEfY'"
            },
            {
                "input": "flip_case(\"w\")",
                "output": "'W'"
            },
            {
                "input": "flip_case(\"q\")",
                "output": "'Q'"
            },
            {
                "input": "flip_case(\"d<gG\")",
                "output": "'D<Gg'"
            },
            {
                "input": "flip_case(\"kydGvfiOVOgOxStzNHakGRVZUzaeQtEDgWqRJJpfe\")",
                "output": "'KYDgVFIovoGoXsTZnhAKgrvzuZAEqTedGwQrjjPFE'"
            },
            {
                "input": "flip_case(\"x\")",
                "output": "'X'"
            },
            {
                "input": "flip_case(\"ez\")",
                "output": "'EZ'"
            },
            {
                "input": "flip_case(\"CsgXBCATeQmYHhTMBoGuEM dGUDqazbndCFMtLL vmY\")",
                "output": "'cSGxbcatEqMyhHtmbOgUem DgudQAZBNDcfmTll VMy'"
            },
            {
                "input": "flip_case(\"fy\")",
                "output": "'FY'"
            },
            {
                "input": "flip_case(\"p AAnXuPeBbeTnNHDDLhugfDzDoSnd KMLFYIppPFKSX\")",
                "output": "'P aaNxUpEbBEtNnhddlHUGFdZdOsND kmlfyiPPpfksx'"
            },
            {
                "input": "flip_case(\"qn\")",
                "output": "'QN'"
            },
            {
                "input": "flip_case(\"v*qeoJBLg<t&\")",
                "output": "'V*QEOjblG<T&'"
            },
            {
                "input": "flip_case(\"#QSfHF:$&%\")",
                "output": "'#qsFhf:$&%'"
            },
            {
                "input": "flip_case(\"u\")",
                "output": "'U'"
            },
            {
                "input": "flip_case('')",
                "output": "''"
            },
            {
                "input": "flip_case(\"QNANcSJRDzmQFD RdGOsUHyADvXPqBWXQQuDzqlQkYucV\")",
                "output": "'qnanCsjrdZMqfd rDgoSuhYadVxpQbwxqqUdZQLqKyUCv'"
            },
            {
                "input": "flip_case(\"jbTsYZxZTBwOTezydywllWFUrvTWBHXpvMsIY\")",
                "output": "'JBtSyzXztbWotEZYDYWLLwfuRVtwbhxPVmSiy'"
            },
            {
                "input": "flip_case(\"SURWTdsMjFvXSnFJFytHymfgEiDcmZREKgXr\")",
                "output": "'surwtDSmJfVxsNfjfYThYMFGeIdCMzrekGxR'"
            },
            {
                "input": "flip_case(\"BBx~!|/^\")",
                "output": "'bbX~!|/^'"
            },
            {
                "input": "flip_case(\"n\")",
                "output": "'N'"
            },
            {
                "input": "flip_case(\"?fTt><k\")",
                "output": "'?FtT><K'"
            },
            {
                "input": "flip_case(\"jfu\")",
                "output": "'JFU'"
            },
            {
                "input": "flip_case('These violent delights have violent ends')",
                "output": "'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'"
            },
            {
                "input": "flip_case(\"QwnaAlMgJSZcTaBgprrbFezVmYCdMsWyxskaPqenOH\")",
                "output": "'qWNAaLmGjszCtAbGPRRBfEZvMycDmSwYXSKApQENoh'"
            },
            {
                "input": "flip_case(\"nVVa|^lsy\")",
                "output": "'NvvA|^LSY'"
            },
            {
                "input": "flip_case(\"haP!tD\")",
                "output": "'HAp!Td'"
            },
            {
                "input": "flip_case(\"xmx\")",
                "output": "'XMX'"
            },
            {
                "input": "flip_case(\"o=c_/?QU~q\")",
                "output": "'O=C_/?qu~Q'"
            },
            {
                "input": "flip_case(\"tu\")",
                "output": "'TU'"
            },
            {
                "input": "flip_case(\"g gCvDFeq NvBvqUNjjIldrkmFZCCTkJACipqozhZZ\")",
                "output": "'G GcVdfEQ nVbVQunJJiLDRKMfzcctKjacIPQOZHzz'"
            },
            {
                "input": "flip_case(\"WF~h/oG^\")",
                "output": "'wf~H/Og^'"
            },
            {
                "input": "flip_case(\"pez\")",
                "output": "'PEZ'"
            },
            {
                "input": "flip_case(\"rPxMsdbinpIxuZkSMNhmkYSJ DaYPCubXFgtuGbdtUXBR\")",
                "output": "'RpXmSDBINPiXUzKsmnHMKysj dAypcUBxfGTUgBDTuxbr'"
            },
            {
                "input": "flip_case(\"pgj\")",
                "output": "'PGJ'"
            },
            {
                "input": "flip_case(\"vVvmxSIyqihZXowcxzQxqSKxpnCpSSkCXeRBXTHyMl\")",
                "output": "'VvVMXsiYQIHzxOWCXZqXQskXPNcPssKcxErbxthYmL'"
            },
            {
                "input": "flip_case(\"NwHrkzMqZmOzyNBPhYuSIdBfm CjlBUkCXIeiH\")",
                "output": "'nWhRKZmQzMoZYnbpHyUsiDbFM cJLbuKcxiEIh'"
            },
            {
                "input": "flip_case(\"hzy\")",
                "output": "'HZY'"
            },
            {
                "input": "flip_case(\"EELIBxoyBKMKLqdqCoaxKsaHDhVSyVFZKwIUD\")",
                "output": "'eelibXOYbkmklQDQcOAXkSAhdHvsYvfzkWiud'"
            },
            {
                "input": "flip_case(\"L@j:tM-_?Fgc\")",
                "output": "'l@J:Tm-_?fGC'"
            },
            {
                "input": "flip_case(\"dzpm pZUpHNjdpIMw BmQd otqoasshKCFtpf\")",
                "output": "'DZPM PzuPhnJDPimW bMqD OTQOASSHkcfTPF'"
            },
            {
                "input": "flip_case(\"GRb|DCu\")",
                "output": "'grB|dcU'"
            },
            {
                "input": "flip_case(\"&b_H\")",
                "output": "'&B_h'"
            },
            {
                "input": "flip_case(\"n|gOUwY~ruFD\")",
                "output": "'N|GouWy~RUfd'"
            },
            {
                "input": "flip_case(\"DyMMLvwZlYNhTOjDhnsHoTNqrTRWSrFYFWaoimDxFFaiM\")",
                "output": "'dYmmlVWzLynHtoJdHNShOtnQRtrwsRfyfwAOIMdXffAIm'"
            },
            {
                "input": "flip_case(\"|l&:hE%&\")",
                "output": "'|L&:He%&'"
            },
            {
                "input": "flip_case(\"/zl\")",
                "output": "'/ZL'"
            },
            {
                "input": "flip_case(\"F_LHcfxbO\")",
                "output": "'f_lhCFXBo'"
            },
            {
                "input": "flip_case(\"vzhEUikjmBtxkJcpaTRiuEurpoJXgLCmmSGttGsfOv\")",
                "output": "'VZHeuIKJMbTXKjCPAtrIUeURPOjxGlcMMsgTTgSFoV'"
            },
            {
                "input": "flip_case(\"jBVXuMXKDuzctqITdcXyikINVSCmKdXbcxhnT\")",
                "output": "'JbvxUmxkdUZCTQitDCxYIKinvscMkDxBCXHNt'"
            },
            {
                "input": "flip_case(\"lhp\")",
                "output": "'LHP'"
            },
            {
                "input": "flip_case(\"CnpipxUmlSdCSmHdbyDoMlbssWpLHcyKnJlsulPxWNPHi\")",
                "output": "'cNPIPXuMLsDcsMhDBYdOmLBSSwPlhCYkNjLSULpXwnphI'"
            },
            {
                "input": "flip_case(\"oz\")",
                "output": "'OZ'"
            },
            {
                "input": "flip_case(\"BlmIOOJIkOnKWOtKuudPt  sUUPPNZZbQKiIHsNzFe\")",
                "output": "'bLMioojiKoNkwoTkUUDpT  SuuppnzzBqkIihSnZfE'"
            },
            {
                "input": "flip_case(\"bRIcNFlGQxbUHHeXuOVT ZqmqxQEmgBrvEWGTokoHY\")",
                "output": "'BriCnfLgqXBuhhExUovt zQMQXqeMGbRVewgtOKOhy'"
            },
            {
                "input": "flip_case(\"d!C&e?Gl\")",
                "output": "'D!c&E?gL'"
            },
            {
                "input": "flip_case(\"tR#Et^#\")",
                "output": "'Tr#eT^#'"
            },
            {
                "input": "flip_case(\"~S*VzmzMvqpR\")",
                "output": "'~s*vZMZmVQPr'"
            },
            {
                "input": "flip_case(\"zdp\")",
                "output": "'ZDP'"
            },
            {
                "input": "flip_case(\"hd\")",
                "output": "'HD'"
            },
            {
                "input": "flip_case(\"f<SH\")",
                "output": "'F<sh'"
            },
            {
                "input": "flip_case(\"LAszIcfMteqqYNwFzpJQolmECkmMmMLiyWgtidbdJUaaA\")",
                "output": "'laSZiCFmTEQQynWfZPjqOLMecKMmMmlIYwGTIDBDjuAAa'"
            },
            {
                "input": "flip_case(\"+$#d\")",
                "output": "'+$#D'"
            },
            {
                "input": "flip_case(\"lW|tBEn~^ri<\")",
                "output": "'Lw|TbeN~^RI<'"
            },
            {
                "input": "flip_case(\"u=>c\")",
                "output": "'U=>C'"
            },
            {
                "input": "flip_case(\"wdWVLKaFVwzCSyfAbTLGDiVKlkTUSWhVBTcWaNoUaq\")",
                "output": "'WDwvlkAfvWZcsYFaBtlgdIvkLKtuswHvbtCwAnOuAQ'"
            },
            {
                "input": "flip_case(\"RkocroIYw pMJxfpXxLucXAIvDjwlkIeJBCXJsxMAH\")",
                "output": "'rKOCROiyW PmjXFPxXlUCxaiVdJWLKiEjbcxjSXmah'"
            },
            {
                "input": "flip_case(\"MBsxRCmHzEltumRjfTmdmbspQjxySYLAQNAZPRyV\")",
                "output": "'mbSXrcMhZeLTUMrJFtMDMBSPqJXYsylaqnazprYv'"
            },
            {
                "input": "flip_case(\"ds\")",
                "output": "'DS'"
            },
            {
                "input": "flip_case(\"d\")",
                "output": "'D'"
            },
            {
                "input": "flip_case(\"JVKSQnhMMEPEXaJBBgEbTmkMCSWcebmFckHoj\")",
                "output": "'jvksqNHmmepexAjbbGeBtMKmcswCEBMfCKhOJ'"
            },
            {
                "input": "flip_case(\"=Uft>^xAJt~M\")",
                "output": "'=uFT>^XajT~m'"
            },
            {
                "input": "flip_case(\"Q<x\")",
                "output": "'q<X'"
            },
            {
                "input": "flip_case(\"rZLVWNROgXWjbDAxzXaGYLOqVnpKiMJLXAKpM\")",
                "output": "'RzlvwnroGxwJBdaXZxAgyloQvNPkImjlxakPm'"
            },
            {
                "input": "flip_case(\"*~=I\")",
                "output": "'*~=i'"
            },
            {
                "input": "flip_case(\"sqopQROxzNCHvAlaUuwHvOMsScjnCpmswtyi\")",
                "output": "'SQOPqroXZnchVaLAuUWhVomSsCJNcPMSWTYI'"
            },
            {
                "input": "flip_case(\"pzp\")",
                "output": "'PZP'"
            },
            {
                "input": "flip_case(\"mka\")",
                "output": "'MKA'"
            },
            {
                "input": "flip_case(\"$<y+\")",
                "output": "'$<Y+'"
            },
            {
                "input": "flip_case(\"NyMDTZqvnnQa TTfqNoInjRIaYeFtiLyYLvQJ\")",
                "output": "'nYmdtzQVNNqA ttFQnOiNJriAyEfTIlYylVqj'"
            },
            {
                "input": "flip_case(\"xv\")",
                "output": "'XV'"
            },
            {
                "input": "flip_case(\"ishBtMJcStzZVLuiiCdRPaVgPIsPMZkvSjJna\")",
                "output": "'ISHbTmjCsTZzvlUIIcDrpAvGpiSpmzKVsJjNA'"
            },
            {
                "input": "flip_case(\" rWGZAlqccMZVGnZysgdSulExviJwKbbHiwV\")",
                "output": "' RwgzaLQCCmzvgNzYSGDsULeXVIjWkBBhIWv'"
            },
            {
                "input": "flip_case(\"bq\")",
                "output": "'BQ'"
            },
            {
                "input": "flip_case(\"agwaVXOuq\")",
                "output": "'AGWAvxoUQ'"
            },
            {
                "input": "flip_case(\"j\")",
                "output": "'J'"
            },
            {
                "input": "flip_case(\"xOEweGnFamRzetSvZkSCZbKrjxTcGdWzTWBsbETPk auL\")",
                "output": "'XoeWEgNfAMrZETsVzKsczBkRJXtCgDwZtwbSBetpK AUl'"
            },
            {
                "input": "flip_case(\"pCKgJaaQZHzRwxdwpqCZvoRlbvqLfrtdHlSrrqyl\")",
                "output": "'PckGjAAqzhZrWXDWPQczVOrLBVQlFRTDhLsRRQYL'"
            },
            {
                "input": "flip_case(\"r\")",
                "output": "'R'"
            },
            {
                "input": "flip_case(\"gO#yDMhnV\")",
                "output": "'Go#YdmHNv'"
            },
            {
                "input": "flip_case(\"FdR\")",
                "output": "'fDr'"
            },
            {
                "input": "flip_case(\"+K|eG\")",
                "output": "'+k|Eg'"
            },
            {
                "input": "flip_case(\"h*U*\")",
                "output": "'H*u*'"
            },
            {
                "input": "flip_case(\"vqp\")",
                "output": "'VQP'"
            },
            {
                "input": "flip_case(\"a\")",
                "output": "'A'"
            },
            {
                "input": "flip_case(\"qnwYFneaoNWuSxNXocoMEXDwcqVoGZdRInOEbC\")",
                "output": "'QNWyfNEAOnwUsXnxOCOmexdWCQvOgzDriNoeBc'"
            },
            {
                "input": "flip_case(\"YpaJZKDmVIGTvH MGarufiqirhCbiKMToFjBUzotRH\")",
                "output": "'yPAjzkdMvigtVh mgARUFIQIRHcBIkmtOfJbuZOTrh'"
            },
            {
                "input": "flip_case(\"tBDUC ZKFZKtFVvqmhzUltjFzOWNXldpEHOAKJIp\")",
                "output": "'Tbduc zkfzkTfvVQMHZuLTJfZownxLDPehoakjiP'"
            },
            {
                "input": "flip_case(\"&|EuiuG\")",
                "output": "'&|eUIUg'"
            },
            {
                "input": "flip_case(\"gq\")",
                "output": "'GQ'"
            },
            {
                "input": "flip_case(\"k\")",
                "output": "'K'"
            },
            {
                "input": "flip_case(\"lb\")",
                "output": "'LB'"
            },
            {
                "input": "flip_case(\"zg\")",
                "output": "'ZG'"
            },
            {
                "input": "flip_case(\"lif\")",
                "output": "'LIF'"
            },
            {
                "input": "flip_case(\"eIgaNO JtyWwkDSdVTrVoqClhNFrHNqDBl UInCVrviH\")",
                "output": "'EiGAno jTYwWKdsDvtRvOQcLHnfRhnQdbL uiNcvRVIh'"
            },
            {
                "input": "flip_case(\"+>gY~\")",
                "output": "'+>Gy~'"
            },
            {
                "input": "flip_case(\"fbc\")",
                "output": "'FBC'"
            }
        ]
    },
    {
        "problem_description": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
        "ground truth": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n",
        "instances": [
            {
                "input": "concatenate(['a', 'x', 'j', 'i', 'r'])",
                "output": "'axjir'"
            },
            {
                "input": "concatenate(['s', 'r', 'm', 'b', 'r'])",
                "output": "'srmbr'"
            },
            {
                "input": "concatenate(['y', 'm', 'i'])",
                "output": "'ymi'"
            },
            {
                "input": "concatenate(['m', 'a', 'v'])",
                "output": "'mav'"
            },
            {
                "input": "concatenate(['c', 'j', 'd'])",
                "output": "'cjd'"
            },
            {
                "input": "concatenate(['p', 'n', 't', 'b', 'j'])",
                "output": "'pntbj'"
            },
            {
                "input": "concatenate(['b', 'o', 'o'])",
                "output": "'boo'"
            },
            {
                "input": "concatenate(['k', 'm', 'v', 'n', 'n'])",
                "output": "'kmvnn'"
            },
            {
                "input": "concatenate(['a', 'a', 'f'])",
                "output": "'aaf'"
            },
            {
                "input": "concatenate(['b', 'p', 'z', 'n', 'd'])",
                "output": "'bpznd'"
            },
            {
                "input": "concatenate(['s', 'n', 'f', 'n', 'c'])",
                "output": "'snfnc'"
            },
            {
                "input": "concatenate(['d', 'r', 'w'])",
                "output": "'drw'"
            },
            {
                "input": "concatenate(['k', 'p', 'l', 'o', 'a'])",
                "output": "'kploa'"
            },
            {
                "input": "concatenate(['a', 'v', 'b'])",
                "output": "'avb'"
            },
            {
                "input": "concatenate(['q', 'h', 'j'])",
                "output": "'qhj'"
            },
            {
                "input": "concatenate(['p', 'a', 'u', 'x', 'n'])",
                "output": "'pauxn'"
            },
            {
                "input": "concatenate(['f', 'a', 'b', 'o', 'p'])",
                "output": "'fabop'"
            },
            {
                "input": "concatenate(['j', 'm', 'o', 'm', 'q'])",
                "output": "'jmomq'"
            },
            {
                "input": "concatenate(['y', 'y', 's', 'w', 'd'])",
                "output": "'yyswd'"
            },
            {
                "input": "concatenate(['l', 'k', 'd'])",
                "output": "'lkd'"
            },
            {
                "input": "concatenate(['e', 'g', 'b'])",
                "output": "'egb'"
            },
            {
                "input": "concatenate(['c', 'z', 'r'])",
                "output": "'czr'"
            },
            {
                "input": "concatenate(['i', 'f', 'r'])",
                "output": "'ifr'"
            },
            {
                "input": "concatenate(['w', 'u', 'j', 'x', 'r'])",
                "output": "'wujxr'"
            },
            {
                "input": "concatenate(['c', 'h', 'a', 'n', 'b'])",
                "output": "'chanb'"
            },
            {
                "input": "concatenate(['p', 'a', 's', 'h', 'g'])",
                "output": "'pashg'"
            },
            {
                "input": "concatenate(['u', 'k', 'x'])",
                "output": "'ukx'"
            },
            {
                "input": "concatenate(['t', 's', 'n', 's', 'l'])",
                "output": "'tsnsl'"
            },
            {
                "input": "concatenate(['w', 'i', 'w'])",
                "output": "'wiw'"
            },
            {
                "input": "concatenate(['f', 'a', 'o', 'e', 'i'])",
                "output": "'faoei'"
            },
            {
                "input": "concatenate(['c', 'q', 'p'])",
                "output": "'cqp'"
            },
            {
                "input": "concatenate(['r', 'q', 'r', 'o', 'y'])",
                "output": "'rqroy'"
            },
            {
                "input": "concatenate(['z', 'f', 'g', 's', 'f'])",
                "output": "'zfgsf'"
            },
            {
                "input": "concatenate(['l', 'i', 'z'])",
                "output": "'liz'"
            },
            {
                "input": "concatenate(['q', 'l', 'w', 's', 'a'])",
                "output": "'qlwsa'"
            },
            {
                "input": "concatenate(['t', 'x', 'r', 'h', 'j'])",
                "output": "'txrhj'"
            },
            {
                "input": "concatenate(['n', 'x', 's'])",
                "output": "'nxs'"
            },
            {
                "input": "concatenate(['e', 'b', 'q'])",
                "output": "'ebq'"
            },
            {
                "input": "concatenate(['w', 'y', 'f'])",
                "output": "'wyf'"
            },
            {
                "input": "concatenate(['c', 'j', 'i', 'z', 'k'])",
                "output": "'cjizk'"
            },
            {
                "input": "concatenate(['p', 'a', 'm'])",
                "output": "'pam'"
            },
            {
                "input": "concatenate(['g', 'm', 'k'])",
                "output": "'gmk'"
            },
            {
                "input": "concatenate(['w', 'l', 'l'])",
                "output": "'wll'"
            },
            {
                "input": "concatenate(['c', 'm', 'd'])",
                "output": "'cmd'"
            },
            {
                "input": "concatenate(['x', 'y', 'z'])",
                "output": "'xyz'"
            },
            {
                "input": "concatenate(['x', 'j', 'c'])",
                "output": "'xjc'"
            },
            {
                "input": "concatenate(['y', 'p', 's'])",
                "output": "'yps'"
            },
            {
                "input": "concatenate(['w', 'q', 'z', 'q', 'b'])",
                "output": "'wqzqb'"
            },
            {
                "input": "concatenate(['q', 'y', 'o', 'm', 'r'])",
                "output": "'qyomr'"
            },
            {
                "input": "concatenate(['a', 'q', 'p'])",
                "output": "'aqp'"
            },
            {
                "input": "concatenate(['u', 'e', 'j'])",
                "output": "'uej'"
            },
            {
                "input": "concatenate(['h', 'u', 'y'])",
                "output": "'huy'"
            },
            {
                "input": "concatenate(['r', 'n', 'w'])",
                "output": "'rnw'"
            },
            {
                "input": "concatenate(['s', 'q', 'e'])",
                "output": "'sqe'"
            },
            {
                "input": "concatenate(['u', 'r', 'k', 'v', 'b'])",
                "output": "'urkvb'"
            },
            {
                "input": "concatenate(['d', 't', 'g', 'q', 'l'])",
                "output": "'dtgql'"
            },
            {
                "input": "concatenate(['x', 's', 'n', 'n', 'l'])",
                "output": "'xsnnl'"
            },
            {
                "input": "concatenate(['c', 'y', 'i', 'n', 'u'])",
                "output": "'cyinu'"
            },
            {
                "input": "concatenate(['x', 'o', 'r', 'h', 'm'])",
                "output": "'xorhm'"
            },
            {
                "input": "concatenate(['i', 'a', 'z', 'g', 'v'])",
                "output": "'iazgv'"
            },
            {
                "input": "concatenate(['h', 'r', 'k', 'h', 'x'])",
                "output": "'hrkhx'"
            },
            {
                "input": "concatenate(['x', 'y', 'z', 'w', 'k'])",
                "output": "'xyzwk'"
            },
            {
                "input": "concatenate(['c', 'v', 'z'])",
                "output": "'cvz'"
            },
            {
                "input": "concatenate(['p', 'q', 't'])",
                "output": "'pqt'"
            },
            {
                "input": "concatenate(['r', 'i', 'j', 'b', 'l'])",
                "output": "'rijbl'"
            },
            {
                "input": "concatenate(['c', 'o', 'l', 'x', 'l'])",
                "output": "'colxl'"
            },
            {
                "input": "concatenate(['n', 'x', 'i', 'g', 'h'])",
                "output": "'nxigh'"
            },
            {
                "input": "concatenate(['i', 'z', 'c'])",
                "output": "'izc'"
            },
            {
                "input": "concatenate(['b', 'n', 't', 'z', 'y'])",
                "output": "'bntzy'"
            },
            {
                "input": "concatenate(['s', 'z', 'u', 'a', 'n'])",
                "output": "'szuan'"
            },
            {
                "input": "concatenate(['g', 't', 'e'])",
                "output": "'gte'"
            },
            {
                "input": "concatenate(['b', 'b', 'l', 'o', 'x'])",
                "output": "'bblox'"
            },
            {
                "input": "concatenate(['o', 'd', 'd'])",
                "output": "'odd'"
            },
            {
                "input": "concatenate(['l', 'l', 'n'])",
                "output": "'lln'"
            },
            {
                "input": "concatenate(['x', 'z', 'u'])",
                "output": "'xzu'"
            },
            {
                "input": "concatenate(['u', 'n', 's', 'z', 'b'])",
                "output": "'unszb'"
            },
            {
                "input": "concatenate(['k', 'd', 'w', 'u', 'u'])",
                "output": "'kdwuu'"
            },
            {
                "input": "concatenate(['s', 'i', 'm', 'g', 'v'])",
                "output": "'simgv'"
            },
            {
                "input": "concatenate(['m', 'x', 'r'])",
                "output": "'mxr'"
            },
            {
                "input": "concatenate(['c', 'f', 'm'])",
                "output": "'cfm'"
            },
            {
                "input": "concatenate(['w', 'e', 'y', 't', 'n'])",
                "output": "'weytn'"
            },
            {
                "input": "concatenate(['k', 'l', 'g'])",
                "output": "'klg'"
            },
            {
                "input": "concatenate(['f', 'b', 'w', 'u', 'z'])",
                "output": "'fbwuz'"
            },
            {
                "input": "concatenate(['v', 'u', 'j', 'p', 'v'])",
                "output": "'vujpv'"
            },
            {
                "input": "concatenate([])",
                "output": "''"
            },
            {
                "input": "concatenate(['v', 'f', 'h'])",
                "output": "'vfh'"
            },
            {
                "input": "concatenate(['o', 'h', 'g'])",
                "output": "'ohg'"
            }
        ]
    },
    {
        "problem_description": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
        "ground truth": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]\n",
        "instances": [
            {
                "input": "filter_by_prefix(['irzdwce', 'bnhe', 'rkqwvkq', 'y coftmixsda', 'xbWDAJt', 'uhqao'], 'uh')",
                "output": "['uhqao']"
            },
            {
                "input": "filter_by_prefix(['uanqtt', 'fmpmtbsl', 'zqplbgx', 'tchhyvij', 'bEDBxyFFDy', 'pickhvpek'], 'fm')",
                "output": "['fmpmtbsl']"
            },
            {
                "input": "filter_by_prefix(['udf', 'rfghktjte', 'lobb', 'sxmkvlpy', 'HIoTNeRQWfmv', 'cgro'], 'H')",
                "output": "['HIoTNeRQWfmv']"
            },
            {
                "input": "filter_by_prefix(['sqys', 'uox', 'oyacj', 'vic', 'FNqEzTW', 'sdwwffrnz'], 'v')",
                "output": "['vic']"
            },
            {
                "input": "filter_by_prefix(['xdse', 'ugcr', 'ryodayvs', 'kszuzounvl', 'oYzwIJ', 'wtzwmn'], 'ry')",
                "output": "['ryodayvs']"
            },
            {
                "input": "filter_by_prefix([], 'hc')",
                "output": "[]"
            },
            {
                "input": "filter_by_prefix(['igzsmxi', 'oxpaalwcz', 'pzjt', 'rqdkukrz', 'xskN', 'pdyqbxmc'], 'o')",
                "output": "['oxpaalwcz']"
            },
            {
                "input": "filter_by_prefix(['btyxi', 'oku', 'rchkjlhjo', 'xtj', 'azAL', 'cfxm'], 'x')",
                "output": "['xtj']"
            },
            {
                "input": "filter_by_prefix(['oabealcy', 'ccwuzfcoc', 'rehkhtg', 'gxakvg hani', 'UhGHg', 'zisfdy'], 'oa')",
                "output": "['oabealcy']"
            },
            {
                "input": "filter_by_prefix(['zlburwim', 'dzfs', 'jsj', 'cpdlqaeptiev', 'hXmqAdUOU', 'wsvuncog'], 'c')",
                "output": "['cpdlqaeptiev']"
            },
            {
                "input": "filter_by_prefix(['inefoe', 'xzsz', 'linopmjk', 'ryijajsshzv', 'gHlWOUCmA', 'xyajofu'], 'xy')",
                "output": "['xyajofu']"
            },
            {
                "input": "filter_by_prefix(['xxevx', 'vknumn', 'jqhnzqsq', 'bsc', 'uSSKZoCNFV', 'kdows'], 'uS')",
                "output": "['uSSKZoCNFV']"
            },
            {
                "input": "filter_by_prefix(['mdwukqmpo', 'oetsc', 'esfoei', 'itpxdewm', 'ajArhWSi', 'metufl'], 'it')",
                "output": "['itpxdewm']"
            },
            {
                "input": "filter_by_prefix(['ztdsuik', 'gcqvc', 'vjhedlu', 'smqctzfc', 'TsBKZPed', 'daqggucw'], 'zt')",
                "output": "['ztdsuik']"
            },
            {
                "input": "filter_by_prefix(['seokdz', 'lpolypj', 'ppzsdn', 'uahan', 'cYuJalGKw', 'irggysg'], 'cY')",
                "output": "['cYuJalGKw']"
            },
            {
                "input": "filter_by_prefix(['kblytu', 'bvvgfhhbe', 'zxjgedvs', 'nvux x', 'uhlGguXAf', 'mvial'], 'n')",
                "output": "['nvux x']"
            },
            {
                "input": "filter_by_prefix(['owgus', 'jsfluk', 'axhpsdxnb', 'ujokse', 'uKLzdIVSCU', 'nyapgx'], 'uj')",
                "output": "['ujokse']"
            },
            {
                "input": "filter_by_prefix(['zlcm', 'vjs', 'cdmwpyhhq', 'wyrhjezju', 'cGhAevMA', 'rupqmt'], 'c')",
                "output": "['cdmwpyhhq', 'cGhAevMA']"
            },
            {
                "input": "filter_by_prefix(['byzhtjgiz', 'onwb', 'dchcrk', 'gu utuxthdp', 'beDiG', 'uhqw'], 'u')",
                "output": "['uhqw']"
            },
            {
                "input": "filter_by_prefix(['kyuxiq', 'wyfepirq', 'cehrtir', 'wfzh', 'FrcId', 'himyfdqie'], 'k')",
                "output": "['kyuxiq']"
            },
            {
                "input": "filter_by_prefix(['pgjcmrqlw', 'ztspgrrhd', 'swsc', 'mydvh', 'oks', 'zjczfp'], 'ok')",
                "output": "['oks']"
            },
            {
                "input": "filter_by_prefix(['hbarvrcrl', 'eviehxs', 'wwtdcu', 'r ono', 'GfbsHgsBFv', 'dyotymgx'], 'hb')",
                "output": "['hbarvrcrl']"
            },
            {
                "input": "filter_by_prefix(['trk', 'rnkkzfmt', 'keu', 'abtxfqezq', 'XAIdEaH', 'vjggq'], 'ke')",
                "output": "['keu']"
            },
            {
                "input": "filter_by_prefix(['mxi', 'xtngipq', 'ngipl', 'mqrsjitry', 'GHdKrX', 'wdccw'], 'G')",
                "output": "['GHdKrX']"
            },
            {
                "input": "filter_by_prefix(['xfu', 'ipy', 'zfz', 'fzpznw', 'FHoQrwGqZ', 'abjfkg'], 'xf')",
                "output": "['xfu']"
            },
            {
                "input": "filter_by_prefix(['fpwrcpro', 'hhyvnr', 'mvpncphvq', 'ttpqh', 'ZQXxpmdqP', 'vezzw'], 'v')",
                "output": "['vezzw']"
            },
            {
                "input": "filter_by_prefix(['wxgbz', 'xngcbuox', 'ssxncvux', 'rdrfy', 'sJAru', 'xzvprs'], 'x')",
                "output": "['xngcbuox', 'xzvprs']"
            },
            {
                "input": "filter_by_prefix(['urfzx', 'vhmtbb', 'gqvdtr', 'jjx', 'VZgaaGz', 'esp'], 'jj')",
                "output": "['jjx']"
            },
            {
                "input": "filter_by_prefix(['hdnssea', 'xgfsteg', 'zzneoai', 'lazplbekb', 'XZw', 'iarfshq'], 'z')",
                "output": "['zzneoai']"
            },
            {
                "input": "filter_by_prefix([], 'john')",
                "output": "[]"
            },
            {
                "input": "filter_by_prefix(['cthx', 'evksuu', 'srblluzch', 'lqo', 'DWdb', 'nbdirmt'], 'D')",
                "output": "['DWdb']"
            },
            {
                "input": "filter_by_prefix(['qtzxo', 'viico', 'qofoy', 'xyjnzdf', 'qTQG', 'meksggu'], 'me')",
                "output": "['meksggu']"
            },
            {
                "input": "filter_by_prefix(['txjkaklfe', 'gksvm', 'xvhe', 'rwwmcmnjjcvx', 'rhfs', 'mnvskyq'], 'r')",
                "output": "['rwwmcmnjjcvx', 'rhfs']"
            },
            {
                "input": "filter_by_prefix(['cqvkhvmb', 'vaa', 'wczaocewv', 'ycl', 'XgktBQUCCPDB', 'lcxq'], 'w')",
                "output": "['wczaocewv']"
            },
            {
                "input": "filter_by_prefix([], 'c')",
                "output": "[]"
            },
            {
                "input": "filter_by_prefix(['nqgktjn', 'xtxpk', 'lkfbr', 'vmiehvntp', 'cYAkCvcpNa', 'rtoi'], 'x')",
                "output": "['xtxpk']"
            },
            {
                "input": "filter_by_prefix([], 'qw')",
                "output": "[]"
            },
            {
                "input": "filter_by_prefix(['bia', 'egbiz', 'klpwxcmha', 'bdob', 'jJxddYQzNYs', 'vjp'], 'kl')",
                "output": "['klpwxcmha']"
            },
            {
                "input": "filter_by_prefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')",
                "output": "['xxx', 'xxxAAA', 'xxx']"
            },
            {
                "input": "filter_by_prefix(['jwijiho', 'evcrpanw', 'lrkn', 'usiz', 'oYjwjgzErc', 'tpwwjq'], 't')",
                "output": "['tpwwjq']"
            },
            {
                "input": "filter_by_prefix(['txy', 'usf', 'zmzujred', 'pecojrvylq', 'yJYdIxZ', 'bpmfxnkhf'], 'z')",
                "output": "['zmzujred']"
            },
            {
                "input": "filter_by_prefix(['cnpqa', 'uhaarqbbh', 'qobuyyx', 'xulkcyte', 'hPr', 'zqkiyijo'], 'qo')",
                "output": "['qobuyyx']"
            },
            {
                "input": "filter_by_prefix(['hnrppxq', 'uxf', 'ief', 'ebuycg l', 'MyxeZXPwM', 'pbet'], 'eb')",
                "output": "['ebuycg l']"
            },
            {
                "input": "filter_by_prefix(['qgiibqz', 'vykph', 'letgrjnd', 'cedd', 'MeWkrjScxDrn', 'vdxohuy'], 'c')",
                "output": "['cedd']"
            },
            {
                "input": "filter_by_prefix(['xkjgxyv', 'yff', 'jvwayhssp', 'qmv', 'YeGMxVUOXDrO', 'trgiwtz'], 'tr')",
                "output": "['trgiwtz']"
            },
            {
                "input": "filter_by_prefix(['gqbsehnje', 'qztb', 'likrhcml', 'rytnjkrgifvk', 'qbb', 'ezbppjfp'], 'l')",
                "output": "['likrhcml']"
            },
            {
                "input": "filter_by_prefix(['toiqdq', 'zruhovo', 'ywpfnzjn', 'jccetilhqn', 'vjV', 'kaccrqxfh'], 'to')",
                "output": "['toiqdq']"
            },
            {
                "input": "filter_by_prefix(['rtndcjyk', 'oaqr', 'scebutbql', 'kmkiqgrjy', 'laBRYkQAQOIO', 'oakw'], 'la')",
                "output": "['laBRYkQAQOIO']"
            },
            {
                "input": "filter_by_prefix([], 'kck')",
                "output": "[]"
            },
            {
                "input": "filter_by_prefix(['rmffwoz', 'rcbutsfc', 'vyf', 'tkakwlrrtp', 'cFDAlaxwO', 'eoi'], 'e')",
                "output": "['eoi']"
            },
            {
                "input": "filter_by_prefix(['lcwnaov', 'uxw', 'lkihigyv', 'dqmjseye', 'BJn', 'vrndtlalh'], 'B')",
                "output": "['BJn']"
            },
            {
                "input": "filter_by_prefix(['jyhbqgw', 'htupvoy', 'eckf', 'opbkslrajig', 'tmYxwj', 'meblapkay'], 'm')",
                "output": "['meblapkay']"
            },
            {
                "input": "filter_by_prefix(['sqkfcgh', 'oixs', 'rudfiv', 'vmsmqh', 'DZEQsnr', 'yrzygmwu'], 'sq')",
                "output": "['sqkfcgh']"
            },
            {
                "input": "filter_by_prefix(['nsg', 'wawe', 'cqthmr', 'uwwmlsbk', 'YnQJuXrcT', 'omsppagp'], 'w')",
                "output": "['wawe']"
            },
            {
                "input": "filter_by_prefix(['jmdmbzu', 'zgzgzqkq', 'aorlwyw', 'rbab', 'kaqkeYHk', 'vkogvkp'], 'a')",
                "output": "['aorlwyw']"
            },
            {
                "input": "filter_by_prefix(['mgidnv', 'fymr', 'eibxot', 'isyoucwqx', 'mVOnTZURbGo', 'ydmyf'], 'i')",
                "output": "['isyoucwqx']"
            },
            {
                "input": "filter_by_prefix(['flsefr', 'glfgtb', 'fdgmgvt', 'lwmg lppmxh', 'dxAHGqRsF', 'lrhgvxd'], 'g')",
                "output": "['glfgtb']"
            },
            {
                "input": "filter_by_prefix([], 'odh')",
                "output": "[]"
            },
            {
                "input": "filter_by_prefix(['qqzyx', 'ovmjsvswm', 'naqo', 'usnzwotzfjcc', 'NSJBG', 'ses'], 'N')",
                "output": "['NSJBG']"
            },
            {
                "input": "filter_by_prefix(['fchencp', 'wmj', 'jykg', 'jftlcgnzejjx', 'fhSQ', 'hqclz'], 'wm')",
                "output": "['wmj']"
            },
            {
                "input": "filter_by_prefix(['dmqz', 'ttabgee', 'zihftohzc', 'deq', 'UnRUHV', 'zukgpwfv'], 'dm')",
                "output": "['dmqz']"
            },
            {
                "input": "filter_by_prefix(['qbsmz', 'ilote', 'tob', 'ulzmxw', 'VPmoaDr', 'ywojsi'], 'to')",
                "output": "['tob']"
            },
            {
                "input": "filter_by_prefix(['fcxaqtk', 'kiq', 'vyjv', 'kvr p', 'tUyaOR', 'iuddamr'], 'fc')",
                "output": "['fcxaqtk']"
            },
            {
                "input": "filter_by_prefix(['peyspr', 'qvcoz', 'fmrriodo', 'kjots', 'oCgS', 'nyl'], 'n')",
                "output": "['nyl']"
            },
            {
                "input": "filter_by_prefix(['ssbkamkk', 'lgpsyakx', 'aqmrmmuyv', 'ofhe', 'cTuIVLXWsW', 'ixf'], 'i')",
                "output": "['ixf']"
            },
            {
                "input": "filter_by_prefix(['awshlaxo', 'gctskq', 'bowsrq', 'nnaqclkpv', 'xjEeDyISwmKk', 'cloohvs'], 'aw')",
                "output": "['awshlaxo']"
            },
            {
                "input": "filter_by_prefix(['szqdfjr', 'zbyjp', 'ikquotia', 'hojzypa', 'eIABxMPRoXm', 'bua'], 'eI')",
                "output": "['eIABxMPRoXm']"
            },
            {
                "input": "filter_by_prefix([], 'gie')",
                "output": "[]"
            },
            {
                "input": "filter_by_prefix(['zvai', 'kifq', 'hkoctip', 'dvwygdwurwv', 'LXihHXCqSoU', 'aqeahjcen'], 'h')",
                "output": "['hkoctip']"
            },
            {
                "input": "filter_by_prefix(['tglaob', 'nyi', 'itxdcu', 'bzovjkcdz', 'knXz', 'tqonafkf'], 'tg')",
                "output": "['tglaob']"
            },
            {
                "input": "filter_by_prefix(['pfdgvqag', 'hmiqxmpkj', 'efvmuanp', 'tibjohy', 'AlLcUQZWTRcQ', 'eocerqij'], 'Al')",
                "output": "['AlLcUQZWTRcQ']"
            },
            {
                "input": "filter_by_prefix(['uqfnmzuj', 'oyzhjseob', 'vizqz', 'pgc', 'tuxAjQLZ', 'qiutw'], 'vi')",
                "output": "['vizqz']"
            },
            {
                "input": "filter_by_prefix(['takt', 'mtomfj', 'cdklj', 'cxajdd', 'DxahSoeqKi', 'lstxs'], 't')",
                "output": "['takt']"
            },
            {
                "input": "filter_by_prefix(['ejvijw', 'eoxwtu', 'umqxd', 'sdmtayil', 'QgHN', 'ifcnud'], 'um')",
                "output": "['umqxd']"
            },
            {
                "input": "filter_by_prefix(['abvpkzf', 'fcirpc', 'gxnrata', 'dtcutzv', 'ScIYWrBEF', 'vguow'], 'gx')",
                "output": "['gxnrata']"
            },
            {
                "input": "filter_by_prefix(['wwt', 'dgrwpdu', 'gawfftfjx', 'jjztu', 'TPqzQrODL', 'bds'], 'j')",
                "output": "['jjztu']"
            },
            {
                "input": "filter_by_prefix(['wawon', 'wsmuwzw', 'fuuslu', 'zeij', 'nicryZgyEFvc', 'fjp'], 'w')",
                "output": "['wawon', 'wsmuwzw']"
            },
            {
                "input": "filter_by_prefix(['fxg', 'jukpejtka', 'rpmwg', 'ilqottxzh', 'PLG', 'bzdkq'], 'PL')",
                "output": "['PLG']"
            },
            {
                "input": "filter_by_prefix(['wbcyhow', 'othmuu', 'qstccywt', 'kzzzvqn q', 'NyK', 'boroja'], 'k')",
                "output": "['kzzzvqn q']"
            },
            {
                "input": "filter_by_prefix([], 'b')",
                "output": "[]"
            },
            {
                "input": "filter_by_prefix(['hczszwml', 'ugp', 'lzaey', 'ziyikv', 'AclMUxFaNSQt', 'tufpegwem'], 't')",
                "output": "['tufpegwem']"
            },
            {
                "input": "filter_by_prefix(['jbneyqsj', 'gviykjdu', 'pswphm', 'cnt', 'lyKbacda', 'oicpibhjx'], 'jb')",
                "output": "['jbneyqsj']"
            },
            {
                "input": "filter_by_prefix([], 'rqq')",
                "output": "[]"
            },
            {
                "input": "filter_by_prefix(['uvbohls', 'jbazmg', 'yxgaiuqqi', 'eqyhjffvaco', 'Jmpqhvo', 'mlyxv'], 'yx')",
                "output": "['yxgaiuqqi']"
            },
            {
                "input": "filter_by_prefix(['nyaydhh', 'hkhslt', 'hfdv', 'flxfent', 'CVKIJI', 'erunhk'], 'h')",
                "output": "['hkhslt', 'hfdv']"
            },
            {
                "input": "filter_by_prefix(['uaon', 'gykyot', 'xxbq', 'kibuvgizegwt', 'MWxf', 'byimdy'], 'u')",
                "output": "['uaon']"
            },
            {
                "input": "filter_by_prefix(['bli', 'jqadqid', 'hxrer', ' elgpsxj', 'iTjWqdTbg', 'mizoj'], 'jq')",
                "output": "['jqadqid']"
            },
            {
                "input": "filter_by_prefix(['muw', 'rpnwajd', 'seu', 'yjnnvaonjgci', 'BpSOmnYGSyg', 'ltyqaalcg'], 'l')",
                "output": "['ltyqaalcg']"
            },
            {
                "input": "filter_by_prefix(['apyhwl', 'roiy', 'lat', 'dkleltc', 'UvSqf', 'lqxywthua'], 'la')",
                "output": "['lat']"
            },
            {
                "input": "filter_by_prefix(['uujdfeu', 'jmzwsdlgk', 'hxc', 'wwda', 'IsUPEstl', 'zvhglg'], 'w')",
                "output": "['wwda']"
            },
            {
                "input": "filter_by_prefix(['qeqokuci', 'colz', 'tpj', 'auulejia ', 'rVKO', 'znvm'], 'a')",
                "output": "['auulejia ']"
            },
            {
                "input": "filter_by_prefix(['casok', 'zxh', 'jub', 'dliq', 'HgnRd', 'wyulic'], 'ju')",
                "output": "['jub']"
            },
            {
                "input": "filter_by_prefix(['gsoetlwn', 'ttj', 'objeem', 'tkbykjgfy', 'YbI', 'bkim'], 'Y')",
                "output": "['YbI']"
            },
            {
                "input": "filter_by_prefix(['qxkneuoa', 'tkvgceljq', 'bilgbt', 'ofjglm', 'MqU', 'gtqvtdknr'], 'Mq')",
                "output": "['MqU']"
            },
            {
                "input": "filter_by_prefix(['qosr', 'wtrc', 'rac', 'zmcag', 'nyUGvIfC', 'ptnnknp'], 'w')",
                "output": "['wtrc']"
            },
            {
                "input": "filter_by_prefix(['fwlkekpt', 'vfm', 'hqh', 'xgnhled n xh', 'rOGoIPc', 'quiulyxju'], 'r')",
                "output": "['rOGoIPc']"
            },
            {
                "input": "filter_by_prefix(['ibyvdglgi', 'wkaqgyqeh', 'inzobsq', 'etqomfbislt', 'JtEBq', 'dsrsoz'], 'e')",
                "output": "['etqomfbislt']"
            },
            {
                "input": "filter_by_prefix(['rvuscib', 'unkejbwq', 'hvsvw', 'qzgijxtkbqt', 'zbuxOcWiHonS', 'qdhzmxxwf'], 'u')",
                "output": "['unkejbwq']"
            },
            {
                "input": "filter_by_prefix(['cpgg', 'zrjalcpcq', 'wmlssl', 'yvakkcbfgixw', 'gwIKDjSr', 'pkfxygez'], 'pk')",
                "output": "['pkfxygez']"
            },
            {
                "input": "filter_by_prefix(['ikvxcd', 'mkamr', 'unpsh', 'fzdlqxm gkg', 'BKtwnDFeEBX', 'lletpc'], 'BK')",
                "output": "['BKtwnDFeEBX']"
            },
            {
                "input": "filter_by_prefix(['moylvee', 'qaiist', 'pdcyxad', 'etfun', 'vXGPRQlcP', 'yihwxms'], 'p')",
                "output": "['pdcyxad']"
            },
            {
                "input": "filter_by_prefix(['cgzso', 'ivppapd', 'kkeqpfkl', ' inzrjwhfm', 'GRtJkYLV', 'tuopqbq'], 'c')",
                "output": "['cgzso']"
            },
            {
                "input": "filter_by_prefix(['tyv', 'nhl', 'wazvpsyy', 'qqkonlxaxvq', 'bnhl', 'uoropiqs'], 'wa')",
                "output": "['wazvpsyy']"
            },
            {
                "input": "filter_by_prefix(['sywqmszik', 'gwucwa', 'oowgn', 'evxovemkzh', 'rcOPuCiS', 'uqetyh'], 'ev')",
                "output": "['evxovemkzh']"
            },
            {
                "input": "filter_by_prefix(['tgv', 'zoqjzxz', 'ggag', 'svcyybsowr', 'cyrevICpiBew', 'ehk'], 'eh')",
                "output": "['ehk']"
            },
            {
                "input": "filter_by_prefix([], 's')",
                "output": "[]"
            },
            {
                "input": "filter_by_prefix(['mfwzfsmby', 'dwuzmct', 'ruthl', 'j imluth cl', 'nuvGiAJLP', 'craa'], 'm')",
                "output": "['mfwzfsmby']"
            },
            {
                "input": "filter_by_prefix(['tqlmggeoh', 'chbwix', 'gviiyy', 'tsjuuu', 'vmFVBNr', 'wwscnomb'], 'ts')",
                "output": "['tsjuuu']"
            },
            {
                "input": "filter_by_prefix(['vgtiqmb', 'eqmpymk', 'gzsybf', 'stdajypfavzx', 'IoUJeghCvc', 'cutliglim'], 'eq')",
                "output": "['eqmpymk']"
            },
            {
                "input": "filter_by_prefix(['qyoihv', 'yteiiholb', 'uwu', 'a q', 'CHmYVyhgIJ', 'juvxhncva'], 'C')",
                "output": "['CHmYVyhgIJ']"
            },
            {
                "input": "filter_by_prefix(['afu', 'pyp', 'gsrfiuns', 'rnbbkq', 'tGioT', 'qqe'], 'tG')",
                "output": "['tGioT']"
            },
            {
                "input": "filter_by_prefix([], 'dx')",
                "output": "[]"
            }
        ]
    },
    {
        "problem_description": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
        "ground truth": "def get_positive(l: list):\n    return [e for e in l if e > 0]\n",
        "instances": [
            {
                "input": "get_positive([2, 2, 7, 4, 3])",
                "output": "[2, 2, 7, 4, 3]"
            },
            {
                "input": "get_positive([-3, -7, 3, 5, 8])",
                "output": "[3, 5, 8]"
            },
            {
                "input": "get_positive([3, 1, 3, 8, 11])",
                "output": "[3, 1, 3, 8, 11]"
            },
            {
                "input": "get_positive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])",
                "output": "[5, 3, 2, 3, 3, 9, 123, 1]"
            },
            {
                "input": "get_positive([3, 0])",
                "output": "[3]"
            },
            {
                "input": "get_positive([8, 5, -10, 3, 1, 2, 13, 4, 119, 1, -6])",
                "output": "[8, 5, 3, 1, 2, 13, 4, 119, 1]"
            },
            {
                "input": "get_positive([2, 0])",
                "output": "[2]"
            },
            {
                "input": "get_positive([4, -2, 3, 2, 11])",
                "output": "[4, 3, 2, 11]"
            },
            {
                "input": "get_positive([-6, 1, 6, 9, 10])",
                "output": "[1, 6, 9, 10]"
            },
            {
                "input": "get_positive([0, 1, 5, 7, 5])",
                "output": "[1, 5, 7, 5]"
            },
            {
                "input": "get_positive([4, -4])",
                "output": "[4]"
            },
            {
                "input": "get_positive([-4, -4])",
                "output": "[]"
            },
            {
                "input": "get_positive([0, -4])",
                "output": "[]"
            },
            {
                "input": "get_positive([5, 3, -10, 6, 7, 7, 4, 1, 124, 5, -14])",
                "output": "[5, 3, 6, 7, 7, 4, 1, 124, 5]"
            },
            {
                "input": "get_positive([1, 5, -6, 1, 8, 2, 10, 3, 122, 2, -15])",
                "output": "[1, 5, 1, 8, 2, 10, 3, 122, 2]"
            },
            {
                "input": "get_positive([4, -1, 9, 8, 9])",
                "output": "[4, 9, 8, 9]"
            },
            {
                "input": "get_positive([-4, -2])",
                "output": "[]"
            },
            {
                "input": "get_positive([5, 5, -7, 6, 1, 7, 9, 4, 123, 6, -13])",
                "output": "[5, 5, 6, 1, 7, 9, 4, 123, 6]"
            },
            {
                "input": "get_positive([1, 2, -9, 4, 3, 4, 5, 2, 127, 5, -14])",
                "output": "[1, 2, 4, 3, 4, 5, 2, 127, 5]"
            },
            {
                "input": "get_positive([-3, -3])",
                "output": "[]"
            },
            {
                "input": "get_positive([-6, -3])",
                "output": "[]"
            },
            {
                "input": "get_positive([-4, -2, 6, 2, 4])",
                "output": "[6, 2, 4]"
            },
            {
                "input": "get_positive([1, 3, -9, 5, 5, 3, 4, 1, 124, 2, -12])",
                "output": "[1, 3, 5, 5, 3, 4, 1, 124, 2]"
            },
            {
                "input": "get_positive([-4, 0, 2, 5, 5])",
                "output": "[2, 5, 5]"
            },
            {
                "input": "get_positive([-3, 0, 4, 6, 6])",
                "output": "[4, 6, 6]"
            },
            {
                "input": "get_positive([3, 1, 1, 1, 7])",
                "output": "[3, 1, 1, 1, 7]"
            },
            {
                "input": "get_positive([6, 7, -9, 6, 3, 2, 14, 1, 124, 3, -15])",
                "output": "[6, 7, 6, 3, 2, 14, 1, 124, 3]"
            },
            {
                "input": "get_positive([2, 4, -1, 6, 8, 8, 14, 3, 128, 5, -12])",
                "output": "[2, 4, 6, 8, 8, 14, 3, 128, 5]"
            },
            {
                "input": "get_positive([-4, 1, 3, 2, 10])",
                "output": "[1, 3, 2, 10]"
            },
            {
                "input": "get_positive([-2, -2])",
                "output": "[]"
            },
            {
                "input": "get_positive([-3, -6])",
                "output": "[]"
            },
            {
                "input": "get_positive([-4, 2])",
                "output": "[2]"
            },
            {
                "input": "get_positive([5, 6, -7, 1, 6, 6, 11, 5, 124, 2, -15])",
                "output": "[5, 6, 1, 6, 6, 11, 5, 124, 2]"
            },
            {
                "input": "get_positive([9, 3, -10, 4, 4, 3, 12, 5, 122, 2, -7])",
                "output": "[9, 3, 4, 4, 3, 12, 5, 122, 2]"
            },
            {
                "input": "get_positive([2, 2])",
                "output": "[2, 2]"
            },
            {
                "input": "get_positive([2, 3, -9, 4, 5, 4, 10, 2, 118, 3, -14])",
                "output": "[2, 3, 4, 5, 4, 10, 2, 118, 3]"
            },
            {
                "input": "get_positive([-1, -2, 4, 5, 6])",
                "output": "[4, 5, 6]"
            },
            {
                "input": "get_positive([-2, 3])",
                "output": "[3]"
            },
            {
                "input": "get_positive([-5, -7])",
                "output": "[]"
            },
            {
                "input": "get_positive([3, -1, 7, 7, 9])",
                "output": "[3, 7, 7, 9]"
            },
            {
                "input": "get_positive([1, -4, 9, 3, 9])",
                "output": "[1, 9, 3, 9]"
            },
            {
                "input": "get_positive([3, 1, 3, 4, 3])",
                "output": "[3, 1, 3, 4, 3]"
            },
            {
                "input": "get_positive([3, 4, -2, 5, 3, 8, 6, 2, 128, 2, -13])",
                "output": "[3, 4, 5, 3, 8, 6, 2, 128, 2]"
            },
            {
                "input": "get_positive([0, -4, 1, 2, 3])",
                "output": "[1, 2, 3]"
            },
            {
                "input": "get_positive([-5, 1, 3, 10, 3])",
                "output": "[1, 3, 10, 3]"
            },
            {
                "input": "get_positive([-3, -2, 3, 9, 4])",
                "output": "[3, 9, 4]"
            },
            {
                "input": "get_positive([3, 0, 9, 9, 1])",
                "output": "[3, 9, 9, 1]"
            },
            {
                "input": "get_positive([2, 2, -1, 6, 5, 6, 13, 4, 126, 2, -8])",
                "output": "[2, 2, 6, 5, 6, 13, 4, 126, 2]"
            },
            {
                "input": "get_positive([-2, -5])",
                "output": "[]"
            },
            {
                "input": "get_positive([3, 3, 8, 7, 8])",
                "output": "[3, 3, 8, 7, 8]"
            },
            {
                "input": "get_positive([3, -2])",
                "output": "[3]"
            },
            {
                "input": "get_positive([3, 3, 6, 8, 2])",
                "output": "[3, 3, 6, 8, 2]"
            },
            {
                "input": "get_positive([7, 6, -6, 1, 7, 5, 13, 3, 127, 4, -8])",
                "output": "[7, 6, 1, 7, 5, 13, 3, 127, 4]"
            },
            {
                "input": "get_positive([10, 5, -1, 3, 3, 2, 4, 3, 121, 4, -11])",
                "output": "[10, 5, 3, 3, 2, 4, 3, 121, 4]"
            },
            {
                "input": "get_positive([1, -6])",
                "output": "[1]"
            },
            {
                "input": "get_positive([-3, -1, 5, 2, 6])",
                "output": "[5, 2, 6]"
            },
            {
                "input": "get_positive([-3, -1])",
                "output": "[]"
            },
            {
                "input": "get_positive([3, 1])",
                "output": "[3, 1]"
            },
            {
                "input": "get_positive([7, 8, -9, 5, 7, 7, 13, 1, 121, 4, -13])",
                "output": "[7, 8, 5, 7, 7, 13, 1, 121, 4]"
            },
            {
                "input": "get_positive([6, 3, -5, 2, 5, 7, 4, 4, 128, 4, -14])",
                "output": "[6, 3, 2, 5, 7, 4, 4, 128, 4]"
            },
            {
                "input": "get_positive([6, 1, -9, 1, 6, 8, 5, 5, 126, 5, -7])",
                "output": "[6, 1, 1, 6, 8, 5, 5, 126, 5]"
            },
            {
                "input": "get_positive([3, -1, 8, 7, 5])",
                "output": "[3, 8, 7, 5]"
            },
            {
                "input": "get_positive([4, 8, -8, 1, 6, 1, 14, 4, 122, 3, -7])",
                "output": "[4, 8, 1, 6, 1, 14, 4, 122, 3]"
            },
            {
                "input": "get_positive([2, 3, -1, 3, 2, 2, 4, 2, 123, 4, -12])",
                "output": "[2, 3, 3, 2, 2, 4, 2, 123, 4]"
            },
            {
                "input": "get_positive([6, 6, -10, 7, 2, 7, 12, 1, 126, 2, -5])",
                "output": "[6, 6, 7, 2, 7, 12, 1, 126, 2]"
            },
            {
                "input": "get_positive([8, 5, -6, 1, 3, 3, 6, 3, 128, 5, -5])",
                "output": "[8, 5, 1, 3, 3, 6, 3, 128, 5]"
            },
            {
                "input": "get_positive([1, -2])",
                "output": "[1]"
            },
            {
                "input": "get_positive([-5, -5])",
                "output": "[]"
            },
            {
                "input": "get_positive([-1, -2])",
                "output": "[]"
            },
            {
                "input": "get_positive([7, 6, -8, 4, 3, 5, 7, 4, 128, 2, -13])",
                "output": "[7, 6, 4, 3, 5, 7, 4, 128, 2]"
            },
            {
                "input": "get_positive([7, 4, -8, 1, 2, 7, 14, 2, 126, 5, -15])",
                "output": "[7, 4, 1, 2, 7, 14, 2, 126, 5]"
            },
            {
                "input": "get_positive([-3, 0])",
                "output": "[]"
            },
            {
                "input": "get_positive([-6, -1, 8, 8, 5])",
                "output": "[8, 8, 5]"
            },
            {
                "input": "get_positive([-1, 2, 7, 10, 3])",
                "output": "[2, 7, 10, 3]"
            },
            {
                "input": "get_positive([-1, -6])",
                "output": "[]"
            },
            {
                "input": "get_positive([6, 8, -5, 7, 4, 3, 7, 2, 128, 2, -12])",
                "output": "[6, 8, 7, 4, 3, 7, 2, 128, 2]"
            },
            {
                "input": "get_positive([1, -5])",
                "output": "[1]"
            },
            {
                "input": "get_positive([-2, -3, 1, 6, 2])",
                "output": "[1, 6, 2]"
            },
            {
                "input": "get_positive([6, 1, -6, 2, 5, 8, 13, 5, 128, 2, -10])",
                "output": "[6, 1, 2, 5, 8, 13, 5, 128, 2]"
            },
            {
                "input": "get_positive([2, -7, 8, 3, 10])",
                "output": "[2, 8, 3, 10]"
            },
            {
                "input": "get_positive([3, 8, -10, 1, 1, 1, 12, 2, 125, 6, -9])",
                "output": "[3, 8, 1, 1, 1, 12, 2, 125, 6]"
            },
            {
                "input": "get_positive([1, 3, 1, 9, 2])",
                "output": "[1, 3, 1, 9, 2]"
            },
            {
                "input": "get_positive([])",
                "output": "[]"
            },
            {
                "input": "get_positive([-2, -4])",
                "output": "[]"
            },
            {
                "input": "get_positive([4, -3, 9, 7, 11])",
                "output": "[4, 9, 7, 11]"
            },
            {
                "input": "get_positive([-1, -3, 9, 6, 2])",
                "output": "[9, 6, 2]"
            },
            {
                "input": "get_positive([-2, 1, 8, 8, 6])",
                "output": "[1, 8, 8, 6]"
            },
            {
                "input": "get_positive([1, 1])",
                "output": "[1, 1]"
            },
            {
                "input": "get_positive([1, 5, -2, 1, 3, 6, 4, 5, 124, 1, -5])",
                "output": "[1, 5, 1, 3, 6, 4, 5, 124, 1]"
            },
            {
                "input": "get_positive([6, 2, -8, 4, 6, 8, 8, 3, 122, 1, -9])",
                "output": "[6, 2, 4, 6, 8, 8, 3, 122, 1]"
            },
            {
                "input": "get_positive([7, 1, -3, 3, 1, 7, 7, 4, 118, 5, -5])",
                "output": "[7, 1, 3, 1, 7, 7, 4, 118, 5]"
            },
            {
                "input": "get_positive([2, -4, 5, 4, 10])",
                "output": "[2, 5, 4, 10]"
            },
            {
                "input": "get_positive([6, 8, -8, 2, 5, 2, 6, 5, 125, 6, -12])",
                "output": "[6, 8, 2, 5, 2, 6, 5, 125, 6]"
            },
            {
                "input": "get_positive([6, 5, -10, 6, 8, 7, 7, 5, 124, 2, -7])",
                "output": "[6, 5, 6, 8, 7, 7, 5, 124, 2]"
            },
            {
                "input": "get_positive([-2, -3])",
                "output": "[]"
            },
            {
                "input": "get_positive([-1, 2])",
                "output": "[2]"
            }
        ]
    },
    {
        "problem_description": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
        "ground truth": "def is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
        "instances": [
            {
                "input": "is_prime(14316)",
                "output": "False"
            },
            {
                "input": "is_prime(56)",
                "output": "False"
            },
            {
                "input": "is_prime(13)",
                "output": "True"
            },
            {
                "input": "is_prime(76)",
                "output": "False"
            },
            {
                "input": "is_prime(57)",
                "output": "False"
            },
            {
                "input": "is_prime(98)",
                "output": "False"
            },
            {
                "input": "is_prime(14)",
                "output": "False"
            },
            {
                "input": "is_prime(102)",
                "output": "False"
            },
            {
                "input": "is_prime(12938)",
                "output": "False"
            },
            {
                "input": "is_prime(17)",
                "output": "True"
            },
            {
                "input": "is_prime(20)",
                "output": "False"
            },
            {
                "input": "is_prime(78)",
                "output": "False"
            },
            {
                "input": "is_prime(82)",
                "output": "False"
            },
            {
                "input": "is_prime(61)",
                "output": "True"
            },
            {
                "input": "is_prime(80)",
                "output": "False"
            },
            {
                "input": "is_prime(12884)",
                "output": "False"
            },
            {
                "input": "is_prime(12897)",
                "output": "False"
            },
            {
                "input": "is_prime(75)",
                "output": "False"
            },
            {
                "input": "is_prime(254873)",
                "output": "True"
            },
            {
                "input": "is_prime(14253)",
                "output": "False"
            },
            {
                "input": "is_prime(81)",
                "output": "False"
            },
            {
                "input": "is_prime(12628)",
                "output": "False"
            },
            {
                "input": "is_prime(63)",
                "output": "False"
            },
            {
                "input": "is_prime(90)",
                "output": "False"
            },
            {
                "input": "is_prime(65)",
                "output": "False"
            },
            {
                "input": "is_prime(13796)",
                "output": "False"
            },
            {
                "input": "is_prime(12832)",
                "output": "False"
            },
            {
                "input": "is_prime(254790)",
                "output": "False"
            },
            {
                "input": "is_prime(5)",
                "output": "True"
            },
            {
                "input": "is_prime(19)",
                "output": "True"
            },
            {
                "input": "is_prime(73)",
                "output": "True"
            },
            {
                "input": "is_prime(22)",
                "output": "False"
            },
            {
                "input": "is_prime(3)",
                "output": "True"
            },
            {
                "input": "is_prime(100)",
                "output": "False"
            },
            {
                "input": "is_prime(5 * 17)",
                "output": "False"
            },
            {
                "input": "is_prime(254513)",
                "output": "False"
            },
            {
                "input": "is_prime(104)",
                "output": "False"
            },
            {
                "input": "is_prime(255520)",
                "output": "False"
            },
            {
                "input": "is_prime(101)",
                "output": "True"
            },
            {
                "input": "is_prime(66)",
                "output": "False"
            },
            {
                "input": "is_prime(103)",
                "output": "True"
            },
            {
                "input": "is_prime(58)",
                "output": "False"
            },
            {
                "input": "is_prime(87)",
                "output": "False"
            },
            {
                "input": "is_prime(13441)",
                "output": "True"
            },
            {
                "input": "is_prime(255214)",
                "output": "False"
            },
            {
                "input": "is_prime(13441 * 19)",
                "output": "False"
            },
            {
                "input": "is_prime(88)",
                "output": "False"
            },
            {
                "input": "is_prime(254423)",
                "output": "False"
            },
            {
                "input": "is_prime(13481)",
                "output": "False"
            },
            {
                "input": "is_prime(255046)",
                "output": "False"
            },
            {
                "input": "is_prime(15)",
                "output": "False"
            },
            {
                "input": "is_prime(4)",
                "output": "False"
            },
            {
                "input": "is_prime(11 * 7)",
                "output": "False"
            },
            {
                "input": "is_prime(16)",
                "output": "False"
            },
            {
                "input": "is_prime(6)",
                "output": "False"
            },
            {
                "input": "is_prime(85)",
                "output": "False"
            },
            {
                "input": "is_prime(89)",
                "output": "True"
            },
            {
                "input": "is_prime(9)",
                "output": "False"
            },
            {
                "input": "is_prime(7)",
                "output": "True"
            },
            {
                "input": "is_prime(18)",
                "output": "False"
            },
            {
                "input": "is_prime(106)",
                "output": "False"
            },
            {
                "input": "is_prime(11)",
                "output": "True"
            },
            {
                "input": "is_prime(2)",
                "output": "True"
            },
            {
                "input": "is_prime(255344)",
                "output": "False"
            },
            {
                "input": "is_prime(8)",
                "output": "False"
            },
            {
                "input": "is_prime(255139)",
                "output": "False"
            },
            {
                "input": "is_prime(1)",
                "output": "False"
            },
            {
                "input": "is_prime(96)",
                "output": "False"
            },
            {
                "input": "is_prime(83)",
                "output": "True"
            },
            {
                "input": "is_prime(12)",
                "output": "False"
            }
        ]
    },
    {
        "problem_description": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
        "ground truth": "def poly(xs: list, x: float):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
        "instances": []
    },
    {
        "problem_description": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
        "ground truth": "def sort_third(l: list):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
        "instances": [
            {
                "input": "sort_third([9, 3, -14, 5, 23, 7, 5, 11, 17, -15])",
                "output": "[-15, 3, -14, 5, 23, 7, 5, 11, 17, 9]"
            },
            {
                "input": "sort_third([10, 8, 2, 3, 6, 14, 3])",
                "output": "[3, 8, 2, 3, 6, 14, 10]"
            },
            {
                "input": "sort_third([3, 3, -10, 4, -6, 5, 11, 3, 121, 5, -15])",
                "output": "[3, 3, -10, 4, -6, 5, 5, 3, 121, 11, -15]"
            },
            {
                "input": "sort_third([3, 10, 2, 7, 8, 4, 2])",
                "output": "[2, 10, 2, 3, 8, 4, 7]"
            },
            {
                "input": "sort_third([3, 5, 3, 6, 10, 11, 1])",
                "output": "[1, 5, 3, 3, 10, 11, 6]"
            },
            {
                "input": "sort_third([8, 4, -15, 1, 26, 7, 6, 12, 17, -15])",
                "output": "[-15, 4, -15, 1, 26, 7, 6, 12, 17, 8]"
            },
            {
                "input": "sort_third([3, 3, 6, 8, 2, 12, 1])",
                "output": "[1, 3, 6, 3, 2, 12, 8]"
            },
            {
                "input": "sort_third([3, 8, 4, 2, 8, 12, 5, 5])",
                "output": "[2, 8, 4, 3, 8, 12, 5, 5]"
            },
            {
                "input": "sort_third([10, 2, 11, 4, 7, 4, 3])",
                "output": "[3, 2, 11, 4, 7, 4, 10]"
            },
            {
                "input": "sort_third([7, 7, -7, 6, -2, 3, 14, 5, 123, 3, -10])",
                "output": "[3, 7, -7, 6, -2, 3, 7, 5, 123, 14, -10]"
            },
            {
                "input": "sort_third([1, 7, 7, 9, 1, 8, 1])",
                "output": "[1, 7, 7, 1, 1, 8, 9]"
            },
            {
                "input": "sort_third([6, 7, 6, 9, 4, 12, 6])",
                "output": "[6, 7, 6, 6, 4, 12, 9]"
            },
            {
                "input": "sort_third([6, 7, 4])",
                "output": "[6, 7, 4]"
            },
            {
                "input": "sort_third([6, 6, -7, 1, 19, 2, 7, 15, 16, -14])",
                "output": "[-14, 6, -7, 1, 19, 2, 6, 15, 16, 7]"
            },
            {
                "input": "sort_third([3, 2, -1, 5, 0, 1, 8, 5, 128, 5, -11])",
                "output": "[3, 2, -1, 5, 0, 1, 5, 5, 128, 8, -11]"
            },
            {
                "input": "sort_third([1, 7, 6])",
                "output": "[1, 7, 6]"
            },
            {
                "input": "sort_third([9, 9, 5, 5, 3, 5, 5])",
                "output": "[5, 9, 5, 5, 3, 5, 9]"
            },
            {
                "input": "sort_third([4, 2, 5, 6, 6, 6, 6])",
                "output": "[4, 2, 5, 6, 6, 6, 6]"
            },
            {
                "input": "sort_third([9, 6, -5, 6, -8, 5, 5, 4, 119, 6, -12])",
                "output": "[5, 6, -5, 6, -8, 5, 6, 4, 119, 9, -12]"
            },
            {
                "input": "sort_third([1, 11, -16, 3, 22, 7, 5, 8, 16, -15])",
                "output": "[-15, 11, -16, 1, 22, 7, 3, 8, 16, 5]"
            },
            {
                "input": "sort_third([3, 6, 8, 7, 1, 14, 1])",
                "output": "[1, 6, 8, 3, 1, 14, 7]"
            },
            {
                "input": "sort_third([8, 8, 4, 1, 4, 8, 7])",
                "output": "[1, 8, 4, 7, 4, 8, 8]"
            },
            {
                "input": "sort_third([1, 2, 3, 9, 6, 4, 7])",
                "output": "[1, 2, 3, 7, 6, 4, 9]"
            },
            {
                "input": "sort_third([2, 4, 5, 7, 12, 4, 3])",
                "output": "[2, 4, 5, 3, 12, 4, 7]"
            },
            {
                "input": "sort_third([4, 2, -8, 1, -4, 2, 7, 1, 128, 5, -9])",
                "output": "[1, 2, -8, 4, -4, 2, 5, 1, 128, 7, -9]"
            },
            {
                "input": "sort_third([9, 3, -8, 7, 24, 6, 3, 7, 16, -7])",
                "output": "[-7, 3, -8, 3, 24, 6, 7, 7, 16, 9]"
            },
            {
                "input": "sort_third([2, 3, 1])",
                "output": "[2, 3, 1]"
            },
            {
                "input": "sort_third([6, 3, -11, 9, 22, 6, 4, 11, 11, -10])",
                "output": "[-10, 3, -11, 4, 22, 6, 6, 11, 11, 9]"
            },
            {
                "input": "sort_third([8, 10, 6, 4, 13, 4, 6])",
                "output": "[4, 10, 6, 6, 13, 4, 8]"
            },
            {
                "input": "sort_third([10, 12, 6, 1, 10, 5, 2])",
                "output": "[1, 12, 6, 2, 10, 5, 10]"
            },
            {
                "input": "sort_third([3, 4, 6, 4, 5, 12, 1, 6])",
                "output": "[1, 4, 6, 3, 5, 12, 4, 6]"
            },
            {
                "input": "sort_third([7, 5, -1, 7, 2, 7, 9, 2, 126, 2, -15])",
                "output": "[2, 5, -1, 7, 2, 7, 7, 2, 126, 9, -15]"
            },
            {
                "input": "sort_third([4, 6, -6, 2, -3, 2, 5, 2, 128, 5, -12])",
                "output": "[2, 6, -6, 4, -3, 2, 5, 2, 128, 5, -12]"
            },
            {
                "input": "sort_third([1, 2, 11, 8, 8, 2, 4])",
                "output": "[1, 2, 11, 4, 8, 2, 8]"
            },
            {
                "input": "sort_third([1, 1, 5])",
                "output": "[1, 1, 5]"
            },
            {
                "input": "sort_third([1, 4, 2])",
                "output": "[1, 4, 2]"
            },
            {
                "input": "sort_third([4, 11, 5, 5, 5, 10, 7, 4])",
                "output": "[4, 11, 5, 5, 5, 10, 7, 4]"
            },
            {
                "input": "sort_third([6, 10, -7, 9, 27, 2, 2, 7, 12, -15])",
                "output": "[-15, 10, -7, 2, 27, 2, 6, 7, 12, 9]"
            },
            {
                "input": "sort_third([2, 3, -4, 4, -3, 7, 10, 3, 118, 3, -10])",
                "output": "[2, 3, -4, 3, -3, 7, 4, 3, 118, 10, -10]"
            },
            {
                "input": "sort_third([2, 7, 1, 4, 2, 10, 1])",
                "output": "[1, 7, 1, 2, 2, 10, 4]"
            },
            {
                "input": "sort_third([9, 1, 5, 5, 3, 9, 4, 4])",
                "output": "[4, 1, 5, 5, 3, 9, 9, 4]"
            },
            {
                "input": "sort_third([2, 10, 1, 6, 7, 13, 6, 4])",
                "output": "[2, 10, 1, 6, 7, 13, 6, 4]"
            },
            {
                "input": "sort_third([9, 5, -12, 2, 25, 6, 5, 7, 16, -14])",
                "output": "[-14, 5, -12, 2, 25, 6, 5, 7, 16, 9]"
            },
            {
                "input": "sort_third([10, 7, 10, 7, 4, 3, 1])",
                "output": "[1, 7, 10, 7, 4, 3, 10]"
            },
            {
                "input": "sort_third([7, 6, 8, 2, 8, 13, 6])",
                "output": "[2, 6, 8, 6, 8, 13, 7]"
            },
            {
                "input": "sort_third([3, 7, -15, 6, 23, 3, 6, 11, 15, -14])",
                "output": "[-14, 7, -15, 3, 23, 3, 6, 11, 15, 6]"
            },
            {
                "input": "sort_third([7, 3, 4, 1, 3, 14, 1])",
                "output": "[1, 3, 4, 1, 3, 14, 7]"
            },
            {
                "input": "sort_third([1, 9, 4, 2, 7, 8, 5])",
                "output": "[1, 9, 4, 2, 7, 8, 5]"
            },
            {
                "input": "sort_third([2, 10, 6, 8, 13, 11, 1, 1])",
                "output": "[1, 10, 6, 2, 13, 11, 8, 1]"
            },
            {
                "input": "sort_third([7, 3, 7, 8, 5, 8, 2])",
                "output": "[2, 3, 7, 7, 5, 8, 8]"
            },
            {
                "input": "sort_third([8, 6, -13, 2, 28, 3, 5, 12, 17, -6])",
                "output": "[-6, 6, -13, 2, 28, 3, 5, 12, 17, 8]"
            },
            {
                "input": "sort_third([6, 7, 5])",
                "output": "[6, 7, 5]"
            },
            {
                "input": "sort_third([1, 1, 2, 1, 4, 12, 4])",
                "output": "[1, 1, 2, 1, 4, 12, 4]"
            },
            {
                "input": "sort_third([8, 10, 2, 8, 9, 7, 6, 6])",
                "output": "[6, 10, 2, 8, 9, 7, 8, 6]"
            },
            {
                "input": "sort_third([7, 7, 6, 4, 8, 12, 2])",
                "output": "[2, 7, 6, 4, 8, 12, 7]"
            },
            {
                "input": "sort_third([10, 6, 8, 8, 3, 6, 7, 3])",
                "output": "[7, 6, 8, 8, 3, 6, 10, 3]"
            },
            {
                "input": "sort_third([6, 8, 4, 7, 8, 8, 3, 6])",
                "output": "[3, 8, 4, 6, 8, 8, 7, 6]"
            },
            {
                "input": "sort_third([3, 9, 6, 8, 6, 8, 3])",
                "output": "[3, 9, 6, 3, 6, 8, 8]"
            },
            {
                "input": "sort_third([4, 4, 7, 8, 10, 6, 5, 3])",
                "output": "[4, 4, 7, 5, 10, 6, 8, 3]"
            },
            {
                "input": "sort_third([7, 8, -8, 5, -3, 6, 14, 2, 119, 5, -9])",
                "output": "[5, 8, -8, 5, -3, 6, 7, 2, 119, 14, -9]"
            },
            {
                "input": "sort_third([2, 9, 7, 4, 8, 7, 4, 6])",
                "output": "[2, 9, 7, 4, 8, 7, 4, 6]"
            },
            {
                "input": "sort_third([1, 5, -16, 7, 28, 2, 8, 6, 11, -6])",
                "output": "[-6, 5, -16, 1, 28, 2, 7, 6, 11, 8]"
            },
            {
                "input": "sort_third([7, 5, -1, 3, -1, 6, 5, 3, 125, 2, -11])",
                "output": "[2, 5, -1, 3, -1, 6, 5, 3, 125, 7, -11]"
            },
            {
                "input": "sort_third([4, 3, -17, 8, 20, 7, 5, 14, 11, -14])",
                "output": "[-14, 3, -17, 4, 20, 7, 5, 14, 11, 8]"
            },
            {
                "input": "sort_third([10, 6, 8, 9, 11, 4, 7])",
                "output": "[7, 6, 8, 9, 11, 4, 10]"
            },
            {
                "input": "sort_third([7, 7, 7, 4, 11, 14, 1, 6])",
                "output": "[1, 7, 7, 4, 11, 14, 7, 6]"
            },
            {
                "input": "sort_third([2, 2, 4])",
                "output": "[2, 2, 4]"
            },
            {
                "input": "sort_third([1, 1, -4, 1, -5, 1, 6, 1, 119, 4, -15])",
                "output": "[1, 1, -4, 1, -5, 1, 4, 1, 119, 6, -15]"
            },
            {
                "input": "sort_third([9, 10, 5, 7, 9, 4, 1])",
                "output": "[1, 10, 5, 7, 9, 4, 9]"
            },
            {
                "input": "sort_third([9, 7, -9, 5, 20, 7, 8, 15, 11, -5])",
                "output": "[-5, 7, -9, 5, 20, 7, 8, 15, 11, 9]"
            },
            {
                "input": "sort_third([9, 7, 7, 1, 4, 2, 4])",
                "output": "[1, 7, 7, 4, 4, 2, 9]"
            },
            {
                "input": "sort_third([4, 2, 2])",
                "output": "[4, 2, 2]"
            },
            {
                "input": "sort_third([1, 7, -3, 6, -6, 7, 9, 5, 126, 2, -7])",
                "output": "[1, 7, -3, 2, -6, 7, 6, 5, 126, 9, -7]"
            },
            {
                "input": "sort_third([9, 9, 1, 7, 4, 12, 3, 1])",
                "output": "[3, 9, 1, 7, 4, 12, 9, 1]"
            },
            {
                "input": "sort_third([10, 6, -5, 3, -3, 2, 10, 5, 127, 2, -14])",
                "output": "[2, 6, -5, 3, -3, 2, 10, 5, 127, 10, -14]"
            },
            {
                "input": "sort_third([7, 1, 4, 5, 6, 12, 4])",
                "output": "[4, 1, 4, 5, 6, 12, 7]"
            },
            {
                "input": "sort_third([4, 7, 6])",
                "output": "[4, 7, 6]"
            },
            {
                "input": "sort_third([9, 2, 8, 9, 11, 5, 3])",
                "output": "[3, 2, 8, 9, 11, 5, 9]"
            },
            {
                "input": "sort_third([10, 7, 2, 4, 5, 7, 2])",
                "output": "[2, 7, 2, 4, 5, 7, 10]"
            },
            {
                "input": "sort_third([4, 8, 8, 2, 2, 14, 1])",
                "output": "[1, 8, 8, 2, 2, 14, 4]"
            },
            {
                "input": "sort_third([9, 7, 6, 5, 13, 6, 7])",
                "output": "[5, 7, 6, 7, 13, 6, 9]"
            },
            {
                "input": "sort_third([6, 3, 8, 5, 6, 10, 4, 3])",
                "output": "[4, 3, 8, 5, 6, 10, 6, 3]"
            },
            {
                "input": "sort_third([7, 6, 1, 4, 3, 10, 3])",
                "output": "[3, 6, 1, 4, 3, 10, 7]"
            },
            {
                "input": "sort_third([6, 6, 3, 9, 11, 11, 6])",
                "output": "[6, 6, 3, 6, 11, 11, 9]"
            },
            {
                "input": "sort_third([3, 1, 6, 4, 13, 10, 7, 6])",
                "output": "[3, 1, 6, 4, 13, 10, 7, 6]"
            },
            {
                "input": "sort_third([4, 1, 6])",
                "output": "[4, 1, 6]"
            },
            {
                "input": "sort_third([7, 1, 2, 9, 11, 10, 4])",
                "output": "[4, 1, 2, 7, 11, 10, 9]"
            },
            {
                "input": "sort_third([2, 9, 6, 1, 12, 4, 4, 5])",
                "output": "[1, 9, 6, 2, 12, 4, 4, 5]"
            },
            {
                "input": "sort_third([6, 5, 6, 2, 5, 1, 5])",
                "output": "[2, 5, 6, 5, 5, 1, 6]"
            },
            {
                "input": "sort_third([2, 6, 2])",
                "output": "[2, 6, 2]"
            },
            {
                "input": "sort_third([2, 3, 7])",
                "output": "[2, 3, 7]"
            },
            {
                "input": "sort_third([4, 11, 7, 4, 13, 12, 6])",
                "output": "[4, 11, 7, 4, 13, 12, 6]"
            },
            {
                "input": "sort_third([7, 7, -9, 8, 23, 3, 4, 10, 17, -5])",
                "output": "[-5, 7, -9, 4, 23, 3, 7, 10, 17, 8]"
            },
            {
                "input": "sort_third([4, 5, 3, 6, 7, 11, 6])",
                "output": "[4, 5, 3, 6, 7, 11, 6]"
            },
            {
                "input": "sort_third([6, 6, -9, 1, 2, 6, 10, 5, 127, 2, -6])",
                "output": "[1, 6, -9, 2, 2, 6, 6, 5, 127, 10, -6]"
            },
            {
                "input": "sort_third([1, 3, 8, 2, 10, 8, 1, 1])",
                "output": "[1, 3, 8, 1, 10, 8, 2, 1]"
            },
            {
                "input": "sort_third([5, 11, 2, 7, 12, 11, 1])",
                "output": "[1, 11, 2, 5, 12, 11, 7]"
            },
            {
                "input": "sort_third([6, 11, 9, 8, 3, 2, 1])",
                "output": "[1, 11, 9, 6, 3, 2, 8]"
            },
            {
                "input": "sort_third([5, 9, 5, 5, 13, 3, 2])",
                "output": "[2, 9, 5, 5, 13, 3, 5]"
            },
            {
                "input": "sort_third([9, 11, -17, 8, 24, 7, 5, 7, 10, -9])",
                "output": "[-9, 11, -17, 5, 24, 7, 8, 7, 10, 9]"
            },
            {
                "input": "sort_third([7, 1, 5, 4, 3, 11, 6, 6])",
                "output": "[4, 1, 5, 6, 3, 11, 7, 6]"
            },
            {
                "input": "sort_third([1, 7, 13, 2, 13, 3, 4])",
                "output": "[1, 7, 13, 2, 13, 3, 4]"
            },
            {
                "input": "sort_third([3, 6, 9, 4, 5, 5, 2])",
                "output": "[2, 6, 9, 3, 5, 5, 4]"
            },
            {
                "input": "sort_third([9, 6, -10, 2, -2, 1, 14, 5, 124, 6, -6])",
                "output": "[2, 6, -10, 6, -2, 1, 9, 5, 124, 14, -6]"
            },
            {
                "input": "sort_third([10, 9, -13, 7, 22, 1, 1, 10, 16, -8])",
                "output": "[-8, 9, -13, 1, 22, 1, 7, 10, 16, 10]"
            },
            {
                "input": "sort_third([6, 1, 8, 3, 9, 1, 7])",
                "output": "[3, 1, 8, 6, 9, 1, 7]"
            },
            {
                "input": "sort_third([5, 2, 6])",
                "output": "[5, 2, 6]"
            },
            {
                "input": "sort_third([5, 7, 8, 4, 5, 8, 5])",
                "output": "[4, 7, 8, 5, 5, 8, 5]"
            },
            {
                "input": "sort_third([3, 5, 8, 3, 6, 8, 2])",
                "output": "[2, 5, 8, 3, 6, 8, 3]"
            },
            {
                "input": "sort_third([4, 4, 1])",
                "output": "[4, 4, 1]"
            },
            {
                "input": "sort_third([2, 5, 6])",
                "output": "[2, 5, 6]"
            },
            {
                "input": "sort_third([4, 4, 8])",
                "output": "[4, 4, 8]"
            },
            {
                "input": "sort_third([8, 4, -2, 7, 0, 7, 4, 2, 126, 1, -6])",
                "output": "[1, 4, -2, 4, 0, 7, 7, 2, 126, 8, -6]"
            },
            {
                "input": "sort_third([10, 11, 7, 7, 4, 10, 5])",
                "output": "[5, 11, 7, 7, 4, 10, 10]"
            },
            {
                "input": "sort_third([7, 4, 11, 8, 8, 1, 1])",
                "output": "[1, 4, 11, 7, 8, 1, 8]"
            },
            {
                "input": "sort_third([2, 4, 3, 4, 4, 6, 1])",
                "output": "[1, 4, 3, 2, 4, 6, 4]"
            },
            {
                "input": "sort_third([9, 3, -3, 7, -7, 6, 5, 5, 127, 1, -13])",
                "output": "[1, 3, -3, 5, -7, 6, 7, 5, 127, 9, -13]"
            },
            {
                "input": "sort_third([6, 2, 11, 8, 13, 4, 1])",
                "output": "[1, 2, 11, 6, 13, 4, 8]"
            },
            {
                "input": "sort_third([2, 4, -4, 6, -8, 8, 4, 5, 123, 3, -10])",
                "output": "[2, 4, -4, 3, -8, 8, 4, 5, 123, 6, -10]"
            },
            {
                "input": "sort_third([6, 7, -8, 2, 26, 2, 1, 16, 13, -11])",
                "output": "[-11, 7, -8, 1, 26, 2, 2, 16, 13, 6]"
            },
            {
                "input": "sort_third([1, 5, -10, 1, 22, 6, 8, 7, 17, -12])",
                "output": "[-12, 5, -10, 1, 22, 6, 1, 7, 17, 8]"
            },
            {
                "input": "sort_third([5, 8, 6, 4, 11, 10, 4])",
                "output": "[4, 8, 6, 4, 11, 10, 5]"
            },
            {
                "input": "sort_third([2, 8, 2, 1, 6, 11, 4])",
                "output": "[1, 8, 2, 2, 6, 11, 4]"
            },
            {
                "input": "sort_third([1, 11, 6, 3, 12, 8, 6])",
                "output": "[1, 11, 6, 3, 12, 8, 6]"
            },
            {
                "input": "sort_third([3, 6, 8])",
                "output": "[3, 6, 8]"
            }
        ]
    },
    {
        "problem_description": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
        "ground truth": "def unique(l: list):\n    return sorted(list(set(l)))\n",
        "instances": [
            {
                "input": "unique([3, 5, 1, 7, 1, 8, 4, 5, 120])",
                "output": "[1, 3, 4, 5, 7, 8, 120]"
            },
            {
                "input": "unique([1, 2, 9, 6, 3, 7, 5, 4, 122])",
                "output": "[1, 2, 3, 4, 5, 6, 7, 9, 122]"
            },
            {
                "input": "unique([4, 5, 6, 2, 7, 2, 9, 3, 125])",
                "output": "[2, 3, 4, 5, 6, 7, 9, 125]"
            },
            {
                "input": "unique([6, 8, 6, 1, 2, 1, 4, 5, 126])",
                "output": "[1, 2, 4, 5, 6, 8, 126]"
            },
            {
                "input": "unique([3, 6, 1, 5, 4, 7, 14, 2, 121])",
                "output": "[1, 2, 3, 4, 5, 6, 7, 14, 121]"
            },
            {
                "input": "unique([6, 4, 5, 1, 3, 2, 10, 3, 122])",
                "output": "[1, 2, 3, 4, 5, 6, 10, 122]"
            },
            {
                "input": "unique([2, 2, 5, 3, 7, 7, 11, 3, 119])",
                "output": "[2, 3, 5, 7, 11, 119]"
            },
            {
                "input": "unique([8, 5, 10, 7, 2, 5, 8, 4, 122])",
                "output": "[2, 4, 5, 7, 8, 10, 122]"
            },
            {
                "input": "unique([3, 7, 2, 5, 8, 2, 11, 1, 121])",
                "output": "[1, 2, 3, 5, 7, 8, 11, 121]"
            },
            {
                "input": "unique([1, 8, 3, 7, 3, 1, 12, 1, 122])",
                "output": "[1, 3, 7, 8, 12, 122]"
            },
            {
                "input": "unique([1, 8, 3, 1, 8, 8, 13, 4, 118])",
                "output": "[1, 3, 4, 8, 13, 118]"
            },
            {
                "input": "unique([5, 4, 10, 4, 6, 1, 4, 4, 126])",
                "output": "[1, 4, 5, 6, 10, 126]"
            },
            {
                "input": "unique([4, 7, 2, 2, 5, 8, 5, 3, 124])",
                "output": "[2, 3, 4, 5, 7, 8, 124]"
            },
            {
                "input": "unique([4, 4, 5, 3, 3, 8, 11, 3, 126])",
                "output": "[3, 4, 5, 8, 11, 126]"
            },
            {
                "input": "unique([4, 1, 1, 4, 7, 1, 13, 5, 124])",
                "output": "[1, 4, 5, 7, 13, 124]"
            },
            {
                "input": "unique([9, 2, 3, 4, 2, 3, 13, 1, 128])",
                "output": "[1, 2, 3, 4, 9, 13, 128]"
            },
            {
                "input": "unique([7, 6, 7, 5, 1, 2, 5, 1, 128])",
                "output": "[1, 2, 5, 6, 7, 128]"
            },
            {
                "input": "unique([6, 8, 9, 6, 5, 3, 11, 5, 124])",
                "output": "[3, 5, 6, 8, 9, 11, 124]"
            },
            {
                "input": "unique([5, 4, 8, 2, 6, 8, 12, 3, 123])",
                "output": "[2, 3, 4, 5, 6, 8, 12, 123]"
            },
            {
                "input": "unique([6, 2, 9, 7, 8, 3, 12, 3, 126])",
                "output": "[2, 3, 6, 7, 8, 9, 12, 126]"
            },
            {
                "input": "unique([9, 6, 2, 2, 7, 2, 7, 3, 118])",
                "output": "[2, 3, 6, 7, 9, 118]"
            },
            {
                "input": "unique([2, 6, 1, 7, 5, 6, 5, 3, 121])",
                "output": "[1, 2, 3, 5, 6, 7, 121]"
            },
            {
                "input": "unique([10, 3, 2, 1, 1, 2, 5, 4, 124])",
                "output": "[1, 2, 3, 4, 5, 10, 124]"
            },
            {
                "input": "unique([4, 1, 5, 2, 1, 3, 4, 1, 118])",
                "output": "[1, 2, 3, 4, 5, 118]"
            },
            {
                "input": "unique([4, 7, 3, 7, 6, 5, 5, 2, 125])",
                "output": "[2, 3, 4, 5, 6, 7, 125]"
            },
            {
                "input": "unique([8, 5, 9, 4, 3, 7, 12, 3, 123])",
                "output": "[3, 4, 5, 7, 8, 9, 12, 123]"
            },
            {
                "input": "unique([8, 2, 10, 3, 3, 7, 12, 2, 122])",
                "output": "[2, 3, 7, 8, 10, 12, 122]"
            },
            {
                "input": "unique([5, 3, 9, 4, 2, 6, 12, 3, 123])",
                "output": "[2, 3, 4, 5, 6, 9, 12, 123]"
            },
            {
                "input": "unique([2, 1, 5, 1, 5, 3, 11, 2, 122])",
                "output": "[1, 2, 3, 5, 11, 122]"
            },
            {
                "input": "unique([4, 2, 9, 7, 7, 2, 9, 1, 123])",
                "output": "[1, 2, 4, 7, 9, 123]"
            },
            {
                "input": "unique([6, 2, 2, 1, 4, 1, 13, 4, 120])",
                "output": "[1, 2, 4, 6, 13, 120]"
            },
            {
                "input": "unique([2, 4, 2, 5, 1, 1, 8, 1, 125])",
                "output": "[1, 2, 4, 5, 8, 125]"
            },
            {
                "input": "unique([10, 7, 4, 4, 7, 1, 11, 2, 122])",
                "output": "[1, 2, 4, 7, 10, 11, 122]"
            },
            {
                "input": "unique([2, 3, 5, 4, 4, 8, 4, 1, 118])",
                "output": "[1, 2, 3, 4, 5, 8, 118]"
            },
            {
                "input": "unique([8, 4, 4, 2, 2, 6, 7, 4, 128])",
                "output": "[2, 4, 6, 7, 8, 128]"
            },
            {
                "input": "unique([9, 8, 4, 2, 1, 2, 6, 1, 122])",
                "output": "[1, 2, 4, 6, 8, 9, 122]"
            },
            {
                "input": "unique([1, 8, 7, 7, 3, 3, 6, 2, 123])",
                "output": "[1, 2, 3, 6, 7, 8, 123]"
            },
            {
                "input": "unique([4, 8, 8, 7, 5, 1, 10, 4, 118])",
                "output": "[1, 4, 5, 7, 8, 10, 118]"
            },
            {
                "input": "unique([10, 7, 2, 2, 6, 6, 6, 3, 120])",
                "output": "[2, 3, 6, 7, 10, 120]"
            },
            {
                "input": "unique([4, 8, 6, 7, 8, 5, 8, 4, 124])",
                "output": "[4, 5, 6, 7, 8, 124]"
            },
            {
                "input": "unique([6, 4, 6, 2, 5, 1, 10, 2, 121])",
                "output": "[1, 2, 4, 5, 6, 10, 121]"
            },
            {
                "input": "unique([8, 5, 3, 7, 4, 1, 12, 1, 127])",
                "output": "[1, 3, 4, 5, 7, 8, 12, 127]"
            },
            {
                "input": "unique([2, 3, 6, 2, 7, 3, 10, 5, 127])",
                "output": "[2, 3, 5, 6, 7, 10, 127]"
            },
            {
                "input": "unique([6, 7, 3, 3, 1, 4, 9, 2, 121])",
                "output": "[1, 2, 3, 4, 6, 7, 9, 121]"
            },
            {
                "input": "unique([7, 3, 8, 6, 6, 5, 8, 4, 119])",
                "output": "[3, 4, 5, 6, 7, 8, 119]"
            },
            {
                "input": "unique([9, 3, 10, 6, 8, 6, 12, 2, 121])",
                "output": "[2, 3, 6, 8, 9, 10, 12, 121]"
            },
            {
                "input": "unique([3, 7, 5, 1, 5, 2, 10, 5, 119])",
                "output": "[1, 2, 3, 5, 7, 10, 119]"
            },
            {
                "input": "unique([2, 6, 7, 7, 7, 8, 12, 2, 118])",
                "output": "[2, 6, 7, 8, 12, 118]"
            },
            {
                "input": "unique([2, 3, 7, 1, 4, 1, 14, 1, 120])",
                "output": "[1, 2, 3, 4, 7, 14, 120]"
            },
            {
                "input": "unique([8, 2, 3, 5, 1, 2, 13, 4, 122])",
                "output": "[1, 2, 3, 4, 5, 8, 13, 122]"
            },
            {
                "input": "unique([2, 8, 2, 1, 2, 3, 11, 2, 125])",
                "output": "[1, 2, 3, 8, 11, 125]"
            },
            {
                "input": "unique([5, 1, 4, 2, 4, 4, 8, 5, 123])",
                "output": "[1, 2, 4, 5, 8, 123]"
            },
            {
                "input": "unique([3, 3, 2, 4, 1, 7, 10, 2, 120])",
                "output": "[1, 2, 3, 4, 7, 10, 120]"
            },
            {
                "input": "unique([8, 4, 3, 7, 5, 2, 4, 5, 125])",
                "output": "[2, 3, 4, 5, 7, 8, 125]"
            },
            {
                "input": "unique([7, 2, 10, 4, 5, 4, 5, 5, 128])",
                "output": "[2, 4, 5, 7, 10, 128]"
            },
            {
                "input": "unique([7, 5, 10, 7, 2, 7, 9, 2, 119])",
                "output": "[2, 5, 7, 9, 10, 119]"
            },
            {
                "input": "unique([6, 5, 5, 4, 3, 2, 8, 3, 119])",
                "output": "[2, 3, 4, 5, 6, 8, 119]"
            },
            {
                "input": "unique([10, 4, 8, 7, 6, 7, 5, 4, 123])",
                "output": "[4, 5, 6, 7, 8, 10, 123]"
            },
            {
                "input": "unique([10, 3, 4, 6, 3, 6, 6, 5, 123])",
                "output": "[3, 4, 5, 6, 10, 123]"
            },
            {
                "input": "unique([7, 6, 6, 3, 5, 8, 12, 1, 128])",
                "output": "[1, 3, 5, 6, 7, 8, 12, 128]"
            },
            {
                "input": "unique([7, 8, 8, 2, 8, 6, 9, 5, 125])",
                "output": "[2, 5, 6, 7, 8, 9, 125]"
            },
            {
                "input": "unique([3, 7, 2, 6, 1, 3, 8, 1, 124])",
                "output": "[1, 2, 3, 6, 7, 8, 124]"
            },
            {
                "input": "unique([5, 5, 1, 1, 5, 8, 6, 1, 122])",
                "output": "[1, 5, 6, 8, 122]"
            },
            {
                "input": "unique([6, 8, 2, 5, 5, 8, 8, 5, 118])",
                "output": "[2, 5, 6, 8, 118]"
            },
            {
                "input": "unique([5, 2, 1, 4, 3, 4, 11, 3, 119])",
                "output": "[1, 2, 3, 4, 5, 11, 119]"
            },
            {
                "input": "unique([3, 1, 8, 3, 3, 4, 9, 2, 123])",
                "output": "[1, 2, 3, 4, 8, 9, 123]"
            },
            {
                "input": "unique([10, 4, 8, 3, 4, 8, 14, 1, 119])",
                "output": "[1, 3, 4, 8, 10, 14, 119]"
            },
            {
                "input": "unique([10, 6, 1, 6, 1, 3, 13, 2, 128])",
                "output": "[1, 2, 3, 6, 10, 13, 128]"
            },
            {
                "input": "unique([5, 5, 1, 3, 5, 8, 9, 4, 119])",
                "output": "[1, 3, 4, 5, 8, 9, 119]"
            },
            {
                "input": "unique([2, 8, 10, 1, 4, 8, 10, 5, 127])",
                "output": "[1, 2, 4, 5, 8, 10, 127]"
            },
            {
                "input": "unique([5, 5, 2, 7, 1, 3, 6, 2, 124])",
                "output": "[1, 2, 3, 5, 6, 7, 124]"
            },
            {
                "input": "unique([7, 4, 2, 3, 5, 6, 12, 3, 120])",
                "output": "[2, 3, 4, 5, 6, 7, 12, 120]"
            },
            {
                "input": "unique([10, 7, 9, 5, 5, 1, 14, 1, 119])",
                "output": "[1, 5, 7, 9, 10, 14, 119]"
            },
            {
                "input": "unique([2, 7, 6, 1, 3, 1, 4, 4, 119])",
                "output": "[1, 2, 3, 4, 6, 7, 119]"
            },
            {
                "input": "unique([7, 7, 7, 6, 8, 8, 12, 1, 127])",
                "output": "[1, 6, 7, 8, 12, 127]"
            },
            {
                "input": "unique([9, 5, 5, 2, 6, 8, 5, 5, 119])",
                "output": "[2, 5, 6, 8, 9, 119]"
            },
            {
                "input": "unique([10, 1, 2, 1, 1, 2, 13, 3, 121])",
                "output": "[1, 2, 3, 10, 13, 121]"
            },
            {
                "input": "unique([9, 1, 1, 1, 1, 4, 12, 5, 128])",
                "output": "[1, 4, 5, 9, 12, 128]"
            },
            {
                "input": "unique([5, 3, 5, 2, 3, 3, 9, 0, 123])",
                "output": "[0, 2, 3, 5, 9, 123]"
            },
            {
                "input": "unique([3, 4, 5, 4, 6, 8, 5, 5, 126])",
                "output": "[3, 4, 5, 6, 8, 126]"
            },
            {
                "input": "unique([9, 6, 4, 5, 1, 6, 12, 4, 124])",
                "output": "[1, 4, 5, 6, 9, 12, 124]"
            },
            {
                "input": "unique([9, 4, 3, 2, 2, 3, 11, 1, 119])",
                "output": "[1, 2, 3, 4, 9, 11, 119]"
            },
            {
                "input": "unique([1, 3, 8, 2, 7, 8, 5, 3, 128])",
                "output": "[1, 2, 3, 5, 7, 8, 128]"
            },
            {
                "input": "unique([7, 4, 7, 3, 4, 5, 4, 4, 126])",
                "output": "[3, 4, 5, 7, 126]"
            },
            {
                "input": "unique([2, 6, 9, 1, 4, 1, 10, 2, 122])",
                "output": "[1, 2, 4, 6, 9, 10, 122]"
            },
            {
                "input": "unique([2, 2, 5, 1, 7, 6, 8, 1, 122])",
                "output": "[1, 2, 5, 6, 7, 8, 122]"
            },
            {
                "input": "unique([4, 2, 7, 7, 2, 7, 13, 1, 128])",
                "output": "[1, 2, 4, 7, 13, 128]"
            },
            {
                "input": "unique([5, 8, 3, 4, 8, 4, 8, 3, 124])",
                "output": "[3, 4, 5, 8, 124]"
            },
            {
                "input": "unique([8, 5, 2, 2, 7, 3, 13, 2, 128])",
                "output": "[2, 3, 5, 7, 8, 13, 128]"
            },
            {
                "input": "unique([8, 4, 3, 5, 3, 7, 5, 2, 127])",
                "output": "[2, 3, 4, 5, 7, 8, 127]"
            },
            {
                "input": "unique([9, 6, 4, 3, 8, 4, 9, 5, 123])",
                "output": "[3, 4, 5, 6, 8, 9, 123]"
            },
            {
                "input": "unique([8, 6, 4, 5, 2, 7, 12, 4, 119])",
                "output": "[2, 4, 5, 6, 7, 8, 12, 119]"
            },
            {
                "input": "unique([10, 6, 6, 2, 2, 1, 6, 3, 125])",
                "output": "[1, 2, 3, 6, 10, 125]"
            },
            {
                "input": "unique([10, 8, 5, 2, 7, 2, 5, 2, 128])",
                "output": "[2, 5, 7, 8, 10, 128]"
            },
            {
                "input": "unique([5, 6, 5, 1, 6, 3, 12, 3, 123])",
                "output": "[1, 3, 5, 6, 12, 123]"
            },
            {
                "input": "unique([5, 8, 3, 5, 3, 3, 14, 5, 128])",
                "output": "[3, 5, 8, 14, 128]"
            },
            {
                "input": "unique([1, 2, 6, 6, 7, 7, 8, 5, 128])",
                "output": "[1, 2, 5, 6, 7, 8, 128]"
            },
            {
                "input": "unique([3, 6, 10, 5, 2, 8, 8, 3, 118])",
                "output": "[2, 3, 5, 6, 8, 10, 118]"
            },
            {
                "input": "unique([9, 1, 5, 5, 6, 3, 14, 4, 123])",
                "output": "[1, 3, 4, 5, 6, 9, 14, 123]"
            },
            {
                "input": "unique([1, 8, 5, 1, 1, 3, 10, 5, 126])",
                "output": "[1, 3, 5, 8, 10, 126]"
            },
            {
                "input": "unique([7, 5, 1, 4, 5, 7, 8, 5, 120])",
                "output": "[1, 4, 5, 7, 8, 120]"
            },
            {
                "input": "unique([10, 7, 3, 1, 4, 5, 5, 4, 123])",
                "output": "[1, 3, 4, 5, 7, 10, 123]"
            },
            {
                "input": "unique([1, 4, 6, 1, 8, 5, 12, 5, 128])",
                "output": "[1, 4, 5, 6, 8, 12, 128]"
            },
            {
                "input": "unique([3, 4, 9, 6, 3, 2, 7, 1, 119])",
                "output": "[1, 2, 3, 4, 6, 7, 9, 119]"
            },
            {
                "input": "unique([10, 8, 7, 2, 1, 2, 4, 5, 124])",
                "output": "[1, 2, 4, 5, 7, 8, 10, 124]"
            },
            {
                "input": "unique([1, 2, 1, 7, 1, 6, 13, 4, 124])",
                "output": "[1, 2, 4, 6, 7, 13, 124]"
            },
            {
                "input": "unique([2, 3, 3, 6, 6, 6, 6, 1, 128])",
                "output": "[1, 2, 3, 6, 128]"
            },
            {
                "input": "unique([6, 6, 6, 7, 5, 4, 13, 4, 119])",
                "output": "[4, 5, 6, 7, 13, 119]"
            },
            {
                "input": "unique([8, 3, 10, 6, 8, 1, 5, 2, 122])",
                "output": "[1, 2, 3, 5, 6, 8, 10, 122]"
            },
            {
                "input": "unique([7, 5, 5, 1, 7, 8, 5, 5, 121])",
                "output": "[1, 5, 7, 8, 121]"
            },
            {
                "input": "unique([3, 2, 1, 4, 2, 5, 5, 4, 119])",
                "output": "[1, 2, 3, 4, 5, 119]"
            },
            {
                "input": "unique([10, 4, 6, 3, 4, 2, 13, 5, 120])",
                "output": "[2, 3, 4, 5, 6, 10, 13, 120]"
            },
            {
                "input": "unique([7, 6, 10, 5, 4, 8, 8, 5, 125])",
                "output": "[4, 5, 6, 7, 8, 10, 125]"
            },
            {
                "input": "unique([9, 4, 6, 3, 1, 5, 8, 3, 121])",
                "output": "[1, 3, 4, 5, 6, 8, 9, 121]"
            },
            {
                "input": "unique([10, 5, 7, 1, 2, 7, 10, 3, 128])",
                "output": "[1, 2, 3, 5, 7, 10, 128]"
            },
            {
                "input": "unique([9, 4, 8, 6, 2, 4, 14, 3, 125])",
                "output": "[2, 3, 4, 6, 8, 9, 14, 125]"
            },
            {
                "input": "unique([10, 8, 2, 3, 6, 5, 4, 3, 120])",
                "output": "[2, 3, 4, 5, 6, 8, 10, 120]"
            },
            {
                "input": "unique([6, 8, 5, 2, 8, 1, 13, 2, 122])",
                "output": "[1, 2, 5, 6, 8, 13, 122]"
            },
            {
                "input": "unique([6, 5, 1, 7, 8, 8, 6, 5, 122])",
                "output": "[1, 5, 6, 7, 8, 122]"
            },
            {
                "input": "unique([6, 1, 8, 1, 5, 5, 8, 5, 121])",
                "output": "[1, 5, 6, 8, 121]"
            },
            {
                "input": "unique([4, 2, 2, 5, 5, 2, 7, 5, 120])",
                "output": "[2, 4, 5, 7, 120]"
            },
            {
                "input": "unique([8, 4, 3, 1, 1, 4, 13, 2, 118])",
                "output": "[1, 2, 3, 4, 8, 13, 118]"
            },
            {
                "input": "unique([1, 5, 7, 5, 3, 4, 10, 3, 123])",
                "output": "[1, 3, 4, 5, 7, 10, 123]"
            },
            {
                "input": "unique([3, 3, 10, 3, 8, 4, 4, 1, 128])",
                "output": "[1, 3, 4, 8, 10, 128]"
            },
            {
                "input": "unique([2, 1, 4, 6, 7, 7, 14, 2, 120])",
                "output": "[1, 2, 4, 6, 7, 14, 120]"
            },
            {
                "input": "unique([6, 4, 7, 5, 5, 5, 8, 3, 120])",
                "output": "[3, 4, 5, 6, 7, 8, 120]"
            }
        ]
    },
    {
        "problem_description": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
        "ground truth": "def max_element(l: list):\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "instances": [
            {
                "input": "max_element([7, 6, -5, 1, -2, 4, 10, 4, 129, 6, -5])",
                "output": "129"
            },
            {
                "input": "max_element([1, 2, 1])",
                "output": "2"
            },
            {
                "input": "max_element([6, 4, -10, 7, -4, 5, 4, 5, 121, 5, -5])",
                "output": "121"
            },
            {
                "input": "max_element([10, 6, -7, 3, 2, 4, 4, 1, 123, 1, -15])",
                "output": "123"
            },
            {
                "input": "max_element([3, 7, 3])",
                "output": "7"
            },
            {
                "input": "max_element([1, 7, 4])",
                "output": "7"
            },
            {
                "input": "max_element([4, 8, -8, 4, -3, 6, 4, 1, 129, 2, -13])",
                "output": "129"
            },
            {
                "input": "max_element([2, 4, 6])",
                "output": "6"
            },
            {
                "input": "max_element([9, 3, 0, 7, -4, 4, 14, 5, 121, 6, -9])",
                "output": "121"
            },
            {
                "input": "max_element([5, 2, 6])",
                "output": "6"
            },
            {
                "input": "max_element([10, 8, -6, 2, -6, 1, 11, 1, 125, 5, -7])",
                "output": "125"
            },
            {
                "input": "max_element([3, 8, -4, 7, -7, 3, 7, 3, 121, 3, -13])",
                "output": "121"
            },
            {
                "input": "max_element([2, 4, 7])",
                "output": "7"
            },
            {
                "input": "max_element([2, 3, 8])",
                "output": "8"
            },
            {
                "input": "max_element([2, 1, 6])",
                "output": "6"
            },
            {
                "input": "max_element([4, 2, 2])",
                "output": "4"
            },
            {
                "input": "max_element([4, 4, -8, 4, -7, 3, 4, 1, 122, 6, -15])",
                "output": "122"
            },
            {
                "input": "max_element([2, 8, -9, 6, -5, 6, 6, 1, 129, 3, -13])",
                "output": "129"
            },
            {
                "input": "max_element([7, 6, -6, 6, 0, 6, 8, 3, 120, 1, -11])",
                "output": "120"
            },
            {
                "input": "max_element([5, 4, 8])",
                "output": "8"
            },
            {
                "input": "max_element([3, 6, -2, 4, -4, 7, 6, 4, 128, 2, -5])",
                "output": "128"
            },
            {
                "input": "max_element([4, 1, -3, 5, -6, 3, 4, 5, 119, 2, -5])",
                "output": "119"
            },
            {
                "input": "max_element([3, 4, 6])",
                "output": "6"
            },
            {
                "input": "max_element([1, 1, 6])",
                "output": "6"
            },
            {
                "input": "max_element([5, 8, -5, 2, 0, 3, 7, 5, 125, 5, -15])",
                "output": "125"
            },
            {
                "input": "max_element([1, 7, 1])",
                "output": "7"
            },
            {
                "input": "max_element([6, 3, 1])",
                "output": "6"
            },
            {
                "input": "max_element([4, 1, 6])",
                "output": "6"
            },
            {
                "input": "max_element([7, 6, -9, 1, -8, 7, 6, 1, 121, 5, -7])",
                "output": "121"
            },
            {
                "input": "max_element([3, 4, 0, 1, -7, 2, 7, 1, 124, 4, -13])",
                "output": "124"
            },
            {
                "input": "max_element([2, 7, 8])",
                "output": "8"
            },
            {
                "input": "max_element([5, 1, 7])",
                "output": "7"
            },
            {
                "input": "max_element([9, 8, -3, 1, 1, 8, 4, 5, 128, 1, -10])",
                "output": "128"
            },
            {
                "input": "max_element([2, 2, -7, 6, 1, 1, 8, 3, 128, 1, -10])",
                "output": "128"
            },
            {
                "input": "max_element([5, 8, -9, 4, -7, 1, 9, 3, 122, 6, -14])",
                "output": "122"
            },
            {
                "input": "max_element([3, 3, 0, 1, -2, 6, 10, 5, 127, 3, -7])",
                "output": "127"
            },
            {
                "input": "max_element([5, 6, -9, 2, 2, 6, 7, 4, 122, 3, -7])",
                "output": "122"
            },
            {
                "input": "max_element([5, 4, -9, 4, -8, 4, 8, 3, 128, 2, -10])",
                "output": "128"
            },
            {
                "input": "max_element([1, 5, 3])",
                "output": "5"
            },
            {
                "input": "max_element([5, 1, 5])",
                "output": "5"
            },
            {
                "input": "max_element([10, 5, -2, 5, -7, 4, 4, 5, 127, 3, -15])",
                "output": "127"
            },
            {
                "input": "max_element([3, 5, -3, 6, -8, 3, 10, 1, 124, 2, -14])",
                "output": "124"
            },
            {
                "input": "max_element([6, 6, -9, 1, -7, 8, 13, 1, 123, 2, -8])",
                "output": "123"
            },
            {
                "input": "max_element([2, 2, -7, 1, -8, 6, 14, 4, 120, 6, -5])",
                "output": "120"
            },
            {
                "input": "max_element([5, 3, 6])",
                "output": "6"
            },
            {
                "input": "max_element([5, 4, 5])",
                "output": "5"
            },
            {
                "input": "max_element([1, 1, -9, 6, -3, 1, 14, 4, 129, 2, -10])",
                "output": "129"
            },
            {
                "input": "max_element([1, 7, 8])",
                "output": "8"
            },
            {
                "input": "max_element([4, 1, -2, 7, -6, 8, 14, 4, 121, 1, -12])",
                "output": "121"
            },
            {
                "input": "max_element([9, 2, -9, 1, -3, 6, 4, 3, 119, 3, -8])",
                "output": "119"
            },
            {
                "input": "max_element([1, 2, 5])",
                "output": "5"
            },
            {
                "input": "max_element([6, 6, 7])",
                "output": "7"
            },
            {
                "input": "max_element([2, 2, 6])",
                "output": "6"
            },
            {
                "input": "max_element([1, 3, -5, 1, -7, 4, 12, 1, 129, 6, -12])",
                "output": "129"
            },
            {
                "input": "max_element([6, 7, 3])",
                "output": "7"
            },
            {
                "input": "max_element([10, 3, -6, 1, 1, 6, 10, 4, 126, 3, -14])",
                "output": "126"
            },
            {
                "input": "max_element([7, 3, -6, 2, -7, 6, 11, 1, 124, 6, -10])",
                "output": "124"
            },
            {
                "input": "max_element([7, 7, -7, 5, -5, 5, 7, 1, 129, 2, -14])",
                "output": "129"
            },
            {
                "input": "max_element([5, 5, 8])",
                "output": "8"
            },
            {
                "input": "max_element([5, 1, 2])",
                "output": "5"
            },
            {
                "input": "max_element([2, 6, 4])",
                "output": "6"
            },
            {
                "input": "max_element([8, 6, 0, 7, -5, 6, 13, 3, 127, 5, -6])",
                "output": "127"
            },
            {
                "input": "max_element([3, 2, 8])",
                "output": "8"
            },
            {
                "input": "max_element([5, 6, 8])",
                "output": "8"
            },
            {
                "input": "max_element([3, 2, 5])",
                "output": "5"
            },
            {
                "input": "max_element([6, 3, 6])",
                "output": "6"
            },
            {
                "input": "max_element([5, 8, -10, 3, -5, 5, 10, 3, 127, 2, -12])",
                "output": "127"
            },
            {
                "input": "max_element([3, 1, 8])",
                "output": "8"
            },
            {
                "input": "max_element([2, 2, 8])",
                "output": "8"
            },
            {
                "input": "max_element([9, 4, -4, 2, -3, 8, 8, 4, 123, 3, -13])",
                "output": "123"
            },
            {
                "input": "max_element([2, 4, 5])",
                "output": "5"
            },
            {
                "input": "max_element([5, 6, 3])",
                "output": "6"
            },
            {
                "input": "max_element([6, 2, 8])",
                "output": "8"
            },
            {
                "input": "max_element([6, 7, -5, 2, -8, 5, 12, 2, 129, 5, -13])",
                "output": "129"
            },
            {
                "input": "max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])",
                "output": "124"
            },
            {
                "input": "max_element([2, 3, 3])",
                "output": "3"
            },
            {
                "input": "max_element([3, 5, -4, 3, 2, 3, 8, 1, 120, 5, -13])",
                "output": "120"
            },
            {
                "input": "max_element([2, 7, 5])",
                "output": "7"
            },
            {
                "input": "max_element([3, 6, -1, 4, -2, 1, 10, 2, 129, 5, -9])",
                "output": "129"
            },
            {
                "input": "max_element([2, 5, 3])",
                "output": "5"
            },
            {
                "input": "max_element([4, 5, 3])",
                "output": "5"
            },
            {
                "input": "max_element([6, 3, -1, 4, 1, 3, 14, 1, 129, 3, -12])",
                "output": "129"
            },
            {
                "input": "max_element([5, 8, -4, 7, -2, 1, 6, 2, 129, 1, -5])",
                "output": "129"
            },
            {
                "input": "max_element([1, 2, 4])",
                "output": "4"
            },
            {
                "input": "max_element([6, 4, 7])",
                "output": "7"
            },
            {
                "input": "max_element([9, 8, -7, 7, -7, 4, 9, 1, 124, 4, -7])",
                "output": "124"
            },
            {
                "input": "max_element([8, 1, -8, 3, -7, 6, 10, 4, 123, 4, -8])",
                "output": "123"
            },
            {
                "input": "max_element([1, 3, 8])",
                "output": "8"
            },
            {
                "input": "max_element([6, 5, 8])",
                "output": "8"
            },
            {
                "input": "max_element([5, 2, -8, 4, 2, 3, 12, 4, 128, 4, -14])",
                "output": "128"
            },
            {
                "input": "max_element([2, 8, -10, 4, -8, 7, 5, 1, 122, 5, -12])",
                "output": "122"
            },
            {
                "input": "max_element([8, 7, -1, 3, -5, 1, 11, 5, 122, 6, -5])",
                "output": "122"
            },
            {
                "input": "max_element([1, 5, 2])",
                "output": "5"
            },
            {
                "input": "max_element([3, 5, 4])",
                "output": "5"
            },
            {
                "input": "max_element([1, 2, 3])",
                "output": "3"
            },
            {
                "input": "max_element([5, 6, 5])",
                "output": "6"
            },
            {
                "input": "max_element([4, 5, -5, 6, -6, 6, 8, 5, 127, 2, -10])",
                "output": "127"
            },
            {
                "input": "max_element([3, 4, -6, 7, -2, 7, 7, 4, 120, 2, -14])",
                "output": "120"
            },
            {
                "input": "max_element([5, 6, 1])",
                "output": "6"
            },
            {
                "input": "max_element([3, 6, 5])",
                "output": "6"
            },
            {
                "input": "max_element([6, 3, -10, 2, -1, 8, 10, 4, 123, 1, -8])",
                "output": "123"
            },
            {
                "input": "max_element([10, 1, -10, 4, -7, 4, 7, 1, 129, 3, -9])",
                "output": "129"
            },
            {
                "input": "max_element([2, 5, 4])",
                "output": "5"
            },
            {
                "input": "max_element([4, 5, -9, 1, -6, 6, 8, 5, 121, 6, -5])",
                "output": "121"
            },
            {
                "input": "max_element([6, 1, 7])",
                "output": "7"
            },
            {
                "input": "max_element([2, 4, -2, 3, -5, 6, 4, 3, 119, 4, -8])",
                "output": "119"
            },
            {
                "input": "max_element([3, 3, 1])",
                "output": "3"
            },
            {
                "input": "max_element([2, 2, -5, 5, -5, 1, 9, 5, 126, 1, -12])",
                "output": "126"
            },
            {
                "input": "max_element([3, 5, 8])",
                "output": "8"
            },
            {
                "input": "max_element([5, 1, -10, 4, -4, 7, 5, 5, 128, 6, -13])",
                "output": "128"
            },
            {
                "input": "max_element([5, 1, 1])",
                "output": "5"
            },
            {
                "input": "max_element([10, 8, -4, 5, -1, 6, 5, 5, 120, 4, -5])",
                "output": "120"
            },
            {
                "input": "max_element([1, 6, -3, 5, -2, 7, 8, 4, 126, 1, -14])",
                "output": "126"
            },
            {
                "input": "max_element([6, 6, 8])",
                "output": "8"
            },
            {
                "input": "max_element([3, 3, 6])",
                "output": "6"
            },
            {
                "input": "max_element([7, 6, -7, 3, 0, 4, 11, 3, 121, 1, -7])",
                "output": "121"
            },
            {
                "input": "max_element([1, 8, -6, 2, -2, 1, 10, 4, 123, 3, -10])",
                "output": "123"
            },
            {
                "input": "max_element([5, 6, -3, 7, -3, 2, 14, 5, 126, 5, -8])",
                "output": "126"
            },
            {
                "input": "max_element([8, 3, -10, 6, 2, 3, 10, 5, 129, 2, -8])",
                "output": "129"
            },
            {
                "input": "max_element([2, 4, -3, 6, -8, 8, 10, 4, 122, 4, -11])",
                "output": "122"
            },
            {
                "input": "max_element([1, 6, -6, 6, -2, 2, 12, 3, 129, 4, -14])",
                "output": "129"
            },
            {
                "input": "max_element([9, 6, 0, 5, 0, 5, 7, 4, 128, 4, -6])",
                "output": "128"
            },
            {
                "input": "max_element([1, 5, 7])",
                "output": "7"
            },
            {
                "input": "max_element([7, 4, -10, 6, -1, 8, 4, 5, 122, 6, -11])",
                "output": "122"
            },
            {
                "input": "max_element([1, 3, 1])",
                "output": "3"
            }
        ]
    },
    {
        "problem_description": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
        "ground truth": "def fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
        "instances": [
            {
                "input": "fizz_buzz(100884)",
                "output": "8071"
            },
            {
                "input": "fizz_buzz(9704)",
                "output": "615"
            },
            {
                "input": "fizz_buzz(96)",
                "output": "3"
            },
            {
                "input": "fizz_buzz(202)",
                "output": "6"
            },
            {
                "input": "fizz_buzz(10844)",
                "output": "681"
            },
            {
                "input": "fizz_buzz(198)",
                "output": "6"
            },
            {
                "input": "fizz_buzz(79)",
                "output": "3"
            },
            {
                "input": "fizz_buzz(196)",
                "output": "6"
            },
            {
                "input": "fizz_buzz(75)",
                "output": "0"
            },
            {
                "input": "fizz_buzz(48)",
                "output": "0"
            },
            {
                "input": "fizz_buzz(10985)",
                "output": "687"
            },
            {
                "input": "fizz_buzz(73)",
                "output": "0"
            },
            {
                "input": "fizz_buzz(200)",
                "output": "6"
            },
            {
                "input": "fizz_buzz(4000)",
                "output": "192"
            },
            {
                "input": "fizz_buzz(54)",
                "output": "0"
            },
            {
                "input": "fizz_buzz(49)",
                "output": "0"
            },
            {
                "input": "fizz_buzz(3077)",
                "output": "145"
            },
            {
                "input": "fizz_buzz(4073)",
                "output": "195"
            },
            {
                "input": "fizz_buzz(10925)",
                "output": "684"
            },
            {
                "input": "fizz_buzz(9367)",
                "output": "603"
            },
            {
                "input": "fizz_buzz(99273)",
                "output": "7986"
            },
            {
                "input": "fizz_buzz(104)",
                "output": "3"
            },
            {
                "input": "fizz_buzz(9675)",
                "output": "614"
            },
            {
                "input": "fizz_buzz(9032)",
                "output": "592"
            },
            {
                "input": "fizz_buzz(51)",
                "output": "0"
            },
            {
                "input": "fizz_buzz(4068)",
                "output": "194"
            },
            {
                "input": "fizz_buzz(81)",
                "output": "3"
            },
            {
                "input": "fizz_buzz(100282)",
                "output": "8035"
            },
            {
                "input": "fizz_buzz(99091)",
                "output": "7982"
            },
            {
                "input": "fizz_buzz(9647)",
                "output": "612"
            },
            {
                "input": "fizz_buzz(99862)",
                "output": "8022"
            },
            {
                "input": "fizz_buzz(100606)",
                "output": "8045"
            },
            {
                "input": "fizz_buzz(99834)",
                "output": "8021"
            },
            {
                "input": "fizz_buzz(82)",
                "output": "3"
            },
            {
                "input": "fizz_buzz(47)",
                "output": "0"
            },
            {
                "input": "fizz_buzz(100)",
                "output": "3"
            },
            {
                "input": "fizz_buzz(98)",
                "output": "3"
            },
            {
                "input": "fizz_buzz(76)",
                "output": "0"
            },
            {
                "input": "fizz_buzz(3539)",
                "output": "160"
            },
            {
                "input": "fizz_buzz(3712)",
                "output": "168"
            },
            {
                "input": "fizz_buzz(203)",
                "output": "6"
            },
            {
                "input": "fizz_buzz(3223)",
                "output": "149"
            },
            {
                "input": "fizz_buzz(4194)",
                "output": "197"
            },
            {
                "input": "fizz_buzz(10498)",
                "output": "656"
            },
            {
                "input": "fizz_buzz(80)",
                "output": "3"
            },
            {
                "input": "fizz_buzz(84)",
                "output": "3"
            },
            {
                "input": "fizz_buzz(100564)",
                "output": "8044"
            },
            {
                "input": "fizz_buzz(205)",
                "output": "6"
            },
            {
                "input": "fizz_buzz(46)",
                "output": "0"
            },
            {
                "input": "fizz_buzz(10231)",
                "output": "646"
            },
            {
                "input": "fizz_buzz(9690)",
                "output": "614"
            },
            {
                "input": "fizz_buzz(53)",
                "output": "0"
            },
            {
                "input": "fizz_buzz(78)",
                "output": "2"
            },
            {
                "input": "fizz_buzz(3584)",
                "output": "161"
            },
            {
                "input": "fizz_buzz(50)",
                "output": "0"
            },
            {
                "input": "fizz_buzz(9282)",
                "output": "601"
            },
            {
                "input": "fizz_buzz(102)",
                "output": "3"
            },
            {
                "input": "fizz_buzz(99)",
                "output": "3"
            },
            {
                "input": "fizz_buzz(55)",
                "output": "0"
            },
            {
                "input": "fizz_buzz(10450)",
                "output": "654"
            },
            {
                "input": "fizz_buzz(74)",
                "output": "0"
            },
            {
                "input": "fizz_buzz(195)",
                "output": "6"
            },
            {
                "input": "fizz_buzz(77)",
                "output": "0"
            },
            {
                "input": "fizz_buzz(3551)",
                "output": "160"
            },
            {
                "input": "fizz_buzz(201)",
                "output": "6"
            },
            {
                "input": "fizz_buzz(100563)",
                "output": "8044"
            },
            {
                "input": "fizz_buzz(10000)",
                "output": "639"
            },
            {
                "input": "fizz_buzz(3806)",
                "output": "185"
            },
            {
                "input": "fizz_buzz(100000)",
                "output": "8026"
            },
            {
                "input": "fizz_buzz(4229)",
                "output": "197"
            },
            {
                "input": "fizz_buzz(10837)",
                "output": "681"
            },
            {
                "input": "fizz_buzz(4072)",
                "output": "195"
            },
            {
                "input": "fizz_buzz(9470)",
                "output": "606"
            },
            {
                "input": "fizz_buzz(4977)",
                "output": "238"
            },
            {
                "input": "fizz_buzz(100495)",
                "output": "8043"
            },
            {
                "input": "fizz_buzz(99293)",
                "output": "7987"
            },
            {
                "input": "fizz_buzz(99579)",
                "output": "7998"
            },
            {
                "input": "fizz_buzz(52)",
                "output": "0"
            },
            {
                "input": "fizz_buzz(197)",
                "output": "6"
            },
            {
                "input": "fizz_buzz(105)",
                "output": "3"
            },
            {
                "input": "fizz_buzz(99181)",
                "output": "7985"
            },
            {
                "input": "fizz_buzz(3009)",
                "output": "144"
            },
            {
                "input": "fizz_buzz(83)",
                "output": "3"
            },
            {
                "input": "fizz_buzz(103)",
                "output": "3"
            },
            {
                "input": "fizz_buzz(99955)",
                "output": "8023"
            },
            {
                "input": "fizz_buzz(99673)",
                "output": "8000"
            },
            {
                "input": "fizz_buzz(4144)",
                "output": "195"
            }
        ]
    },
    {
        "problem_description": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "ground truth": "def sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
        "instances": [
            {
                "input": "sort_even([2, 6, 2])",
                "output": "[2, 6, 2]"
            },
            {
                "input": "sort_even([9, 6, -1, 6, -7, 1, 7, 1, 125, 5, -11])",
                "output": "[-11, 6, -7, 6, -1, 1, 7, 1, 9, 5, 125]"
            },
            {
                "input": "sort_even([6, 4, -15, 4, 27, 3, 3, 6, 10, -15])",
                "output": "[-15, 4, 3, 4, 6, 3, 10, 6, 27, -15]"
            },
            {
                "input": "sort_even([9, 13, -17, 2, 21, 6, 7, 15, 10, -13])",
                "output": "[-17, 13, 7, 2, 9, 6, 10, 15, 21, -13]"
            },
            {
                "input": "sort_even([7, 8, -16, 1, 23, 1, 4, 8, 10, -11])",
                "output": "[-16, 8, 4, 1, 7, 1, 10, 8, 23, -11]"
            },
            {
                "input": "sort_even([5, 1, -9, 1, 0, 2, 7, 1, 118, 6, -14])",
                "output": "[-14, 1, -9, 1, 0, 2, 5, 1, 7, 6, 118]"
            },
            {
                "input": "sort_even([6, 6, -9, 8, 28, 7, 3, 13, 10, -7])",
                "output": "[-9, 6, 3, 8, 6, 7, 10, 13, 28, -7]"
            },
            {
                "input": "sort_even([2, 8, -8, 3, -4, 7, 9, 3, 123, 4, -10])",
                "output": "[-10, 8, -8, 3, -4, 7, 2, 3, 9, 4, 123]"
            },
            {
                "input": "sort_even([9, 3, -17, 4, 20, 3, 4, 9, 10, -6])",
                "output": "[-17, 3, 4, 4, 9, 3, 10, 9, 20, -6]"
            },
            {
                "input": "sort_even([1, 4, 1])",
                "output": "[1, 4, 1]"
            },
            {
                "input": "sort_even([1, 4, 4])",
                "output": "[1, 4, 4]"
            },
            {
                "input": "sort_even([6, 9, -17, 1, 23, 7, 5, 12, 15, -13])",
                "output": "[-17, 9, 5, 1, 6, 7, 15, 12, 23, -13]"
            },
            {
                "input": "sort_even([5, 7, -7, 1, 2, 6, 9, 3, 120, 3, -14])",
                "output": "[-14, 7, -7, 1, 2, 6, 5, 3, 9, 3, 120]"
            },
            {
                "input": "sort_even([3, 8, -6, 2, -5, 5, 8, 4, 120, 3, -8])",
                "output": "[-8, 8, -6, 2, -5, 5, 3, 4, 8, 3, 120]"
            },
            {
                "input": "sort_even([6, 3, -9, 8, 25, 2, 4, 8, 8, -12])",
                "output": "[-9, 3, 4, 8, 6, 2, 8, 8, 25, -12]"
            },
            {
                "input": "sort_even([6, 7, 3])",
                "output": "[3, 7, 6]"
            },
            {
                "input": "sort_even([9, 1, 0, 7, -2, 5, 6, 1, 123, 5, -6])",
                "output": "[-6, 1, -2, 7, 0, 5, 6, 1, 9, 5, 123]"
            },
            {
                "input": "sort_even([4, 7, 1])",
                "output": "[1, 7, 4]"
            },
            {
                "input": "sort_even([2, 5, 8])",
                "output": "[2, 5, 8]"
            },
            {
                "input": "sort_even([10, 3, 0, 2, -6, 8, 13, 4, 125, 3, -11])",
                "output": "[-11, 3, -6, 2, 0, 8, 10, 4, 13, 3, 125]"
            },
            {
                "input": "sort_even([4, 7, -8, 7, 23, 4, 6, 8, 17, -14])",
                "output": "[-8, 7, 4, 7, 6, 4, 17, 8, 23, -14]"
            },
            {
                "input": "sort_even([1, 1, 6])",
                "output": "[1, 1, 6]"
            },
            {
                "input": "sort_even([4, 13, -13, 8, 20, 3, 1, 6, 17, -13])",
                "output": "[-13, 13, 1, 8, 4, 3, 17, 6, 20, -13]"
            },
            {
                "input": "sort_even([4, 1, 6])",
                "output": "[4, 1, 6]"
            },
            {
                "input": "sort_even([7, 6, -8, 6, 1, 4, 4, 3, 125, 1, -14])",
                "output": "[-14, 6, -8, 6, 1, 4, 4, 3, 7, 1, 125]"
            },
            {
                "input": "sort_even([9, 5, -7, 9, 23, 4, 6, 7, 13, -5])",
                "output": "[-7, 5, 6, 9, 9, 4, 13, 7, 23, -5]"
            },
            {
                "input": "sort_even([6, 3, -10, 7, 0, 8, 14, 2, 122, 4, -10])",
                "output": "[-10, 3, -10, 7, 0, 8, 6, 2, 14, 4, 122]"
            },
            {
                "input": "sort_even([8, 11, -11, 9, 24, 6, 6, 7, 15, -12])",
                "output": "[-11, 11, 6, 9, 8, 6, 15, 7, 24, -12]"
            },
            {
                "input": "sort_even([3, 2, 1])",
                "output": "[1, 2, 3]"
            },
            {
                "input": "sort_even([3, 2, 4])",
                "output": "[3, 2, 4]"
            },
            {
                "input": "sort_even([5, 7, 1])",
                "output": "[1, 7, 5]"
            },
            {
                "input": "sort_even([4, 5, -9, 1, -3, 8, 5, 2, 127, 3, -7])",
                "output": "[-9, 5, -7, 1, -3, 8, 4, 2, 5, 3, 127]"
            },
            {
                "input": "sort_even([4, 5, -3, 7, -1, 5, 11, 3, 124, 4, -9])",
                "output": "[-9, 5, -3, 7, -1, 5, 4, 3, 11, 4, 124]"
            },
            {
                "input": "sort_even([6, 4, 8])",
                "output": "[6, 4, 8]"
            },
            {
                "input": "sort_even([5, 12, -13, 2, 21, 2, 7, 15, 7, -15])",
                "output": "[-13, 12, 5, 2, 7, 2, 7, 15, 21, -15]"
            },
            {
                "input": "sort_even([10, 5, -16, 5, 26, 3, 1, 15, 11, -11])",
                "output": "[-16, 5, 1, 5, 10, 3, 11, 15, 26, -11]"
            },
            {
                "input": "sort_even([8, 5, -12, 4, 20, 6, 7, 7, 13, -7])",
                "output": "[-12, 5, 7, 4, 8, 6, 13, 7, 20, -7]"
            },
            {
                "input": "sort_even([1, 8, -9, 3, 25, 5, 7, 14, 9, -15])",
                "output": "[-9, 8, 1, 3, 7, 5, 9, 14, 25, -15]"
            },
            {
                "input": "sort_even([8, 4, -2, 7, 2, 3, 9, 1, 118, 3, -10])",
                "output": "[-10, 4, -2, 7, 2, 3, 8, 1, 9, 3, 118]"
            },
            {
                "input": "sort_even([2, 4, -6, 7, 1, 8, 9, 5, 128, 4, -12])",
                "output": "[-12, 4, -6, 7, 1, 8, 2, 5, 9, 4, 128]"
            },
            {
                "input": "sort_even([2, 1, 2])",
                "output": "[2, 1, 2]"
            },
            {
                "input": "sort_even([5, 5, 6])",
                "output": "[5, 5, 6]"
            },
            {
                "input": "sort_even([8, 3, -5, 2, -1, 3, 6, 3, 126, 2, -12])",
                "output": "[-12, 3, -5, 2, -1, 3, 6, 3, 8, 2, 126]"
            },
            {
                "input": "sort_even([6, 8, -7, 4, -4, 3, 11, 4, 125, 5, -11])",
                "output": "[-11, 8, -7, 4, -4, 3, 6, 4, 11, 5, 125]"
            },
            {
                "input": "sort_even([6, 3, 3])",
                "output": "[3, 3, 6]"
            },
            {
                "input": "sort_even([2, 12, -10, 2, 27, 3, 6, 11, 9, -15])",
                "output": "[-10, 12, 2, 2, 6, 3, 9, 11, 27, -15]"
            },
            {
                "input": "sort_even([5, 8, -17, 6, 19, 6, 5, 7, 8, -14])",
                "output": "[-17, 8, 5, 6, 5, 6, 8, 7, 19, -14]"
            },
            {
                "input": "sort_even([10, 5, -7, 3, -5, 4, 14, 1, 119, 2, -10])",
                "output": "[-10, 5, -7, 3, -5, 4, 10, 1, 14, 2, 119]"
            },
            {
                "input": "sort_even([8, 3, -15, 8, 19, 3, 6, 6, 11, -9])",
                "output": "[-15, 3, 6, 8, 8, 3, 11, 6, 19, -9]"
            },
            {
                "input": "sort_even([1, 7, -14, 7, 20, 3, 7, 13, 9, -8])",
                "output": "[-14, 7, 1, 7, 7, 3, 9, 13, 20, -8]"
            },
            {
                "input": "sort_even([2, 3, 4])",
                "output": "[2, 3, 4]"
            },
            {
                "input": "sort_even([10, 5, 0, 2, -6, 8, 6, 2, 126, 5, -13])",
                "output": "[-13, 5, -6, 2, 0, 8, 6, 2, 10, 5, 126]"
            },
            {
                "input": "sort_even([6, 2, 3])",
                "output": "[3, 2, 6]"
            },
            {
                "input": "sort_even([8, 2, -1, 5, 1, 7, 5, 3, 127, 5, -10])",
                "output": "[-10, 2, -1, 5, 1, 7, 5, 3, 8, 5, 127]"
            },
            {
                "input": "sort_even([7, 4, -11, 7, 18, 1, 5, 14, 17, -12])",
                "output": "[-11, 4, 5, 7, 7, 1, 17, 14, 18, -12]"
            },
            {
                "input": "sort_even([6, 7, -8, 4, -7, 4, 14, 2, 119, 6, -9])",
                "output": "[-9, 7, -8, 4, -7, 4, 6, 2, 14, 6, 119]"
            },
            {
                "input": "sort_even([6, 2, 4])",
                "output": "[4, 2, 6]"
            },
            {
                "input": "sort_even([3, 1, 1])",
                "output": "[1, 1, 3]"
            },
            {
                "input": "sort_even([1, 4, -15, 4, 22, 4, 8, 10, 8, -8])",
                "output": "[-15, 4, 1, 4, 8, 4, 8, 10, 22, -8]"
            },
            {
                "input": "sort_even([4, 13, -14, 2, 26, 7, 2, 10, 8, -5])",
                "output": "[-14, 13, 2, 2, 4, 7, 8, 10, 26, -5]"
            },
            {
                "input": "sort_even([2, 10, -11, 6, 23, 3, 6, 7, 13, -12])",
                "output": "[-11, 10, 2, 6, 6, 3, 13, 7, 23, -12]"
            },
            {
                "input": "sort_even([1, 8, -7, 6, 19, 1, 1, 16, 10, -14])",
                "output": "[-7, 8, 1, 6, 1, 1, 10, 16, 19, -14]"
            },
            {
                "input": "sort_even([6, 7, -4, 5, -5, 1, 9, 5, 121, 3, -10])",
                "output": "[-10, 7, -5, 5, -4, 1, 6, 5, 9, 3, 121]"
            },
            {
                "input": "sort_even([10, 5, -7, 2, 20, 3, 3, 11, 12, -9])",
                "output": "[-7, 5, 3, 2, 10, 3, 12, 11, 20, -9]"
            },
            {
                "input": "sort_even([5, 9, -14, 1, 19, 5, 7, 13, 14, -9])",
                "output": "[-14, 9, 5, 1, 7, 5, 14, 13, 19, -9]"
            },
            {
                "input": "sort_even([6, 5, 0, 6, -2, 3, 13, 3, 120, 4, -5])",
                "output": "[-5, 5, -2, 6, 0, 3, 6, 3, 13, 4, 120]"
            },
            {
                "input": "sort_even([4, 6, 1])",
                "output": "[1, 6, 4]"
            },
            {
                "input": "sort_even([5, 1, -9, 4, -7, 7, 5, 5, 128, 4, -7])",
                "output": "[-9, 1, -7, 4, -7, 7, 5, 5, 5, 4, 128]"
            },
            {
                "input": "sort_even([10, 8, -2, 2, -1, 2, 11, 4, 124, 4, -15])",
                "output": "[-15, 8, -2, 2, -1, 2, 10, 4, 11, 4, 124]"
            },
            {
                "input": "sort_even([7, 4, -2, 4, 2, 8, 6, 2, 123, 6, -6])",
                "output": "[-6, 4, -2, 4, 2, 8, 6, 2, 7, 6, 123]"
            },
            {
                "input": "sort_even([2, 4, 8])",
                "output": "[2, 4, 8]"
            },
            {
                "input": "sort_even([9, 5, -13, 4, 21, 7, 6, 9, 10, -7])",
                "output": "[-13, 5, 6, 4, 9, 7, 10, 9, 21, -7]"
            },
            {
                "input": "sort_even([4, 7, 6])",
                "output": "[4, 7, 6]"
            },
            {
                "input": "sort_even([7, 6, -10, 3, 18, 1, 5, 10, 10, -14])",
                "output": "[-10, 6, 5, 3, 7, 1, 10, 10, 18, -14]"
            },
            {
                "input": "sort_even([2, 4, 7])",
                "output": "[2, 4, 7]"
            },
            {
                "input": "sort_even([2, 5, 5])",
                "output": "[2, 5, 5]"
            },
            {
                "input": "sort_even([7, 3, -7, 3, -5, 8, 12, 2, 124, 4, -12])",
                "output": "[-12, 3, -7, 3, -5, 8, 7, 2, 12, 4, 124]"
            },
            {
                "input": "sort_even([2, 1, 4])",
                "output": "[2, 1, 4]"
            },
            {
                "input": "sort_even([10, 4, -5, 1, -7, 5, 8, 1, 128, 5, -6])",
                "output": "[-7, 4, -6, 1, -5, 5, 8, 1, 10, 5, 128]"
            },
            {
                "input": "sort_even([7, 6, -17, 1, 20, 4, 1, 12, 10, -5])",
                "output": "[-17, 6, 1, 1, 7, 4, 10, 12, 20, -5]"
            },
            {
                "input": "sort_even([5, 12, -10, 1, 28, 7, 8, 6, 9, -10])",
                "output": "[-10, 12, 5, 1, 8, 7, 9, 6, 28, -10]"
            },
            {
                "input": "sort_even([6, 6, -7, 1, -1, 1, 6, 5, 122, 5, -9])",
                "output": "[-9, 6, -7, 1, -1, 1, 6, 5, 6, 5, 122]"
            },
            {
                "input": "sort_even([2, 6, 5])",
                "output": "[2, 6, 5]"
            },
            {
                "input": "sort_even([5, 1, 2])",
                "output": "[2, 1, 5]"
            },
            {
                "input": "sort_even([2, 8, -2, 5, -8, 6, 4, 3, 120, 2, -10])",
                "output": "[-10, 8, -8, 5, -2, 6, 2, 3, 4, 2, 120]"
            },
            {
                "input": "sort_even([3, 2, -3, 6, -5, 3, 9, 4, 128, 3, -8])",
                "output": "[-8, 2, -5, 6, -3, 3, 3, 4, 9, 3, 128]"
            },
            {
                "input": "sort_even([4, 6, 8])",
                "output": "[4, 6, 8]"
            },
            {
                "input": "sort_even([3, 1, -1, 4, -5, 8, 10, 3, 123, 3, -15])",
                "output": "[-15, 1, -5, 4, -1, 8, 3, 3, 10, 3, 123]"
            },
            {
                "input": "sort_even([3, 7, -13, 6, 24, 3, 1, 11, 10, -10])",
                "output": "[-13, 7, 1, 6, 3, 3, 10, 11, 24, -10]"
            },
            {
                "input": "sort_even([1, 7, 3])",
                "output": "[1, 7, 3]"
            },
            {
                "input": "sort_even([1, 4, 3])",
                "output": "[1, 4, 3]"
            },
            {
                "input": "sort_even([6, 5, 5])",
                "output": "[5, 5, 6]"
            },
            {
                "input": "sort_even([4, 3, -17, 7, 19, 6, 4, 13, 8, -7])",
                "output": "[-17, 3, 4, 7, 4, 6, 8, 13, 19, -7]"
            },
            {
                "input": "sort_even([1, 10, -14, 2, 23, 2, 8, 13, 11, -9])",
                "output": "[-14, 10, 1, 2, 8, 2, 11, 13, 23, -9]"
            },
            {
                "input": "sort_even([3, 5, -6, 6, -4, 6, 11, 1, 128, 2, -13])",
                "output": "[-13, 5, -6, 6, -4, 6, 3, 1, 11, 2, 128]"
            },
            {
                "input": "sort_even([2, 11, -11, 1, 25, 3, 8, 15, 15, -7])",
                "output": "[-11, 11, 2, 1, 8, 3, 15, 15, 25, -7]"
            },
            {
                "input": "sort_even([4, 6, -3, 5, -5, 5, 11, 3, 128, 4, -14])",
                "output": "[-14, 6, -5, 5, -3, 5, 4, 3, 11, 4, 128]"
            },
            {
                "input": "sort_even([7, 9, -11, 3, 22, 4, 1, 8, 15, -7])",
                "output": "[-11, 9, 1, 3, 7, 4, 15, 8, 22, -7]"
            },
            {
                "input": "sort_even([2, 1, 7])",
                "output": "[2, 1, 7]"
            },
            {
                "input": "sort_even([9, 4, -9, 8, 19, 7, 2, 9, 7, -9])",
                "output": "[-9, 4, 2, 8, 7, 7, 9, 9, 19, -9]"
            },
            {
                "input": "sort_even([4, 6, -8, 7, -3, 2, 5, 4, 124, 5, -15])",
                "output": "[-15, 6, -8, 7, -3, 2, 4, 4, 5, 5, 124]"
            },
            {
                "input": "sort_even([10, 6, -9, 4, -1, 1, 8, 4, 123, 2, -10])",
                "output": "[-10, 6, -9, 4, -1, 1, 8, 4, 10, 2, 123]"
            },
            {
                "input": "sort_even([3, 3, 4])",
                "output": "[3, 3, 4]"
            },
            {
                "input": "sort_even([8, 2, -5, 4, -1, 6, 12, 3, 126, 6, -8])",
                "output": "[-8, 2, -5, 4, -1, 6, 8, 3, 12, 6, 126]"
            },
            {
                "input": "sort_even([8, 7, -2, 1, -6, 4, 9, 2, 120, 2, -11])",
                "output": "[-11, 7, -6, 1, -2, 4, 8, 2, 9, 2, 120]"
            },
            {
                "input": "sort_even([2, 6, -10, 9, 24, 4, 6, 8, 14, -5])",
                "output": "[-10, 6, 2, 9, 6, 4, 14, 8, 24, -5]"
            },
            {
                "input": "sort_even([6, 6, -13, 1, 25, 2, 7, 8, 7, -12])",
                "output": "[-13, 6, 6, 1, 7, 2, 7, 8, 25, -12]"
            },
            {
                "input": "sort_even([6, 1, -2, 6, 2, 2, 8, 2, 124, 2, -11])",
                "output": "[-11, 1, -2, 6, 2, 2, 6, 2, 8, 2, 124]"
            },
            {
                "input": "sort_even([2, 5, -2, 6, -6, 4, 4, 5, 124, 5, -15])",
                "output": "[-15, 5, -6, 6, -2, 4, 2, 5, 4, 5, 124]"
            },
            {
                "input": "sort_even([4, 4, 1])",
                "output": "[1, 4, 4]"
            },
            {
                "input": "sort_even([1, 5, 4])",
                "output": "[1, 5, 4]"
            },
            {
                "input": "sort_even([8, 8, -7, 3, -6, 2, 12, 1, 120, 6, -15])",
                "output": "[-15, 8, -7, 3, -6, 2, 8, 1, 12, 6, 120]"
            },
            {
                "input": "sort_even([4, 2, 5])",
                "output": "[4, 2, 5]"
            },
            {
                "input": "sort_even([10, 4, -6, 4, 1, 3, 4, 3, 119, 5, -9])",
                "output": "[-9, 4, -6, 4, 1, 3, 4, 3, 10, 5, 119]"
            },
            {
                "input": "sort_even([6, 9, -11, 7, 21, 6, 6, 10, 10, -11])",
                "output": "[-11, 9, 6, 7, 6, 6, 10, 10, 21, -11]"
            },
            {
                "input": "sort_even([1, 1, 7])",
                "output": "[1, 1, 7]"
            },
            {
                "input": "sort_even([8, 9, -13, 6, 25, 3, 6, 8, 10, -12])",
                "output": "[-13, 9, 6, 6, 8, 3, 10, 8, 25, -12]"
            },
            {
                "input": "sort_even([6, 13, -15, 6, 23, 6, 4, 15, 17, -10])",
                "output": "[-15, 13, 4, 6, 6, 6, 17, 15, 23, -10]"
            },
            {
                "input": "sort_even([10, 6, -1, 5, 2, 2, 13, 4, 123, 5, -8])",
                "output": "[-8, 6, -1, 5, 2, 2, 10, 4, 13, 5, 123]"
            },
            {
                "input": "sort_even([7, 5, -7, 6, 25, 1, 6, 11, 7, -10])",
                "output": "[-7, 5, 6, 6, 7, 1, 7, 11, 25, -10]"
            },
            {
                "input": "sort_even([4, 4, 7])",
                "output": "[4, 4, 7]"
            },
            {
                "input": "sort_even([6, 3, -4, 4, -7, 6, 6, 1, 121, 3, -6])",
                "output": "[-7, 3, -6, 4, -4, 6, 6, 1, 6, 3, 121]"
            },
            {
                "input": "sort_even([4, 5, 7])",
                "output": "[4, 5, 7]"
            },
            {
                "input": "sort_even([2, 5, 4])",
                "output": "[2, 5, 4]"
            }
        ]
    },
    {
        "problem_description": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
        "ground truth": "def encode_cyclic(s: str):\n    return encode_cyclic(encode_cyclic(s))\n",
        "instances": []
    },
    {
        "problem_description": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
        "ground truth": "def prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
        "instances": [
            {
                "input": "prime_fib(11)",
                "output": "2971215073"
            },
            {
                "input": "prime_fib(5)",
                "output": "89"
            },
            {
                "input": "prime_fib(6)",
                "output": "233"
            },
            {
                "input": "prime_fib(1)",
                "output": "2"
            },
            {
                "input": "prime_fib(4)",
                "output": "13"
            },
            {
                "input": "prime_fib(8)",
                "output": "28657"
            },
            {
                "input": "prime_fib(7)",
                "output": "1597"
            },
            {
                "input": "prime_fib(10)",
                "output": "433494437"
            },
            {
                "input": "prime_fib(3)",
                "output": "5"
            },
            {
                "input": "prime_fib(2)",
                "output": "3"
            },
            {
                "input": "prime_fib(12)",
                "output": "99194853094755497"
            },
            {
                "input": "prime_fib(9)",
                "output": "514229"
            }
        ]
    },
    {
        "problem_description": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "ground truth": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "instances": [
            {
                "input": "triples_sum_to_zero([4, 7, 1, 5])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 5, 10, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 1, 6, -2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 3, -2, 5, 11, 4])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([4, 1, 1, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 6, 7, 1])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([2, 7, 9, 3])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([2, 1, 5, 6])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 2, 5, 7])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 9, -6, 1, 4, 12])",
                "output": "True"
            },
            {
                "input": "triples_sum_to_zero([6, 3, -7, 5])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 7, -10, 2, 6, 12])",
                "output": "True"
            },
            {
                "input": "triples_sum_to_zero([2, 8, 2, -99])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 4, -6, 3])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 1, 4, -5])",
                "output": "True"
            },
            {
                "input": "triples_sum_to_zero([1, 3, -5, 3, 9, 7])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([2, 8, -3, 5, 6, 12])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 5, 3, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 1, 4, 9])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 8, 9, -101])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 6, 6, 12])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 6, -1, 1, 14, 7])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([4, 3, 1, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 9, -9, 5, 5, 8])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([100, 3, 5, -100])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 1, 3, -102])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 1, 2, 3])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 1, 4, 3])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([98, 4, 1, -99])",
                "output": "True"
            },
            {
                "input": "triples_sum_to_zero([6, 2, 8, 3])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 4, 7, 10])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([98, 1, 1, -100])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 7, 10, 12])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 3, 8, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 1, 4, 4])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 4, -10, 6, 5, 6])",
                "output": "True"
            },
            {
                "input": "triples_sum_to_zero([2, 6, -1, 6])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 5, 6, 1])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([2, 4, 7, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 8, 5, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([98, 1, 3, -95])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([2, 3, 3, 4])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 4, 4, -98])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([103, 4, 4, -99])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 6, 7, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 1, 1, -96])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 1, 9, 10])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([2, 8, 4, 1])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 7, 6, 9])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 3, -2, 1])",
                "output": "True"
            },
            {
                "input": "triples_sum_to_zero([4])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 3, 4, 4])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 5, 10, -105])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 3, -3, 6])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 2, -7, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 8, -6, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 3, 5, 0])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 8, 2, 4])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([100, 3, 4, -98])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([4, 5, 9, 7])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 7, 6, 5])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 2, -6, 6])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([100, 7, 3, -102])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([4, 6, 2, 7])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 1, 7, -3])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 6, 7, -100])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([2, 7, -9, 3, 10, 8])",
                "output": "True"
            },
            {
                "input": "triples_sum_to_zero([1, 2, -8, 5, 8, 10])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 1, 5, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 4, 5, 10])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 1, 6, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 7, 5, 1])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([102, 5, 8, -104])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([2, 4, -5, 3, 9, 7])",
                "output": "True"
            },
            {
                "input": "triples_sum_to_zero([6])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 3, 5, -100])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 2, 7, 8])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 2, 0, 1])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([99, 7, 5, -104])",
                "output": "True"
            },
            {
                "input": "triples_sum_to_zero([3, 3, 9, -5])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([4, 1, 1, 3])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 4, 7, -5])",
                "output": "True"
            },
            {
                "input": "triples_sum_to_zero([3])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 6, 3, 5])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([2, 4, 1, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([99, 4, 5, -101])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 4, 7, 9])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 5, 1, 5])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([4, 5, 9, -100])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([4, 7, -7, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 5, 1, -4])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([4, 5, 9, 3])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 1, 10, -98])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 6, 5, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([4, 8, -9, 7, 9, 10])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 1, 6, -104])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 6, -5, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([2, 7, 5, -104])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 8, -2, 6, 12, 7])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 1, 1, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([96, 2, 5, -98])",
                "output": "True"
            },
            {
                "input": "triples_sum_to_zero([98, 1, 2, -105])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 3, 1, 9])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 1, 4, -2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 3, 7, 3])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([6, 1, 3, -97])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 1, 6, -96])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 3, -6, 3])",
                "output": "True"
            },
            {
                "input": "triples_sum_to_zero([105, 3, 3, -97])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([3, 9, -6, 7, 13, 6])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([1, 3, 5, -1])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([7, 6, -2, 8, 10, 6])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([95, 6, 9, -95])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([2, 8, -4, 2])",
                "output": "True"
            },
            {
                "input": "triples_sum_to_zero([1, 2, 3, 7])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([2, 3, -1, 1])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([4, 1, 7, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 6, 7, -1])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 3, 5, 5])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([2, 1, 4, 2])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([102, 5, 9, -103])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([2, 2, 4, 7])",
                "output": "False"
            },
            {
                "input": "triples_sum_to_zero([5, 3, 5, -97])",
                "output": "False"
            }
        ]
    },
    {
        "problem_description": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
        "ground truth": "def car_race_collision(n: int):\n    return n**2\n",
        "instances": [
            {
                "input": "car_race_collision(105)",
                "output": "11025"
            },
            {
                "input": "car_race_collision(78)",
                "output": "6084"
            },
            {
                "input": "car_race_collision(97)",
                "output": "9409"
            },
            {
                "input": "car_race_collision(125)",
                "output": "15625"
            },
            {
                "input": "car_race_collision(67)",
                "output": "4489"
            },
            {
                "input": "car_race_collision(149)",
                "output": "22201"
            },
            {
                "input": "car_race_collision(156)",
                "output": "24336"
            },
            {
                "input": "car_race_collision(45)",
                "output": "2025"
            },
            {
                "input": "car_race_collision(185)",
                "output": "34225"
            },
            {
                "input": "car_race_collision(139)",
                "output": "19321"
            },
            {
                "input": "car_race_collision(180)",
                "output": "32400"
            },
            {
                "input": "car_race_collision(183)",
                "output": "33489"
            },
            {
                "input": "car_race_collision(73)",
                "output": "5329"
            },
            {
                "input": "car_race_collision(106)",
                "output": "11236"
            },
            {
                "input": "car_race_collision(90)",
                "output": "8100"
            },
            {
                "input": "car_race_collision(2)",
                "output": "4"
            },
            {
                "input": "car_race_collision(102)",
                "output": "10404"
            },
            {
                "input": "car_race_collision(50)",
                "output": "2500"
            },
            {
                "input": "car_race_collision(175)",
                "output": "30625"
            },
            {
                "input": "car_race_collision(5)",
                "output": "25"
            },
            {
                "input": "car_race_collision(134)",
                "output": "17956"
            },
            {
                "input": "car_race_collision(65)",
                "output": "4225"
            },
            {
                "input": "car_race_collision(184)",
                "output": "33856"
            },
            {
                "input": "car_race_collision(122)",
                "output": "14884"
            },
            {
                "input": "car_race_collision(100)",
                "output": "10000"
            },
            {
                "input": "car_race_collision(23)",
                "output": "529"
            },
            {
                "input": "car_race_collision(174)",
                "output": "30276"
            },
            {
                "input": "car_race_collision(11)",
                "output": "121"
            },
            {
                "input": "car_race_collision(37)",
                "output": "1369"
            },
            {
                "input": "car_race_collision(81)",
                "output": "6561"
            },
            {
                "input": "car_race_collision(151)",
                "output": "22801"
            },
            {
                "input": "car_race_collision(111)",
                "output": "12321"
            },
            {
                "input": "car_race_collision(72)",
                "output": "5184"
            },
            {
                "input": "car_race_collision(120)",
                "output": "14400"
            },
            {
                "input": "car_race_collision(121)",
                "output": "14641"
            },
            {
                "input": "car_race_collision(135)",
                "output": "18225"
            },
            {
                "input": "car_race_collision(155)",
                "output": "24025"
            },
            {
                "input": "car_race_collision(191)",
                "output": "36481"
            },
            {
                "input": "car_race_collision(99)",
                "output": "9801"
            },
            {
                "input": "car_race_collision(48)",
                "output": "2304"
            },
            {
                "input": "car_race_collision(17)",
                "output": "289"
            },
            {
                "input": "car_race_collision(19)",
                "output": "361"
            },
            {
                "input": "car_race_collision(166)",
                "output": "27556"
            },
            {
                "input": "car_race_collision(114)",
                "output": "12996"
            },
            {
                "input": "car_race_collision(108)",
                "output": "11664"
            },
            {
                "input": "car_race_collision(39)",
                "output": "1521"
            },
            {
                "input": "car_race_collision(167)",
                "output": "27889"
            },
            {
                "input": "car_race_collision(178)",
                "output": "31684"
            },
            {
                "input": "car_race_collision(169)",
                "output": "28561"
            },
            {
                "input": "car_race_collision(164)",
                "output": "26896"
            },
            {
                "input": "car_race_collision(66)",
                "output": "4356"
            },
            {
                "input": "car_race_collision(31)",
                "output": "961"
            },
            {
                "input": "car_race_collision(13)",
                "output": "169"
            },
            {
                "input": "car_race_collision(118)",
                "output": "13924"
            },
            {
                "input": "car_race_collision(88)",
                "output": "7744"
            },
            {
                "input": "car_race_collision(199)",
                "output": "39601"
            },
            {
                "input": "car_race_collision(77)",
                "output": "5929"
            },
            {
                "input": "car_race_collision(46)",
                "output": "2116"
            },
            {
                "input": "car_race_collision(42)",
                "output": "1764"
            },
            {
                "input": "car_race_collision(130)",
                "output": "16900"
            },
            {
                "input": "car_race_collision(8)",
                "output": "64"
            },
            {
                "input": "car_race_collision(172)",
                "output": "29584"
            },
            {
                "input": "car_race_collision(14)",
                "output": "196"
            },
            {
                "input": "car_race_collision(147)",
                "output": "21609"
            },
            {
                "input": "car_race_collision(157)",
                "output": "24649"
            },
            {
                "input": "car_race_collision(79)",
                "output": "6241"
            },
            {
                "input": "car_race_collision(94)",
                "output": "8836"
            },
            {
                "input": "car_race_collision(70)",
                "output": "4900"
            },
            {
                "input": "car_race_collision(98)",
                "output": "9604"
            },
            {
                "input": "car_race_collision(146)",
                "output": "21316"
            },
            {
                "input": "car_race_collision(0)",
                "output": "0"
            },
            {
                "input": "car_race_collision(123)",
                "output": "15129"
            },
            {
                "input": "car_race_collision(198)",
                "output": "39204"
            },
            {
                "input": "car_race_collision(4)",
                "output": "16"
            },
            {
                "input": "car_race_collision(3)",
                "output": "9"
            },
            {
                "input": "car_race_collision(63)",
                "output": "3969"
            },
            {
                "input": "car_race_collision(41)",
                "output": "1681"
            },
            {
                "input": "car_race_collision(142)",
                "output": "20164"
            },
            {
                "input": "car_race_collision(28)",
                "output": "784"
            },
            {
                "input": "car_race_collision(85)",
                "output": "7225"
            },
            {
                "input": "car_race_collision(136)",
                "output": "18496"
            },
            {
                "input": "car_race_collision(117)",
                "output": "13689"
            },
            {
                "input": "car_race_collision(10)",
                "output": "100"
            },
            {
                "input": "car_race_collision(109)",
                "output": "11881"
            },
            {
                "input": "car_race_collision(16)",
                "output": "256"
            },
            {
                "input": "car_race_collision(56)",
                "output": "3136"
            },
            {
                "input": "car_race_collision(103)",
                "output": "10609"
            },
            {
                "input": "car_race_collision(60)",
                "output": "3600"
            },
            {
                "input": "car_race_collision(133)",
                "output": "17689"
            },
            {
                "input": "car_race_collision(195)",
                "output": "38025"
            },
            {
                "input": "car_race_collision(7)",
                "output": "49"
            },
            {
                "input": "car_race_collision(181)",
                "output": "32761"
            }
        ]
    },
    {
        "problem_description": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "ground truth": "def incr_list(l: list):\n    return [(e + 1) for e in l]\n",
        "instances": [
            {
                "input": "incr_list([4, 7, 9, 2, 8, 6, 9, 2, 127])",
                "output": "[5, 8, 10, 3, 9, 7, 10, 3, 128]"
            },
            {
                "input": "incr_list([5, 4, 1])",
                "output": "[6, 5, 2]"
            },
            {
                "input": "incr_list([7, 1, 1, 7, 5, 1, 9, 1, 119])",
                "output": "[8, 2, 2, 8, 6, 2, 10, 2, 120]"
            },
            {
                "input": "incr_list([8, 3, 4, 2, 8, 7, 12, 5, 121])",
                "output": "[9, 4, 5, 3, 9, 8, 13, 6, 122]"
            },
            {
                "input": "incr_list([3, 2, 1])",
                "output": "[4, 3, 2]"
            },
            {
                "input": "incr_list([7, 5, 1])",
                "output": "[8, 6, 2]"
            },
            {
                "input": "incr_list([2, 4, 1, 7, 2, 6, 8, 4, 127])",
                "output": "[3, 5, 2, 8, 3, 7, 9, 5, 128]"
            },
            {
                "input": "incr_list([4, 7, 6])",
                "output": "[5, 8, 7]"
            },
            {
                "input": "incr_list([4, 5, 1])",
                "output": "[5, 6, 2]"
            },
            {
                "input": "incr_list([6, 5, 3])",
                "output": "[7, 6, 4]"
            },
            {
                "input": "incr_list([8, 1, 4])",
                "output": "[9, 2, 5]"
            },
            {
                "input": "incr_list([6, 4, 2, 7, 8, 8, 9, 1, 124])",
                "output": "[7, 5, 3, 8, 9, 9, 10, 2, 125]"
            },
            {
                "input": "incr_list([4, 5, 2])",
                "output": "[5, 6, 3]"
            },
            {
                "input": "incr_list([4, 7, 1])",
                "output": "[5, 8, 2]"
            },
            {
                "input": "incr_list([7, 1, 6, 7, 1, 5, 7, 1, 120])",
                "output": "[8, 2, 7, 8, 2, 6, 8, 2, 121]"
            },
            {
                "input": "incr_list([3, 7, 5])",
                "output": "[4, 8, 6]"
            },
            {
                "input": "incr_list([8, 4, 3])",
                "output": "[9, 5, 4]"
            },
            {
                "input": "incr_list([7, 5, 3, 2, 7, 7, 12, 2, 118])",
                "output": "[8, 6, 4, 3, 8, 8, 13, 3, 119]"
            },
            {
                "input": "incr_list([6, 3, 4, 2, 1, 7, 7, 1, 123])",
                "output": "[7, 4, 5, 3, 2, 8, 8, 2, 124]"
            },
            {
                "input": "incr_list([1, 2, 6, 7, 8, 8, 6, 2, 125])",
                "output": "[2, 3, 7, 8, 9, 9, 7, 3, 126]"
            },
            {
                "input": "incr_list([4, 4, 3])",
                "output": "[5, 5, 4]"
            },
            {
                "input": "incr_list([6, 4, 6])",
                "output": "[7, 5, 7]"
            },
            {
                "input": "incr_list([3, 2, 6])",
                "output": "[4, 3, 7]"
            },
            {
                "input": "incr_list([3, 1, 5])",
                "output": "[4, 2, 6]"
            },
            {
                "input": "incr_list([7, 2, 5])",
                "output": "[8, 3, 6]"
            },
            {
                "input": "incr_list([5, 1, 5])",
                "output": "[6, 2, 6]"
            },
            {
                "input": "incr_list([8, 1, 10, 4, 7, 2, 11, 3, 122])",
                "output": "[9, 2, 11, 5, 8, 3, 12, 4, 123]"
            },
            {
                "input": "incr_list([6, 7, 4])",
                "output": "[7, 8, 5]"
            },
            {
                "input": "incr_list([5, 1, 6])",
                "output": "[6, 2, 7]"
            },
            {
                "input": "incr_list([2, 3, 10, 2, 6, 7, 8, 3, 122])",
                "output": "[3, 4, 11, 3, 7, 8, 9, 4, 123]"
            },
            {
                "input": "incr_list([7, 1, 8, 3, 8, 2, 6, 4, 123])",
                "output": "[8, 2, 9, 4, 9, 3, 7, 5, 124]"
            },
            {
                "input": "incr_list([1, 3, 9, 3, 7, 1, 11, 4, 128])",
                "output": "[2, 4, 10, 4, 8, 2, 12, 5, 129]"
            },
            {
                "input": "incr_list([])",
                "output": "[]"
            },
            {
                "input": "incr_list([10, 5, 9, 5, 3, 2, 4, 1, 122])",
                "output": "[11, 6, 10, 6, 4, 3, 5, 2, 123]"
            },
            {
                "input": "incr_list([9, 2, 1, 1, 7, 6, 13, 5, 125])",
                "output": "[10, 3, 2, 2, 8, 7, 14, 6, 126]"
            },
            {
                "input": "incr_list([6, 7, 8, 4, 3, 1, 9, 3, 121])",
                "output": "[7, 8, 9, 5, 4, 2, 10, 4, 122]"
            },
            {
                "input": "incr_list([3, 1, 8, 5, 5, 3, 5, 4, 124])",
                "output": "[4, 2, 9, 6, 6, 4, 6, 5, 125]"
            },
            {
                "input": "incr_list([1, 2, 2, 7, 2, 3, 10, 3, 122])",
                "output": "[2, 3, 3, 8, 3, 4, 11, 4, 123]"
            },
            {
                "input": "incr_list([10, 6, 7, 2, 5, 4, 14, 1, 125])",
                "output": "[11, 7, 8, 3, 6, 5, 15, 2, 126]"
            },
            {
                "input": "incr_list([8, 6, 5])",
                "output": "[9, 7, 6]"
            },
            {
                "input": "incr_list([7, 2, 2, 6, 8, 2, 10, 2, 127])",
                "output": "[8, 3, 3, 7, 9, 3, 11, 3, 128]"
            },
            {
                "input": "incr_list([8, 7, 6])",
                "output": "[9, 8, 7]"
            },
            {
                "input": "incr_list([3, 4, 8, 7, 6, 7, 11, 3, 123])",
                "output": "[4, 5, 9, 8, 7, 8, 12, 4, 124]"
            },
            {
                "input": "incr_list([9, 6, 6, 3, 5, 4, 11, 1, 123])",
                "output": "[10, 7, 7, 4, 6, 5, 12, 2, 124]"
            },
            {
                "input": "incr_list([8, 7, 1])",
                "output": "[9, 8, 2]"
            },
            {
                "input": "incr_list([7, 6, 3])",
                "output": "[8, 7, 4]"
            },
            {
                "input": "incr_list([2, 6, 6])",
                "output": "[3, 7, 7]"
            },
            {
                "input": "incr_list([6, 3, 8, 1, 5, 6, 5, 5, 119])",
                "output": "[7, 4, 9, 2, 6, 7, 6, 6, 120]"
            },
            {
                "input": "incr_list([5, 5, 4])",
                "output": "[6, 6, 5]"
            },
            {
                "input": "incr_list([3, 1, 3])",
                "output": "[4, 2, 4]"
            },
            {
                "input": "incr_list([9, 1, 7, 1, 7, 5, 7, 1, 119])",
                "output": "[10, 2, 8, 2, 8, 6, 8, 2, 120]"
            },
            {
                "input": "incr_list([4, 6, 6])",
                "output": "[5, 7, 7]"
            },
            {
                "input": "incr_list([3, 3, 1, 2, 4, 7, 14, 1, 124])",
                "output": "[4, 4, 2, 3, 5, 8, 15, 2, 125]"
            },
            {
                "input": "incr_list([9, 6, 10, 2, 4, 2, 12, 1, 120])",
                "output": "[10, 7, 11, 3, 5, 3, 13, 2, 121]"
            },
            {
                "input": "incr_list([1, 5, 3, 4, 6, 3, 8, 1, 120])",
                "output": "[2, 6, 4, 5, 7, 4, 9, 2, 121]"
            },
            {
                "input": "incr_list([4, 4, 2, 6, 5, 6, 9, 4, 122])",
                "output": "[5, 5, 3, 7, 6, 7, 10, 5, 123]"
            },
            {
                "input": "incr_list([4, 2, 2])",
                "output": "[5, 3, 3]"
            },
            {
                "input": "incr_list([4, 4, 6])",
                "output": "[5, 5, 7]"
            },
            {
                "input": "incr_list([3, 7, 3])",
                "output": "[4, 8, 4]"
            },
            {
                "input": "incr_list([10, 6, 9, 3, 5, 8, 7, 5, 126])",
                "output": "[11, 7, 10, 4, 6, 9, 8, 6, 127]"
            },
            {
                "input": "incr_list([10, 6, 6, 5, 4, 3, 4, 5, 128])",
                "output": "[11, 7, 7, 6, 5, 4, 5, 6, 129]"
            },
            {
                "input": "incr_list([7, 4, 3, 5, 3, 3, 5, 2, 126])",
                "output": "[8, 5, 4, 6, 4, 4, 6, 3, 127]"
            },
            {
                "input": "incr_list([5, 7, 3, 1, 7, 3, 7, 5, 125])",
                "output": "[6, 8, 4, 2, 8, 4, 8, 6, 126]"
            },
            {
                "input": "incr_list([8, 3, 4])",
                "output": "[9, 4, 5]"
            },
            {
                "input": "incr_list([2, 5, 5, 3, 3, 4, 5, 4, 119])",
                "output": "[3, 6, 6, 4, 4, 5, 6, 5, 120]"
            },
            {
                "input": "incr_list([6, 6, 6])",
                "output": "[7, 7, 7]"
            },
            {
                "input": "incr_list([10, 5, 6, 6, 7, 1, 6, 1, 125])",
                "output": "[11, 6, 7, 7, 8, 2, 7, 2, 126]"
            },
            {
                "input": "incr_list([7, 6, 9, 3, 8, 3, 13, 4, 119])",
                "output": "[8, 7, 10, 4, 9, 4, 14, 5, 120]"
            },
            {
                "input": "incr_list([5, 2, 5, 2, 3, 3, 9, 0, 123])",
                "output": "[6, 3, 6, 3, 4, 4, 10, 1, 124]"
            },
            {
                "input": "incr_list([8, 1, 5])",
                "output": "[9, 2, 6]"
            },
            {
                "input": "incr_list([1, 5, 8, 5, 1, 4, 4, 2, 126])",
                "output": "[2, 6, 9, 6, 2, 5, 5, 3, 127]"
            },
            {
                "input": "incr_list([5, 3, 10, 2, 3, 5, 7, 2, 118])",
                "output": "[6, 4, 11, 3, 4, 6, 8, 3, 119]"
            },
            {
                "input": "incr_list([4, 7, 2])",
                "output": "[5, 8, 3]"
            },
            {
                "input": "incr_list([9, 7, 8, 4, 6, 8, 13, 5, 119])",
                "output": "[10, 8, 9, 5, 7, 9, 14, 6, 120]"
            },
            {
                "input": "incr_list([7, 2, 1])",
                "output": "[8, 3, 2]"
            },
            {
                "input": "incr_list([8, 4, 6])",
                "output": "[9, 5, 7]"
            },
            {
                "input": "incr_list([3, 6, 6, 6, 5, 4, 9, 5, 125])",
                "output": "[4, 7, 7, 7, 6, 5, 10, 6, 126]"
            },
            {
                "input": "incr_list([6, 7, 1])",
                "output": "[7, 8, 2]"
            },
            {
                "input": "incr_list([3, 3, 1])",
                "output": "[4, 4, 2]"
            },
            {
                "input": "incr_list([7, 6, 4, 2, 1, 1, 14, 2, 124])",
                "output": "[8, 7, 5, 3, 2, 2, 15, 3, 125]"
            },
            {
                "input": "incr_list([8, 3, 5])",
                "output": "[9, 4, 6]"
            },
            {
                "input": "incr_list([2, 2, 10, 1, 5, 3, 4, 5, 120])",
                "output": "[3, 3, 11, 2, 6, 4, 5, 6, 121]"
            },
            {
                "input": "incr_list([6, 7, 6])",
                "output": "[7, 8, 7]"
            },
            {
                "input": "incr_list([9, 7, 3, 4, 8, 3, 13, 5, 124])",
                "output": "[10, 8, 4, 5, 9, 4, 14, 6, 125]"
            },
            {
                "input": "incr_list([3, 6, 6])",
                "output": "[4, 7, 7]"
            }
        ]
    },
    {
        "problem_description": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
        "ground truth": "def pairs_sum_to_zero(l):\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
        "instances": [
            {
                "input": "pairs_sum_to_zero([3, 9, 0, 8, 5, 9])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-5, 10, 2, 9, 3, 33])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-6, 14, -4, 5, 6, 32])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([4, 7, -9, 5, 4, 6])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-8, 10, -4, 8, 6, 26])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([1])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-3, 9, -1, 3, 2, 30])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([-5, 12, 1, 8, 6, 31])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-3, 12, -6, 6, 7, 29])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([-4, 8, -3, 9, 5, 29])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-4, 11, 1, 6, 6, 28])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-7, 5, 2, 4, 1, 26])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([5, 1, 3, 5])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([3, 4, -7, 1, 2, 3])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([6, 7, 2, 5])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-1, 5, -6, 8, 1, 33])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([5])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([6])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([4, 3, -4, 5])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([-7, 12, -3, 2, 6, 29])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-8, 11, 0, 3, 6, 26])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([5, 4, -1, 5, 10, 6])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2, 7, 8, 5])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2, 3, 1, 8])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-3, 6, -5, 7, 7, 30])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([3])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([3, 7, -4, 1, 1, 11])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2, 8, 1, 4])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([4])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-3, 9, -1, 3, 2, 31])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([3, 4, 10, 1])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-7, 14, 2, 4, 6, 30])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([5, 7, 3, 4])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 3, -2, 1])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([6, 8, 2, 5])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([4, 6, 2, 4])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 3, 4, 3])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 13, -5, 7, 7, 27])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2, 3, 7, 1])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 5, 1, 12])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2, 9, -5, 4, 6, 30])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-1, 13, -4, 6, 3, 28])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([5, 2, 7, 3])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([7, 8, -10, 7, 2, 4])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 5, 1, 3])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([0, 13, -2, 7, 3, 31])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([5, 5, 2, 2])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-3, 8, 1, 1, 6, 31])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-8, 14, 0, 1, 7, 30])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([6, 1, -4, 6])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([3, 3, 1, 4])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 8, -5, 3, 7, 35])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([3, 9, -8, 6, 2, 5])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([5, 2, 1, 11])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([5, 8, -4, 5])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-5, 13, -2, 8, 7, 35])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([0, 13, -2, 4, 4, 28])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-3, 9, -1, 4, 2, 31])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-4, 11, -3, 6, 2, 27])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([4, 6, -8, 1, 2, 8])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([-5, 9, -1, 7, 4, 34])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([0, 14, -6, 5, 1, 35])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-6, 7, -4, 4, 2, 32])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([3, 2, 1, 6])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-3, 9, -1, 4, 2, 30])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-1, 14, 1, 8, 6, 36])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([6, 9, -9, 2, 7, 11])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([2, 12, 1, 9, 6, 33])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 7, 4, 6])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 4, -6, 7, 1, 32])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2, 4, -5, 3, 5, 7])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([-1, 4, -2, 5, 5, 27])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2, 2, 6, 4])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([4, 1, 3, 7])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([4, 2, 9, 3])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2, 8, 10, 3])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 3, 5, 0])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-1, 8, 4, 3, 7, 29])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-2, 10, 0, 6, 5, 30])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([0, 11, -3, 8, 7, 26])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-1, 11, -4, 3, 5, 28])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2, 6, 2, 5])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-7, 14, 0, 5, 1, 28])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-5, 4, 3, 6, 2, 27])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-2, 4, -5, 4, 1, 25])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-6, 8, 0, 4, 5, 27])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-8, 14, -2, 8, 2, 35])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([6, 1, 0, 3])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2, 6, -4, 5])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 11, -3, 6, 7, 30])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-4, 8, -1, 7, 6, 26])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-5, 5, -2, 3, 1, 32])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([1, 4, -10, 5, 10, 9])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([6, 1, 3, 2])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-2, 12, -4, 7, 1, 36])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 2, 2, 2])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 3, 3, 5])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-6, 14, 1, 8, 2, 28])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2, 4, 1, 2])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-8, 7, -1, 2, 1, 28])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([7, 5, -1, 1, 8, 10])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([-7, 9, 2, 1, 6, 34])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-4, 6, 0, 6, 3, 26])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2, 3, 7, 4])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 6, 1, 2])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([6, 6, -7, 6])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 5, -1, 8, 8, 4])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([5, 3, 6, 7])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 2, 3, 7])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2, 12, 1, 6, 7, 25])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-4, 9, -3, 6, 7, 31])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2, 8, -2, 3])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([0, 4, -1, 5, 3, 33])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([2, 14, 3, 6, 2, 29])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([-8, 11, -6, 5, 7, 36])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([3, 1, -2, 2])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([-4, 12, 0, 1, 7, 28])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([6, 5, -3, 3])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([-4, 9, 2, 3, 4, 30])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([4, 5, 8, 3])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([4, 5, -10, 2, 10, 9])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([2, 10, -2, 2, 4, 33])",
                "output": "True"
            },
            {
                "input": "pairs_sum_to_zero([1, 14, 0, 5, 2, 34])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([3, 2, -1, 2])",
                "output": "False"
            },
            {
                "input": "pairs_sum_to_zero([1, 4, -1, 8, 8, 12])",
                "output": "True"
            }
        ]
    },
    {
        "problem_description": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
        "ground truth": "def change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
        "instances": [
            {
                "input": "change_base(6821, 4)",
                "output": "'1222211'"
            },
            {
                "input": "change_base(606, 6)",
                "output": "'2450'"
            },
            {
                "input": "change_base(3083, 9)",
                "output": "'4205'"
            },
            {
                "input": "change_base(5567, 3)",
                "output": "'21122012'"
            },
            {
                "input": "change_base(8415, 3)",
                "output": "'102112200'"
            },
            {
                "input": "change_base(650, 5)",
                "output": "'10100'"
            },
            {
                "input": "change_base(490, 6)",
                "output": "'2134'"
            },
            {
                "input": "change_base(9799, 9)",
                "output": "'14387'"
            },
            {
                "input": "change_base(4409, 9)",
                "output": "'6038'"
            },
            {
                "input": "change_base(4636, 7)",
                "output": "'16342'"
            },
            {
                "input": "change_base(3547, 6)",
                "output": "'24231'"
            },
            {
                "input": "change_base(3980, 2)",
                "output": "'111110001100'"
            },
            {
                "input": "change_base(2646, 5)",
                "output": "'41041'"
            },
            {
                "input": "change_base(1125, 8)",
                "output": "'2145'"
            },
            {
                "input": "change_base(1649, 4)",
                "output": "'121301'"
            },
            {
                "input": "change_base(4972, 8)",
                "output": "'11554'"
            },
            {
                "input": "change_base(5750, 3)",
                "output": "'21212222'"
            },
            {
                "input": "change_base(8345, 8)",
                "output": "'20231'"
            },
            {
                "input": "change_base(3702, 9)",
                "output": "'5063'"
            },
            {
                "input": "change_base(6325, 2)",
                "output": "'1100010110101'"
            },
            {
                "input": "change_base(2947, 7)",
                "output": "'11410'"
            },
            {
                "input": "change_base(3335, 6)",
                "output": "'23235'"
            },
            {
                "input": "change_base(2581, 6)",
                "output": "'15541'"
            },
            {
                "input": "change_base(9784, 3)",
                "output": "'111102101'"
            },
            {
                "input": "change_base(9631, 9)",
                "output": "'14181'"
            },
            {
                "input": "change_base(6227, 2)",
                "output": "'1100001010011'"
            },
            {
                "input": "change_base(1054, 5)",
                "output": "'13204'"
            },
            {
                "input": "change_base(558, 8)",
                "output": "'1056'"
            },
            {
                "input": "change_base(4838, 8)",
                "output": "'11346'"
            },
            {
                "input": "change_base(6698, 5)",
                "output": "'203243'"
            },
            {
                "input": "change_base(7875, 9)",
                "output": "'11720'"
            },
            {
                "input": "change_base(2739, 4)",
                "output": "'222303'"
            },
            {
                "input": "change_base(2175, 7)",
                "output": "'6225'"
            },
            {
                "input": "change_base(3853, 8)",
                "output": "'7415'"
            },
            {
                "input": "change_base(865, 4)",
                "output": "'31201'"
            },
            {
                "input": "change_base(6876, 6)",
                "output": "'51500'"
            },
            {
                "input": "change_base(3896, 8)",
                "output": "'7470'"
            },
            {
                "input": "change_base(4273, 2)",
                "output": "'1000010110001'"
            },
            {
                "input": "change_base(3238, 8)",
                "output": "'6246'"
            },
            {
                "input": "change_base(4069, 3)",
                "output": "'12120201'"
            },
            {
                "input": "change_base(5180, 8)",
                "output": "'12074'"
            },
            {
                "input": "change_base(4983, 5)",
                "output": "'124413'"
            },
            {
                "input": "change_base(9657, 9)",
                "output": "'14220'"
            },
            {
                "input": "change_base(1107, 4)",
                "output": "'101103'"
            },
            {
                "input": "change_base(5364, 3)",
                "output": "'21100200'"
            },
            {
                "input": "change_base(8615, 9)",
                "output": "'12732'"
            },
            {
                "input": "change_base(1083, 4)",
                "output": "'100323'"
            },
            {
                "input": "change_base(8825, 4)",
                "output": "'2021321'"
            },
            {
                "input": "change_base(8499, 6)",
                "output": "'103203'"
            },
            {
                "input": "change_base(2109, 7)",
                "output": "'6102'"
            },
            {
                "input": "change_base(729, 4)",
                "output": "'23121'"
            },
            {
                "input": "change_base(4712, 2)",
                "output": "'1001001101000'"
            },
            {
                "input": "change_base(6675, 4)",
                "output": "'1220103'"
            },
            {
                "input": "change_base(4101, 6)",
                "output": "'30553'"
            },
            {
                "input": "change_base(7268, 7)",
                "output": "'30122'"
            },
            {
                "input": "change_base(2968, 4)",
                "output": "'232120'"
            },
            {
                "input": "change_base(8520, 6)",
                "output": "'103240'"
            },
            {
                "input": "change_base(9135, 5)",
                "output": "'243020'"
            },
            {
                "input": "change_base(4467, 3)",
                "output": "'20010110'"
            },
            {
                "input": "change_base(4039, 7)",
                "output": "'14530'"
            },
            {
                "input": "change_base(8642, 4)",
                "output": "'2013002'"
            },
            {
                "input": "change_base(4932, 2)",
                "output": "'1001101000100'"
            },
            {
                "input": "change_base(3541, 7)",
                "output": "'13216'"
            },
            {
                "input": "change_base(5232, 3)",
                "output": "'21011210'"
            },
            {
                "input": "change_base(2010, 3)",
                "output": "'2202110'"
            },
            {
                "input": "change_base(9822, 4)",
                "output": "'2121132'"
            },
            {
                "input": "change_base(9614, 3)",
                "output": "'111012002'"
            },
            {
                "input": "change_base(3984, 6)",
                "output": "'30240'"
            },
            {
                "input": "change_base(2878, 7)",
                "output": "'11251'"
            },
            {
                "input": "change_base(9431, 8)",
                "output": "'22327'"
            },
            {
                "input": "change_base(3244, 9)",
                "output": "'4404'"
            },
            {
                "input": "change_base(8222, 2)",
                "output": "'10000000011110'"
            },
            {
                "input": "change_base(2034, 7)",
                "output": "'5634'"
            },
            {
                "input": "change_base(6140, 9)",
                "output": "'8372'"
            },
            {
                "input": "change_base(9561, 9)",
                "output": "'14103'"
            },
            {
                "input": "change_base(5951, 8)",
                "output": "'13477'"
            },
            {
                "input": "change_base(967, 4)",
                "output": "'33013'"
            },
            {
                "input": "change_base(3565, 8)",
                "output": "'6755'"
            },
            {
                "input": "change_base(1002, 4)",
                "output": "'33222'"
            },
            {
                "input": "change_base(8845, 2)",
                "output": "'10001010001101'"
            },
            {
                "input": "change_base(1393, 3)",
                "output": "'1220121'"
            },
            {
                "input": "change_base(1459, 5)",
                "output": "'21314'"
            },
            {
                "input": "change_base(2721, 6)",
                "output": "'20333'"
            },
            {
                "input": "change_base(4229, 8)",
                "output": "'10205'"
            },
            {
                "input": "change_base(3586, 8)",
                "output": "'7002'"
            },
            {
                "input": "change_base(1839, 7)",
                "output": "'5235'"
            },
            {
                "input": "change_base(7864, 8)",
                "output": "'17270'"
            },
            {
                "input": "change_base(6813, 2)",
                "output": "'1101010011101'"
            },
            {
                "input": "change_base(978, 6)",
                "output": "'4310'"
            },
            {
                "input": "change_base(9202, 8)",
                "output": "'21762'"
            },
            {
                "input": "change_base(213, 2)",
                "output": "'11010101'"
            },
            {
                "input": "change_base(3310, 9)",
                "output": "'4477'"
            },
            {
                "input": "change_base(4253, 6)",
                "output": "'31405'"
            },
            {
                "input": "change_base(8371, 6)",
                "output": "'102431'"
            },
            {
                "input": "change_base(8969, 4)",
                "output": "'2030021'"
            },
            {
                "input": "change_base(4868, 5)",
                "output": "'123433'"
            },
            {
                "input": "change_base(1548, 8)",
                "output": "'3014'"
            },
            {
                "input": "change_base(7136, 7)",
                "output": "'26543'"
            },
            {
                "input": "change_base(5625, 3)",
                "output": "'21201100'"
            },
            {
                "input": "change_base(1214, 4)",
                "output": "'102332'"
            },
            {
                "input": "change_base(6899, 9)",
                "output": "'10415'"
            },
            {
                "input": "change_base(7434, 7)",
                "output": "'30450'"
            },
            {
                "input": "change_base(2362, 2)",
                "output": "'100100111010'"
            },
            {
                "input": "change_base(2283, 7)",
                "output": "'6441'"
            },
            {
                "input": "change_base(3522, 9)",
                "output": "'4743'"
            },
            {
                "input": "change_base(5732, 4)",
                "output": "'1121210'"
            },
            {
                "input": "change_base(3336, 8)",
                "output": "'6410'"
            },
            {
                "input": "change_base(9239, 4)",
                "output": "'2100113'"
            },
            {
                "input": "change_base(3431, 6)",
                "output": "'23515'"
            },
            {
                "input": "change_base(1824, 6)",
                "output": "'12240'"
            },
            {
                "input": "change_base(3158, 8)",
                "output": "'6126'"
            },
            {
                "input": "change_base(402, 2)",
                "output": "'110010010'"
            },
            {
                "input": "change_base(9106, 3)",
                "output": "'110111021'"
            },
            {
                "input": "change_base(8257, 4)",
                "output": "'2001001'"
            },
            {
                "input": "change_base(5798, 8)",
                "output": "'13246'"
            },
            {
                "input": "change_base(4924, 5)",
                "output": "'124144'"
            },
            {
                "input": "change_base(5557, 9)",
                "output": "'7554'"
            },
            {
                "input": "change_base(2955, 9)",
                "output": "'4043'"
            },
            {
                "input": "change_base(4905, 8)",
                "output": "'11451'"
            },
            {
                "input": "change_base(4930, 2)",
                "output": "'1001101000010'"
            },
            {
                "input": "change_base(624, 3)",
                "output": "'212010'"
            },
            {
                "input": "change_base(1273, 7)",
                "output": "'3466'"
            },
            {
                "input": "change_base(7251, 3)",
                "output": "'100221120'"
            },
            {
                "input": "change_base(2054, 2)",
                "output": "'100000000110'"
            },
            {
                "input": "change_base(5401, 6)",
                "output": "'41001'"
            },
            {
                "input": "change_base(803, 9)",
                "output": "'1082'"
            }
        ]
    },
    {
        "problem_description": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "ground truth": "def triangle_area(a, h):\n    return a * h / 2.0\n",
        "instances": [
            {
                "input": "triangle_area(5, 13)",
                "output": "32.5"
            },
            {
                "input": "triangle_area(5, 2)",
                "output": "5.0"
            },
            {
                "input": "triangle_area(7, 10)",
                "output": "35.0"
            },
            {
                "input": "triangle_area(5, 4)",
                "output": "10.0"
            },
            {
                "input": "triangle_area(11, 8)",
                "output": "44.0"
            },
            {
                "input": "triangle_area(3, 4)",
                "output": "6.0"
            },
            {
                "input": "triangle_area(3, 2)",
                "output": "3.0"
            },
            {
                "input": "triangle_area(10, 8)",
                "output": "40.0"
            },
            {
                "input": "triangle_area(8, 13)",
                "output": "52.0"
            },
            {
                "input": "triangle_area(1, 5)",
                "output": "2.5"
            },
            {
                "input": "triangle_area(7, 12)",
                "output": "42.0"
            },
            {
                "input": "triangle_area(6, 9)",
                "output": "27.0"
            },
            {
                "input": "triangle_area(6, 6)",
                "output": "18.0"
            },
            {
                "input": "triangle_area(4, 7)",
                "output": "14.0"
            },
            {
                "input": "triangle_area(7, 8)",
                "output": "28.0"
            },
            {
                "input": "triangle_area(5, 5)",
                "output": "12.5"
            },
            {
                "input": "triangle_area(15, 11)",
                "output": "82.5"
            },
            {
                "input": "triangle_area(2, 2)",
                "output": "2.0"
            },
            {
                "input": "triangle_area(6, 7)",
                "output": "21.0"
            },
            {
                "input": "triangle_area(6, 5)",
                "output": "15.0"
            },
            {
                "input": "triangle_area(1, 6)",
                "output": "3.0"
            },
            {
                "input": "triangle_area(9, 3)",
                "output": "13.5"
            },
            {
                "input": "triangle_area(15, 3)",
                "output": "22.5"
            },
            {
                "input": "triangle_area(2, 6)",
                "output": "6.0"
            },
            {
                "input": "triangle_area(5, 9)",
                "output": "22.5"
            },
            {
                "input": "triangle_area(1, 7)",
                "output": "3.5"
            },
            {
                "input": "triangle_area(8, 10)",
                "output": "40.0"
            },
            {
                "input": "triangle_area(4, 1)",
                "output": "2.0"
            },
            {
                "input": "triangle_area(13, 5)",
                "output": "32.5"
            },
            {
                "input": "triangle_area(10, 12)",
                "output": "60.0"
            },
            {
                "input": "triangle_area(8, 7)",
                "output": "28.0"
            },
            {
                "input": "triangle_area(7, 5)",
                "output": "17.5"
            },
            {
                "input": "triangle_area(6, 8)",
                "output": "24.0"
            },
            {
                "input": "triangle_area(3, 5)",
                "output": "7.5"
            },
            {
                "input": "triangle_area(2, 3)",
                "output": "3.0"
            },
            {
                "input": "triangle_area(3, 7)",
                "output": "10.5"
            },
            {
                "input": "triangle_area(7, 7)",
                "output": "24.5"
            },
            {
                "input": "triangle_area(15, 13)",
                "output": "97.5"
            },
            {
                "input": "triangle_area(7, 4)",
                "output": "14.0"
            },
            {
                "input": "triangle_area(6, 1)",
                "output": "3.0"
            },
            {
                "input": "triangle_area(9, 12)",
                "output": "54.0"
            },
            {
                "input": "triangle_area(4, 6)",
                "output": "12.0"
            },
            {
                "input": "triangle_area(7, 3)",
                "output": "10.5"
            },
            {
                "input": "triangle_area(9, 9)",
                "output": "40.5"
            },
            {
                "input": "triangle_area(10, 7)",
                "output": "35.0"
            },
            {
                "input": "triangle_area(15, 12)",
                "output": "90.0"
            },
            {
                "input": "triangle_area(2, 4)",
                "output": "4.0"
            },
            {
                "input": "triangle_area(3, 6)",
                "output": "9.0"
            },
            {
                "input": "triangle_area(4, 5)",
                "output": "10.0"
            },
            {
                "input": "triangle_area(8, 8)",
                "output": "32.0"
            },
            {
                "input": "triangle_area(10, 3)",
                "output": "15.0"
            },
            {
                "input": "triangle_area(13, 6)",
                "output": "39.0"
            },
            {
                "input": "triangle_area(7, 1)",
                "output": "3.5"
            },
            {
                "input": "triangle_area(6, 3)",
                "output": "9.0"
            },
            {
                "input": "triangle_area(10, 5)",
                "output": "25.0"
            },
            {
                "input": "triangle_area(14, 8)",
                "output": "56.0"
            },
            {
                "input": "triangle_area(1, 4)",
                "output": "2.0"
            },
            {
                "input": "triangle_area(13, 11)",
                "output": "71.5"
            },
            {
                "input": "triangle_area(13, 10)",
                "output": "65.0"
            },
            {
                "input": "triangle_area(3, 1)",
                "output": "1.5"
            },
            {
                "input": "triangle_area(2, 1)",
                "output": "1.0"
            },
            {
                "input": "triangle_area(9, 8)",
                "output": "36.0"
            },
            {
                "input": "triangle_area(5, 7)",
                "output": "17.5"
            },
            {
                "input": "triangle_area(4, 4)",
                "output": "8.0"
            },
            {
                "input": "triangle_area(3, 8)",
                "output": "12.0"
            },
            {
                "input": "triangle_area(15, 4)",
                "output": "30.0"
            },
            {
                "input": "triangle_area(5, 3)",
                "output": "7.5"
            },
            {
                "input": "triangle_area(9, 6)",
                "output": "27.0"
            },
            {
                "input": "triangle_area(10, 10)",
                "output": "50.0"
            },
            {
                "input": "triangle_area(6, 12)",
                "output": "36.0"
            },
            {
                "input": "triangle_area(4, 2)",
                "output": "4.0"
            },
            {
                "input": "triangle_area(13, 8)",
                "output": "52.0"
            },
            {
                "input": "triangle_area(6, 2)",
                "output": "6.0"
            }
        ]
    },
    {
        "problem_description": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "ground truth": "def fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
        "instances": [
            {
                "input": "fib4(28)",
                "output": "14017196"
            },
            {
                "input": "fib4(23)",
                "output": "526768"
            },
            {
                "input": "fib4(7)",
                "output": "14"
            },
            {
                "input": "fib4(4)",
                "output": "2"
            },
            {
                "input": "fib4(50)",
                "output": "26112283777288"
            },
            {
                "input": "fib4(57)",
                "output": "2581685349984862"
            },
            {
                "input": "fib4(13)",
                "output": "744"
            },
            {
                "input": "fib4(35)",
                "output": "1385860764"
            },
            {
                "input": "fib4(43)",
                "output": "264110947552"
            },
            {
                "input": "fib4(59)",
                "output": "9592239446592686"
            },
            {
                "input": "fib4(56)",
                "output": "1339352707109744"
            },
            {
                "input": "fib4(69)",
                "output": "6792091318702389286"
            },
            {
                "input": "fib4(40)",
                "output": "36877489824"
            },
            {
                "input": "fib4(64)",
                "output": "255247656741676658"
            },
            {
                "input": "fib4(85)",
                "output": "246681808823124970931012"
            },
            {
                "input": "fib4(22)",
                "output": "273282"
            },
            {
                "input": "fib4(77)",
                "output": "1294405412608178787454"
            },
            {
                "input": "fib4(89)",
                "output": "3405418776501538656143990"
            },
            {
                "input": "fib4(73)",
                "output": "93764171013545442488"
            },
            {
                "input": "fib4(58)",
                "output": "4976358513292148"
            },
            {
                "input": "fib4(30)",
                "output": "52080824"
            },
            {
                "input": "fib4(45)",
                "output": "981302949796"
            },
            {
                "input": "fib4(87)",
                "output": "916545069043324623948942"
            },
            {
                "input": "fib4(95)",
                "output": "174670928672918843046473740"
            },
            {
                "input": "fib4(1)",
                "output": "0"
            },
            {
                "input": "fib4(60)",
                "output": "18489636016979440"
            },
            {
                "input": "fib4(66)",
                "output": "948371435605898616"
            },
            {
                "input": "fib4(83)",
                "output": "66392714182364268855232"
            },
            {
                "input": "fib4(17)",
                "output": "10270"
            },
            {
                "input": "fib4(2)",
                "output": "2"
            },
            {
                "input": "fib4(29)",
                "output": "27019014"
            },
            {
                "input": "fib4(38)",
                "output": "9925323044"
            },
            {
                "input": "fib4(26)",
                "output": "3772632"
            },
            {
                "input": "fib4(75)",
                "output": "348380324456838586684"
            },
            {
                "input": "fib4(78)",
                "output": "2495046654202812132420"
            },
            {
                "input": "fib4(74)",
                "output": "180736250708388495690"
            },
            {
                "input": "fib4(9)",
                "output": "54"
            },
            {
                "input": "fib4(36)",
                "output": "2671332512"
            },
            {
                "input": "fib4(42)",
                "output": "137018135298"
            },
            {
                "input": "fib4(10)",
                "output": "104"
            },
            {
                "input": "fib4(15)",
                "output": "2764"
            },
            {
                "input": "fib4(14)",
                "output": "1434"
            },
            {
                "input": "fib4(67)",
                "output": "1828044717908083822"
            },
            {
                "input": "fib4(49)",
                "output": "13546793363542"
            },
            {
                "input": "fib4(98)",
                "output": "1250966502919879120640717716"
            },
            {
                "input": "fib4(90)",
                "output": "6564155744179952341356968"
            },
            {
                "input": "fib4(46)",
                "output": "1891522252456"
            },
            {
                "input": "fib4(96)",
                "output": "336689040332208585492454928"
            },
            {
                "input": "fib4(32)",
                "output": "193506050"
            },
            {
                "input": "fib4(44)",
                "output": "509090219810"
            },
            {
                "input": "fib4(97)",
                "output": "648988991706202294407873694"
            },
            {
                "input": "fib4(39)",
                "output": "19131675294"
            },
            {
                "input": "fib4(93)",
                "output": "47011480492525468175029672"
            },
            {
                "input": "fib4(37)",
                "output": "5149158974"
            },
            {
                "input": "fib4(12)",
                "output": "386"
            },
            {
                "input": "fib4(82)",
                "output": "34443880418283540493826"
            },
            {
                "input": "fib4(70)",
                "output": "13092176959938404696"
            },
            {
                "input": "fib4(48)",
                "output": "7027941791676"
            },
            {
                "input": "fib4(19)",
                "output": "38158"
            },
            {
                "input": "fib4(5)",
                "output": "4"
            },
            {
                "input": "fib4(84)",
                "output": "127976071307031301941314"
            },
            {
                "input": "fib4(63)",
                "output": "132419948094134672"
            },
            {
                "input": "fib4(16)",
                "output": "5328"
            },
            {
                "input": "fib4(8)",
                "output": "28"
            },
            {
                "input": "fib4(31)",
                "output": "100389016"
            },
            {
                "input": "fib4(81)",
                "output": "17869142915445859640640"
            },
            {
                "input": "fib4(25)",
                "output": "1957204"
            },
            {
                "input": "fib4(55)",
                "output": "694842876205932"
            },
            {
                "input": "fib4(20)",
                "output": "73552"
            },
            {
                "input": "fib4(76)",
                "output": "671524666429406262592"
            },
            {
                "input": "fib4(79)",
                "output": "4809357057697235769150"
            },
            {
                "input": "fib4(54)",
                "output": "360477579991610"
            },
            {
                "input": "fib4(6)",
                "output": "8"
            },
            {
                "input": "fib4(72)",
                "output": "48643920250633737730"
            }
        ]
    },
    {
        "problem_description": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
        "ground truth": "def median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
        "instances": [
            {
                "input": "median([7, 3, 6, 5, 2])",
                "output": "5"
            },
            {
                "input": "median([3, 5, 7, 4, 8])",
                "output": "5"
            },
            {
                "input": "median([-7, 4, 10, 998, 10, 22])",
                "output": "10.0"
            },
            {
                "input": "median([-15, 8, 4, 997, 7, 19])",
                "output": "7.5"
            },
            {
                "input": "median([2, 10])",
                "output": "6.0"
            },
            {
                "input": "median([-12, 8, 9, 997, 14, 17])",
                "output": "11.5"
            },
            {
                "input": "median([-5, 1, 10, 1003, 10, 25])",
                "output": "10.0"
            },
            {
                "input": "median([6, 4, 4, 11, 11, 2, 2])",
                "output": "4"
            },
            {
                "input": "median([5, 2, 2, 5, 6, 1, 3])",
                "output": "3"
            },
            {
                "input": "median([3, 4, 5, 9, 7, 2, 3])",
                "output": "4"
            },
            {
                "input": "median([3])",
                "output": "3"
            },
            {
                "input": "median([6, 1, 5, 7, 11, 6, 5])",
                "output": "6"
            },
            {
                "input": "median([3, 6, 2, 6, 9])",
                "output": "6"
            },
            {
                "input": "median([7, 4, 7, 1, 7])",
                "output": "7"
            },
            {
                "input": "median([-11, 5, 11, 1002, 10, 20])",
                "output": "10.5"
            },
            {
                "input": "median([12, 2, 2, 11, 11, 4, 2])",
                "output": "4"
            },
            {
                "input": "median([8, 5, 3, 2, 10])",
                "output": "5"
            },
            {
                "input": "median([1, 2])",
                "output": "1.5"
            },
            {
                "input": "median([10, 10])",
                "output": "10.0"
            },
            {
                "input": "median([2, 9])",
                "output": "5.5"
            },
            {
                "input": "median([8, 2, 7, 6, 7])",
                "output": "7"
            },
            {
                "input": "median([6, 5, 5, 7, 10, 6, 8])",
                "output": "6"
            },
            {
                "input": "median([3, 1, 2, 4, 5])",
                "output": "3"
            },
            {
                "input": "median([-15, 8, 1, 1004, 6, 19])",
                "output": "7.0"
            },
            {
                "input": "median([8, 5, 5, 7, 10])",
                "output": "7"
            },
            {
                "input": "median([11, 3, 1, 8, 5, 1, 8])",
                "output": "5"
            },
            {
                "input": "median([7])",
                "output": "7"
            },
            {
                "input": "median([4])",
                "output": "4"
            },
            {
                "input": "median([1, 3, 6, 4, 10])",
                "output": "4"
            },
            {
                "input": "median([4, 2, 2, 12, 10, 4, 10])",
                "output": "4"
            },
            {
                "input": "median([12, 1, 6, 11, 13, 6, 6])",
                "output": "6"
            },
            {
                "input": "median([-7, 7, 8, 1000, 13, 25])",
                "output": "10.5"
            },
            {
                "input": "median([8, 5, 7, 6, 3])",
                "output": "6"
            },
            {
                "input": "median([-9, 4, 2, 1002, 6, 23])",
                "output": "5.0"
            },
            {
                "input": "median([1, 1, 3, 1, 10])",
                "output": "1"
            },
            {
                "input": "median([11, 1, 3, 8, 13, 2, 7])",
                "output": "7"
            },
            {
                "input": "median([6, 6, 6, 7, 10])",
                "output": "6"
            },
            {
                "input": "median([6, 2, 4, 2, 6])",
                "output": "4"
            },
            {
                "input": "median([2, 6, 6, 7, 3])",
                "output": "6"
            },
            {
                "input": "median([6, 2, 1, 8, 1])",
                "output": "2"
            },
            {
                "input": "median([6, 10])",
                "output": "8.0"
            },
            {
                "input": "median([1, 5, 6, 6, 3])",
                "output": "5"
            },
            {
                "input": "median([2, 2])",
                "output": "2.0"
            },
            {
                "input": "median([8, 3, 5, 9, 10])",
                "output": "8"
            },
            {
                "input": "median([-11, 3, 10, 1005, 10, 22])",
                "output": "10.0"
            },
            {
                "input": "median([13, 5, 6, 7, 14, 7, 9])",
                "output": "7"
            },
            {
                "input": "median([9, 9])",
                "output": "9.0"
            },
            {
                "input": "median([5, 6, 6, 7, 5, 2, 9])",
                "output": "6"
            },
            {
                "input": "median([4, 6])",
                "output": "5.0"
            },
            {
                "input": "median([6, 6, 6, 9, 7, 4, 10])",
                "output": "6"
            },
            {
                "input": "median([6, 2, 7, 8, 8, 5, 4])",
                "output": "6"
            },
            {
                "input": "median([-6, 9, 6, 997, 14, 25])",
                "output": "11.5"
            },
            {
                "input": "median([7, 8])",
                "output": "7.5"
            },
            {
                "input": "median([5, 4])",
                "output": "4.5"
            },
            {
                "input": "median([-13, 8, 6, 998, 13, 19])",
                "output": "10.5"
            },
            {
                "input": "median([-5, 9, 2, 996, 15, 22])",
                "output": "12.0"
            },
            {
                "input": "median([7, 4])",
                "output": "5.5"
            },
            {
                "input": "median([7, 7])",
                "output": "7.0"
            },
            {
                "input": "median([10, 6, 4, 8, 4, 3, 11])",
                "output": "6"
            },
            {
                "input": "median([-11, 3, 3, 998, 15, 15])",
                "output": "9.0"
            },
            {
                "input": "median([-8, 5, 4, 1001, 14, 22])",
                "output": "9.5"
            },
            {
                "input": "median([12, 3, 5, 11, 7, 4, 5])",
                "output": "5"
            },
            {
                "input": "median([3, 6, 1, 4, 3])",
                "output": "3"
            },
            {
                "input": "median([-5, 9, 10, 1000, 12, 18])",
                "output": "11.0"
            },
            {
                "input": "median([11, 3, 6, 13, 6, 4, 9])",
                "output": "6"
            },
            {
                "input": "median([-10, 3, 3, 997, 15, 22])",
                "output": "9.0"
            },
            {
                "input": "median([8])",
                "output": "8"
            },
            {
                "input": "median([-15, 3, 2, 1002, 8, 22])",
                "output": "5.5"
            },
            {
                "input": "median([9, 5, 2, 6, 13, 7, 2])",
                "output": "6"
            },
            {
                "input": "median([-11, 1, 3, 1004, 12, 17])",
                "output": "7.5"
            },
            {
                "input": "median([7, 2, 7, 6, 6])",
                "output": "6"
            },
            {
                "input": "median([5, 5])",
                "output": "5.0"
            },
            {
                "input": "median([3, 6, 6, 2, 6])",
                "output": "6"
            },
            {
                "input": "median([8, 1, 3, 9, 9, 2, 7])",
                "output": "7"
            },
            {
                "input": "median([6, 9])",
                "output": "7.5"
            },
            {
                "input": "median([3, 6, 5, 11, 5, 4, 6])",
                "output": "5"
            },
            {
                "input": "median([1, 8])",
                "output": "4.5"
            },
            {
                "input": "median([-6, 3, 8, 1002, 14, 16])",
                "output": "11.0"
            },
            {
                "input": "median([-15, 8, 4, 1000, 6, 16])",
                "output": "7.0"
            },
            {
                "input": "median([5, 1])",
                "output": "3.0"
            },
            {
                "input": "median([3, 10])",
                "output": "6.5"
            },
            {
                "input": "median([3, 1, 7, 4, 3])",
                "output": "3"
            },
            {
                "input": "median([1])",
                "output": "1"
            },
            {
                "input": "median([7, 2, 7, 1, 4])",
                "output": "4"
            },
            {
                "input": "median([6])",
                "output": "6"
            },
            {
                "input": "median([-7, 6, 6, 996, 6, 15])",
                "output": "6.0"
            },
            {
                "input": "median([-6, 6, 9, 1005, 8, 25])",
                "output": "8.5"
            },
            {
                "input": "median([8, 6, 3, 5, 12, 5, 5])",
                "output": "5"
            },
            {
                "input": "median([8, 1, 3, 9, 3])",
                "output": "3"
            },
            {
                "input": "median([3, 9])",
                "output": "6.0"
            },
            {
                "input": "median([-10, 4, 6, 1000, 10, 20])",
                "output": "8.0"
            },
            {
                "input": "median([5, 5, 5, 7, 3])",
                "output": "5"
            },
            {
                "input": "median([8, 8])",
                "output": "8.0"
            },
            {
                "input": "median([3, 2, 7, 8, 11, 5, 12])",
                "output": "7"
            },
            {
                "input": "median([-15, 3, 4, 1000, 13, 23])",
                "output": "8.5"
            },
            {
                "input": "median([11, 6, 7, 6, 6, 1, 12])",
                "output": "6"
            },
            {
                "input": "median([9])",
                "output": "9"
            },
            {
                "input": "median([-8, 4, 8, 997, 15, 20])",
                "output": "11.5"
            },
            {
                "input": "median([10, 4, 7, 11, 11, 3, 3])",
                "output": "7"
            },
            {
                "input": "median([5, 2, 3, 9, 5, 7, 7])",
                "output": "5"
            },
            {
                "input": "median([9, 2])",
                "output": "5.5"
            },
            {
                "input": "median([5])",
                "output": "5"
            },
            {
                "input": "median([1, 6])",
                "output": "3.5"
            },
            {
                "input": "median([10])",
                "output": "10"
            },
            {
                "input": "median([6, 6, 2, 7, 6])",
                "output": "6"
            },
            {
                "input": "median([11, 2])",
                "output": "6.5"
            },
            {
                "input": "median([6, 5])",
                "output": "5.5"
            },
            {
                "input": "median([11, 3])",
                "output": "7.0"
            },
            {
                "input": "median([-15, 4, 5, 1001, 15, 23])",
                "output": "10.0"
            },
            {
                "input": "median([8, 3, 2, 9, 6, 5, 2])",
                "output": "5"
            },
            {
                "input": "median([1, 6, 7, 5, 4])",
                "output": "5"
            }
        ]
    },
    {
        "problem_description": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "ground truth": "def is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
        "instances": [
            {
                "input": "is_palindrome(\"tva\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"vo\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"ndt\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"m\")",
                "output": "True"
            },
            {
                "input": "is_palindrome(\"ari\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"muq\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"rkv\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"ek\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"zz\")",
                "output": "True"
            },
            {
                "input": "is_palindrome(\"sbjdj\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"i\")",
                "output": "True"
            },
            {
                "input": "is_palindrome('xywzx')",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"lechj\")",
                "output": "False"
            },
            {
                "input": "is_palindrome('xywyx')",
                "output": "True"
            },
            {
                "input": "is_palindrome(\"ibqulgnv\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"sdrjwtzs\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"aywmrzjea\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"trfyowl\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"lkfxoanwm\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"nhsb\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"xuznma\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"ojo\")",
                "output": "True"
            },
            {
                "input": "is_palindrome(\"haqoixbz\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"oluv\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"esqcfar\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"iuktid\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"cneyudv\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"uhang\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"hjutlwzss\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"bqxg\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"khkaxvnk\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"mhtikz\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"hjbymmr\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"ufcy\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"pc\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"rwkyqbycn\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"lbuj\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"tzev\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"gbfbdxnsb\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"l\")",
                "output": "True"
            },
            {
                "input": "is_palindrome(\"ychszuxp\")",
                "output": "False"
            },
            {
                "input": "is_palindrome('aba')",
                "output": "True"
            },
            {
                "input": "is_palindrome(\"bjknhlymn\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"vlmhqnzd\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"rpcgfvu\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"rh\")",
                "output": "False"
            },
            {
                "input": "is_palindrome('zbcd')",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"tivbexy\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"wwiaea\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"qvn\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"pvsftbkft\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"ebzr\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"ltdbracy\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"ijiecnnua\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"wsdwu\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"pzwr\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"ompnndmye\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"nitxmgysg\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"vhuxo\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"kldv\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"fbgkamu\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"evce\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"aijdorvw\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"fwgsvakl\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"ojlpvu\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"jybneeehi\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"ddtg\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"ohnqisnur\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"iylcvntx\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"zlb\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"ktg\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"ixvhtpow\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"wnwbndl\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"rnujwr\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"vrtooscvs\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"atrdc\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"tlo\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"xiuu\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"lnlxmsj\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"jpsdq\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"zeryx\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"gufwosl\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"bmcbauow\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"awjisoppb\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"iaulv\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"yoq\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"hgwsd\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"dpr\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"vhz\")",
                "output": "False"
            },
            {
                "input": "is_palindrome('')",
                "output": "True"
            },
            {
                "input": "is_palindrome(\"paqo\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"kmm\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"a\")",
                "output": "True"
            },
            {
                "input": "is_palindrome(\"lsendyfuo\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"gvtpge\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"lzktbv\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"szn\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"ljhtqb\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"jsizy\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"vvgif\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"rdheftrdx\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"isa\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"ixbjt\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"kacug\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"lotdardi\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"swygfgo\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"gbvydgiv\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"jeosufcom\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"mkfmv\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"efxuqeoa\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"kjcmlw\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"itysck\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"pvshmddrr\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"hsjcijn\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"eqjngnom\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"mvnui\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"phnhdkuv\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"jsl\")",
                "output": "False"
            },
            {
                "input": "is_palindrome('aaaaa')",
                "output": "True"
            },
            {
                "input": "is_palindrome('xywyz')",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"huxrrtqxl\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"fjaus\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"wcn\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"qqfj\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"jstxoibp\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"doh\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"bm\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"wehni\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"koftjlh\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"huyna\")",
                "output": "False"
            },
            {
                "input": "is_palindrome(\"qyfcbx\")",
                "output": "False"
            }
        ]
    },
    {
        "problem_description": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "ground truth": "def modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
        "instances": [
            {
                "input": "modp(1, 103)",
                "output": "2"
            },
            {
                "input": "modp(1, 4)",
                "output": "2"
            },
            {
                "input": "modp(4, 6)",
                "output": "4"
            },
            {
                "input": "modp(3, 5)",
                "output": "3"
            },
            {
                "input": "modp(1999, 96)",
                "output": "32"
            },
            {
                "input": "modp(1257, 99)",
                "output": "62"
            },
            {
                "input": "modp(3, 103)",
                "output": "8"
            },
            {
                "input": "modp(5, 12)",
                "output": "8"
            },
            {
                "input": "modp(7, 8)",
                "output": "0"
            },
            {
                "input": "modp(1, 101)",
                "output": "2"
            },
            {
                "input": "modp(32, 9)",
                "output": "4"
            },
            {
                "input": "modp(104, 104)",
                "output": "48"
            },
            {
                "input": "modp(2, 104)",
                "output": "4"
            },
            {
                "input": "modp(32, 7)",
                "output": "4"
            },
            {
                "input": "modp(7, 7)",
                "output": "2"
            },
            {
                "input": "modp(29, 5)",
                "output": "2"
            },
            {
                "input": "modp(26, 8)",
                "output": "0"
            },
            {
                "input": "modp(30, 5)",
                "output": "4"
            },
            {
                "input": "modp(8, 13)",
                "output": "9"
            },
            {
                "input": "modp(3, 13)",
                "output": "8"
            },
            {
                "input": "modp(6, 9)",
                "output": "1"
            },
            {
                "input": "modp(2, 96)",
                "output": "4"
            },
            {
                "input": "modp(457, 101)",
                "output": "74"
            },
            {
                "input": "modp(1262, 98)",
                "output": "4"
            },
            {
                "input": "modp(102, 104)",
                "output": "64"
            },
            {
                "input": "modp(97, 102)",
                "output": "2"
            },
            {
                "input": "modp(0, 101)",
                "output": "1"
            },
            {
                "input": "modp(95, 101)",
                "output": "60"
            },
            {
                "input": "modp(1950, 97)",
                "output": "33"
            },
            {
                "input": "modp(96, 100)",
                "output": "36"
            },
            {
                "input": "modp(33, 7)",
                "output": "1"
            },
            {
                "input": "modp(27, 7)",
                "output": "1"
            },
            {
                "input": "modp(36, 3)",
                "output": "1"
            },
            {
                "input": "modp(102, 100)",
                "output": "4"
            },
            {
                "input": "modp(97, 99)",
                "output": "29"
            },
            {
                "input": "modp(30, 10)",
                "output": "4"
            },
            {
                "input": "modp(7, 11)",
                "output": "7"
            },
            {
                "input": "modp(1, 7)",
                "output": "2"
            },
            {
                "input": "modp(1000, 105)",
                "output": "16"
            },
            {
                "input": "modp(33, 8)",
                "output": "0"
            },
            {
                "input": "modp(2, 101)",
                "output": "4"
            },
            {
                "input": "modp(2, 8)",
                "output": "4"
            },
            {
                "input": "modp(26, 5)",
                "output": "4"
            },
            {
                "input": "modp(3, 101)",
                "output": "8"
            },
            {
                "input": "modp(28, 6)",
                "output": "4"
            },
            {
                "input": "modp(95, 106)",
                "output": "50"
            },
            {
                "input": "modp(892, 106)",
                "output": "44"
            },
            {
                "input": "modp(2, 9)",
                "output": "4"
            },
            {
                "input": "modp(36, 2)",
                "output": "0"
            },
            {
                "input": "modp(28, 5)",
                "output": "1"
            },
            {
                "input": "modp(4, 14)",
                "output": "2"
            },
            {
                "input": "modp(4, 12)",
                "output": "4"
            },
            {
                "input": "modp(1, 98)",
                "output": "2"
            },
            {
                "input": "modp(34, 6)",
                "output": "4"
            },
            {
                "input": "modp(2, 100)",
                "output": "4"
            },
            {
                "input": "modp(7, 2)",
                "output": "0"
            },
            {
                "input": "modp(5, 15)",
                "output": "2"
            },
            {
                "input": "modp(1357, 101)",
                "output": "74"
            },
            {
                "input": "modp(28, 9)",
                "output": "7"
            },
            {
                "input": "modp(4, 5)",
                "output": "1"
            },
            {
                "input": "modp(4, 7)",
                "output": "2"
            },
            {
                "input": "modp(31, 1)",
                "output": "0"
            },
            {
                "input": "modp(96, 99)",
                "output": "64"
            },
            {
                "input": "modp(35, 2)",
                "output": "0"
            },
            {
                "input": "modp(497, 96)",
                "output": "32"
            },
            {
                "input": "modp(26, 9)",
                "output": "4"
            },
            {
                "input": "modp(5, 16)",
                "output": "0"
            },
            {
                "input": "modp(25, 3)",
                "output": "2"
            },
            {
                "input": "modp(33, 10)",
                "output": "2"
            },
            {
                "input": "modp(1, 106)",
                "output": "2"
            },
            {
                "input": "modp(8, 6)",
                "output": "4"
            },
            {
                "input": "modp(125, 96)",
                "output": "32"
            },
            {
                "input": "modp(6, 1)",
                "output": "0"
            },
            {
                "input": "modp(34, 8)",
                "output": "0"
            },
            {
                "input": "modp(1625, 103)",
                "output": "33"
            },
            {
                "input": "modp(1, 104)",
                "output": "2"
            },
            {
                "input": "modp(1, 1)",
                "output": "0"
            },
            {
                "input": "modp(3, 4)",
                "output": "0"
            },
            {
                "input": "modp(4, 104)",
                "output": "16"
            },
            {
                "input": "modp(102, 105)",
                "output": "64"
            },
            {
                "input": "modp(2, 97)",
                "output": "4"
            },
            {
                "input": "modp(1670, 104)",
                "output": "56"
            },
            {
                "input": "modp(26, 2)",
                "output": "0"
            },
            {
                "input": "modp(1, 9)",
                "output": "2"
            },
            {
                "input": "modp(104, 97)",
                "output": "62"
            },
            {
                "input": "modp(31, 5)",
                "output": "3"
            },
            {
                "input": "modp(100, 105)",
                "output": "16"
            },
            {
                "input": "modp(104, 106)",
                "output": "54"
            },
            {
                "input": "modp(99, 104)",
                "output": "8"
            },
            {
                "input": "modp(280, 98)",
                "output": "30"
            },
            {
                "input": "modp(377, 99)",
                "output": "95"
            },
            {
                "input": "modp(1, 14)",
                "output": "2"
            },
            {
                "input": "modp(103, 97)",
                "output": "31"
            },
            {
                "input": "modp(1161, 104)",
                "output": "96"
            },
            {
                "input": "modp(31, 6)",
                "output": "2"
            },
            {
                "input": "modp(4, 99)",
                "output": "16"
            },
            {
                "input": "modp(35, 7)",
                "output": "4"
            },
            {
                "input": "modp(4, 16)",
                "output": "0"
            },
            {
                "input": "modp(1, 105)",
                "output": "2"
            },
            {
                "input": "modp(31, 3)",
                "output": "2"
            },
            {
                "input": "modp(6, 7)",
                "output": "1"
            },
            {
                "input": "modp(102, 103)",
                "output": "1"
            },
            {
                "input": "modp(33, 9)",
                "output": "8"
            },
            {
                "input": "modp(3, 11)",
                "output": "8"
            },
            {
                "input": "modp(597, 102)",
                "output": "32"
            },
            {
                "input": "modp(5, 102)",
                "output": "32"
            },
            {
                "input": "modp(1101, 101)",
                "output": "2"
            },
            {
                "input": "modp(3, 14)",
                "output": "8"
            },
            {
                "input": "modp(30, 8)",
                "output": "0"
            },
            {
                "input": "modp(25, 8)",
                "output": "0"
            },
            {
                "input": "modp(35, 8)",
                "output": "0"
            },
            {
                "input": "modp(7, 10)",
                "output": "8"
            },
            {
                "input": "modp(100, 101)",
                "output": "1"
            },
            {
                "input": "modp(101, 99)",
                "output": "68"
            },
            {
                "input": "modp(6, 3)",
                "output": "1"
            },
            {
                "input": "modp(3, 104)",
                "output": "8"
            },
            {
                "input": "modp(30, 3)",
                "output": "1"
            },
            {
                "input": "modp(4, 8)",
                "output": "0"
            },
            {
                "input": "modp(1376, 99)",
                "output": "31"
            },
            {
                "input": "modp(32, 6)",
                "output": "4"
            }
        ]
    },
    {
        "problem_description": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
        "ground truth": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "instances": []
    },
    {
        "problem_description": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
        "ground truth": "def remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
        "instances": [
            {
                "input": "remove_vowels(\"otbpmulzy\")",
                "output": "'tbpmlzy'"
            },
            {
                "input": "remove_vowels(\"soeug\")",
                "output": "'sg'"
            },
            {
                "input": "remove_vowels(\"axuukexsgyaawidj\")",
                "output": "'xkxsgywdj'"
            },
            {
                "input": "remove_vowels(\"okjhzsyzhmvuhlpyf\")",
                "output": "'kjhzsyzhmvhlpyf'"
            },
            {
                "input": "remove_vowels(\"pfyoglmdc\")",
                "output": "'pfyglmdc'"
            },
            {
                "input": "remove_vowels(\"XHpLhU\")",
                "output": "'XHpLh'"
            },
            {
                "input": "remove_vowels('fedcba')",
                "output": "'fdcb'"
            },
            {
                "input": "remove_vowels(\"foza\")",
                "output": "'fz'"
            },
            {
                "input": "remove_vowels(\"xqhpsau\")",
                "output": "'xqhps'"
            },
            {
                "input": "remove_vowels(\"f\")",
                "output": "'f'"
            },
            {
                "input": "remove_vowels(\"nznwcimzc\")",
                "output": "'nznwcmzc'"
            },
            {
                "input": "remove_vowels(\"lbCFKE\")",
                "output": "'lbCFK'"
            },
            {
                "input": "remove_vowels(\"gsbodwzfa\")",
                "output": "'gsbdwzf'"
            },
            {
                "input": "remove_vowels(\"ietqwb\")",
                "output": "'tqwb'"
            },
            {
                "input": "remove_vowels(\"guevbhcrsxgp\")",
                "output": "'gvbhcrsxgp'"
            },
            {
                "input": "remove_vowels(\"oOPb\")",
                "output": "'Pb'"
            },
            {
                "input": "remove_vowels(\"DEgyM\")",
                "output": "'DgyM'"
            },
            {
                "input": "remove_vowels('eeeee')",
                "output": "''"
            },
            {
                "input": "remove_vowels(\"msykqq\")",
                "output": "'msykqq'"
            },
            {
                "input": "remove_vowels(\"TaXZTHehL\")",
                "output": "'TXZTHhL'"
            },
            {
                "input": "remove_vowels(\"Ujttg\")",
                "output": "'jttg'"
            },
            {
                "input": "remove_vowels(\"fshdmulqnytjokyosn\")",
                "output": "'fshdmlqnytjkysn'"
            },
            {
                "input": "remove_vowels(\"gmhwwwtgrozmhgdl\")",
                "output": "'gmhwwwtgrzmhgdl'"
            },
            {
                "input": "remove_vowels(\"fmdf\")",
                "output": "'fmdf'"
            },
            {
                "input": "remove_vowels(\"vxr\")",
                "output": "'vxr'"
            },
            {
                "input": "remove_vowels(\"tplzjz\")",
                "output": "'tplzjz'"
            },
            {
                "input": "remove_vowels(\"sebzrlkjqv\")",
                "output": "'sbzrlkjqv'"
            },
            {
                "input": "remove_vowels(\"KYTpFEg\")",
                "output": "'KYTpFg'"
            },
            {
                "input": "remove_vowels(\"prwzqwrux\")",
                "output": "'prwzqwrx'"
            },
            {
                "input": "remove_vowels(\"w\")",
                "output": "'w'"
            },
            {
                "input": "remove_vowels(\"EMI\")",
                "output": "'M'"
            },
            {
                "input": "remove_vowels(\"cg\")",
                "output": "'cg'"
            },
            {
                "input": "remove_vowels(\"ezHfoXGJ\")",
                "output": "'zHfXGJ'"
            },
            {
                "input": "remove_vowels(\"lz\")",
                "output": "'lz'"
            },
            {
                "input": "remove_vowels(\"ktmsFf\")",
                "output": "'ktmsFf'"
            },
            {
                "input": "remove_vowels(\"dEI\")",
                "output": "'d'"
            },
            {
                "input": "remove_vowels(\"wugjkvbmg\")",
                "output": "'wgjkvbmg'"
            },
            {
                "input": "remove_vowels(\"zlwflag\")",
                "output": "'zlwflg'"
            },
            {
                "input": "remove_vowels('ybcd')",
                "output": "'ybcd'"
            },
            {
                "input": "remove_vowels(\"uslgojzvdg\")",
                "output": "'slgjzvdg'"
            },
            {
                "input": "remove_vowels('acBAA')",
                "output": "'cB'"
            },
            {
                "input": "remove_vowels(\"ewci\")",
                "output": "'wc'"
            },
            {
                "input": "remove_vowels(\"vntgnznokuiysrb\")",
                "output": "'vntgnznkysrb'"
            },
            {
                "input": "remove_vowels(\"arnhwhzbhkqu\")",
                "output": "'rnhwhzbhkq'"
            },
            {
                "input": "remove_vowels(\"nhxkmmvs\")",
                "output": "'nhxkmmvs'"
            },
            {
                "input": "remove_vowels(\"lg\")",
                "output": "'lg'"
            },
            {
                "input": "remove_vowels(\"ywbdg\")",
                "output": "'ywbdg'"
            },
            {
                "input": "remove_vowels(\"vlymdry\")",
                "output": "'vlymdry'"
            },
            {
                "input": "remove_vowels(\"Frhrepr\")",
                "output": "'Frhrpr'"
            },
            {
                "input": "remove_vowels(\"uoapunbirpsl\")",
                "output": "'pnbrpsl'"
            },
            {
                "input": "remove_vowels(\"XEkdmDJSS\")",
                "output": "'XkdmDJSS'"
            },
            {
                "input": "remove_vowels(\"mufpjfkgadzyb\")",
                "output": "'mfpjfkgdzyb'"
            },
            {
                "input": "remove_vowels(\"lgowxjffr\")",
                "output": "'lgwxjffr'"
            },
            {
                "input": "remove_vowels(\"qdaloer\")",
                "output": "'qdlr'"
            },
            {
                "input": "remove_vowels(\"xTziZy\")",
                "output": "'xTzZy'"
            },
            {
                "input": "remove_vowels(\"obrhtxhtuo\")",
                "output": "'brhtxht'"
            },
            {
                "input": "remove_vowels(\"watQnnp\")",
                "output": "'wtQnnp'"
            },
            {
                "input": "remove_vowels(\"acaqnyjoz\")",
                "output": "'cqnyjz'"
            },
            {
                "input": "remove_vowels(\"pYlsLbTc\")",
                "output": "'pYlsLbTc'"
            },
            {
                "input": "remove_vowels(\"sadxzpakrln\")",
                "output": "'sdxzpkrln'"
            },
            {
                "input": "remove_vowels(\"arhlhqhb\")",
                "output": "'rhlhqhb'"
            },
            {
                "input": "remove_vowels(\"oHlrLv\")",
                "output": "'HlrLv'"
            },
            {
                "input": "remove_vowels(\"vloipqtgtveawjtn\")",
                "output": "'vlpqtgtvwjtn'"
            },
            {
                "input": "remove_vowels(\"WxqQBVxrN\")",
                "output": "'WxqQBVxrN'"
            },
            {
                "input": "remove_vowels(\"qzzqkb\")",
                "output": "'qzzqkb'"
            },
            {
                "input": "remove_vowels(\"TOheHtN\")",
                "output": "'ThHtN'"
            },
            {
                "input": "remove_vowels(\"eJO\")",
                "output": "'J'"
            },
            {
                "input": "remove_vowels(\"zsgnhflpl\")",
                "output": "'zsgnhflpl'"
            },
            {
                "input": "remove_vowels(\"k\")",
                "output": "'k'"
            },
            {
                "input": "remove_vowels(\"iknfvadtb\")",
                "output": "'knfvdtb'"
            },
            {
                "input": "remove_vowels(\"jffdqepm\")",
                "output": "'jffdqpm'"
            },
            {
                "input": "remove_vowels(\"gbuxhmi\")",
                "output": "'gbxhm'"
            },
            {
                "input": "remove_vowels('')",
                "output": "''"
            },
            {
                "input": "remove_vowels(\"fjv\")",
                "output": "'fjv'"
            },
            {
                "input": "remove_vowels(\"ftwmovee\")",
                "output": "'ftwmv'"
            },
            {
                "input": "remove_vowels(\"g\")",
                "output": "'g'"
            },
            {
                "input": "remove_vowels(\"Xxi\")",
                "output": "'Xx'"
            },
            {
                "input": "remove_vowels(\"oe\")",
                "output": "''"
            },
            {
                "input": "remove_vowels(\"siz\")",
                "output": "'sz'"
            },
            {
                "input": "remove_vowels(\"abcdef\\nghijklm\")",
                "output": "'bcdf\\nghjklm'"
            },
            {
                "input": "remove_vowels(\"omdwqqfx\")",
                "output": "'mdwqqfx'"
            },
            {
                "input": "remove_vowels(\"Yvyqaz\")",
                "output": "'Yvyqz'"
            },
            {
                "input": "remove_vowels(\"ofskfbosycskpze\")",
                "output": "'fskfbsycskpz'"
            },
            {
                "input": "remove_vowels(\"OVY\")",
                "output": "'VY'"
            },
            {
                "input": "remove_vowels(\"hmz\")",
                "output": "'hmz'"
            },
            {
                "input": "remove_vowels(\"fc\")",
                "output": "'fc'"
            },
            {
                "input": "remove_vowels(\"Edk\")",
                "output": "'dk'"
            },
            {
                "input": "remove_vowels(\"aic\")",
                "output": "'c'"
            },
            {
                "input": "remove_vowels(\"uyktjllxr\")",
                "output": "'yktjllxr'"
            },
            {
                "input": "remove_vowels(\"isw\")",
                "output": "'sw'"
            },
            {
                "input": "remove_vowels(\"juqegxhhusfivzjr\")",
                "output": "'jqgxhhsfvzjr'"
            },
            {
                "input": "remove_vowels(\"ktewddk\")",
                "output": "'ktwddk'"
            },
            {
                "input": "remove_vowels(\"rbFdSSwun\")",
                "output": "'rbFdSSwn'"
            },
            {
                "input": "remove_vowels(\"YfkwJX\")",
                "output": "'YfkwJX'"
            },
            {
                "input": "remove_vowels('EcBOO')",
                "output": "'cB'"
            },
            {
                "input": "remove_vowels(\"zxog\")",
                "output": "'zxg'"
            },
            {
                "input": "remove_vowels(\"quzstvdfqg\")",
                "output": "'qzstvdfqg'"
            },
            {
                "input": "remove_vowels(\"xx\")",
                "output": "'xx'"
            },
            {
                "input": "remove_vowels(\"bdmye\")",
                "output": "'bdmy'"
            },
            {
                "input": "remove_vowels(\"lwxqqrcfxs\")",
                "output": "'lwxqqrcfxs'"
            },
            {
                "input": "remove_vowels(\"evovy\")",
                "output": "'vvy'"
            },
            {
                "input": "remove_vowels(\"siryb\")",
                "output": "'sryb'"
            },
            {
                "input": "remove_vowels(\"gxgtdglcoq\")",
                "output": "'gxgtdglcq'"
            },
            {
                "input": "remove_vowels(\"adeqwnjqvrkws\")",
                "output": "'dqwnjqvrkws'"
            },
            {
                "input": "remove_vowels(\"baWXDZniw\")",
                "output": "'bWXDZnw'"
            },
            {
                "input": "remove_vowels(\"ebsrnvw\")",
                "output": "'bsrnvw'"
            },
            {
                "input": "remove_vowels(\"ew\")",
                "output": "'w'"
            },
            {
                "input": "remove_vowels(\"cvs\")",
                "output": "'cvs'"
            },
            {
                "input": "remove_vowels(\"LHVZaDp\")",
                "output": "'LHVZDp'"
            },
            {
                "input": "remove_vowels(\"duprwgecbaziaj\")",
                "output": "'dprwgcbzj'"
            },
            {
                "input": "remove_vowels(\"azqNA\")",
                "output": "'zqN'"
            },
            {
                "input": "remove_vowels(\"bsb\")",
                "output": "'bsb'"
            },
            {
                "input": "remove_vowels(\"WkCb\")",
                "output": "'WkCb'"
            },
            {
                "input": "remove_vowels(\"rAvZcBVYv\")",
                "output": "'rvZcBVYv'"
            },
            {
                "input": "remove_vowels(\"fnhkm\")",
                "output": "'fnhkm'"
            },
            {
                "input": "remove_vowels(\"azcgydxylp\")",
                "output": "'zcgydxylp'"
            },
            {
                "input": "remove_vowels(\"zzxuoc\")",
                "output": "'zzxc'"
            },
            {
                "input": "remove_vowels(\"sywqxabq\")",
                "output": "'sywqxbq'"
            },
            {
                "input": "remove_vowels(\"eeeuvn\")",
                "output": "'vn'"
            },
            {
                "input": "remove_vowels(\"lnurjnjxpk\")",
                "output": "'lnrjnjxpk'"
            },
            {
                "input": "remove_vowels(\"wtvG\")",
                "output": "'wtvG'"
            },
            {
                "input": "remove_vowels(\"yrk\")",
                "output": "'yrk'"
            },
            {
                "input": "remove_vowels(\"zgpdfazw\")",
                "output": "'zgpdfzw'"
            },
            {
                "input": "remove_vowels(\"bewqm\")",
                "output": "'bwqm'"
            },
            {
                "input": "remove_vowels(\"shkzkuzxkngkecko\")",
                "output": "'shkzkzxkngkck'"
            },
            {
                "input": "remove_vowels(\"qeuwbkovm\")",
                "output": "'qwbkvm'"
            },
            {
                "input": "remove_vowels(\"jnveoi\")",
                "output": "'jnv'"
            },
            {
                "input": "remove_vowels(\"KGQT\")",
                "output": "'KGQT'"
            },
            {
                "input": "remove_vowels(\"pwjqwt\")",
                "output": "'pwjqwt'"
            },
            {
                "input": "remove_vowels(\"jt\")",
                "output": "'jt'"
            },
            {
                "input": "remove_vowels(\"urCjrM\")",
                "output": "'rCjrM'"
            },
            {
                "input": "remove_vowels(\"BgbpQbQaw\")",
                "output": "'BgbpQbQw'"
            },
            {
                "input": "remove_vowels(\"uhp\")",
                "output": "'hp'"
            }
        ]
    },
    {
        "problem_description": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "ground truth": "def below_threshold(l: list, t: int):\n    for e in l:\n        if e >= t:\n            return False\n    return True\n",
        "instances": [
            {
                "input": "below_threshold([2, 24, 8, 14], 20)",
                "output": "False"
            },
            {
                "input": "below_threshold([5, 16, 3, 13], 24)",
                "output": "True"
            },
            {
                "input": "below_threshold([4, 21, 5, 7], 6)",
                "output": "False"
            },
            {
                "input": "below_threshold([4, 9, 3, 9], 8)",
                "output": "False"
            },
            {
                "input": "below_threshold([1, 18, 9, 14], 8)",
                "output": "False"
            },
            {
                "input": "below_threshold([3, 24, 8, 8], 2)",
                "output": "False"
            },
            {
                "input": "below_threshold([4, 7, 5, 9], 97)",
                "output": "True"
            },
            {
                "input": "below_threshold([3, 4, 2, 13], 12)",
                "output": "False"
            },
            {
                "input": "below_threshold([1, 20, 4, 10], 21)",
                "output": "True"
            },
            {
                "input": "below_threshold([3, 20, 1, 6], 19)",
                "output": "False"
            },
            {
                "input": "below_threshold([2, 23, 2, 5], 3)",
                "output": "False"
            },
            {
                "input": "below_threshold([2, 11, 4, 8], 11)",
                "output": "False"
            },
            {
                "input": "below_threshold([6, 20, 8, 9], 4)",
                "output": "False"
            },
            {
                "input": "below_threshold([4, 2, 8, 10], 104)",
                "output": "True"
            },
            {
                "input": "below_threshold([6, 3, 8, 13], 12)",
                "output": "False"
            },
            {
                "input": "below_threshold([1, 20, 5, 15], 4)",
                "output": "False"
            },
            {
                "input": "below_threshold([2, 25, 4, 12], 16)",
                "output": "False"
            },
            {
                "input": "below_threshold([1, 3, 8, 5], 11)",
                "output": "True"
            },
            {
                "input": "below_threshold([4, 24, 9, 11], 2)",
                "output": "False"
            },
            {
                "input": "below_threshold([6, 8, 5, 6], 9)",
                "output": "True"
            },
            {
                "input": "below_threshold([2, 6, 4, 10], 12)",
                "output": "True"
            },
            {
                "input": "below_threshold([4, 23, 8, 12], 6)",
                "output": "False"
            },
            {
                "input": "below_threshold([5, 23, 9, 15], 25)",
                "output": "True"
            },
            {
                "input": "below_threshold([1, 5, 8, 12], 12)",
                "output": "False"
            },
            {
                "input": "below_threshold([1, 6, 4, 14], 10)",
                "output": "False"
            },
            {
                "input": "below_threshold([6, 15, 5, 12], 23)",
                "output": "True"
            },
            {
                "input": "below_threshold([2, 4, 3, 15], 105)",
                "output": "True"
            },
            {
                "input": "below_threshold([6, 7, 7, 5], 103)",
                "output": "True"
            },
            {
                "input": "below_threshold([1, 9, 8, 6], 14)",
                "output": "True"
            },
            {
                "input": "below_threshold([3, 15, 5, 7], 20)",
                "output": "True"
            },
            {
                "input": "below_threshold([6, 21, 9, 10], 8)",
                "output": "False"
            },
            {
                "input": "below_threshold([5, 11, 8, 12], 8)",
                "output": "False"
            },
            {
                "input": "below_threshold([5, 23, 5, 15], 7)",
                "output": "False"
            },
            {
                "input": "below_threshold([5, 6, 7, 15], 13)",
                "output": "False"
            },
            {
                "input": "below_threshold([4, 24, 9, 10], 6)",
                "output": "False"
            },
            {
                "input": "below_threshold([1, 22, 2, 14], 23)",
                "output": "True"
            },
            {
                "input": "below_threshold([6, 17, 1, 9], 19)",
                "output": "True"
            },
            {
                "input": "below_threshold([3, 16, 1, 11], 6)",
                "output": "False"
            },
            {
                "input": "below_threshold([3, 24, 4, 14], 20)",
                "output": "False"
            },
            {
                "input": "below_threshold([3, 5, 4, 7], 14)",
                "output": "True"
            },
            {
                "input": "below_threshold([1, 24, 5, 6], 19)",
                "output": "False"
            },
            {
                "input": "below_threshold([5, 9, 5, 13], 12)",
                "output": "False"
            },
            {
                "input": "below_threshold([1, 16, 3, 11], 19)",
                "output": "True"
            },
            {
                "input": "below_threshold([2, 13, 8, 13], 5)",
                "output": "False"
            },
            {
                "input": "below_threshold([5, 11, 6, 14], 15)",
                "output": "True"
            },
            {
                "input": "below_threshold([2, 19, 9, 5], 17)",
                "output": "False"
            },
            {
                "input": "below_threshold([2, 4, 7, 9], 105)",
                "output": "True"
            },
            {
                "input": "below_threshold([3, 7, 2, 11], 7)",
                "output": "False"
            },
            {
                "input": "below_threshold([4, 3, 9, 15], 97)",
                "output": "True"
            },
            {
                "input": "below_threshold([1, 10, 5, 8], 13)",
                "output": "True"
            },
            {
                "input": "below_threshold([6, 17, 8, 9], 7)",
                "output": "False"
            },
            {
                "input": "below_threshold([4, 15, 6, 7], 19)",
                "output": "True"
            },
            {
                "input": "below_threshold([2, 3, 3, 5], 105)",
                "output": "True"
            },
            {
                "input": "below_threshold([5, 7, 4, 12], 6)",
                "output": "False"
            },
            {
                "input": "below_threshold([1, 8, 4, 10], 11)",
                "output": "True"
            },
            {
                "input": "below_threshold([1, 20, 4, 10], 5)",
                "output": "False"
            },
            {
                "input": "below_threshold([6, 17, 5, 5], 22)",
                "output": "True"
            },
            {
                "input": "below_threshold([6, 25, 8, 13], 7)",
                "output": "False"
            },
            {
                "input": "below_threshold([1, 6, 8, 11], 11)",
                "output": "False"
            },
            {
                "input": "below_threshold([5, 21, 5, 12], 7)",
                "output": "False"
            },
            {
                "input": "below_threshold([5, 25, 3, 8], 20)",
                "output": "False"
            },
            {
                "input": "below_threshold([6, 3, 4, 12], 101)",
                "output": "True"
            },
            {
                "input": "below_threshold([6, 13, 8, 15], 9)",
                "output": "False"
            },
            {
                "input": "below_threshold([6, 10, 9, 12], 11)",
                "output": "False"
            },
            {
                "input": "below_threshold([5, 23, 9, 14], 7)",
                "output": "False"
            },
            {
                "input": "below_threshold([1, 6, 6, 15], 11)",
                "output": "False"
            },
            {
                "input": "below_threshold([1, 8, 4, 10], 10)",
                "output": "False"
            },
            {
                "input": "below_threshold([2, 16, 2, 10], 23)",
                "output": "True"
            },
            {
                "input": "below_threshold([4, 4, 5, 5], 95)",
                "output": "True"
            },
            {
                "input": "below_threshold([4, 19, 6, 12], 26)",
                "output": "True"
            },
            {
                "input": "below_threshold([1, 5, 5, 8], 97)",
                "output": "True"
            },
            {
                "input": "below_threshold([6, 16, 4, 13], 25)",
                "output": "True"
            },
            {
                "input": "below_threshold([2, 3, 5, 5], 6)",
                "output": "True"
            },
            {
                "input": "below_threshold([1, 2, 4, 10], 100)",
                "output": "True"
            },
            {
                "input": "below_threshold([6, 24, 9, 11], 24)",
                "output": "False"
            },
            {
                "input": "below_threshold([3, 7, 7, 6], 104)",
                "output": "True"
            },
            {
                "input": "below_threshold([2, 24, 7, 11], 23)",
                "output": "False"
            },
            {
                "input": "below_threshold([4, 16, 1, 5], 24)",
                "output": "True"
            },
            {
                "input": "below_threshold([3, 5, 1, 12], 9)",
                "output": "False"
            },
            {
                "input": "below_threshold([4, 17, 9, 5], 20)",
                "output": "True"
            },
            {
                "input": "below_threshold([6, 3, 5, 11], 15)",
                "output": "True"
            },
            {
                "input": "below_threshold([2, 21, 6, 13], 20)",
                "output": "False"
            },
            {
                "input": "below_threshold([4, 7, 5, 5], 15)",
                "output": "True"
            },
            {
                "input": "below_threshold([2, 25, 2, 12], 4)",
                "output": "False"
            },
            {
                "input": "below_threshold([6, 3, 8, 8], 11)",
                "output": "True"
            },
            {
                "input": "below_threshold([6, 18, 3, 6], 18)",
                "output": "False"
            },
            {
                "input": "below_threshold([5, 4, 6, 10], 16)",
                "output": "True"
            },
            {
                "input": "below_threshold([4, 15, 5, 7], 8)",
                "output": "False"
            },
            {
                "input": "below_threshold([6, 20, 1, 13], 2)",
                "output": "False"
            },
            {
                "input": "below_threshold([2, 7, 5, 13], 100)",
                "output": "True"
            },
            {
                "input": "below_threshold([2, 24, 5, 9], 5)",
                "output": "False"
            },
            {
                "input": "below_threshold([5, 7, 7, 7], 12)",
                "output": "True"
            },
            {
                "input": "below_threshold([3, 11, 4, 6], 8)",
                "output": "False"
            },
            {
                "input": "below_threshold([1, 20, 4, 10], 22)",
                "output": "True"
            },
            {
                "input": "below_threshold([4, 22, 6, 12], 21)",
                "output": "False"
            },
            {
                "input": "below_threshold([1, 18, 2, 9], 20)",
                "output": "True"
            },
            {
                "input": "below_threshold([5, 9, 4, 12], 10)",
                "output": "False"
            },
            {
                "input": "below_threshold([5, 4, 8, 7], 100)",
                "output": "True"
            },
            {
                "input": "below_threshold([5, 21, 1, 8], 18)",
                "output": "False"
            },
            {
                "input": "below_threshold([6, 21, 7, 8], 19)",
                "output": "False"
            },
            {
                "input": "below_threshold([1, 11, 7, 6], 14)",
                "output": "True"
            },
            {
                "input": "below_threshold([3, 16, 6, 14], 18)",
                "output": "True"
            },
            {
                "input": "below_threshold([5, 7, 2, 8], 98)",
                "output": "True"
            },
            {
                "input": "below_threshold([3, 18, 3, 11], 21)",
                "output": "True"
            },
            {
                "input": "below_threshold([2, 7, 4, 8], 96)",
                "output": "True"
            },
            {
                "input": "below_threshold([5, 20, 7, 8], 17)",
                "output": "False"
            },
            {
                "input": "below_threshold([2, 21, 6, 10], 18)",
                "output": "False"
            },
            {
                "input": "below_threshold([3, 4, 8, 9], 95)",
                "output": "True"
            },
            {
                "input": "below_threshold([2, 9, 6, 6], 10)",
                "output": "True"
            },
            {
                "input": "below_threshold([6, 15, 6, 7], 26)",
                "output": "True"
            },
            {
                "input": "below_threshold([3, 3, 6, 12], 10)",
                "output": "False"
            },
            {
                "input": "below_threshold([4, 6, 3, 5], 12)",
                "output": "True"
            },
            {
                "input": "below_threshold([2, 7, 4, 8], 104)",
                "output": "True"
            },
            {
                "input": "below_threshold([3, 19, 4, 12], 22)",
                "output": "True"
            },
            {
                "input": "below_threshold([4, 12, 7, 13], 11)",
                "output": "False"
            },
            {
                "input": "below_threshold([2, 1, 1, 11], 99)",
                "output": "True"
            },
            {
                "input": "below_threshold([6, 3, 2, 13], 105)",
                "output": "True"
            },
            {
                "input": "below_threshold([6, 10, 6, 15], 16)",
                "output": "True"
            },
            {
                "input": "below_threshold([4, 25, 4, 9], 26)",
                "output": "True"
            },
            {
                "input": "below_threshold([1, 12, 7, 13], 9)",
                "output": "False"
            },
            {
                "input": "below_threshold([3, 1, 5, 14], 97)",
                "output": "True"
            },
            {
                "input": "below_threshold([3, 18, 5, 15], 25)",
                "output": "True"
            },
            {
                "input": "below_threshold([5, 22, 8, 13], 20)",
                "output": "False"
            },
            {
                "input": "below_threshold([6, 21, 9, 5], 17)",
                "output": "False"
            },
            {
                "input": "below_threshold([2, 3, 2, 10], 11)",
                "output": "True"
            },
            {
                "input": "below_threshold([6, 19, 1, 14], 21)",
                "output": "True"
            }
        ]
    },
    {
        "problem_description": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
        "ground truth": "def add(x: int, y: int):\n    return x + y\n",
        "instances": [
            {
                "input": "add(8333, 509)",
                "output": "8842"
            },
            {
                "input": "add(248, 7823)",
                "output": "8071"
            },
            {
                "input": "add(8849, 8347)",
                "output": "17196"
            },
            {
                "input": "add(9796, 1174)",
                "output": "10970"
            },
            {
                "input": "add(5692, 7583)",
                "output": "13275"
            },
            {
                "input": "add(1, 0)",
                "output": "1"
            },
            {
                "input": "add(4146, 2825)",
                "output": "6971"
            },
            {
                "input": "add(2, 3)",
                "output": "5"
            },
            {
                "input": "add(162, 2906)",
                "output": "3068"
            },
            {
                "input": "add(3227, 9778)",
                "output": "13005"
            },
            {
                "input": "add(5741, 9160)",
                "output": "14901"
            },
            {
                "input": "add(6199, 4771)",
                "output": "10970"
            },
            {
                "input": "add(7870, 7360)",
                "output": "15230"
            },
            {
                "input": "add(6945, 904)",
                "output": "7849"
            },
            {
                "input": "add(2008, 5033)",
                "output": "7041"
            },
            {
                "input": "add(7, 5)",
                "output": "12"
            },
            {
                "input": "add(4458, 1677)",
                "output": "6135"
            },
            {
                "input": "add(3006, 5)",
                "output": "3011"
            },
            {
                "input": "add(9165, 5702)",
                "output": "14867"
            },
            {
                "input": "add(4327, 7636)",
                "output": "11963"
            },
            {
                "input": "add(514, 5170)",
                "output": "5684"
            },
            {
                "input": "add(3518, 6494)",
                "output": "10012"
            },
            {
                "input": "add(9566, 6478)",
                "output": "16044"
            },
            {
                "input": "add(3677, 7658)",
                "output": "11335"
            },
            {
                "input": "add(9383, 8066)",
                "output": "17449"
            },
            {
                "input": "add(8006, 8709)",
                "output": "16715"
            },
            {
                "input": "add(3740, 5624)",
                "output": "9364"
            },
            {
                "input": "add(3555, 1782)",
                "output": "5337"
            },
            {
                "input": "add(5121, 8664)",
                "output": "13785"
            },
            {
                "input": "add(5, 7)",
                "output": "12"
            },
            {
                "input": "add(1225, 9125)",
                "output": "10350"
            },
            {
                "input": "add(2263, 9847)",
                "output": "12110"
            },
            {
                "input": "add(5388, 9547)",
                "output": "14935"
            },
            {
                "input": "add(7522, 8477)",
                "output": "15999"
            },
            {
                "input": "add(8345, 5607)",
                "output": "13952"
            },
            {
                "input": "add(2675, 9912)",
                "output": "12587"
            },
            {
                "input": "add(368, 2797)",
                "output": "3165"
            },
            {
                "input": "add(5680, 7464)",
                "output": "13144"
            },
            {
                "input": "add(8296, 1811)",
                "output": "10107"
            },
            {
                "input": "add(5002, 5678)",
                "output": "10680"
            },
            {
                "input": "add(5278, 2081)",
                "output": "7359"
            },
            {
                "input": "add(3745, 1622)",
                "output": "5367"
            },
            {
                "input": "add(7935, 5949)",
                "output": "13884"
            },
            {
                "input": "add(5310, 1992)",
                "output": "7302"
            },
            {
                "input": "add(746, 8724)",
                "output": "9470"
            },
            {
                "input": "add(7037, 324)",
                "output": "7361"
            },
            {
                "input": "add(4788, 386)",
                "output": "5174"
            },
            {
                "input": "add(2059, 4780)",
                "output": "6839"
            },
            {
                "input": "add(9129, 5617)",
                "output": "14746"
            },
            {
                "input": "add(6117, 272)",
                "output": "6389"
            },
            {
                "input": "add(3136, 4547)",
                "output": "7683"
            },
            {
                "input": "add(7008, 2731)",
                "output": "9739"
            },
            {
                "input": "add(4900, 8980)",
                "output": "13880"
            },
            {
                "input": "add(4107, 5540)",
                "output": "9647"
            },
            {
                "input": "add(791, 5387)",
                "output": "6178"
            },
            {
                "input": "add(1901, 127)",
                "output": "2028"
            },
            {
                "input": "add(9515, 166)",
                "output": "9681"
            },
            {
                "input": "add(5941, 2669)",
                "output": "8610"
            },
            {
                "input": "add(0, 1)",
                "output": "1"
            },
            {
                "input": "add(4986, 3544)",
                "output": "8530"
            },
            {
                "input": "add(8914, 1540)",
                "output": "10454"
            },
            {
                "input": "add(1357, 2487)",
                "output": "3844"
            },
            {
                "input": "add(5276, 8660)",
                "output": "13936"
            },
            {
                "input": "add(3067, 3000)",
                "output": "6067"
            },
            {
                "input": "add(8547, 6845)",
                "output": "15392"
            },
            {
                "input": "add(690, 1142)",
                "output": "1832"
            },
            {
                "input": "add(1589, 6268)",
                "output": "7857"
            },
            {
                "input": "add(7879, 324)",
                "output": "8203"
            },
            {
                "input": "add(3204, 9768)",
                "output": "12972"
            },
            {
                "input": "add(3060, 5657)",
                "output": "8717"
            },
            {
                "input": "add(9412, 4209)",
                "output": "13621"
            },
            {
                "input": "add(9811, 8213)",
                "output": "18024"
            },
            {
                "input": "add(376, 7043)",
                "output": "7419"
            },
            {
                "input": "add(8263, 466)",
                "output": "8729"
            },
            {
                "input": "add(9816, 4210)",
                "output": "14026"
            },
            {
                "input": "add(5635, 8779)",
                "output": "14414"
            },
            {
                "input": "add(1528, 6738)",
                "output": "8266"
            },
            {
                "input": "add(2222, 8205)",
                "output": "10427"
            },
            {
                "input": "add(7655, 1186)",
                "output": "8841"
            },
            {
                "input": "add(7961, 3114)",
                "output": "11075"
            },
            {
                "input": "add(3359, 9746)",
                "output": "13105"
            },
            {
                "input": "add(7773, 1016)",
                "output": "8789"
            },
            {
                "input": "add(6205, 6624)",
                "output": "12829"
            },
            {
                "input": "add(3683, 7981)",
                "output": "11664"
            },
            {
                "input": "add(1302, 452)",
                "output": "1754"
            },
            {
                "input": "add(1790, 1852)",
                "output": "3642"
            },
            {
                "input": "add(2141, 379)",
                "output": "2520"
            },
            {
                "input": "add(804, 2620)",
                "output": "3424"
            },
            {
                "input": "add(5018, 466)",
                "output": "5484"
            },
            {
                "input": "add(1584, 818)",
                "output": "2402"
            },
            {
                "input": "add(712, 4175)",
                "output": "4887"
            },
            {
                "input": "add(732, 3143)",
                "output": "3875"
            },
            {
                "input": "add(2759, 668)",
                "output": "3427"
            },
            {
                "input": "add(7631, 5609)",
                "output": "13240"
            },
            {
                "input": "add(7789, 2308)",
                "output": "10097"
            },
            {
                "input": "add(5454, 7869)",
                "output": "13323"
            },
            {
                "input": "add(5559, 1830)",
                "output": "7389"
            },
            {
                "input": "add(4503, 9969)",
                "output": "14472"
            },
            {
                "input": "add(9282, 7108)",
                "output": "16390"
            },
            {
                "input": "add(364, 3749)",
                "output": "4113"
            },
            {
                "input": "add(6585, 9545)",
                "output": "16130"
            },
            {
                "input": "add(8167, 3551)",
                "output": "11718"
            },
            {
                "input": "add(4649, 1608)",
                "output": "6257"
            },
            {
                "input": "add(1126, 6742)",
                "output": "7868"
            },
            {
                "input": "add(1791, 3916)",
                "output": "5707"
            }
        ]
    },
    {
        "problem_description": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
        "ground truth": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n",
        "instances": [
            {
                "input": "same_chars('hlhxby', 'yyhlhxb')",
                "output": "True"
            },
            {
                "input": "same_chars('abcd', 'dddddddabc')",
                "output": "True"
            },
            {
                "input": "same_chars('hvrwgpvcnj', 'wnnrhvgpvcj')",
                "output": "True"
            },
            {
                "input": "same_chars('npp', 'cgtmavc')",
                "output": "False"
            },
            {
                "input": "same_chars('iighzaehkhgcjex', 'kaohxylcpsoxxyrgqk')",
                "output": "False"
            },
            {
                "input": "same_chars('sucbrppr', 'uggaytm')",
                "output": "False"
            },
            {
                "input": "same_chars('fggnnke', 'lhzpjthuecrwqj')",
                "output": "False"
            },
            {
                "input": "same_chars('imshdpt', 'imshdpt')",
                "output": "True"
            },
            {
                "input": "same_chars('cmnwjzbf', 'njmcwzbf')",
                "output": "True"
            },
            {
                "input": "same_chars('aabb', 'aaccc')",
                "output": "False"
            },
            {
                "input": "same_chars('lsapqihofckb', 'fizrmzvjawlrumutonko')",
                "output": "False"
            },
            {
                "input": "same_chars('orookv', 'hhaksalivzdzqfv')",
                "output": "False"
            },
            {
                "input": "same_chars('wvijnfvsq', 'inqvwjfs')",
                "output": "True"
            },
            {
                "input": "same_chars('jvibe', 'xkjjfl')",
                "output": "False"
            },
            {
                "input": "same_chars('vyryrgltlsnfog', 'knphpotnilhbmhos')",
                "output": "False"
            },
            {
                "input": "same_chars('ylszs', 'lsyzys')",
                "output": "True"
            },
            {
                "input": "same_chars('uuqewquic', 'qnzobuucujmobey')",
                "output": "False"
            },
            {
                "input": "same_chars('ccuevv', 'ccuevv')",
                "output": "True"
            },
            {
                "input": "same_chars('nwmkkmpwjffude', 'nrnlispwgrwdos')",
                "output": "False"
            },
            {
                "input": "same_chars('yfbqkhoz', 'qbqhkkyfoz')",
                "output": "True"
            },
            {
                "input": "same_chars('ubmrmlku', 'qisfiyequyz')",
                "output": "False"
            },
            {
                "input": "same_chars('zcdi', 'cddzi')",
                "output": "True"
            },
            {
                "input": "same_chars('dxtashvfjcxb', 'otazlddlhvewgc')",
                "output": "False"
            },
            {
                "input": "same_chars('jput', 'mgvpck')",
                "output": "False"
            },
            {
                "input": "same_chars('ujje', 'tzdfdqu')",
                "output": "False"
            },
            {
                "input": "same_chars('ntats', 'iamlgysuaabd')",
                "output": "False"
            },
            {
                "input": "same_chars('uvpu', 'uvpu')",
                "output": "True"
            },
            {
                "input": "same_chars('oiqwnpdn', 'nsfujbetfyqubb')",
                "output": "False"
            },
            {
                "input": "same_chars('illiunrngq', 'iunrnglq')",
                "output": "True"
            },
            {
                "input": "same_chars('kzbcxkca', 'zbxkckca')",
                "output": "True"
            },
            {
                "input": "same_chars('clvgq', 'lcvgq')",
                "output": "True"
            },
            {
                "input": "same_chars('ptpbpncav', 'pncatvb')",
                "output": "True"
            },
            {
                "input": "same_chars('hrrkrko', 'aukesht')",
                "output": "False"
            },
            {
                "input": "same_chars('gljb', 'hqxweu')",
                "output": "False"
            },
            {
                "input": "same_chars('xbxz', 'bxz')",
                "output": "True"
            },
            {
                "input": "same_chars('mleynuyyzswdzuv', 'vsdpbrorcqhcxghx')",
                "output": "False"
            },
            {
                "input": "same_chars('eabcd', 'dddddddabc')",
                "output": "False"
            },
            {
                "input": "same_chars('dbgolwoy', 'afxzfgevecwdq')",
                "output": "False"
            },
            {
                "input": "same_chars('dzjidxnvqgprdas', 'nqpprszvrzdjidxgda')",
                "output": "True"
            },
            {
                "input": "same_chars('yamsl', 'lmmyas')",
                "output": "True"
            },
            {
                "input": "same_chars('abazidbs', 'idsdabazb')",
                "output": "True"
            },
            {
                "input": "same_chars('zyouqspqruthlr', 'qurqzruoyspthl')",
                "output": "True"
            },
            {
                "input": "same_chars('nsaqoelkjjkft', 'hmssntqlnezswkwpqiea')",
                "output": "False"
            },
            {
                "input": "same_chars('xmu', 'lvaqgoq')",
                "output": "False"
            },
            {
                "input": "same_chars('uti', 'uti')",
                "output": "True"
            },
            {
                "input": "same_chars('kqy', 'qqky')",
                "output": "True"
            },
            {
                "input": "same_chars('dddddddabc', 'abcd')",
                "output": "True"
            },
            {
                "input": "same_chars('mlgtx', 'fijypmzey')",
                "output": "False"
            },
            {
                "input": "same_chars('jjjsnsz', 'snszj')",
                "output": "True"
            },
            {
                "input": "same_chars('ezudntyre', 'tvekvih')",
                "output": "False"
            },
            {
                "input": "same_chars('tichmefdn', 'ecjogfwtfzmfnq')",
                "output": "False"
            },
            {
                "input": "same_chars('ixov', 'efpthcoryaoq')",
                "output": "False"
            },
            {
                "input": "same_chars('zkumyf', 'zkumyf')",
                "output": "True"
            },
            {
                "input": "same_chars('lgyakhzvq', 'lvkakgllkgzlyzhq')",
                "output": "True"
            },
            {
                "input": "same_chars('pdickiiulerel', 'lczixuiwviocdignf')",
                "output": "False"
            },
            {
                "input": "same_chars('fid', 'fid')",
                "output": "True"
            },
            {
                "input": "same_chars('gza', 'gza')",
                "output": "True"
            },
            {
                "input": "same_chars('ivoqjjcm', 'dojhevu')",
                "output": "False"
            },
            {
                "input": "same_chars('ktfjsyppbmors', 'jmrbfktsyppos')",
                "output": "True"
            },
            {
                "input": "same_chars('qsvdcvudj', 'kouhdudxblhflg')",
                "output": "False"
            },
            {
                "input": "same_chars('ddc', 'vumzpxsuaq')",
                "output": "False"
            },
            {
                "input": "same_chars('ffz', 'fz')",
                "output": "True"
            },
            {
                "input": "same_chars('ucs', 'wsqgneblssg')",
                "output": "False"
            },
            {
                "input": "same_chars('qdeeaakqxegnj', 'qgdgjqeeaakxen')",
                "output": "True"
            },
            {
                "input": "same_chars('vbsda', 'vabsd')",
                "output": "True"
            },
            {
                "input": "same_chars('yxtbgbkgvh', 'mmimzdektqoqtauqh')",
                "output": "False"
            },
            {
                "input": "same_chars('hbmm', 'hbmm')",
                "output": "True"
            },
            {
                "input": "same_chars('tbaxttbhlbtrwb', 'obcntywrzsmrfxge')",
                "output": "False"
            },
            {
                "input": "same_chars('gdmuhl', 'ghguldm')",
                "output": "True"
            },
            {
                "input": "same_chars('oooohiu', 'hiou')",
                "output": "True"
            },
            {
                "input": "same_chars('uuxmctsf', 'ctumxsf')",
                "output": "True"
            },
            {
                "input": "same_chars('nae', 'willsvpshq')",
                "output": "False"
            },
            {
                "input": "same_chars('drznfnua', 'zrdnfnua')",
                "output": "True"
            },
            {
                "input": "same_chars('wiqkmvl', 'xvoiramplmruwo')",
                "output": "False"
            },
            {
                "input": "same_chars('wjkdijiow', 'wjdgzgw')",
                "output": "False"
            },
            {
                "input": "same_chars('dodzqbqyrpkrus', 'brpskkkkrdodzqqyu')",
                "output": "True"
            },
            {
                "input": "same_chars('fhlmoajh', 'amfmqyxhgqr')",
                "output": "False"
            },
            {
                "input": "same_chars('yth', 'htyy')",
                "output": "True"
            },
            {
                "input": "same_chars('daif', 'dffadi')",
                "output": "True"
            },
            {
                "input": "same_chars('wmoaeu', 'oawmeu')",
                "output": "True"
            },
            {
                "input": "same_chars('put', 'qvciesjqbjxbk')",
                "output": "False"
            },
            {
                "input": "same_chars('objfowzejfy', 'zeyzjobfowf')",
                "output": "True"
            },
            {
                "input": "same_chars('zhsudj', 'usuquf')",
                "output": "False"
            },
            {
                "input": "same_chars('devmt', 'qwiacgkmpuzfyxp')",
                "output": "False"
            },
            {
                "input": "same_chars('lqd', 'qmrsufhqso')",
                "output": "False"
            },
            {
                "input": "same_chars('zfouccu', 'ifcfxz')",
                "output": "False"
            },
            {
                "input": "same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')",
                "output": "True"
            },
            {
                "input": "same_chars('tuzhjcbpm', 'ynhrdqj')",
                "output": "False"
            },
            {
                "input": "same_chars('jlxrnn', 'jxlrnn')",
                "output": "True"
            },
            {
                "input": "same_chars('xndwjc', 'ndwxjc')",
                "output": "True"
            },
            {
                "input": "same_chars('nyipkgvakv', 'vivnypkgak')",
                "output": "True"
            },
            {
                "input": "same_chars('vwsbqhxhwdq', 'hfmzapuebmvvnzvf')",
                "output": "False"
            },
            {
                "input": "same_chars('cwhns', 'wchnsc')",
                "output": "True"
            },
            {
                "input": "same_chars('xenuwtr', 'eqrkulyscs')",
                "output": "False"
            },
            {
                "input": "same_chars('laifarc', 'quecnzwhrey')",
                "output": "False"
            },
            {
                "input": "same_chars('cxzlswtvqg', 'xltwlxczsvqg')",
                "output": "True"
            },
            {
                "input": "same_chars('oabilyaa', 'hhadrtqyjgdezegoqhm')",
                "output": "False"
            },
            {
                "input": "same_chars('pejerlhu', 'npztfomldg')",
                "output": "False"
            },
            {
                "input": "same_chars('xjzpzvu', 'jxzpzvu')",
                "output": "True"
            },
            {
                "input": "same_chars('kcbldngoxuv', 'cxbnnkoldguv')",
                "output": "True"
            },
            {
                "input": "same_chars('fsoasomzjty', 'zqhqdjmdtvunortpstin')",
                "output": "False"
            },
            {
                "input": "same_chars('kgqzyjnppwyzz', 'jpqqwngkzyyzz')",
                "output": "True"
            },
            {
                "input": "same_chars('fpdwncxj', 'nxwnwwfpdcj')",
                "output": "True"
            },
            {
                "input": "same_chars('abcd', 'dddddddabcf')",
                "output": "False"
            },
            {
                "input": "same_chars('srlcva', 'lzmfagkvjnw')",
                "output": "False"
            },
            {
                "input": "same_chars('oky', 'nxwjwdmai')",
                "output": "False"
            },
            {
                "input": "same_chars('vvwfvxwkghkqima', 'hfkxhivagwwqm')",
                "output": "True"
            },
            {
                "input": "same_chars('dbjwutowyvfdzu', 'ufcqvtqabnms')",
                "output": "False"
            },
            {
                "input": "same_chars('jbwdcvpoe', 'yhbgmdndzysquk')",
                "output": "False"
            },
            {
                "input": "same_chars('ylhtkwiy', 'yonkssjirviojkw')",
                "output": "False"
            },
            {
                "input": "same_chars('hkfbz', 'zbfkh')",
                "output": "True"
            },
            {
                "input": "same_chars('iqka', 'iaqk')",
                "output": "True"
            },
            {
                "input": "same_chars('mrwkutmyimvf', 'iyrrmwkutvf')",
                "output": "True"
            },
            {
                "input": "same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')",
                "output": "False"
            },
            {
                "input": "same_chars('gbjzigq', 'qbjgzig')",
                "output": "True"
            }
        ]
    },
    {
        "problem_description": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
        "ground truth": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "instances": [
            {
                "input": "fib(15)",
                "output": "610"
            },
            {
                "input": "fib(27)",
                "output": "196418"
            },
            {
                "input": "fib(31)",
                "output": "1346269"
            },
            {
                "input": "fib(30)",
                "output": "832040"
            },
            {
                "input": "fib(0)",
                "output": "0"
            },
            {
                "input": "fib(6)",
                "output": "8"
            },
            {
                "input": "fib(21)",
                "output": "10946"
            },
            {
                "input": "fib(1)",
                "output": "1"
            },
            {
                "input": "fib(8)",
                "output": "21"
            },
            {
                "input": "fib(2)",
                "output": "1"
            },
            {
                "input": "fib(19)",
                "output": "4181"
            },
            {
                "input": "fib(10)",
                "output": "55"
            },
            {
                "input": "fib(20)",
                "output": "6765"
            },
            {
                "input": "fib(24)",
                "output": "46368"
            },
            {
                "input": "fib(9)",
                "output": "34"
            },
            {
                "input": "fib(16)",
                "output": "987"
            },
            {
                "input": "fib(13)",
                "output": "233"
            },
            {
                "input": "fib(29)",
                "output": "514229"
            },
            {
                "input": "fib(28)",
                "output": "317811"
            },
            {
                "input": "fib(17)",
                "output": "1597"
            },
            {
                "input": "fib(3)",
                "output": "2"
            },
            {
                "input": "fib(34)",
                "output": "5702887"
            },
            {
                "input": "fib(11)",
                "output": "89"
            },
            {
                "input": "fib(4)",
                "output": "3"
            },
            {
                "input": "fib(7)",
                "output": "13"
            },
            {
                "input": "fib(18)",
                "output": "2584"
            },
            {
                "input": "fib(32)",
                "output": "2178309"
            },
            {
                "input": "fib(22)",
                "output": "17711"
            },
            {
                "input": "fib(35)",
                "output": "9227465"
            },
            {
                "input": "fib(33)",
                "output": "3524578"
            },
            {
                "input": "fib(12)",
                "output": "144"
            },
            {
                "input": "fib(25)",
                "output": "75025"
            },
            {
                "input": "fib(14)",
                "output": "377"
            }
        ]
    },
    {
        "problem_description": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
        "ground truth": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "instances": [
            {
                "input": "correct_bracketing(\"><>>><<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<<<<<><>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<<><>>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"><<<><\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<<<<>><<>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<><><>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<><><<>>>><<<<<>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">><>><>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">><\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">><<<>><<<<><\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<><><<><>><>>><>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<><><<><>><><><><<><>><>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<<><>><>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<<<>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">>><<<>><><<<>>><><\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"><><<><\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<>>><<<>>>>>><><>><>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"><<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<>><<<<><><>><>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">>><>>><\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<>>><>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"><<<>>>>>>>><<><<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<><><<><>><>><<>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">>>><<><<<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"><<>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<><><<><>><>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"><>><\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<<<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">><>><><\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<<<>><>><\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<<><>><<><>>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>><><><<><>><>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<><>>>><<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<><><<><>><><><><<><>><><><><<><>><>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"><<<>><>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<>>><>>>>>><><<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">><<<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">><<>>>><<>>>>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">>>>><<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">>><><><<<>><\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<<><>><<><>><><><<><>><>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\">\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<<>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<><<><>>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<<<>>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<<><>>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<<><>><<><>><>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<<><>><><><<<><><>><>><<><><<>>>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<><><<><>><>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<>><<><\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<<><\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">>>><><<<>>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<><>>>>><><>>><\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">>>><<<>><><><>><<><\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<><><<<><><>><>><<><><<>>>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"><><>>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<><<><>><><><<<><><>><>><<><><<>>>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"><<><><>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"><>>><<>>><<<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<><><<><>><><<><>>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<>><<><<><><><>><>>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<<><>><<><>><><><<<><><>><>><<><><<>>>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"><<><>>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<<<><>>>>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<>>><<<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">><<><>>><><\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<><><<<><><>><>><<><><<>>>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<<<<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"><<<><<<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<>><>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">>>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\">>>><<<<\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<><>\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"<>>>>>\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"<><><><<><>><>\")",
                "output": "True"
            }
        ]
    },
    {
        "problem_description": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "ground truth": "def monotonic(l: list):\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
        "instances": [
            {
                "input": "monotonic([7, 6, 2, -14])",
                "output": "True"
            },
            {
                "input": "monotonic([7, 5, 2, -5])",
                "output": "True"
            },
            {
                "input": "monotonic([1, 6, 8, 6, 3, 62])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 17, 7, 8])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 20, 4, 10])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 24, 9, 12])",
                "output": "False"
            },
            {
                "input": "monotonic([5, 5, 8, 17])",
                "output": "True"
            },
            {
                "input": "monotonic([3, 4, 2, 1])",
                "output": "False"
            },
            {
                "input": "monotonic([6, 19, 9, 12])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 3, 8, 8])",
                "output": "True"
            },
            {
                "input": "monotonic([6, 4, 6, 4])",
                "output": "False"
            },
            {
                "input": "monotonic([4, 4, 3, 15])",
                "output": "False"
            },
            {
                "input": "monotonic([6, 7, 1, 8])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 20, 2, 5])",
                "output": "False"
            },
            {
                "input": "monotonic([9, 9, 9, 9])",
                "output": "True"
            },
            {
                "input": "monotonic([1, 2, 3, 4, 5, 60])",
                "output": "True"
            },
            {
                "input": "monotonic([3, 3, 7, 4, 3, 64])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 2, 4, 20])",
                "output": "True"
            },
            {
                "input": "monotonic([2, 2, 8, 1, 3, 63])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 1, 3, 3, 3, 65])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 3, 1, 7])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 1, 8, 13])",
                "output": "True"
            },
            {
                "input": "monotonic([4, 5, 7, 2, 8, 63])",
                "output": "False"
            },
            {
                "input": "monotonic([5, 5, 7, 5, 5, 57])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 6, 4, -7])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 3, 5, 17])",
                "output": "True"
            },
            {
                "input": "monotonic([7, 2, 1, -12])",
                "output": "True"
            },
            {
                "input": "monotonic([1, 1, 7, 2, 4, 56])",
                "output": "False"
            },
            {
                "input": "monotonic([4, 1, 1, 0])",
                "output": "True"
            },
            {
                "input": "monotonic([3, 1, 8, 7, 7, 65])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 2, 8, 5, 9, 55])",
                "output": "False"
            },
            {
                "input": "monotonic([6, 2, 4, 4])",
                "output": "False"
            },
            {
                "input": "monotonic([6, 4, 7, 24])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 2, 8, 12])",
                "output": "True"
            },
            {
                "input": "monotonic([5, 1, 4, 5, 3, 59])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 3, 6, 25])",
                "output": "True"
            },
            {
                "input": "monotonic([2, 22, 8, 7])",
                "output": "False"
            },
            {
                "input": "monotonic([3, 3, 3, -5])",
                "output": "True"
            },
            {
                "input": "monotonic([6, 5, 7, 7, 6, 55])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 2, 3, 2, 5, 60])",
                "output": "False"
            },
            {
                "input": "monotonic([5, 4, 9, 14])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 7, 7, 15])",
                "output": "True"
            },
            {
                "input": "monotonic([3, 17, 2, 14])",
                "output": "False"
            },
            {
                "input": "monotonic([9, 2, 5, -5])",
                "output": "False"
            },
            {
                "input": "monotonic([6, 3, 1, 1, 2, 61])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 1, 5, 3])",
                "output": "False"
            },
            {
                "input": "monotonic([3, 6, 1, 3])",
                "output": "False"
            },
            {
                "input": "monotonic([3, 1, 5, 8])",
                "output": "False"
            },
            {
                "input": "monotonic([3, 3, 6, 8])",
                "output": "True"
            },
            {
                "input": "monotonic([6, 2, 5, 6, 3, 62])",
                "output": "False"
            },
            {
                "input": "monotonic([5, 1, 3, -9])",
                "output": "False"
            },
            {
                "input": "monotonic([3, 5, 8, 5, 5, 56])",
                "output": "False"
            },
            {
                "input": "monotonic([3, 5, 5, 5, 3, 65])",
                "output": "False"
            },
            {
                "input": "monotonic([8, 6, 2, 5])",
                "output": "False"
            },
            {
                "input": "monotonic([6, 3, 6, 2, 8, 62])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 15, 2, 15])",
                "output": "False"
            },
            {
                "input": "monotonic([5, 4, 6, 18])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 4, 3, 19])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 6, 5, 3])",
                "output": "False"
            },
            {
                "input": "monotonic([6, 19, 9, 7])",
                "output": "False"
            },
            {
                "input": "monotonic([4, 6, 3, 3, 10, 57])",
                "output": "False"
            },
            {
                "input": "monotonic([4, 7, 7, 1, 1, 57])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 3, 1, 4])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 6, 3, 5, 10, 63])",
                "output": "False"
            },
            {
                "input": "monotonic([3, 2, 7, 6])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 1, 5, 12])",
                "output": "False"
            },
            {
                "input": "monotonic([3, 7, 1, 20])",
                "output": "False"
            },
            {
                "input": "monotonic([3, 1, 5, 17])",
                "output": "False"
            },
            {
                "input": "monotonic([3, 2, 2, 18])",
                "output": "False"
            },
            {
                "input": "monotonic([6, 16, 4, 14])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 1, 3, 18])",
                "output": "True"
            },
            {
                "input": "monotonic([4, 3, 4, 17])",
                "output": "False"
            },
            {
                "input": "monotonic([6, 16, 3, 15])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 4, 4, 14])",
                "output": "True"
            },
            {
                "input": "monotonic([6, 1, 7, 3, 4, 56])",
                "output": "False"
            },
            {
                "input": "monotonic([7, 2, 3, -10])",
                "output": "False"
            },
            {
                "input": "monotonic([4, 2, 5, 7, 6, 62])",
                "output": "False"
            },
            {
                "input": "monotonic([9, 5, 5, -14])",
                "output": "True"
            },
            {
                "input": "monotonic([6, 3, 7, 3, 8, 61])",
                "output": "False"
            },
            {
                "input": "monotonic([6, 2, 5, 7, 4, 65])",
                "output": "False"
            },
            {
                "input": "monotonic([5, 2, 3, 4])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 1, 4, 4, 5, 55])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 4, 3, -8])",
                "output": "False"
            },
            {
                "input": "monotonic([5, 2, 5, 2])",
                "output": "False"
            },
            {
                "input": "monotonic([4, 2, 3, 4])",
                "output": "False"
            },
            {
                "input": "monotonic([5, 5, 7, 21])",
                "output": "True"
            },
            {
                "input": "monotonic([9, 4, 1, -6])",
                "output": "True"
            },
            {
                "input": "monotonic([1, 16, 9, 7])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 6, 7, 6, 6, 61])",
                "output": "False"
            },
            {
                "input": "monotonic([4, 5, 1, -7])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 5, 2, 4, 2, 55])",
                "output": "False"
            },
            {
                "input": "monotonic([3, 2, 5, 1])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 22, 4, 10])",
                "output": "False"
            },
            {
                "input": "monotonic([5, 6, 4, 16])",
                "output": "False"
            },
            {
                "input": "monotonic([4, 1, 0, -10])",
                "output": "True"
            },
            {
                "input": "monotonic([3, 4, 3, 15])",
                "output": "False"
            },
            {
                "input": "monotonic([4, 4, 1, 1])",
                "output": "True"
            },
            {
                "input": "monotonic([3, 5, 4, 2, 1, 60])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 16, 2, 11])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 23, 5, 6])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 5, 7, 6])",
                "output": "False"
            },
            {
                "input": "monotonic([7, 2, 1, -6])",
                "output": "True"
            },
            {
                "input": "monotonic([3, 3, 2, 4])",
                "output": "False"
            },
            {
                "input": "monotonic([2, 2, 2, 6])",
                "output": "True"
            },
            {
                "input": "monotonic([8, 3, 2, -15])",
                "output": "True"
            },
            {
                "input": "monotonic([1, 2, 4, 10])",
                "output": "True"
            },
            {
                "input": "monotonic([1, 6, 5, -10])",
                "output": "False"
            },
            {
                "input": "monotonic([1, 5, 1, 6, 4, 62])",
                "output": "False"
            },
            {
                "input": "monotonic([4, 19, 8, 7])",
                "output": "False"
            },
            {
                "input": "monotonic([5, 4, 8, 5])",
                "output": "False"
            },
            {
                "input": "monotonic([4, 3, 5, 7, 1, 62])",
                "output": "False"
            },
            {
                "input": "monotonic([7, 5, 3, 2])",
                "output": "True"
            },
            {
                "input": "monotonic([4, 3, 5, 4, 8, 63])",
                "output": "False"
            }
        ]
    },
    {
        "problem_description": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
        "ground truth": "def common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
        "instances": [
            {
                "input": "common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120])",
                "output": "[]"
            },
            {
                "input": "common([3, 1, 3, 10], [3, 3, 9])",
                "output": "[3]"
            },
            {
                "input": "common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123])",
                "output": "[2, 3, 6]"
            },
            {
                "input": "common([6, 3, 7, 6], [3, 5, 7])",
                "output": "[3, 7]"
            },
            {
                "input": "common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120])",
                "output": "[]"
            },
            {
                "input": "common([5, 5, 7, 7], [5, 2])",
                "output": "[5]"
            },
            {
                "input": "common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125])",
                "output": "[6]"
            },
            {
                "input": "common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121])",
                "output": "[7]"
            },
            {
                "input": "common([3, 7, 6, 3], [2, 4, 5])",
                "output": "[]"
            },
            {
                "input": "common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118])",
                "output": "[1, 5]"
            },
            {
                "input": "common([6, 5, 2, 3], [3, 3, 3])",
                "output": "[3]"
            },
            {
                "input": "common([4, 8, 2, 9], [3, 1])",
                "output": "[]"
            },
            {
                "input": "common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119])",
                "output": "[4]"
            },
            {
                "input": "common([5, 6, 4, 8], [3, 7, 2])",
                "output": "[]"
            },
            {
                "input": "common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117])",
                "output": "[4, 7, 10]"
            },
            {
                "input": "common([4, 4, 7, 8], [4, 4, 9])",
                "output": "[4]"
            },
            {
                "input": "common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117])",
                "output": "[6]"
            },
            {
                "input": "common([9, 2, 7, 4], [5, 4, 1])",
                "output": "[4]"
            },
            {
                "input": "common([4, 5, 3, 10], [7, 5])",
                "output": "[5]"
            },
            {
                "input": "common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126])",
                "output": "[2]"
            },
            {
                "input": "common([2, 1, 7, 9], [6, 3])",
                "output": "[]"
            },
            {
                "input": "common([7, 4, 7, 13], [8, 4])",
                "output": "[4]"
            },
            {
                "input": "common([7, 6, 3, 9], [6, 5])",
                "output": "[6]"
            },
            {
                "input": "common([3, 6, 6, 7], [7, 4, 2])",
                "output": "[7]"
            },
            {
                "input": "common([7, 7, 1, 4], [5, 6])",
                "output": "[]"
            },
            {
                "input": "common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122])",
                "output": "[1]"
            },
            {
                "input": "common([6, 3, 6, 3], [8, 5, 8])",
                "output": "[]"
            },
            {
                "input": "common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123])",
                "output": "[2, 4]"
            },
            {
                "input": "common([1, 3, 4, 9], [7, 3])",
                "output": "[3]"
            },
            {
                "input": "common([2, 3, 3, 9], [5, 2])",
                "output": "[2]"
            },
            {
                "input": "common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123])",
                "output": "[1]"
            },
            {
                "input": "common([2, 7, 1, 4], [1, 2, 1])",
                "output": "[1, 2]"
            },
            {
                "input": "common([7, 7, 7, 3], [2, 4])",
                "output": "[]"
            },
            {
                "input": "common([1, 4, 5, 11], [1, 6, 1])",
                "output": "[1]"
            },
            {
                "input": "common([4, 4, 1, 8], [1, 5, 7])",
                "output": "[1]"
            },
            {
                "input": "common([2, 4, 3, 12], [4, 5, 6])",
                "output": "[4]"
            },
            {
                "input": "common([3, 1, 4, 5], [1, 1])",
                "output": "[1]"
            },
            {
                "input": "common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117])",
                "output": "[2, 4]"
            },
            {
                "input": "common([2, 2, 6, 11], [5, 6, 1])",
                "output": "[6]"
            },
            {
                "input": "common([1, 8, 3, 4], [8, 7, 6])",
                "output": "[8]"
            },
            {
                "input": "common([4, 3, 2, 8], [3, 2, 4])",
                "output": "[2, 3, 4]"
            },
            {
                "input": "common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116])",
                "output": "[2, 3, 7]"
            },
            {
                "input": "common([4, 5, 7, 12], [7, 1])",
                "output": "[7]"
            },
            {
                "input": "common([9, 3, 7, 4], [4, 2, 4])",
                "output": "[4]"
            },
            {
                "input": "common([4, 5, 2, 5], [1, 7, 5])",
                "output": "[5]"
            },
            {
                "input": "common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120])",
                "output": "[4]"
            },
            {
                "input": "common([3, 8, 6, 6], [4, 3, 3])",
                "output": "[3]"
            },
            {
                "input": "common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116])",
                "output": "[]"
            },
            {
                "input": "common([6, 6, 4, 12], [3, 1])",
                "output": "[]"
            },
            {
                "input": "common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124])",
                "output": "[4]"
            },
            {
                "input": "common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120])",
                "output": "[5]"
            },
            {
                "input": "common([1, 6, 6, 12], [6, 2, 9])",
                "output": "[6]"
            },
            {
                "input": "common([1, 6, 5, 9], [1, 6, 1])",
                "output": "[1, 6]"
            },
            {
                "input": "common([5, 3, 2, 8], [3, 2])",
                "output": "[2, 3]"
            },
            {
                "input": "common([7, 4, 3, 10], [3, 1])",
                "output": "[3]"
            },
            {
                "input": "common([2, 7, 4, 3], [8, 7, 5])",
                "output": "[7]"
            },
            {
                "input": "common([4, 3, 2, 8], [])",
                "output": "[]"
            },
            {
                "input": "common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117])",
                "output": "[3, 7, 10, 658]"
            },
            {
                "input": "common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117])",
                "output": "[4, 5, 652]"
            },
            {
                "input": "common([1, 8, 7, 3], [2, 6])",
                "output": "[]"
            },
            {
                "input": "common([5, 8, 7, 3], [6, 4])",
                "output": "[]"
            },
            {
                "input": "common([7, 8, 6, 11], [4, 5, 9])",
                "output": "[]"
            },
            {
                "input": "common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121])",
                "output": "[1]"
            },
            {
                "input": "common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117])",
                "output": "[2, 7]"
            },
            {
                "input": "common([8, 1, 1, 3], [5, 6])",
                "output": "[]"
            },
            {
                "input": "common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122])",
                "output": "[]"
            },
            {
                "input": "common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])",
                "output": "[1, 5, 653]"
            },
            {
                "input": "common([2, 6, 2, 8], [5, 2])",
                "output": "[2]"
            },
            {
                "input": "common([8, 2, 7, 4], [7, 7, 1])",
                "output": "[7]"
            },
            {
                "input": "common([3, 1, 6, 11], [6, 6])",
                "output": "[6]"
            },
            {
                "input": "common([6, 5, 7, 10], [8, 4])",
                "output": "[]"
            },
            {
                "input": "common([8, 4, 4, 6], [3, 6])",
                "output": "[6]"
            },
            {
                "input": "common([7, 7, 5, 11], [3, 4])",
                "output": "[]"
            },
            {
                "input": "common([8, 1, 4, 10], [4, 2])",
                "output": "[4]"
            },
            {
                "input": "common([3, 4, 4, 8], [3, 3, 9])",
                "output": "[3]"
            },
            {
                "input": "common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122])",
                "output": "[7]"
            },
            {
                "input": "common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119])",
                "output": "[2]"
            },
            {
                "input": "common([9, 7, 7, 7], [5, 2])",
                "output": "[]"
            },
            {
                "input": "common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123])",
                "output": "[7, 654]"
            },
            {
                "input": "common([7, 1, 7, 13], [3, 1])",
                "output": "[1]"
            },
            {
                "input": "common([6, 2, 3, 8], [7, 6, 8])",
                "output": "[6, 8]"
            },
            {
                "input": "common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116])",
                "output": "[648]"
            },
            {
                "input": "common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126])",
                "output": "[1, 4]"
            },
            {
                "input": "common([9, 6, 6, 7], [7, 7, 1])",
                "output": "[7]"
            },
            {
                "input": "common([3, 4, 3, 11], [4, 1, 7])",
                "output": "[4]"
            },
            {
                "input": "common([1, 1, 3, 11], [5, 3, 2])",
                "output": "[3]"
            },
            {
                "input": "common([5, 2, 1, 3], [8, 3])",
                "output": "[3]"
            },
            {
                "input": "common([8, 4, 6, 5], [1, 1])",
                "output": "[]"
            },
            {
                "input": "common([3, 5, 5, 8], [7, 6])",
                "output": "[]"
            },
            {
                "input": "common([8, 4, 1, 9], [6, 3])",
                "output": "[]"
            },
            {
                "input": "common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116])",
                "output": "[3, 6]"
            },
            {
                "input": "common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126])",
                "output": "[2, 7]"
            },
            {
                "input": "common([3, 3, 1, 4], [4, 6, 4])",
                "output": "[4]"
            },
            {
                "input": "common([6, 6, 4, 5], [3, 3, 8])",
                "output": "[]"
            },
            {
                "input": "common([4, 1, 4, 12], [5, 1, 7])",
                "output": "[1]"
            },
            {
                "input": "common([8, 3, 4, 10], [8, 7])",
                "output": "[8]"
            },
            {
                "input": "common([2, 8, 5, 10], [8, 4])",
                "output": "[8]"
            },
            {
                "input": "common([8, 7, 6, 13], [7, 2])",
                "output": "[7]"
            },
            {
                "input": "common([4, 6, 6, 7], [8, 6, 9])",
                "output": "[6]"
            },
            {
                "input": "common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126])",
                "output": "[5]"
            }
        ]
    },
    {
        "problem_description": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
        "ground truth": "def largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
        "instances": [
            {
                "input": "largest_prime_factor(107904)",
                "output": "281"
            },
            {
                "input": "largest_prime_factor(858060)",
                "output": "227"
            },
            {
                "input": "largest_prime_factor(606926)",
                "output": "303463"
            },
            {
                "input": "largest_prime_factor(97767)",
                "output": "71"
            },
            {
                "input": "largest_prime_factor(93473)",
                "output": "443"
            },
            {
                "input": "largest_prime_factor(24895)",
                "output": "383"
            },
            {
                "input": "largest_prime_factor(69672)",
                "output": "2903"
            },
            {
                "input": "largest_prime_factor(858476)",
                "output": "1367"
            },
            {
                "input": "largest_prime_factor(82876)",
                "output": "20719"
            },
            {
                "input": "largest_prime_factor(915097)",
                "output": "48163"
            },
            {
                "input": "largest_prime_factor(683441)",
                "output": "62131"
            },
            {
                "input": "largest_prime_factor(789018)",
                "output": "1229"
            },
            {
                "input": "largest_prime_factor(126162)",
                "output": "163"
            },
            {
                "input": "largest_prime_factor(669798)",
                "output": "293"
            },
            {
                "input": "largest_prime_factor(340173)",
                "output": "293"
            },
            {
                "input": "largest_prime_factor(699315)",
                "output": "2027"
            },
            {
                "input": "largest_prime_factor(979096)",
                "output": "122387"
            },
            {
                "input": "largest_prime_factor(907624)",
                "output": "113453"
            },
            {
                "input": "largest_prime_factor(441063)",
                "output": "7001"
            },
            {
                "input": "largest_prime_factor(884867)",
                "output": "52051"
            },
            {
                "input": "largest_prime_factor(15)",
                "output": "5"
            },
            {
                "input": "largest_prime_factor(399148)",
                "output": "99787"
            },
            {
                "input": "largest_prime_factor(861210)",
                "output": "1367"
            },
            {
                "input": "largest_prime_factor(29458)",
                "output": "103"
            },
            {
                "input": "largest_prime_factor(325256)",
                "output": "373"
            },
            {
                "input": "largest_prime_factor(27)",
                "output": "3"
            },
            {
                "input": "largest_prime_factor(330073)",
                "output": "127"
            },
            {
                "input": "largest_prime_factor(88102)",
                "output": "31"
            },
            {
                "input": "largest_prime_factor(293778)",
                "output": "859"
            },
            {
                "input": "largest_prime_factor(759955)",
                "output": "21713"
            },
            {
                "input": "largest_prime_factor(852306)",
                "output": "223"
            },
            {
                "input": "largest_prime_factor(51705)",
                "output": "383"
            },
            {
                "input": "largest_prime_factor(233109)",
                "output": "439"
            },
            {
                "input": "largest_prime_factor(754917)",
                "output": "251639"
            },
            {
                "input": "largest_prime_factor(407634)",
                "output": "67939"
            },
            {
                "input": "largest_prime_factor(647418)",
                "output": "107903"
            },
            {
                "input": "largest_prime_factor(950141)",
                "output": "997"
            },
            {
                "input": "largest_prime_factor(330)",
                "output": "11"
            },
            {
                "input": "largest_prime_factor(844600)",
                "output": "103"
            },
            {
                "input": "largest_prime_factor(962149)",
                "output": "56597"
            },
            {
                "input": "largest_prime_factor(709317)",
                "output": "139"
            },
            {
                "input": "largest_prime_factor(203475)",
                "output": "2713"
            },
            {
                "input": "largest_prime_factor(178919)",
                "output": "13763"
            },
            {
                "input": "largest_prime_factor(449137)",
                "output": "34549"
            },
            {
                "input": "largest_prime_factor(13195)",
                "output": "29"
            },
            {
                "input": "largest_prime_factor(508089)",
                "output": "659"
            },
            {
                "input": "largest_prime_factor(351286)",
                "output": "229"
            },
            {
                "input": "largest_prime_factor(688059)",
                "output": "859"
            },
            {
                "input": "largest_prime_factor(677005)",
                "output": "29"
            },
            {
                "input": "largest_prime_factor(998782)",
                "output": "499391"
            },
            {
                "input": "largest_prime_factor(545017)",
                "output": "49547"
            },
            {
                "input": "largest_prime_factor(223751)",
                "output": "20341"
            },
            {
                "input": "largest_prime_factor(150069)",
                "output": "50023"
            },
            {
                "input": "largest_prime_factor(715348)",
                "output": "4159"
            },
            {
                "input": "largest_prime_factor(965957)",
                "output": "56821"
            },
            {
                "input": "largest_prime_factor(839908)",
                "output": "209977"
            },
            {
                "input": "largest_prime_factor(193358)",
                "output": "47"
            },
            {
                "input": "largest_prime_factor(296792)",
                "output": "1613"
            },
            {
                "input": "largest_prime_factor(148824)",
                "output": "53"
            },
            {
                "input": "largest_prime_factor(249886)",
                "output": "1373"
            },
            {
                "input": "largest_prime_factor(63)",
                "output": "7"
            },
            {
                "input": "largest_prime_factor(780079)",
                "output": "45887"
            },
            {
                "input": "largest_prime_factor(546935)",
                "output": "109387"
            },
            {
                "input": "largest_prime_factor(771453)",
                "output": "85717"
            },
            {
                "input": "largest_prime_factor(959669)",
                "output": "701"
            },
            {
                "input": "largest_prime_factor(690588)",
                "output": "19183"
            },
            {
                "input": "largest_prime_factor(349383)",
                "output": "116461"
            },
            {
                "input": "largest_prime_factor(512631)",
                "output": "103"
            },
            {
                "input": "largest_prime_factor(44324)",
                "output": "1583"
            },
            {
                "input": "largest_prime_factor(371221)",
                "output": "127"
            },
            {
                "input": "largest_prime_factor(17679)",
                "output": "83"
            },
            {
                "input": "largest_prime_factor(155409)",
                "output": "51803"
            },
            {
                "input": "largest_prime_factor(206158)",
                "output": "103079"
            },
            {
                "input": "largest_prime_factor(151744)",
                "output": "2371"
            },
            {
                "input": "largest_prime_factor(242695)",
                "output": "48539"
            },
            {
                "input": "largest_prime_factor(21993)",
                "output": "7331"
            },
            {
                "input": "largest_prime_factor(695092)",
                "output": "173773"
            },
            {
                "input": "largest_prime_factor(801190)",
                "output": "6163"
            },
            {
                "input": "largest_prime_factor(340468)",
                "output": "1811"
            },
            {
                "input": "largest_prime_factor(382340)",
                "output": "2731"
            },
            {
                "input": "largest_prime_factor(679692)",
                "output": "4357"
            },
            {
                "input": "largest_prime_factor(132848)",
                "output": "23"
            },
            {
                "input": "largest_prime_factor(208046)",
                "output": "211"
            },
            {
                "input": "largest_prime_factor(910738)",
                "output": "691"
            },
            {
                "input": "largest_prime_factor(93186)",
                "output": "167"
            },
            {
                "input": "largest_prime_factor(982531)",
                "output": "499"
            },
            {
                "input": "largest_prime_factor(198874)",
                "output": "7649"
            },
            {
                "input": "largest_prime_factor(118164)",
                "output": "229"
            },
            {
                "input": "largest_prime_factor(397777)",
                "output": "5449"
            },
            {
                "input": "largest_prime_factor(93973)",
                "output": "8543"
            },
            {
                "input": "largest_prime_factor(892958)",
                "output": "1097"
            },
            {
                "input": "largest_prime_factor(717088)",
                "output": "22409"
            },
            {
                "input": "largest_prime_factor(678495)",
                "output": "45233"
            },
            {
                "input": "largest_prime_factor(2031)",
                "output": "677"
            },
            {
                "input": "largest_prime_factor(676882)",
                "output": "3163"
            },
            {
                "input": "largest_prime_factor(637083)",
                "output": "997"
            },
            {
                "input": "largest_prime_factor(94230)",
                "output": "349"
            },
            {
                "input": "largest_prime_factor(48664)",
                "output": "79"
            },
            {
                "input": "largest_prime_factor(375921)",
                "output": "17"
            },
            {
                "input": "largest_prime_factor(373143)",
                "output": "4289"
            },
            {
                "input": "largest_prime_factor(440449)",
                "output": "10243"
            },
            {
                "input": "largest_prime_factor(901758)",
                "output": "1051"
            },
            {
                "input": "largest_prime_factor(72216)",
                "output": "59"
            },
            {
                "input": "largest_prime_factor(578015)",
                "output": "115603"
            },
            {
                "input": "largest_prime_factor(829820)",
                "output": "41491"
            }
        ]
    },
    {
        "problem_description": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
        "ground truth": "def sum_to_n(n: int):\n    return sum(range(n + 1))\n",
        "instances": [
            {
                "input": "sum_to_n(176)",
                "output": "15576"
            },
            {
                "input": "sum_to_n(484)",
                "output": "117370"
            },
            {
                "input": "sum_to_n(11)",
                "output": "66"
            },
            {
                "input": "sum_to_n(813)",
                "output": "330891"
            },
            {
                "input": "sum_to_n(43)",
                "output": "946"
            },
            {
                "input": "sum_to_n(670)",
                "output": "224785"
            },
            {
                "input": "sum_to_n(609)",
                "output": "185745"
            },
            {
                "input": "sum_to_n(213)",
                "output": "22791"
            },
            {
                "input": "sum_to_n(676)",
                "output": "228826"
            },
            {
                "input": "sum_to_n(931)",
                "output": "433846"
            },
            {
                "input": "sum_to_n(704)",
                "output": "248160"
            },
            {
                "input": "sum_to_n(990)",
                "output": "490545"
            },
            {
                "input": "sum_to_n(271)",
                "output": "36856"
            },
            {
                "input": "sum_to_n(391)",
                "output": "76636"
            },
            {
                "input": "sum_to_n(302)",
                "output": "45753"
            },
            {
                "input": "sum_to_n(304)",
                "output": "46360"
            },
            {
                "input": "sum_to_n(159)",
                "output": "12720"
            },
            {
                "input": "sum_to_n(718)",
                "output": "258121"
            },
            {
                "input": "sum_to_n(231)",
                "output": "26796"
            },
            {
                "input": "sum_to_n(547)",
                "output": "149878"
            },
            {
                "input": "sum_to_n(714)",
                "output": "255255"
            },
            {
                "input": "sum_to_n(968)",
                "output": "468996"
            },
            {
                "input": "sum_to_n(379)",
                "output": "72010"
            },
            {
                "input": "sum_to_n(507)",
                "output": "128778"
            },
            {
                "input": "sum_to_n(261)",
                "output": "34191"
            },
            {
                "input": "sum_to_n(482)",
                "output": "116403"
            },
            {
                "input": "sum_to_n(257)",
                "output": "33153"
            },
            {
                "input": "sum_to_n(361)",
                "output": "65341"
            },
            {
                "input": "sum_to_n(89)",
                "output": "4005"
            },
            {
                "input": "sum_to_n(666)",
                "output": "222111"
            },
            {
                "input": "sum_to_n(66)",
                "output": "2211"
            },
            {
                "input": "sum_to_n(260)",
                "output": "33930"
            },
            {
                "input": "sum_to_n(186)",
                "output": "17391"
            },
            {
                "input": "sum_to_n(964)",
                "output": "465130"
            },
            {
                "input": "sum_to_n(904)",
                "output": "409060"
            },
            {
                "input": "sum_to_n(828)",
                "output": "343206"
            },
            {
                "input": "sum_to_n(99)",
                "output": "4950"
            },
            {
                "input": "sum_to_n(979)",
                "output": "479710"
            },
            {
                "input": "sum_to_n(442)",
                "output": "97903"
            },
            {
                "input": "sum_to_n(637)",
                "output": "203203"
            },
            {
                "input": "sum_to_n(700)",
                "output": "245350"
            },
            {
                "input": "sum_to_n(774)",
                "output": "299925"
            },
            {
                "input": "sum_to_n(707)",
                "output": "250278"
            },
            {
                "input": "sum_to_n(30)",
                "output": "465"
            },
            {
                "input": "sum_to_n(336)",
                "output": "56616"
            },
            {
                "input": "sum_to_n(161)",
                "output": "13041"
            },
            {
                "input": "sum_to_n(987)",
                "output": "487578"
            },
            {
                "input": "sum_to_n(943)",
                "output": "445096"
            },
            {
                "input": "sum_to_n(1)",
                "output": "1"
            },
            {
                "input": "sum_to_n(100)",
                "output": "5050"
            },
            {
                "input": "sum_to_n(867)",
                "output": "376278"
            },
            {
                "input": "sum_to_n(60)",
                "output": "1830"
            },
            {
                "input": "sum_to_n(947)",
                "output": "448878"
            },
            {
                "input": "sum_to_n(6)",
                "output": "21"
            },
            {
                "input": "sum_to_n(479)",
                "output": "114960"
            },
            {
                "input": "sum_to_n(972)",
                "output": "472878"
            },
            {
                "input": "sum_to_n(20)",
                "output": "210"
            },
            {
                "input": "sum_to_n(54)",
                "output": "1485"
            },
            {
                "input": "sum_to_n(705)",
                "output": "248865"
            },
            {
                "input": "sum_to_n(91)",
                "output": "4186"
            },
            {
                "input": "sum_to_n(877)",
                "output": "385003"
            },
            {
                "input": "sum_to_n(709)",
                "output": "251695"
            },
            {
                "input": "sum_to_n(957)",
                "output": "458403"
            },
            {
                "input": "sum_to_n(512)",
                "output": "131328"
            },
            {
                "input": "sum_to_n(554)",
                "output": "153735"
            },
            {
                "input": "sum_to_n(443)",
                "output": "98346"
            },
            {
                "input": "sum_to_n(605)",
                "output": "183315"
            },
            {
                "input": "sum_to_n(982)",
                "output": "482653"
            },
            {
                "input": "sum_to_n(283)",
                "output": "40186"
            },
            {
                "input": "sum_to_n(209)",
                "output": "21945"
            },
            {
                "input": "sum_to_n(335)",
                "output": "56280"
            },
            {
                "input": "sum_to_n(570)",
                "output": "162735"
            },
            {
                "input": "sum_to_n(720)",
                "output": "259560"
            },
            {
                "input": "sum_to_n(625)",
                "output": "195625"
            },
            {
                "input": "sum_to_n(247)",
                "output": "30628"
            },
            {
                "input": "sum_to_n(611)",
                "output": "186966"
            },
            {
                "input": "sum_to_n(426)",
                "output": "90951"
            },
            {
                "input": "sum_to_n(802)",
                "output": "322003"
            },
            {
                "input": "sum_to_n(318)",
                "output": "50721"
            },
            {
                "input": "sum_to_n(909)",
                "output": "413595"
            },
            {
                "input": "sum_to_n(468)",
                "output": "109746"
            },
            {
                "input": "sum_to_n(875)",
                "output": "383250"
            },
            {
                "input": "sum_to_n(723)",
                "output": "261726"
            },
            {
                "input": "sum_to_n(343)",
                "output": "58996"
            },
            {
                "input": "sum_to_n(896)",
                "output": "401856"
            },
            {
                "input": "sum_to_n(678)",
                "output": "230181"
            },
            {
                "input": "sum_to_n(46)",
                "output": "1081"
            },
            {
                "input": "sum_to_n(950)",
                "output": "451725"
            },
            {
                "input": "sum_to_n(945)",
                "output": "446985"
            },
            {
                "input": "sum_to_n(546)",
                "output": "149331"
            },
            {
                "input": "sum_to_n(224)",
                "output": "25200"
            },
            {
                "input": "sum_to_n(657)",
                "output": "216153"
            },
            {
                "input": "sum_to_n(355)",
                "output": "63190"
            },
            {
                "input": "sum_to_n(981)",
                "output": "481671"
            },
            {
                "input": "sum_to_n(281)",
                "output": "39621"
            },
            {
                "input": "sum_to_n(594)",
                "output": "176715"
            },
            {
                "input": "sum_to_n(497)",
                "output": "123753"
            },
            {
                "input": "sum_to_n(550)",
                "output": "151525"
            },
            {
                "input": "sum_to_n(956)",
                "output": "457446"
            },
            {
                "input": "sum_to_n(191)",
                "output": "18336"
            },
            {
                "input": "sum_to_n(891)",
                "output": "397386"
            },
            {
                "input": "sum_to_n(192)",
                "output": "18528"
            }
        ]
    },
    {
        "problem_description": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
        "ground truth": "def correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
        "instances": [
            {
                "input": "correct_bracketing(\"()()()((()()(\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\")(()\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"(())\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"()()((()()())())(()()(()))()()(()())()()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"(()())\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"(()())()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\")\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"()()()()(()())()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"()))))\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"((((\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"((())()))\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\")()\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\")())())()\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"()()(()())()(()())()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"())\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\")((((((\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"()()(()())()()()(()())()()()((()()())())(()()(()))\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\")(()))(((()((()\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"()()(()())())(()\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"))()))((())((()()((((\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"(()())()()((()()())())(()()(()))(()())\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"(\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"()()(()())()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\")(()(())((())((())\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"()()(()())()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\")\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\")()(())()((()())\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\")()(\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\")))((\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"()())())))(()(())()\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"))()\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"()))\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"((())()()\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\")((((((()())())()(((\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"()()()(())(\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"(()())(()())()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"()))()(\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"))))\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"()()(()())()()()(()())()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"(()())\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"(()())()()((()()())())(()()(()))()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\")((()))))((()(\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"()()((()()())())(()()(()))\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"()()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"()()()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"()()(()())()))()\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"))())()))(())\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\")())()())))(((\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"((((((\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"(\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"((()())))\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"(((\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"(()())()()(()())()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"))()()())(())\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"(()())()(()())\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\")()())\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"))()))))(()()(\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"()())())(\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\")((((\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"()(())()()()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\")(()\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"((((\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"(()))))()\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"()()(()())()()\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\")()()(()(())(\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"(()\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"())())((()()))\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"))((((((()\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"()()(()())()()()((()()())())(()()(()))(()())\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"()(()())\")",
                "output": "True"
            },
            {
                "input": "correct_bracketing(\"))())\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\")(()())(\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"(((()\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"(()\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\")((())))()(()))())\")",
                "output": "False"
            },
            {
                "input": "correct_bracketing(\"(()())()()((()()())())(()()(()))\")",
                "output": "True"
            }
        ]
    },
    {
        "problem_description": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
        "ground truth": "def derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n",
        "instances": [
            {
                "input": "derivative([7, 5, 6])",
                "output": "[5, 12]"
            },
            {
                "input": "derivative([4, 2, 6])",
                "output": "[2, 12]"
            },
            {
                "input": "derivative([2, 6, 2, 6, 2])",
                "output": "[6, 4, 18, 8]"
            },
            {
                "input": "derivative([1, 5, 3, 5, 9])",
                "output": "[5, 6, 15, 36]"
            },
            {
                "input": "derivative([1, 2, 3])",
                "output": "[2, 6]"
            },
            {
                "input": "derivative([5, 6, 2, 5, 3])",
                "output": "[6, 4, 15, 12]"
            },
            {
                "input": "derivative([7, 5, 4, 2, 7])",
                "output": "[5, 8, 6, 28]"
            },
            {
                "input": "derivative([8, 5, 5, 3, 9])",
                "output": "[5, 10, 9, 36]"
            },
            {
                "input": "derivative([2, 2, 1, 1, 9])",
                "output": "[2, 2, 3, 36]"
            },
            {
                "input": "derivative([4, 4, 3, 4, 6])",
                "output": "[4, 6, 12, 24]"
            },
            {
                "input": "derivative([1, 7, 3, 2, 8])",
                "output": "[7, 6, 6, 32]"
            },
            {
                "input": "derivative([2, 5, 5, 5, 6])",
                "output": "[5, 10, 15, 24]"
            },
            {
                "input": "derivative([1, 2, 1])",
                "output": "[2, 2]"
            },
            {
                "input": "derivative([1, 1, 7])",
                "output": "[1, 14]"
            },
            {
                "input": "derivative([7, 3, 5, 5, 7])",
                "output": "[3, 10, 15, 28]"
            },
            {
                "input": "derivative([5, 6, 4])",
                "output": "[6, 8]"
            },
            {
                "input": "derivative([1])",
                "output": "[]"
            },
            {
                "input": "derivative([6, 2, 2])",
                "output": "[2, 4]"
            },
            {
                "input": "derivative([2, 7, 1])",
                "output": "[7, 2]"
            },
            {
                "input": "derivative([4, 5, 3])",
                "output": "[5, 6]"
            },
            {
                "input": "derivative([6, 4, 6, 8, 10])",
                "output": "[4, 12, 24, 40]"
            },
            {
                "input": "derivative([3, 3, 4, 1, 6])",
                "output": "[3, 8, 3, 24]"
            },
            {
                "input": "derivative([5, 2, 6, 7, 8])",
                "output": "[2, 12, 21, 32]"
            },
            {
                "input": "derivative([6, 3, 5, 2, 7])",
                "output": "[3, 10, 6, 28]"
            },
            {
                "input": "derivative([2, 6, 3, 4, 1])",
                "output": "[6, 6, 12, 4]"
            },
            {
                "input": "derivative([4, 2, 4])",
                "output": "[2, 8]"
            },
            {
                "input": "derivative([5, 5, 5, 2, 2])",
                "output": "[5, 10, 6, 8]"
            },
            {
                "input": "derivative([5, 6, 5])",
                "output": "[6, 10]"
            },
            {
                "input": "derivative([2, 4, 5, 4, 1])",
                "output": "[4, 10, 12, 4]"
            },
            {
                "input": "derivative([1, 3, 3])",
                "output": "[3, 6]"
            },
            {
                "input": "derivative([6, 2, 5])",
                "output": "[2, 10]"
            },
            {
                "input": "derivative([4, 4, 2])",
                "output": "[4, 4]"
            },
            {
                "input": "derivative([6, 5, 6, 3, 3])",
                "output": "[5, 12, 9, 12]"
            },
            {
                "input": "derivative([7, 3, 6, 4, 6])",
                "output": "[3, 12, 12, 24]"
            },
            {
                "input": "derivative([6, 5, 5])",
                "output": "[5, 10]"
            },
            {
                "input": "derivative([5, 4, 6])",
                "output": "[4, 12]"
            },
            {
                "input": "derivative([2, 3, 3])",
                "output": "[3, 6]"
            },
            {
                "input": "derivative([3, 2, 3, 9, 3])",
                "output": "[2, 6, 27, 12]"
            },
            {
                "input": "derivative([6, 7, 6])",
                "output": "[7, 12]"
            },
            {
                "input": "derivative([4, 1, 4, 6, 4])",
                "output": "[1, 8, 18, 16]"
            },
            {
                "input": "derivative([5, 2, 2, 3, 7])",
                "output": "[2, 4, 9, 28]"
            },
            {
                "input": "derivative([6, 3, 2, 2, 9])",
                "output": "[3, 4, 6, 36]"
            },
            {
                "input": "derivative([4, 2, 3, 8, 1])",
                "output": "[2, 6, 24, 4]"
            },
            {
                "input": "derivative([7, 5, 4, 2, 9])",
                "output": "[5, 8, 6, 36]"
            },
            {
                "input": "derivative([4, 1, 3, 4, 9])",
                "output": "[1, 6, 12, 36]"
            },
            {
                "input": "derivative([5, 1, 7, 8, 10])",
                "output": "[1, 14, 24, 40]"
            },
            {
                "input": "derivative([3, 7, 6, 1, 8])",
                "output": "[7, 12, 3, 32]"
            },
            {
                "input": "derivative([6, 3, 2])",
                "output": "[3, 4]"
            },
            {
                "input": "derivative([3, 1, 8])",
                "output": "[1, 16]"
            },
            {
                "input": "derivative([1, 1, 5])",
                "output": "[1, 10]"
            },
            {
                "input": "derivative([6, 7, 1])",
                "output": "[7, 2]"
            },
            {
                "input": "derivative([6, 7, 4])",
                "output": "[7, 8]"
            },
            {
                "input": "derivative([1, 7, 7])",
                "output": "[7, 14]"
            },
            {
                "input": "derivative([2, 2, 2])",
                "output": "[2, 4]"
            },
            {
                "input": "derivative([5, 3, 3])",
                "output": "[3, 6]"
            },
            {
                "input": "derivative([4, 4, 4, 1, 5])",
                "output": "[4, 8, 3, 20]"
            },
            {
                "input": "derivative([7, 4, 6, 8, 6])",
                "output": "[4, 12, 24, 24]"
            },
            {
                "input": "derivative([1, 6, 5, 4, 2])",
                "output": "[6, 10, 12, 8]"
            },
            {
                "input": "derivative([7, 7, 1, 1, 6])",
                "output": "[7, 2, 3, 24]"
            },
            {
                "input": "derivative([2, 1, 4, 8, 10])",
                "output": "[1, 8, 24, 40]"
            },
            {
                "input": "derivative([5, 5, 2, 5, 6])",
                "output": "[5, 4, 15, 24]"
            },
            {
                "input": "derivative([5, 6, 5, 1, 3])",
                "output": "[6, 10, 3, 12]"
            },
            {
                "input": "derivative([3, 4, 6])",
                "output": "[4, 12]"
            },
            {
                "input": "derivative([3, 2, 1, 0, 4])",
                "output": "[2, 2, 0, 16]"
            },
            {
                "input": "derivative([5, 7, 3])",
                "output": "[7, 6]"
            },
            {
                "input": "derivative([6, 5, 1])",
                "output": "[5, 2]"
            },
            {
                "input": "derivative([4, 3, 1])",
                "output": "[3, 2]"
            },
            {
                "input": "derivative([3, 2, 4, 4, 2])",
                "output": "[2, 8, 12, 8]"
            },
            {
                "input": "derivative([6, 7, 2])",
                "output": "[7, 4]"
            },
            {
                "input": "derivative([1, 2, 3, 1, 10])",
                "output": "[2, 6, 3, 40]"
            },
            {
                "input": "derivative([6, 3, 4, 2, 1])",
                "output": "[3, 8, 6, 4]"
            },
            {
                "input": "derivative([4, 5, 1])",
                "output": "[5, 2]"
            },
            {
                "input": "derivative([8, 6, 3])",
                "output": "[6, 6]"
            },
            {
                "input": "derivative([4, 1, 4, 5, 3])",
                "output": "[1, 8, 15, 12]"
            },
            {
                "input": "derivative([2, 7, 5, 3, 4])",
                "output": "[7, 10, 9, 16]"
            },
            {
                "input": "derivative([2, 4, 5])",
                "output": "[4, 10]"
            },
            {
                "input": "derivative([6, 4, 6])",
                "output": "[4, 12]"
            },
            {
                "input": "derivative([7, 4, 6, 4, 6])",
                "output": "[4, 12, 12, 24]"
            },
            {
                "input": "derivative([4, 1, 4])",
                "output": "[1, 8]"
            },
            {
                "input": "derivative([4, 4, 1, 5, 1])",
                "output": "[4, 2, 15, 4]"
            },
            {
                "input": "derivative([4, 3, 3, 8, 9])",
                "output": "[3, 6, 24, 36]"
            },
            {
                "input": "derivative([2, 6, 1])",
                "output": "[6, 2]"
            },
            {
                "input": "derivative([3, 3, 3])",
                "output": "[3, 6]"
            },
            {
                "input": "derivative([4, 2, 5])",
                "output": "[2, 10]"
            },
            {
                "input": "derivative([2, 1, 2])",
                "output": "[1, 4]"
            },
            {
                "input": "derivative([1, 6, 1])",
                "output": "[6, 2]"
            },
            {
                "input": "derivative([1, 4, 4, 1, 7])",
                "output": "[4, 8, 3, 28]"
            },
            {
                "input": "derivative([3, 1, 2, 4, 5])",
                "output": "[1, 4, 12, 20]"
            },
            {
                "input": "derivative([2, 4, 2])",
                "output": "[4, 4]"
            },
            {
                "input": "derivative([3, 2, 1])",
                "output": "[2, 2]"
            },
            {
                "input": "derivative([1, 1, 1, 2, 6])",
                "output": "[1, 2, 6, 24]"
            },
            {
                "input": "derivative([8, 5, 3, 1, 4])",
                "output": "[5, 6, 3, 16]"
            },
            {
                "input": "derivative([8, 7, 2])",
                "output": "[7, 4]"
            },
            {
                "input": "derivative([6, 6, 4, 1, 4])",
                "output": "[6, 8, 3, 16]"
            },
            {
                "input": "derivative([3, 4, 5, 2, 2])",
                "output": "[4, 10, 6, 8]"
            },
            {
                "input": "derivative([1, 6, 6])",
                "output": "[6, 12]"
            },
            {
                "input": "derivative([6, 4, 7])",
                "output": "[4, 14]"
            },
            {
                "input": "derivative([4, 4, 3, 6, 10])",
                "output": "[4, 6, 18, 40]"
            },
            {
                "input": "derivative([1, 2, 4])",
                "output": "[2, 8]"
            }
        ]
    },
    {
        "problem_description": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
        "ground truth": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "instances": [
            {
                "input": "fibfib(10)",
                "output": "81"
            },
            {
                "input": "fibfib(6)",
                "output": "7"
            },
            {
                "input": "fibfib(26)",
                "output": "1389537"
            },
            {
                "input": "fibfib(2)",
                "output": "1"
            },
            {
                "input": "fibfib(21)",
                "output": "66012"
            },
            {
                "input": "fibfib(28)",
                "output": "4700770"
            },
            {
                "input": "fibfib(12)",
                "output": "274"
            },
            {
                "input": "fibfib(19)",
                "output": "19513"
            },
            {
                "input": "fibfib(29)",
                "output": "8646064"
            },
            {
                "input": "fibfib(18)",
                "output": "10609"
            },
            {
                "input": "fibfib(25)",
                "output": "755476"
            },
            {
                "input": "fibfib(7)",
                "output": "13"
            },
            {
                "input": "fibfib(3)",
                "output": "1"
            },
            {
                "input": "fibfib(0)",
                "output": "0"
            },
            {
                "input": "fibfib(9)",
                "output": "44"
            },
            {
                "input": "fibfib(22)",
                "output": "121415"
            },
            {
                "input": "fibfib(27)",
                "output": "2555757"
            },
            {
                "input": "fibfib(5)",
                "output": "4"
            },
            {
                "input": "fibfib(16)",
                "output": "3136"
            },
            {
                "input": "fibfib(15)",
                "output": "1705"
            },
            {
                "input": "fibfib(1)",
                "output": "0"
            },
            {
                "input": "fibfib(24)",
                "output": "410744"
            },
            {
                "input": "fibfib(13)",
                "output": "504"
            },
            {
                "input": "fibfib(11)",
                "output": "149"
            },
            {
                "input": "fibfib(8)",
                "output": "24"
            },
            {
                "input": "fibfib(17)",
                "output": "5768"
            },
            {
                "input": "fibfib(30)",
                "output": "15902591"
            },
            {
                "input": "fibfib(4)",
                "output": "2"
            },
            {
                "input": "fibfib(14)",
                "output": "927"
            },
            {
                "input": "fibfib(20)",
                "output": "35890"
            }
        ]
    },
    {
        "problem_description": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
        "ground truth": "def vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
        "instances": [
            {
                "input": "vowels_count(\"JdT\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"uiaTUA\")",
                "output": "5"
            },
            {
                "input": "vowels_count(\"cmmacbu\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"Cnd\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"qvt\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"iMmdG\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"pfbuf\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"xmzjzfsd\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"pFGheLS\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"SFLHyx\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"pkmive\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"bprwrlz\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"bajvbd\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"wvdvd\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"aAboay\")",
                "output": "5"
            },
            {
                "input": "vowels_count(\"fivkg\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"gTfkWkL\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"uraZwroZg\")",
                "output": "3"
            },
            {
                "input": "vowels_count(\"xenm\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"dpC\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"LvVQtCdIS\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"wAI\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"RdpTSCBxO\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"qtqu\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"cukdnxkxw\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"zxey\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"opbbocbx\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"iraTR\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"qSbxpNy\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"Gsrlcd\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"largjSFz\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"PqT\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"srezvdbi\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"qagoecrk\")",
                "output": "3"
            },
            {
                "input": "vowels_count(\"mgmstfzm\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"sxi\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"lknisac\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"qwpllpe\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"rBKaNrSZf\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"lUjeam\")",
                "output": "3"
            },
            {
                "input": "vowels_count(\"jOGDc\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"EftkljPHH\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"eqvenle\")",
                "output": "3"
            },
            {
                "input": "vowels_count(\"nnq\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"EVsqd\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"HsHUjl\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"orafghw\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"kue\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"LBRPmeox\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"ZZpBY\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"YUrSQAWp\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"htffm\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"Dlll\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"yxdkra\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"wplrjvkt\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"yHLp\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"TtGtnDI\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"bzdyyst\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"czkp\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"JRteFuBsm\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"yxnk\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"HksjnLrww\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"wftbmsp\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"wtkaaiog\")",
                "output": "4"
            },
            {
                "input": "vowels_count(\"wzlmdYJFQ\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"axf\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"chwi\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"UeGm\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"jxglz\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"knkdhm\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"pttuuh\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"xyichsbq\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"jcabto\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"DgxnzsbRN\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"fzsen\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"Jxfs\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"ezAsFRyO\")",
                "output": "3"
            },
            {
                "input": "vowels_count(\"WLKSXobNl\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"hlkaasqi\")",
                "output": "3"
            },
            {
                "input": "vowels_count(\"frw\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"ThZJJ\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"ryll\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"qkbZfvFfG\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"gqAOEgKW\")",
                "output": "3"
            },
            {
                "input": "vowels_count(\"VVdjTksh\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"dfe\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"hwlT\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"wkKhkykC\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"nouzf\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"vsup\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"bcrxedi\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"ofxgqm\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"QuzI\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"Rcr\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"xgyeq\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"jder\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"IpxQpEdED\")",
                "output": "3"
            },
            {
                "input": "vowels_count(\"xCpqwzZNO\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"lNjkjaQ\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"aprpbhbva\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"uisRpsKyZ\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"bctkur\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"nVTx\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"fuoa\")",
                "output": "3"
            },
            {
                "input": "vowels_count(\"bajxqza\")",
                "output": "2"
            },
            {
                "input": "vowels_count(\"dcsjaykkn\")",
                "output": "1"
            },
            {
                "input": "vowels_count(\"SvTf\")",
                "output": "0"
            },
            {
                "input": "vowels_count(\"YLisRX\")",
                "output": "1"
            }
        ]
    },
    {
        "problem_description": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
        "ground truth": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
        "instances": [
            {
                "input": "circular_shift(7, 5)",
                "output": "'7'"
            },
            {
                "input": "circular_shift(16, 7)",
                "output": "'61'"
            },
            {
                "input": "circular_shift(93, 12)",
                "output": "'39'"
            },
            {
                "input": "circular_shift(8, 105)",
                "output": "'8'"
            },
            {
                "input": "circular_shift(96, 4)",
                "output": "'69'"
            },
            {
                "input": "circular_shift(12, 100)",
                "output": "'21'"
            },
            {
                "input": "circular_shift(15, 2)",
                "output": "'15'"
            },
            {
                "input": "circular_shift(101, 3)",
                "output": "'101'"
            },
            {
                "input": "circular_shift(101, 7)",
                "output": "'101'"
            },
            {
                "input": "circular_shift(105, 6)",
                "output": "'501'"
            },
            {
                "input": "circular_shift(14, 3)",
                "output": "'41'"
            },
            {
                "input": "circular_shift(13, 104)",
                "output": "'31'"
            },
            {
                "input": "circular_shift(99, 3)",
                "output": "'99'"
            },
            {
                "input": "circular_shift(101, 5)",
                "output": "'101'"
            },
            {
                "input": "circular_shift(12, 1)",
                "output": "'21'"
            },
            {
                "input": "circular_shift(102, 7)",
                "output": "'201'"
            },
            {
                "input": "circular_shift(97, 11)",
                "output": "'79'"
            },
            {
                "input": "circular_shift(94, 8)",
                "output": "'49'"
            },
            {
                "input": "circular_shift(13, 6)",
                "output": "'31'"
            },
            {
                "input": "circular_shift(93, 13)",
                "output": "'39'"
            },
            {
                "input": "circular_shift(15, 3)",
                "output": "'51'"
            },
            {
                "input": "circular_shift(102, 6)",
                "output": "'201'"
            },
            {
                "input": "circular_shift(7, 106)",
                "output": "'7'"
            },
            {
                "input": "circular_shift(6, 96)",
                "output": "'6'"
            },
            {
                "input": "circular_shift(17, 2)",
                "output": "'17'"
            },
            {
                "input": "circular_shift(7, 4)",
                "output": "'7'"
            },
            {
                "input": "circular_shift(8, 97)",
                "output": "'8'"
            },
            {
                "input": "circular_shift(105, 1)",
                "output": "'510'"
            },
            {
                "input": "circular_shift(9, 1)",
                "output": "'9'"
            },
            {
                "input": "circular_shift(12, 3)",
                "output": "'21'"
            },
            {
                "input": "circular_shift(98, 6)",
                "output": "'89'"
            },
            {
                "input": "circular_shift(9, 97)",
                "output": "'9'"
            },
            {
                "input": "circular_shift(11, 99)",
                "output": "'11'"
            },
            {
                "input": "circular_shift(99, 11)",
                "output": "'99'"
            },
            {
                "input": "circular_shift(10, 97)",
                "output": "'01'"
            },
            {
                "input": "circular_shift(95, 7)",
                "output": "'59'"
            },
            {
                "input": "circular_shift(12, 105)",
                "output": "'21'"
            },
            {
                "input": "circular_shift(96, 10)",
                "output": "'69'"
            },
            {
                "input": "circular_shift(14, 2)",
                "output": "'14'"
            },
            {
                "input": "circular_shift(100, 5)",
                "output": "'001'"
            },
            {
                "input": "circular_shift(12, 5)",
                "output": "'21'"
            },
            {
                "input": "circular_shift(16, 98)",
                "output": "'61'"
            },
            {
                "input": "circular_shift(14, 4)",
                "output": "'41'"
            },
            {
                "input": "circular_shift(102, 2)",
                "output": "'021'"
            },
            {
                "input": "circular_shift(101, 4)",
                "output": "'101'"
            },
            {
                "input": "circular_shift(98, 3)",
                "output": "'89'"
            },
            {
                "input": "circular_shift(16, 96)",
                "output": "'61'"
            },
            {
                "input": "circular_shift(100, 2)",
                "output": "'001'"
            },
            {
                "input": "circular_shift(105, 2)",
                "output": "'051'"
            },
            {
                "input": "circular_shift(6, 97)",
                "output": "'6'"
            },
            {
                "input": "circular_shift(10, 6)",
                "output": "'01'"
            },
            {
                "input": "circular_shift(14, 6)",
                "output": "'41'"
            },
            {
                "input": "circular_shift(13, 101)",
                "output": "'31'"
            },
            {
                "input": "circular_shift(99, 4)",
                "output": "'99'"
            },
            {
                "input": "circular_shift(101, 13)",
                "output": "'101'"
            },
            {
                "input": "circular_shift(97, 3)",
                "output": "'79'"
            },
            {
                "input": "circular_shift(96, 9)",
                "output": "'69'"
            },
            {
                "input": "circular_shift(13, 1)",
                "output": "'31'"
            },
            {
                "input": "circular_shift(14, 102)",
                "output": "'41'"
            },
            {
                "input": "circular_shift(9, 4)",
                "output": "'9'"
            },
            {
                "input": "circular_shift(9, 101)",
                "output": "'9'"
            },
            {
                "input": "circular_shift(14, 7)",
                "output": "'41'"
            },
            {
                "input": "circular_shift(16, 3)",
                "output": "'61'"
            },
            {
                "input": "circular_shift(8, 7)",
                "output": "'8'"
            },
            {
                "input": "circular_shift(11, 7)",
                "output": "'11'"
            },
            {
                "input": "circular_shift(17, 6)",
                "output": "'71'"
            },
            {
                "input": "circular_shift(12, 4)",
                "output": "'21'"
            },
            {
                "input": "circular_shift(97, 9)",
                "output": "'79'"
            },
            {
                "input": "circular_shift(97, 2)",
                "output": "'97'"
            },
            {
                "input": "circular_shift(92, 5)",
                "output": "'29'"
            },
            {
                "input": "circular_shift(8, 1)",
                "output": "'8'"
            },
            {
                "input": "circular_shift(8, 2)",
                "output": "'8'"
            },
            {
                "input": "circular_shift(11, 2)",
                "output": "'11'"
            },
            {
                "input": "circular_shift(103, 6)",
                "output": "'301'"
            }
        ]
    },
    {
        "problem_description": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
        "ground truth": "def digitSum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
        "instances": [
            {
                "input": "digitSum(\"fh\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"CEL\")",
                "output": "212"
            },
            {
                "input": "digitSum(\"yoa\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"jw\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"EwQHkxceA\")",
                "output": "287"
            },
            {
                "input": "digitSum(\"UwNYt\")",
                "output": "252"
            },
            {
                "input": "digitSum(\"vTkrvqy~Go\")",
                "output": "155"
            },
            {
                "input": "digitSum(\"efPfM\")",
                "output": "157"
            },
            {
                "input": "digitSum(\"TlEyWf\")",
                "output": "240"
            },
            {
                "input": "digitSum(\"FYXx\")",
                "output": "247"
            },
            {
                "input": "digitSum(\"xXgcSe\")",
                "output": "171"
            },
            {
                "input": "digitSum(\"NWdyY\")",
                "output": "254"
            },
            {
                "input": "digitSum(\"XpdJ\")",
                "output": "162"
            },
            {
                "input": "digitSum(\"?wo&ZN|pXZ=wF\")",
                "output": "416"
            },
            {
                "input": "digitSum(\"eanJhjeU\")",
                "output": "159"
            },
            {
                "input": "digitSum(\"hjOOvh\")",
                "output": "158"
            },
            {
                "input": "digitSum(\"XQiEhzZn\")",
                "output": "328"
            },
            {
                "input": "digitSum(\"DVkhHIzC faN~_Tn?\")",
                "output": "528"
            },
            {
                "input": "digitSum(\"xgqhGuUX\")",
                "output": "244"
            },
            {
                "input": "digitSum(\"mnsrAj RsmjPO|&\")",
                "output": "306"
            },
            {
                "input": "digitSum(\"YASqCNUVI\")",
                "output": "626"
            },
            {
                "input": "digitSum(\"gUfkeP\")",
                "output": "165"
            },
            {
                "input": "digitSum(\"oPOrD\")",
                "output": "227"
            },
            {
                "input": "digitSum(\"e\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"gdKFFPfWM\")",
                "output": "459"
            },
            {
                "input": "digitSum(\"qbb\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"GHb\")",
                "output": "143"
            },
            {
                "input": "digitSum(\"oodz\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"tviw*zg*qqoxukbj\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"pOSrYv\")",
                "output": "251"
            },
            {
                "input": "digitSum(\"jsy\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"mBaa!/EII@fbZMCqhh\")",
                "output": "515"
            },
            {
                "input": "digitSum(\"EqDDxyNv\")",
                "output": "283"
            },
            {
                "input": "digitSum(\"BEUNDcwH\")",
                "output": "438"
            },
            {
                "input": "digitSum(\"z\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"ZGPBVWjc\")",
                "output": "480"
            },
            {
                "input": "digitSum(\"f*QSgjaR$F^\")",
                "output": "316"
            },
            {
                "input": "digitSum(\"woDYq\")",
                "output": "157"
            },
            {
                "input": "digitSum(\"jdXa\")",
                "output": "88"
            },
            {
                "input": "digitSum(\"SVWNmWyY:i\")",
                "output": "510"
            },
            {
                "input": "digitSum(\"FcnUrbtEbh\")",
                "output": "224"
            },
            {
                "input": "digitSum(\"FYNE\")",
                "output": "306"
            },
            {
                "input": "digitSum(\"mw\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"RprHOOFRUO\")",
                "output": "628"
            },
            {
                "input": "digitSum(\"SGFQQcgwq\")",
                "output": "386"
            },
            {
                "input": "digitSum(\"wCDmTioUZ\")",
                "output": "394"
            },
            {
                "input": "digitSum(\"aVUNV\")",
                "output": "335"
            },
            {
                "input": "digitSum(\"IlJsGGN\")",
                "output": "367"
            },
            {
                "input": "digitSum(\"CKhXCg\")",
                "output": "297"
            },
            {
                "input": "digitSum(\"Zew\")",
                "output": "90"
            },
            {
                "input": "digitSum(\"arvbqFw\")",
                "output": "70"
            },
            {
                "input": "digitSum(\"EhSBZR\")",
                "output": "390"
            },
            {
                "input": "digitSum(\"sqe\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"DequwqRRq\")",
                "output": "232"
            },
            {
                "input": "digitSum(\"mBOG\")",
                "output": "216"
            },
            {
                "input": "digitSum(\"vrXvrfnHgp\")",
                "output": "160"
            },
            {
                "input": "digitSum(\"IjxaRUDNKD\")",
                "output": "529"
            },
            {
                "input": "digitSum(\"rsiQXabiCaXw\")",
                "output": "324"
            },
            {
                "input": "digitSum(\"AMhnWFw//tT xW!@D\")",
                "output": "538"
            },
            {
                "input": "digitSum(\"oi\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"VsuDpc\")",
                "output": "154"
            },
            {
                "input": "digitSum(\"SMVzyF_V:/\")",
                "output": "402"
            },
            {
                "input": "digitSum(\"VOyVU\")",
                "output": "336"
            },
            {
                "input": "digitSum(\"ILYi\")",
                "output": "238"
            },
            {
                "input": "digitSum(\"YRuYlSl\")",
                "output": "343"
            },
            {
                "input": "digitSum(\"SbDPfIc\")",
                "output": "304"
            },
            {
                "input": "digitSum(\"KIgugrKVhf\")",
                "output": "309"
            },
            {
                "input": "digitSum(\"xoa\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"AZraZRpgg=+IO~=!d\")",
                "output": "479"
            },
            {
                "input": "digitSum(\"lVMxHfkfC\")",
                "output": "302"
            },
            {
                "input": "digitSum(\"VYtmw\")",
                "output": "175"
            },
            {
                "input": "digitSum(\"sGPvbJuRwR\")",
                "output": "389"
            },
            {
                "input": "digitSum(\"uiYvRTtFqh\")",
                "output": "325"
            },
            {
                "input": "digitSum(\"SlpsVikY\")",
                "output": "258"
            },
            {
                "input": "digitSum(\"zNjVlbJHdP\")",
                "output": "390"
            },
            {
                "input": "digitSum(\"gm\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"ldTHl\")",
                "output": "156"
            },
            {
                "input": "digitSum(\"wbo\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"SBEzmo\")",
                "output": "218"
            },
            {
                "input": "digitSum(\"DaXwt\")",
                "output": "156"
            },
            {
                "input": "digitSum(\"NrVBVvmFrmx\")",
                "output": "386"
            },
            {
                "input": "digitSum(\"n\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"ssKsK\")",
                "output": "150"
            },
            {
                "input": "digitSum(\"%q^rg /iW-*\")",
                "output": "87"
            },
            {
                "input": "digitSum(\"wOdlzmDPB\")",
                "output": "293"
            },
            {
                "input": "digitSum(\"NDi\")",
                "output": "146"
            },
            {
                "input": "digitSum(\"ccgEINzKxx\")",
                "output": "295"
            },
            {
                "input": "digitSum(\"sicZcHqr\")",
                "output": "162"
            },
            {
                "input": "digitSum(\"+UEmCV??yaK+pMp/^C\")",
                "output": "526"
            },
            {
                "input": "digitSum(\"CFAIsWb\")",
                "output": "362"
            },
            {
                "input": "digitSum(\"tIYEeRB\")",
                "output": "379"
            },
            {
                "input": "digitSum(\"GcLF\")",
                "output": "217"
            },
            {
                "input": "digitSum(\"dYpWa\")",
                "output": "176"
            },
            {
                "input": "digitSum(\"pkCuo\")",
                "output": "67"
            },
            {
                "input": "digitSum(\"FdB\")",
                "output": "136"
            },
            {
                "input": "digitSum(\"WlN\")",
                "output": "165"
            },
            {
                "input": "digitSum(\"VRvcAddACXCA\")",
                "output": "585"
            },
            {
                "input": "digitSum(\"hzp\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"uhmfZS\")",
                "output": "173"
            },
            {
                "input": "digitSum(\"kjs\")",
                "output": "0"
            },
            {
                "input": "digitSum(\"YyoGlqQt\")",
                "output": "241"
            },
            {
                "input": "digitSum(\"IgkN\")",
                "output": "151"
            },
            {
                "input": "digitSum(\"dcCIbm\")",
                "output": "140"
            },
            {
                "input": "digitSum(\"MJG@bRspAZS!\")",
                "output": "542"
            },
            {
                "input": "digitSum(\"fBh\")",
                "output": "66"
            }
        ]
    },
    {
        "problem_description": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
        "ground truth": "def fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
        "instances": [
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 177)",
                "output": "176"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 578)",
                "output": "577"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 640)",
                "output": "639"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 629)",
                "output": "624"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 952)",
                "output": "951"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 136)",
                "output": "135"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 991)",
                "output": "980"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 522)",
                "output": "517"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 888)",
                "output": "887"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 282)",
                "output": "277"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 83)",
                "output": "72"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 444)",
                "output": "443"
            },
            {
                "input": "fruit_distribution(\"1 apples and 100 oranges\",120)",
                "output": "19"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 945)",
                "output": "940"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 633)",
                "output": "622"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 669)",
                "output": "664"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 421)",
                "output": "420"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 285)",
                "output": "274"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 228)",
                "output": "227"
            },
            {
                "input": "fruit_distribution(\"2 apples and 3 oranges\",5)",
                "output": "0"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 794)",
                "output": "789"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 449)",
                "output": "444"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 861)",
                "output": "850"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 351)",
                "output": "346"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 230)",
                "output": "225"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 628)",
                "output": "623"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 740)",
                "output": "729"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 426)",
                "output": "415"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 124)",
                "output": "119"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 298)",
                "output": "293"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 302)",
                "output": "297"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 832)",
                "output": "831"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 193)",
                "output": "182"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 433)",
                "output": "428"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 738)",
                "output": "737"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 271)",
                "output": "260"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 595)",
                "output": "590"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 554)",
                "output": "543"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 477)",
                "output": "476"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 291)",
                "output": "290"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 197)",
                "output": "186"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 964)",
                "output": "963"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 894)",
                "output": "893"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 786)",
                "output": "781"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 409)",
                "output": "408"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 342)",
                "output": "337"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 415)",
                "output": "414"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 221)",
                "output": "210"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 771)",
                "output": "760"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 489)",
                "output": "484"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 640)",
                "output": "639"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 979)",
                "output": "968"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 723)",
                "output": "712"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 817)",
                "output": "806"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 261)",
                "output": "250"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 760)",
                "output": "759"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 231)",
                "output": "220"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 322)",
                "output": "317"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 553)",
                "output": "542"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 715)",
                "output": "710"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 604)",
                "output": "603"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 288)",
                "output": "283"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 204)",
                "output": "193"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 748)",
                "output": "747"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 95)",
                "output": "94"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 550)",
                "output": "545"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 24)",
                "output": "19"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 996)",
                "output": "985"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 839)",
                "output": "834"
            },
            {
                "input": "fruit_distribution(\"1 apples and 0 oranges\",3)",
                "output": "2"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 497)",
                "output": "486"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 103)",
                "output": "98"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 377)",
                "output": "376"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 659)",
                "output": "658"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 756)",
                "output": "751"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 274)",
                "output": "269"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 588)",
                "output": "583"
            },
            {
                "input": "fruit_distribution(\"5 apples and 6 oranges\",19)",
                "output": "8"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 869)",
                "output": "858"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 852)",
                "output": "851"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 185)",
                "output": "174"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 525)",
                "output": "520"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 733)",
                "output": "722"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 640)",
                "output": "629"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 574)",
                "output": "563"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 861)",
                "output": "860"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 767)",
                "output": "766"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 987)",
                "output": "976"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 588)",
                "output": "587"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 949)",
                "output": "944"
            },
            {
                "input": "fruit_distribution(\"0 apples and 1 oranges\",3)",
                "output": "2"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 491)",
                "output": "486"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 616)",
                "output": "605"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 244)",
                "output": "243"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 618)",
                "output": "617"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 899)",
                "output": "888"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 555)",
                "output": "554"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 150)",
                "output": "145"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 982)",
                "output": "971"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 270)",
                "output": "259"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 728)",
                "output": "717"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 390)",
                "output": "389"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 127)",
                "output": "126"
            },
            {
                "input": "fruit_distribution('0 apples and 1 oranges', 878)",
                "output": "877"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 283)",
                "output": "282"
            },
            {
                "input": "fruit_distribution(\"5 apples and 6 oranges\",21)",
                "output": "10"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 607)",
                "output": "602"
            },
            {
                "input": "fruit_distribution('1 apples and 0 oranges', 871)",
                "output": "870"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 269)",
                "output": "258"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 955)",
                "output": "944"
            },
            {
                "input": "fruit_distribution('5 apples and 6 oranges', 124)",
                "output": "113"
            },
            {
                "input": "fruit_distribution(\"2 apples and 3 oranges\",100)",
                "output": "95"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 758)",
                "output": "753"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 827)",
                "output": "822"
            },
            {
                "input": "fruit_distribution('2 apples and 3 oranges', 67)",
                "output": "62"
            }
        ]
    },
    {
        "problem_description": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
        "ground truth": "def pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
        "instances": [
            {
                "input": "pluck([2, 5, 7])",
                "output": "[2, 0]"
            },
            {
                "input": "pluck([5, 6, 4, 1, 12])",
                "output": "[4, 2]"
            },
            {
                "input": "pluck([8, 1, 12, 4, 4])",
                "output": "[4, 3]"
            },
            {
                "input": "pluck([6, 7, 2, 4, 5, 1])",
                "output": "[2, 2]"
            },
            {
                "input": "pluck([1, 5, 5])",
                "output": "[]"
            },
            {
                "input": "pluck([3, 5, 2, 5, 3, 2])",
                "output": "[2, 2]"
            },
            {
                "input": "pluck([12, 4, 12, 5])",
                "output": "[4, 1]"
            },
            {
                "input": "pluck([3, 1, 8, 4, 5, 5])",
                "output": "[4, 3]"
            },
            {
                "input": "pluck([7, 1, 5, 6, 13])",
                "output": "[6, 3]"
            },
            {
                "input": "pluck([7, 3, 12, 9, 13])",
                "output": "[12, 2]"
            },
            {
                "input": "pluck([7, 3, 1, 1, 3, 7])",
                "output": "[]"
            },
            {
                "input": "pluck([10, 6, 6, 3])",
                "output": "[6, 1]"
            },
            {
                "input": "pluck([3, 3, 1, 3, 2, 6])",
                "output": "[2, 4]"
            },
            {
                "input": "pluck([5, 1, 4, 4, 10, 5])",
                "output": "[4, 2]"
            },
            {
                "input": "pluck([4, 4, 3, 7, 12])",
                "output": "[4, 0]"
            },
            {
                "input": "pluck([6, 9, 9, 4, 10])",
                "output": "[4, 3]"
            },
            {
                "input": "pluck([2, 7, 6, 5, 3])",
                "output": "[2, 0]"
            },
            {
                "input": "pluck([9, 2, 12, 8, 6])",
                "output": "[2, 1]"
            },
            {
                "input": "pluck([5, 4, 8, 1])",
                "output": "[4, 1]"
            },
            {
                "input": "pluck([1, 4, 8])",
                "output": "[4, 1]"
            },
            {
                "input": "pluck([6, 4, 5])",
                "output": "[4, 1]"
            },
            {
                "input": "pluck([1, 1, 1])",
                "output": "[]"
            },
            {
                "input": "pluck([5, 9, 12, 1])",
                "output": "[12, 2]"
            },
            {
                "input": "pluck([7, 3, 9, 3, 8])",
                "output": "[8, 4]"
            },
            {
                "input": "pluck([7, 6, 1])",
                "output": "[6, 1]"
            },
            {
                "input": "pluck([1, 1, 7, 4, 3, 7])",
                "output": "[4, 3]"
            },
            {
                "input": "pluck([5, 4, 2, 1, 3, 4])",
                "output": "[2, 2]"
            },
            {
                "input": "pluck([4, 4, 6])",
                "output": "[4, 0]"
            },
            {
                "input": "pluck([3, 1, 1, 2, 1, 1])",
                "output": "[2, 3]"
            },
            {
                "input": "pluck([7, 7, 5])",
                "output": "[]"
            },
            {
                "input": "pluck([5, 7, 7, 5, 10, 7])",
                "output": "[10, 4]"
            },
            {
                "input": "pluck([10, 1, 4, 3, 4])",
                "output": "[4, 2]"
            },
            {
                "input": "pluck([3, 7, 6])",
                "output": "[6, 2]"
            },
            {
                "input": "pluck([2, 4, 2, 2, 7, 4])",
                "output": "[2, 0]"
            },
            {
                "input": "pluck([7, 6, 7])",
                "output": "[6, 1]"
            },
            {
                "input": "pluck([1, 3, 7, 2, 1, 3])",
                "output": "[2, 3]"
            },
            {
                "input": "pluck([4, 6, 5, 4, 4, 2])",
                "output": "[2, 5]"
            },
            {
                "input": "pluck([1, 3, 6])",
                "output": "[6, 2]"
            },
            {
                "input": "pluck([3, 1, 3, 3, 6, 4])",
                "output": "[4, 5]"
            },
            {
                "input": "pluck([9, 5, 2, 4, 9, 6])",
                "output": "[2, 2]"
            },
            {
                "input": "pluck([2, 5, 3, 1])",
                "output": "[2, 0]"
            },
            {
                "input": "pluck([5, 5, 2])",
                "output": "[2, 2]"
            },
            {
                "input": "pluck([5, 6, 8, 1, 5, 4])",
                "output": "[4, 5]"
            },
            {
                "input": "pluck([4, 1, 4, 3, 3, 6])",
                "output": "[4, 0]"
            },
            {
                "input": "pluck([8, 3, 2, 5])",
                "output": "[2, 2]"
            },
            {
                "input": "pluck([8, 1, 8])",
                "output": "[8, 0]"
            },
            {
                "input": "pluck([9, 10, 3, 3])",
                "output": "[10, 1]"
            },
            {
                "input": "pluck([2, 6, 9, 4, 8])",
                "output": "[2, 0]"
            },
            {
                "input": "pluck([1, 4, 4, 3, 5, 4])",
                "output": "[4, 1]"
            },
            {
                "input": "pluck([4, 2, 4])",
                "output": "[2, 1]"
            },
            {
                "input": "pluck([2, 3, 3])",
                "output": "[2, 0]"
            },
            {
                "input": "pluck([4, 3, 4])",
                "output": "[4, 0]"
            },
            {
                "input": "pluck([8, 2, 3, 1, 8, 3])",
                "output": "[2, 1]"
            },
            {
                "input": "pluck([5, 4, 5, 5, 6, 6])",
                "output": "[4, 1]"
            },
            {
                "input": "pluck([6, 4, 4, 4, 8, 6])",
                "output": "[4, 1]"
            },
            {
                "input": "pluck([7, 4, 6, 4, 7, 7])",
                "output": "[4, 1]"
            },
            {
                "input": "pluck([6, 7, 10, 8, 8])",
                "output": "[6, 0]"
            },
            {
                "input": "pluck([5, 1, 2, 1, 6, 6])",
                "output": "[2, 2]"
            },
            {
                "input": "pluck([9, 1, 3, 5, 8, 1])",
                "output": "[8, 4]"
            },
            {
                "input": "pluck([2, 2, 8])",
                "output": "[2, 0]"
            },
            {
                "input": "pluck([2, 4, 7])",
                "output": "[2, 0]"
            },
            {
                "input": "pluck([7, 1, 6])",
                "output": "[6, 2]"
            },
            {
                "input": "pluck([5, 1, 13, 2, 13])",
                "output": "[2, 3]"
            },
            {
                "input": "pluck([7, 6, 4])",
                "output": "[4, 2]"
            },
            {
                "input": "pluck([5, 7, 3])",
                "output": "[]"
            },
            {
                "input": "pluck([3, 2, 9, 6])",
                "output": "[2, 1]"
            },
            {
                "input": "pluck([2, 11, 10, 5])",
                "output": "[2, 0]"
            },
            {
                "input": "pluck([8, 6, 8])",
                "output": "[6, 1]"
            },
            {
                "input": "pluck([])",
                "output": "[]"
            },
            {
                "input": "pluck([12, 1, 12, 1])",
                "output": "[12, 0]"
            },
            {
                "input": "pluck([10, 5, 6, 3, 4, 2])",
                "output": "[2, 5]"
            },
            {
                "input": "pluck([1, 2, 4])",
                "output": "[2, 1]"
            },
            {
                "input": "pluck([5, 4, 1])",
                "output": "[4, 1]"
            },
            {
                "input": "pluck([2, 1, 3, 8, 4])",
                "output": "[2, 0]"
            },
            {
                "input": "pluck([10, 9, 6, 6])",
                "output": "[6, 2]"
            },
            {
                "input": "pluck([7, 5, 13, 4, 8])",
                "output": "[4, 3]"
            },
            {
                "input": "pluck([5, 3, 6])",
                "output": "[6, 2]"
            },
            {
                "input": "pluck([2, 4, 8])",
                "output": "[2, 0]"
            },
            {
                "input": "pluck([3, 11, 6, 5])",
                "output": "[6, 2]"
            },
            {
                "input": "pluck([6, 2, 6, 4, 8, 7])",
                "output": "[2, 1]"
            },
            {
                "input": "pluck([2, 1, 6])",
                "output": "[2, 0]"
            },
            {
                "input": "pluck([8, 11, 2, 2])",
                "output": "[2, 2]"
            },
            {
                "input": "pluck([7, 3, 4])",
                "output": "[4, 2]"
            },
            {
                "input": "pluck([4, 5, 8, 3, 9, 1])",
                "output": "[4, 0]"
            },
            {
                "input": "pluck([5, 1, 6, 2, 4, 1])",
                "output": "[2, 3]"
            },
            {
                "input": "pluck([2, 7, 8])",
                "output": "[2, 0]"
            },
            {
                "input": "pluck([11, 11, 3, 4])",
                "output": "[4, 3]"
            },
            {
                "input": "pluck([2, 8, 6, 5])",
                "output": "[2, 0]"
            },
            {
                "input": "pluck([7, 7, 8])",
                "output": "[8, 2]"
            },
            {
                "input": "pluck([6, 3, 3, 2, 8, 7])",
                "output": "[2, 3]"
            },
            {
                "input": "pluck([4, 6, 5, 2, 7, 1])",
                "output": "[2, 3]"
            }
        ]
    },
    {
        "problem_description": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
        "ground truth": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
        "instances": [
            {
                "input": "search([3, 11, 2, 3, 4, 12, 5, 5, 7, 10, 7, 3, 3, 7, 7, 7, 5, 12])",
                "output": "3"
            },
            {
                "input": "search([6, 4, 5, 6, 4, 2, 13, 5, 6, 1, 7])",
                "output": "1"
            },
            {
                "input": "search([3, 6, 8, 6])",
                "output": "-1"
            },
            {
                "input": "search([7, 7, 9, 6, 9, 2, 7, 12, 14, 10, 2, 11, 2])",
                "output": "2"
            },
            {
                "input": "search([4, 1, 4, 1, 4, 4])",
                "output": "4"
            },
            {
                "input": "search([1, 7, 1, 11, 4, 7, 1, 3, 2, 6, 5])",
                "output": "1"
            },
            {
                "input": "search([10, 9, 6, 10, 2, 7, 5, 10, 3, 2, 5, 13, 9, 5, 7, 5, 4, 5, 15, 2, 5, 1, 8])",
                "output": "5"
            },
            {
                "input": "search([1, 2])",
                "output": "1"
            },
            {
                "input": "search([1])",
                "output": "1"
            },
            {
                "input": "search([6, 3, 9, 9, 5])",
                "output": "-1"
            },
            {
                "input": "search([9, 1, 4, 1, 6, 6, 4, 2, 2, 6, 9, 12, 4, 14, 4, 6, 2, 4, 4, 2, 6, 6, 10, 10, 6, 2, 3, 14, 8, 6])",
                "output": "6"
            },
            {
                "input": "search([8, 8, 8, 8, 8, 8, 8, 8])",
                "output": "8"
            },
            {
                "input": "search([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8])",
                "output": "-1"
            },
            {
                "input": "search([8, 5, 4, 4, 10, 5, 8, 8])",
                "output": "-1"
            },
            {
                "input": "search([11, 6, 12, 12, 4, 3, 4, 4, 8, 2, 1, 1, 2, 13, 11, 6, 5, 11, 7, 11, 10, 11])",
                "output": "2"
            },
            {
                "input": "search([8, 2, 1, 7, 3, 4, 8, 4, 8, 8, 6, 14, 6, 8, 3, 2, 9, 10, 2, 9, 11])",
                "output": "2"
            },
            {
                "input": "search([6, 6, 6, 7, 3])",
                "output": "-1"
            },
            {
                "input": "search([3, 3])",
                "output": "-1"
            },
            {
                "input": "search([3, 9, 13, 13, 3, 12, 12, 2, 9, 4, 6, 15, 7, 5, 5, 6, 6, 11, 3, 15, 13, 1])",
                "output": "3"
            },
            {
                "input": "search([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5])",
                "output": "4"
            },
            {
                "input": "search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1])",
                "output": "1"
            },
            {
                "input": "search([5, 13, 5, 1, 6])",
                "output": "1"
            },
            {
                "input": "search([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6])",
                "output": "1"
            },
            {
                "input": "search([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10])",
                "output": "5"
            },
            {
                "input": "search([13, 6, 11, 9, 9, 7, 10, 11, 2, 7, 5, 9, 8, 2, 11, 2, 2, 1, 14, 6, 5, 4, 9])",
                "output": "2"
            },
            {
                "input": "search([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9])",
                "output": "1"
            },
            {
                "input": "search([7, 6, 5, 7, 4])",
                "output": "-1"
            },
            {
                "input": "search([9, 9, 5, 9, 6])",
                "output": "-1"
            },
            {
                "input": "search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2])",
                "output": "2"
            },
            {
                "input": "search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10])",
                "output": "2"
            },
            {
                "input": "search([9, 5, 6, 5, 1, 3, 13, 1, 6, 2, 8])",
                "output": "1"
            },
            {
                "input": "search([5, 10, 4, 9, 13, 7, 2, 3, 12, 10, 5, 6, 4, 6, 12, 7, 4, 11, 2, 9, 10, 2, 3, 12])",
                "output": "2"
            },
            {
                "input": "search([7, 8, 5, 7, 8, 10, 7])",
                "output": "-1"
            },
            {
                "input": "search([7, 10, 3, 12, 8, 2, 6, 1, 13, 1, 6, 10, 15, 2, 6, 5, 8, 2, 6, 8, 12])",
                "output": "2"
            },
            {
                "input": "search([2, 8, 10, 14, 7, 3, 1, 9, 13, 6, 7, 6, 3, 10, 9, 7, 5, 10, 6, 8, 3, 1])",
                "output": "3"
            },
            {
                "input": "search([3, 8, 8, 5, 2, 10, 4, 3, 9, 9, 6, 15, 10, 3, 8, 8, 9, 10, 2, 9, 10])",
                "output": "3"
            },
            {
                "input": "search([4, 1, 8, 5, 9, 9])",
                "output": "1"
            },
            {
                "input": "search([3])",
                "output": "-1"
            },
            {
                "input": "search([3, 5, 8, 4, 8, 10, 8, 3, 6, 12, 2, 3])",
                "output": "3"
            },
            {
                "input": "search([14, 1, 5, 6, 7, 3, 1, 1, 3, 7, 7, 2, 3, 6, 3, 6, 8, 1, 7, 4, 4, 12, 11, 3, 7, 4, 4, 8, 13, 5])",
                "output": "4"
            },
            {
                "input": "search([9, 4, 5, 1, 3, 3, 2])",
                "output": "1"
            },
            {
                "input": "search([12, 4, 5, 8, 1, 8, 5, 4, 8, 2, 5, 4, 3, 12, 4, 1, 8, 8, 6, 5, 5, 4])",
                "output": "5"
            },
            {
                "input": "search([1, 13, 12, 4, 5, 12, 8, 8, 10, 1, 5, 8, 2, 9, 15, 7, 10, 3, 10, 5, 12, 4, 1, 8])",
                "output": "1"
            },
            {
                "input": "search([8, 3])",
                "output": "-1"
            },
            {
                "input": "search([8, 5, 3, 10, 3, 7, 7, 7, 4, 5, 11, 10, 6, 8, 5, 2, 14, 12, 12, 7, 11])",
                "output": "-1"
            },
            {
                "input": "search([8])",
                "output": "-1"
            },
            {
                "input": "search([6, 5, 8, 1, 1, 9, 10, 11, 3, 6, 11, 7])",
                "output": "1"
            },
            {
                "input": "search([4, 4, 7, 7, 7, 10, 14, 5, 6, 13, 14, 4, 7, 7, 2, 1, 3, 1])",
                "output": "1"
            },
            {
                "input": "search([2, 1, 6, 1, 9, 12, 7, 11, 4, 9, 5, 2, 3, 7, 10, 9, 5, 3, 2, 1, 3, 14, 9])",
                "output": "3"
            },
            {
                "input": "search([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7])",
                "output": "4"
            },
            {
                "input": "search([3, 8, 9, 6, 5, 4, 14, 5, 7, 12, 10, 1])",
                "output": "1"
            },
            {
                "input": "search([4, 3, 7, 4, 4, 1])",
                "output": "1"
            },
            {
                "input": "search([4, 5, 8, 4, 4])",
                "output": "-1"
            },
            {
                "input": "search([7, 3, 3, 3, 7])",
                "output": "3"
            },
            {
                "input": "search([13])",
                "output": "-1"
            },
            {
                "input": "search([5, 5, 5, 5, 1])",
                "output": "1"
            },
            {
                "input": "search([5, 13, 8, 5, 6])",
                "output": "-1"
            },
            {
                "input": "search([7, 6, 7, 2, 5, 9])",
                "output": "-1"
            },
            {
                "input": "search([6, 8, 8, 1, 7])",
                "output": "1"
            },
            {
                "input": "search([10, 7, 9, 4, 7, 8, 10, 12, 4, 9, 4, 7, 5, 4, 11, 8, 6, 4, 14, 5, 1, 1, 2])",
                "output": "4"
            },
            {
                "input": "search([8, 8, 3, 6, 5, 6, 4])",
                "output": "-1"
            },
            {
                "input": "search([8, 10, 10, 12, 13, 11, 10, 12])",
                "output": "-1"
            },
            {
                "input": "search([4, 2])",
                "output": "-1"
            },
            {
                "input": "search([8, 7, 9, 9, 3, 4, 9, 5, 9, 10, 11, 10, 7, 11, 6, 7, 13, 5, 11, 5, 3, 8, 10, 7, 9])",
                "output": "-1"
            },
            {
                "input": "search([4, 6, 5, 2, 13, 8, 1, 5, 9, 7, 5, 5, 4, 2, 6, 12, 1, 5, 5, 7, 6, 14, 7])",
                "output": "5"
            },
            {
                "input": "search([12, 5, 4, 11, 2, 9, 4, 8, 11, 3, 5, 4, 5, 14, 8, 8, 3, 6, 11, 10, 4, 4])",
                "output": "4"
            },
            {
                "input": "search([6, 5, 8, 6, 3, 13, 3, 1, 1, 11, 8, 5, 6, 8, 5, 6, 7, 6])",
                "output": "1"
            },
            {
                "input": "search([6, 8, 1, 6, 12, 13, 10, 6, 2, 6, 6])",
                "output": "1"
            },
            {
                "input": "search([6])",
                "output": "-1"
            },
            {
                "input": "search([12])",
                "output": "-1"
            },
            {
                "input": "search([2, 10, 9, 12, 6, 8, 11, 3, 7, 13, 8, 8, 6, 11, 8, 1, 13, 1, 6, 4, 7, 12, 1, 8, 5])",
                "output": "1"
            },
            {
                "input": "search([6, 4, 6, 6, 1, 4, 2, 4, 5, 9, 10, 9, 9, 13, 12, 6, 6, 8, 13, 2, 6, 10, 6, 10, 4])",
                "output": "6"
            },
            {
                "input": "search([3, 3, 3, 7, 3])",
                "output": "3"
            },
            {
                "input": "search([8, 3, 15, 4, 3, 3, 5, 7, 10, 3, 5])",
                "output": "3"
            },
            {
                "input": "search([6, 12, 6, 3, 4])",
                "output": "-1"
            },
            {
                "input": "search([9, 8, 1, 5, 9, 3, 8])",
                "output": "1"
            },
            {
                "input": "search([11])",
                "output": "-1"
            },
            {
                "input": "search([10, 4, 7, 3, 8, 2, 2, 3, 10, 2, 9, 8, 7, 2, 9, 1, 8, 10, 6, 3, 8, 4, 2, 10])",
                "output": "3"
            },
            {
                "input": "search([6, 7, 14, 5, 6, 7, 4, 5, 6, 2, 3, 10, 4, 3, 10, 1, 3, 2, 9, 5, 3, 1, 7])",
                "output": "3"
            },
            {
                "input": "search([4, 12, 4, 10, 8, 3, 12, 4, 11, 3, 9, 5, 2, 4, 10, 5, 4, 4, 4, 10, 13, 1])",
                "output": "4"
            },
            {
                "input": "search([3, 13, 10, 12, 2, 4, 6, 1, 4, 6, 14, 5, 9, 5, 4, 5, 7, 1, 6, 4, 2, 7, 10, 4, 11])",
                "output": "4"
            },
            {
                "input": "search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3])",
                "output": "1"
            },
            {
                "input": "search([5])",
                "output": "-1"
            },
            {
                "input": "search([13, 10, 7, 5, 4, 10, 3, 13, 12, 9, 5, 9, 4])",
                "output": "-1"
            },
            {
                "input": "search([5, 4, 2, 5, 11, 13, 8, 3, 2, 7, 12])",
                "output": "2"
            },
            {
                "input": "search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10])",
                "output": "1"
            },
            {
                "input": "search([6, 8, 7, 12, 6, 10, 10, 1, 3, 11, 5, 8, 2, 3, 4, 4, 2, 10])",
                "output": "2"
            },
            {
                "input": "search([7, 4, 3, 6, 4, 5, 8, 8, 3, 11, 2, 7, 8, 8, 13, 9, 2, 2, 7, 6, 3, 10, 4])",
                "output": "3"
            },
            {
                "input": "search([14, 6, 8, 1, 2, 3, 6, 13, 10, 12, 1, 10, 6])",
                "output": "1"
            },
            {
                "input": "search([2, 4, 9, 5, 6, 13, 11, 3, 9, 11, 6, 15, 6, 8, 9, 7, 2, 7, 6, 12, 3, 3])",
                "output": "3"
            },
            {
                "input": "search([2, 3, 9, 3, 3, 11, 2, 6, 8, 12, 2, 11, 5, 2, 3, 7, 7, 4, 7, 2, 2, 14, 3])",
                "output": "3"
            },
            {
                "input": "search([13, 10, 5, 5, 1, 3, 14, 5, 9, 5, 13, 5, 11, 5, 3, 1, 3, 4])",
                "output": "5"
            },
            {
                "input": "search([6, 11, 3, 15, 5, 11, 6, 7, 6, 7, 5, 8, 6, 3, 7, 5, 8, 2])",
                "output": "-1"
            },
            {
                "input": "search([10, 7, 10, 7, 3, 5, 7, 7])",
                "output": "-1"
            },
            {
                "input": "search([6, 6, 4, 1, 4, 3, 9, 1, 5, 3, 9, 4, 6, 11, 3, 4, 7, 6, 7, 1, 3, 9, 6, 4, 12, 4, 8, 15, 12, 8])",
                "output": "4"
            },
            {
                "input": "search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8])",
                "output": "1"
            },
            {
                "input": "search([10, 6, 2, 2, 6, 4, 2, 2, 7, 4, 3, 11, 6, 15, 2, 10, 5, 4, 3, 4, 5, 5, 14, 9, 12, 7, 9, 5, 5, 8])",
                "output": "5"
            },
            {
                "input": "search([8, 5, 1, 11, 9, 11, 1, 13, 10, 2, 6])",
                "output": "1"
            },
            {
                "input": "search([13, 5, 9, 13, 4, 8, 10, 4, 9, 6, 10, 4, 13, 5, 5, 6, 7, 6])",
                "output": "-1"
            },
            {
                "input": "search([4, 15, 3, 12, 3, 8, 5, 5, 6, 6, 2, 6, 9, 5, 3, 8, 5, 9])",
                "output": "3"
            },
            {
                "input": "search([3, 10, 10, 9, 2])",
                "output": "-1"
            },
            {
                "input": "search([3, 10, 5, 1, 4, 14, 11, 8, 7, 13, 6, 4])",
                "output": "1"
            },
            {
                "input": "search([4, 5, 10, 1, 2])",
                "output": "1"
            },
            {
                "input": "search([7, 12, 12, 10, 1, 1, 7, 9, 3, 1, 7, 7, 2, 3, 13, 4, 1, 1, 11, 4, 3, 3, 3])",
                "output": "3"
            },
            {
                "input": "search([1, 9, 10, 1, 3])",
                "output": "1"
            },
            {
                "input": "search([7, 1, 8, 5, 1, 1, 7, 6, 5, 6, 8])",
                "output": "1"
            },
            {
                "input": "search([12, 5, 5, 7, 8, 8, 4])",
                "output": "-1"
            },
            {
                "input": "search([7, 4, 1, 4, 1])",
                "output": "1"
            },
            {
                "input": "search([10])",
                "output": "-1"
            },
            {
                "input": "search([6, 7, 3, 13, 7, 15, 8, 6, 3, 5, 6, 8, 7, 3, 12, 2, 8, 13])",
                "output": "3"
            },
            {
                "input": "search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1])",
                "output": "2"
            },
            {
                "input": "search([11, 2, 9, 6, 2, 8, 7, 15, 12, 11, 10, 7, 4])",
                "output": "2"
            },
            {
                "input": "search([6, 8, 9, 6, 13, 10, 4, 8, 8, 5, 8, 5, 3, 8, 6, 10, 4, 2, 6, 2, 2, 10, 8])",
                "output": "2"
            },
            {
                "input": "search([6, 3])",
                "output": "-1"
            },
            {
                "input": "search([4, 3, 9, 6])",
                "output": "-1"
            },
            {
                "input": "search([8, 3, 7, 7])",
                "output": "-1"
            },
            {
                "input": "search([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4])",
                "output": "4"
            },
            {
                "input": "search([7, 5, 13, 5])",
                "output": "-1"
            },
            {
                "input": "search([12, 7, 6, 9, 6, 5, 9, 6])",
                "output": "-1"
            },
            {
                "input": "search([6, 8, 9, 3, 1])",
                "output": "1"
            },
            {
                "input": "search([12, 11, 4, 12, 7, 1, 4, 5, 14, 6, 4, 4, 4, 12, 8, 1, 7, 10, 4, 9, 11, 1])",
                "output": "4"
            },
            {
                "input": "search([3, 4, 3, 1, 9, 6])",
                "output": "1"
            },
            {
                "input": "search([10, 9, 13, 3, 6, 3, 7, 4, 3, 4, 8])",
                "output": "3"
            },
            {
                "input": "search([14, 4, 8, 6, 1, 4, 7, 6, 10, 2, 6, 8, 7, 9, 1, 9, 4, 5, 8, 8, 6, 5, 10, 9, 12, 1, 4, 14, 10, 5])",
                "output": "4"
            },
            {
                "input": "search([8, 13, 3, 6, 10, 3, 13, 3])",
                "output": "3"
            },
            {
                "input": "search([5, 3, 7, 2])",
                "output": "-1"
            },
            {
                "input": "search([9, 7, 4, 4, 2, 6, 3, 9, 8, 6, 6, 10, 4])",
                "output": "-1"
            },
            {
                "input": "search([8, 13, 3, 13, 2, 10, 6, 5, 8, 7, 14, 6, 3, 1, 4, 5, 8, 5])",
                "output": "1"
            },
            {
                "input": "search([4, 5, 4, 4, 3, 6, 1, 5, 3, 8, 12, 13, 2, 6, 9, 6, 13, 11, 3, 4, 9, 9, 6, 6])",
                "output": "4"
            },
            {
                "input": "search([3, 2, 8, 2])",
                "output": "2"
            },
            {
                "input": "search([6, 4, 5, 14, 4, 10, 5, 6, 5, 10, 2, 5, 7, 3, 6, 2, 11, 8, 3, 10, 8])",
                "output": "2"
            },
            {
                "input": "search([1, 8, 6, 5, 7, 14, 8, 12, 6, 3, 12, 8])",
                "output": "1"
            },
            {
                "input": "search([1, 6, 12, 11, 8, 13, 3, 3, 10, 6, 4, 11, 2, 6, 9, 6, 1, 2, 4, 13, 3, 1])",
                "output": "3"
            },
            {
                "input": "search([3, 2, 3, 2, 7, 8])",
                "output": "2"
            },
            {
                "input": "search([11, 10, 2, 9, 4, 6, 4, 6, 10, 13, 4, 7, 6, 10, 11, 9, 9, 1, 12, 6, 6, 9, 5, 2, 11])",
                "output": "2"
            },
            {
                "input": "search([4, 8, 10, 5, 1])",
                "output": "1"
            },
            {
                "input": "search([9, 4, 6, 7, 11, 6, 1, 4, 3, 7, 5])",
                "output": "1"
            },
            {
                "input": "search([3, 9, 7, 8, 10, 10, 7])",
                "output": "-1"
            },
            {
                "input": "search([5, 10, 2, 9, 6, 9, 4, 7, 7, 10, 8, 7, 1, 11, 6, 7, 13, 9, 8, 4, 6, 6, 6, 7])",
                "output": "1"
            },
            {
                "input": "search([6, 12, 10, 7, 7, 12, 8, 7, 12, 11, 10, 10, 1, 3, 5, 9, 4, 3, 5, 12, 10, 2])",
                "output": "1"
            }
        ]
    },
    {
        "problem_description": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
        "ground truth": "def strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
        "instances": [
            {
                "input": "strange_sort_list([4, 5, 2, 2])",
                "output": "[2, 5, 2, 4]"
            },
            {
                "input": "strange_sort_list([1, 1, 1, 2, 1])",
                "output": "[1, 2, 1, 1, 1]"
            },
            {
                "input": "strange_sort_list([5, 9, 4, 2])",
                "output": "[2, 9, 4, 5]"
            },
            {
                "input": "strange_sort_list([6, 3, 1, 6, 10])",
                "output": "[1, 10, 3, 6, 6]"
            },
            {
                "input": "strange_sort_list([4, 3, 1, 6])",
                "output": "[1, 6, 3, 4]"
            },
            {
                "input": "strange_sort_list([5, 4, 2, 5, 12, 5])",
                "output": "[2, 12, 4, 5, 5, 5]"
            },
            {
                "input": "strange_sort_list([1, 2, 1, 3, 5, 8, -8, -4])",
                "output": "[-8, 8, -4, 5, 1, 3, 1, 2]"
            },
            {
                "input": "strange_sort_list([4, 9, 7, 9])",
                "output": "[4, 9, 7, 9]"
            },
            {
                "input": "strange_sort_list([1, 2, 3, 4])",
                "output": "[1, 4, 2, 3]"
            },
            {
                "input": "strange_sort_list([1, 1, 1, 5, 5, 9, -7, -8])",
                "output": "[-8, 9, -7, 5, 1, 5, 1, 1]"
            },
            {
                "input": "strange_sort_list([6, 4, 4, 8])",
                "output": "[4, 8, 4, 6]"
            },
            {
                "input": "strange_sort_list([6, 2, 5, 1])",
                "output": "[1, 6, 2, 5]"
            },
            {
                "input": "strange_sort_list([2, 4, 3, 4])",
                "output": "[2, 4, 3, 4]"
            },
            {
                "input": "strange_sort_list([5, 5, 5, 8, 14])",
                "output": "[5, 14, 5, 8, 5]"
            },
            {
                "input": "strange_sort_list([1, 5, 7, 3, 8, 6])",
                "output": "[1, 8, 3, 7, 5, 6]"
            },
            {
                "input": "strange_sort_list([5, 4, 5, 1, 7, 2, -3, -8])",
                "output": "[-8, 7, -3, 5, 1, 5, 2, 4]"
            },
            {
                "input": "strange_sort_list([3, 1, 3, 4])",
                "output": "[1, 4, 3, 3]"
            },
            {
                "input": "strange_sort_list([8, 9, 2, 8])",
                "output": "[2, 9, 8, 8]"
            },
            {
                "input": "strange_sort_list([3, 4, 3, 7, 9])",
                "output": "[3, 9, 3, 7, 4]"
            },
            {
                "input": "strange_sort_list([4, 8, 10, 4, 4])",
                "output": "[4, 10, 4, 8, 4]"
            },
            {
                "input": "strange_sort_list([4, 4, 5, 11, 8, 4])",
                "output": "[4, 11, 4, 8, 4, 5]"
            },
            {
                "input": "strange_sort_list([4, 10, 10, 4, 13])",
                "output": "[4, 13, 4, 10, 10]"
            },
            {
                "input": "strange_sort_list([3, 2, 3, 2])",
                "output": "[2, 3, 2, 3]"
            },
            {
                "input": "strange_sort_list([5, 1, 7, 2, 10, 7, 5, 5])",
                "output": "[1, 10, 2, 7, 5, 7, 5, 5]"
            },
            {
                "input": "strange_sort_list([9, 3, 9, 1])",
                "output": "[1, 9, 3, 9]"
            },
            {
                "input": "strange_sort_list([4, 4, 5, 1, 4])",
                "output": "[1, 5, 4, 4, 4]"
            },
            {
                "input": "strange_sort_list([])",
                "output": "[]"
            },
            {
                "input": "strange_sort_list([3, 5, 7, 8, 5])",
                "output": "[3, 8, 5, 7, 5]"
            },
            {
                "input": "strange_sort_list([1, 6, 6, 3])",
                "output": "[1, 6, 3, 6]"
            },
            {
                "input": "strange_sort_list([10, 11, 9, 6, 12])",
                "output": "[6, 12, 9, 11, 10]"
            },
            {
                "input": "strange_sort_list([2, 5, 3, 4, 9, 11, 2, 3])",
                "output": "[2, 11, 2, 9, 3, 5, 3, 4]"
            },
            {
                "input": "strange_sort_list([5, 1, 7, 5, 8])",
                "output": "[1, 8, 5, 7, 5]"
            },
            {
                "input": "strange_sort_list([7, 9, 2, 6, 4])",
                "output": "[2, 9, 4, 7, 6]"
            },
            {
                "input": "strange_sort_list([8, 6, 12, 4, 4, 4])",
                "output": "[4, 12, 4, 8, 4, 6]"
            },
            {
                "input": "strange_sort_list([3, 4, 3, 5, 7])",
                "output": "[3, 7, 3, 5, 4]"
            },
            {
                "input": "strange_sort_list([3, 2, 4, 9, 9, 6, 7, 4])",
                "output": "[2, 9, 3, 9, 4, 7, 4, 6]"
            },
            {
                "input": "strange_sort_list([10, 4, 7, 9])",
                "output": "[4, 10, 7, 9]"
            },
            {
                "input": "strange_sort_list([1, 3, 7, 3, 9, 11, 4, 6])",
                "output": "[1, 11, 3, 9, 3, 7, 4, 6]"
            },
            {
                "input": "strange_sort_list([3, 5, 2, 4, 3, 6, -3, 0])",
                "output": "[-3, 6, 0, 5, 2, 4, 3, 3]"
            },
            {
                "input": "strange_sort_list([4, 9, 6, 8, 11, 3])",
                "output": "[3, 11, 4, 9, 6, 8]"
            },
            {
                "input": "strange_sort_list([1, 4, 1, 4, 8])",
                "output": "[1, 8, 1, 4, 4]"
            },
            {
                "input": "strange_sort_list([1, 1, 6, 1, 4])",
                "output": "[1, 6, 1, 4, 1]"
            },
            {
                "input": "strange_sort_list([6, 7, 4, 5, 14, 5])",
                "output": "[4, 14, 5, 7, 5, 6]"
            },
            {
                "input": "strange_sort_list([2, 6, 4, 2, 9, 5, -1, -6])",
                "output": "[-6, 9, -1, 6, 2, 5, 2, 4]"
            },
            {
                "input": "strange_sort_list([7, 2, 5, 8, 7, 2])",
                "output": "[2, 8, 2, 7, 5, 7]"
            },
            {
                "input": "strange_sort_list([4, 7, 6, 6, 1, 4, -2, -5])",
                "output": "[-5, 7, -2, 6, 1, 6, 4, 4]"
            },
            {
                "input": "strange_sort_list([9, 3, 2, 5, 14])",
                "output": "[2, 14, 3, 9, 5]"
            },
            {
                "input": "strange_sort_list([8, 2, 9, 9])",
                "output": "[2, 9, 8, 9]"
            },
            {
                "input": "strange_sort_list([4, 6, 1, 1])",
                "output": "[1, 6, 1, 4]"
            },
            {
                "input": "strange_sort_list([6, 6, 2, 12, 13])",
                "output": "[2, 13, 6, 12, 6]"
            },
            {
                "input": "strange_sort_list([3, 4, 1, 7, 4, 6, 3, 12])",
                "output": "[1, 12, 3, 7, 3, 6, 4, 4]"
            },
            {
                "input": "strange_sort_list([1, 11, 9, 10, 9])",
                "output": "[1, 11, 9, 10, 9]"
            },
            {
                "input": "strange_sort_list([3, 1, 3, 4, 10, 3, 9, 5])",
                "output": "[1, 10, 3, 9, 3, 5, 3, 4]"
            },
            {
                "input": "strange_sort_list([7, 8, 12, 11, 11, 5])",
                "output": "[5, 12, 7, 11, 8, 11]"
            },
            {
                "input": "strange_sort_list([5, 6, 8, 1, 3, 1, 10, 5])",
                "output": "[1, 10, 1, 8, 3, 6, 5, 5]"
            },
            {
                "input": "strange_sort_list([8, 8, 8, 6, 12, 5])",
                "output": "[5, 12, 6, 8, 8, 8]"
            },
            {
                "input": "strange_sort_list([2, 3, 2, 2, 7, 7, 2, 7])",
                "output": "[2, 7, 2, 7, 2, 7, 2, 3]"
            },
            {
                "input": "strange_sort_list([1,2,3,4,5,6,7,8])",
                "output": "[1, 8, 2, 7, 3, 6, 4, 5]"
            },
            {
                "input": "strange_sort_list([3, 7, 1, 7, 4])",
                "output": "[1, 7, 3, 7, 4]"
            },
            {
                "input": "strange_sort_list([2, 2, 4, 4, 7, 4])",
                "output": "[2, 7, 2, 4, 4, 4]"
            },
            {
                "input": "strange_sort_list([1, 4, 5, 8])",
                "output": "[1, 8, 4, 5]"
            },
            {
                "input": "strange_sort_list([6, 2, 1, 4])",
                "output": "[1, 6, 2, 4]"
            },
            {
                "input": "strange_sort_list([5, 2, 7, 5, 2, 4, -3, -1])",
                "output": "[-3, 7, -1, 5, 2, 5, 2, 4]"
            },
            {
                "input": "strange_sort_list([6, 2, 7, 5])",
                "output": "[2, 7, 5, 6]"
            },
            {
                "input": "strange_sort_list([4, 2, 9, 6, 5, 1])",
                "output": "[1, 9, 2, 6, 4, 5]"
            },
            {
                "input": "strange_sort_list([2, 2, 4, 7, 2, 6, 6, 3])",
                "output": "[2, 7, 2, 6, 2, 6, 3, 4]"
            },
            {
                "input": "strange_sort_list([1, 6, 12, 6, 9, 6])",
                "output": "[1, 12, 6, 9, 6, 6]"
            },
            {
                "input": "strange_sort_list([1, 4, 6, 5, 10, 7, 5, 3])",
                "output": "[1, 10, 3, 7, 4, 6, 5, 5]"
            },
            {
                "input": "strange_sort_list([2, 2, 6, 8, 6])",
                "output": "[2, 8, 2, 6, 6]"
            },
            {
                "input": "strange_sort_list([2, 3, 6, 6])",
                "output": "[2, 6, 3, 6]"
            },
            {
                "input": "strange_sort_list([1, 1, 6, 7, 14])",
                "output": "[1, 14, 1, 7, 6]"
            },
            {
                "input": "strange_sort_list([7, 2, 6, 11, 10])",
                "output": "[2, 11, 6, 10, 7]"
            },
            {
                "input": "strange_sort_list([2, 1, 8, 9, 2, 4, 8, 6])",
                "output": "[1, 9, 2, 8, 2, 8, 4, 6]"
            },
            {
                "input": "strange_sort_list([5, 1, 6, 3, 2])",
                "output": "[1, 6, 2, 5, 3]"
            },
            {
                "input": "strange_sort_list([1, 7, 9, 11, 4])",
                "output": "[1, 11, 4, 9, 7]"
            },
            {
                "input": "strange_sort_list([4, 1, 8, 7, 9, 3, 12, 5])",
                "output": "[1, 12, 3, 9, 4, 8, 5, 7]"
            },
            {
                "input": "strange_sort_list([1, 2, 7, 3])",
                "output": "[1, 7, 2, 3]"
            },
            {
                "input": "strange_sort_list([0,2,2,2,5,5,-5,-5])",
                "output": "[-5, 5, -5, 5, 0, 2, 2, 2]"
            },
            {
                "input": "strange_sort_list([1, 1, 3, 6, 3, 10, -6, -1])",
                "output": "[-6, 10, -1, 6, 1, 3, 1, 3]"
            },
            {
                "input": "strange_sort_list([5, 6, 6, 9])",
                "output": "[5, 9, 6, 6]"
            },
            {
                "input": "strange_sort_list([4, 4, 8, 8])",
                "output": "[4, 8, 4, 8]"
            },
            {
                "input": "strange_sort_list([3, 1, 3, 6, 3, 10, 7, 13])",
                "output": "[1, 13, 3, 10, 3, 7, 3, 6]"
            },
            {
                "input": "strange_sort_list([5, 5, 5, 6, 2])",
                "output": "[2, 6, 5, 5, 5]"
            },
            {
                "input": "strange_sort_list([1, 3, 5, 4, 9, 1, -9, -10])",
                "output": "[-10, 9, -9, 5, 1, 4, 1, 3]"
            },
            {
                "input": "strange_sort_list([7, 4, 2, 4, 14, 5])",
                "output": "[2, 14, 4, 7, 4, 5]"
            },
            {
                "input": "strange_sort_list([5, 6, 7, 8, 9])",
                "output": "[5, 9, 6, 8, 7]"
            },
            {
                "input": "strange_sort_list([8, 4, 9, 7])",
                "output": "[4, 9, 7, 8]"
            },
            {
                "input": "strange_sort_list([10, 7, 5, 3])",
                "output": "[3, 10, 5, 7]"
            },
            {
                "input": "strange_sort_list([4, 7, 7, 1, 10, 3, 0, -6])",
                "output": "[-6, 10, 0, 7, 1, 7, 3, 4]"
            },
            {
                "input": "strange_sort_list([9, 3, 5, 7])",
                "output": "[3, 9, 5, 7]"
            },
            {
                "input": "strange_sort_list([2, 3, 7, 5, 4, 10, -6, -9])",
                "output": "[-9, 10, -6, 7, 2, 5, 3, 4]"
            },
            {
                "input": "strange_sort_list([7, 1, 4, 13, 10])",
                "output": "[1, 13, 4, 10, 7]"
            },
            {
                "input": "strange_sort_list([9, 8, 5, 2])",
                "output": "[2, 9, 5, 8]"
            },
            {
                "input": "strange_sort_list([2, 3, 6, 3, 8, 3, 7, 4])",
                "output": "[2, 8, 3, 7, 3, 6, 3, 4]"
            },
            {
                "input": "strange_sort_list([5, 5, 5, 5])",
                "output": "[5, 5, 5, 5]"
            },
            {
                "input": "strange_sort_list([8, 3, 9, 5, 5])",
                "output": "[3, 9, 5, 8, 5]"
            },
            {
                "input": "strange_sort_list([6, 2, 5, 5])",
                "output": "[2, 6, 5, 5]"
            },
            {
                "input": "strange_sort_list([2, 7, 12, 13, 8, 2])",
                "output": "[2, 13, 2, 12, 7, 8]"
            },
            {
                "input": "strange_sort_list([5, 2, 2, 1])",
                "output": "[1, 5, 2, 2]"
            },
            {
                "input": "strange_sort_list([5, 6, 7, 8, 9, 1])",
                "output": "[1, 9, 5, 8, 6, 7]"
            },
            {
                "input": "strange_sort_list([1, 6, 5, 7, 3, 2, -7, -6])",
                "output": "[-7, 7, -6, 6, 1, 5, 2, 3]"
            },
            {
                "input": "strange_sort_list([4, 6, 4, 7, 7, 3, -1, -7])",
                "output": "[-7, 7, -1, 7, 3, 6, 4, 4]"
            },
            {
                "input": "strange_sort_list([1, 2, 3, 4, 5])",
                "output": "[1, 5, 2, 4, 3]"
            },
            {
                "input": "strange_sort_list([5, 6, 4, 6, 6])",
                "output": "[4, 6, 5, 6, 6]"
            },
            {
                "input": "strange_sort_list([10, 10, 2, 11, 10])",
                "output": "[2, 11, 10, 10, 10]"
            },
            {
                "input": "strange_sort_list([2, 2, 5, 6, 6, 10, -4, -6])",
                "output": "[-6, 10, -4, 6, 2, 6, 2, 5]"
            }
        ]
    },
    {
        "problem_description": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
        "ground truth": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
        "instances": [
            {
                "input": "triangle_area(4, 7, 7)",
                "output": "13.42"
            },
            {
                "input": "triangle_area(1, 12, 1)",
                "output": "-1"
            },
            {
                "input": "triangle_area(7, 5, 4)",
                "output": "9.8"
            },
            {
                "input": "triangle_area(1, 11, 5)",
                "output": "-1"
            },
            {
                "input": "triangle_area(5, 6, 7)",
                "output": "14.7"
            },
            {
                "input": "triangle_area(1, 2, 2)",
                "output": "0.97"
            },
            {
                "input": "triangle_area(3, 4, 5)",
                "output": "6.00"
            },
            {
                "input": "triangle_area(3, 8, 5)",
                "output": "-1"
            },
            {
                "input": "triangle_area(2, 4, 3)",
                "output": "2.9"
            },
            {
                "input": "triangle_area(3, 5, 6)",
                "output": "7.48"
            },
            {
                "input": "triangle_area(5, 5, 2)",
                "output": "4.9"
            },
            {
                "input": "triangle_area(2, 2, 10)",
                "output": "-1"
            },
            {
                "input": "triangle_area(2, 3, 6)",
                "output": "-1"
            },
            {
                "input": "triangle_area(2, 3, 3)",
                "output": "2.83"
            },
            {
                "input": "triangle_area(6, 6, 3)",
                "output": "8.71"
            },
            {
                "input": "triangle_area(6, 8, 7)",
                "output": "20.33"
            },
            {
                "input": "triangle_area(4, 3, 3)",
                "output": "4.47"
            },
            {
                "input": "triangle_area(4, 3, 6)",
                "output": "5.33"
            },
            {
                "input": "triangle_area(7, 1, 4)",
                "output": "-1"
            },
            {
                "input": "triangle_area(4, 10, 9)",
                "output": "17.98"
            },
            {
                "input": "triangle_area(2, 1, 2)",
                "output": "0.97"
            },
            {
                "input": "triangle_area(4, 2, 1)",
                "output": "-1"
            },
            {
                "input": "triangle_area(2, 6, 8)",
                "output": "-1"
            },
            {
                "input": "triangle_area(6, 7, 8)",
                "output": "20.33"
            },
            {
                "input": "triangle_area(2, 2, 2)",
                "output": "1.73"
            },
            {
                "input": "triangle_area(12, 4, 9)",
                "output": "13.64"
            },
            {
                "input": "triangle_area(4, 3, 7)",
                "output": "-1"
            },
            {
                "input": "triangle_area(4, 3, 1)",
                "output": "-1"
            },
            {
                "input": "triangle_area(4, 7, 6)",
                "output": "11.98"
            },
            {
                "input": "triangle_area(3, 1, 3)",
                "output": "1.48"
            },
            {
                "input": "triangle_area(3, 7, 9)",
                "output": "8.79"
            },
            {
                "input": "triangle_area(10, 2, 2)",
                "output": "-1"
            },
            {
                "input": "triangle_area(11, 6, 3)",
                "output": "-1"
            },
            {
                "input": "triangle_area(4, 7, 9)",
                "output": "13.42"
            },
            {
                "input": "triangle_area(2, 3, 9)",
                "output": "-1"
            },
            {
                "input": "triangle_area(2, 7, 3)",
                "output": "-1"
            },
            {
                "input": "triangle_area(2, 3, 8)",
                "output": "-1"
            },
            {
                "input": "triangle_area(5, 1, 6)",
                "output": "-1"
            },
            {
                "input": "triangle_area(4, 6, 1)",
                "output": "-1"
            },
            {
                "input": "triangle_area(4, 2, 6)",
                "output": "-1"
            },
            {
                "input": "triangle_area(3, 1, 7)",
                "output": "-1"
            },
            {
                "input": "triangle_area(5, 2, 10)",
                "output": "-1"
            },
            {
                "input": "triangle_area(9, 12, 1)",
                "output": "-1"
            },
            {
                "input": "triangle_area(10, 5, 7)",
                "output": "16.25"
            },
            {
                "input": "triangle_area(4, 7, 15)",
                "output": "-1"
            },
            {
                "input": "triangle_area(6, 3, 2)",
                "output": "-1"
            },
            {
                "input": "triangle_area(9, 10, 4)",
                "output": "17.98"
            },
            {
                "input": "triangle_area(1, 5, 11)",
                "output": "-1"
            },
            {
                "input": "triangle_area(1, 5, 8)",
                "output": "-1"
            },
            {
                "input": "triangle_area(4, 3, 4)",
                "output": "5.56"
            },
            {
                "input": "triangle_area(8, 6, 11)",
                "output": "23.42"
            },
            {
                "input": "triangle_area(2, 7, 7)",
                "output": "6.93"
            },
            {
                "input": "triangle_area(4, 6, 4)",
                "output": "7.94"
            },
            {
                "input": "triangle_area(3, 6, 15)",
                "output": "-1"
            },
            {
                "input": "triangle_area(9, 9, 1)",
                "output": "4.49"
            },
            {
                "input": "triangle_area(1, 4, 6)",
                "output": "-1"
            },
            {
                "input": "triangle_area(3, 7, 3)",
                "output": "-1"
            },
            {
                "input": "triangle_area(1, 2, 10)",
                "output": "-1"
            },
            {
                "input": "triangle_area(1, 4, 5)",
                "output": "-1"
            },
            {
                "input": "triangle_area(9, 9, 2)",
                "output": "8.94"
            },
            {
                "input": "triangle_area(5, 8, 5)",
                "output": "12.0"
            },
            {
                "input": "triangle_area(1, 1, 1)",
                "output": "0.43"
            },
            {
                "input": "triangle_area(7, 6, 5)",
                "output": "14.7"
            },
            {
                "input": "triangle_area(3, 4, 10)",
                "output": "-1"
            },
            {
                "input": "triangle_area(2, 6, 9)",
                "output": "-1"
            },
            {
                "input": "triangle_area(6, 6, 2)",
                "output": "5.92"
            },
            {
                "input": "triangle_area(4, 2, 5)",
                "output": "3.8"
            },
            {
                "input": "triangle_area(6, 3, 5)",
                "output": "7.48"
            },
            {
                "input": "triangle_area(7, 5, 6)",
                "output": "14.7"
            },
            {
                "input": "triangle_area(1, 1, 5)",
                "output": "-1"
            },
            {
                "input": "triangle_area(5, 11, 2)",
                "output": "-1"
            },
            {
                "input": "triangle_area(6, 7, 12)",
                "output": "14.95"
            },
            {
                "input": "triangle_area(2, 1, 3)",
                "output": "-1"
            },
            {
                "input": "triangle_area(3, 7, 1)",
                "output": "-1"
            },
            {
                "input": "triangle_area(7, 1, 6)",
                "output": "-1"
            },
            {
                "input": "triangle_area(3, 7, 13)",
                "output": "-1"
            },
            {
                "input": "triangle_area(13, 4, 10)",
                "output": "14.98"
            },
            {
                "input": "triangle_area(6, 5, 3)",
                "output": "7.48"
            },
            {
                "input": "triangle_area(2, 2, 8)",
                "output": "-1"
            },
            {
                "input": "triangle_area(2, 9, 3)",
                "output": "-1"
            },
            {
                "input": "triangle_area(1, 1, 7)",
                "output": "-1"
            },
            {
                "input": "triangle_area(1, 5, 2)",
                "output": "-1"
            },
            {
                "input": "triangle_area(1, 7, 11)",
                "output": "-1"
            },
            {
                "input": "triangle_area(4, 6, 2)",
                "output": "-1"
            },
            {
                "input": "triangle_area(5, 4, 6)",
                "output": "9.92"
            },
            {
                "input": "triangle_area(4, 2, 9)",
                "output": "-1"
            },
            {
                "input": "triangle_area(8, 3, 5)",
                "output": "-1"
            },
            {
                "input": "triangle_area(5, 5, 6)",
                "output": "12.0"
            },
            {
                "input": "triangle_area(2, 3, 5)",
                "output": "-1"
            },
            {
                "input": "triangle_area(3, 4, 6)",
                "output": "5.33"
            },
            {
                "input": "triangle_area(6, 10, 10)",
                "output": "28.62"
            },
            {
                "input": "triangle_area(7, 3, 6)",
                "output": "8.94"
            },
            {
                "input": "triangle_area(4, 2, 2)",
                "output": "-1"
            },
            {
                "input": "triangle_area(1, 12, 6)",
                "output": "-1"
            },
            {
                "input": "triangle_area(6, 3, 4)",
                "output": "5.33"
            },
            {
                "input": "triangle_area(3, 2, 9)",
                "output": "-1"
            },
            {
                "input": "triangle_area(1, 2, 11)",
                "output": "-1"
            },
            {
                "input": "triangle_area(6, 4, 4)",
                "output": "7.94"
            },
            {
                "input": "triangle_area(3, 1, 2)",
                "output": "-1"
            },
            {
                "input": "triangle_area(1, 4, 10)",
                "output": "-1"
            },
            {
                "input": "triangle_area(2, 6, 1)",
                "output": "-1"
            },
            {
                "input": "triangle_area(1, 3, 6)",
                "output": "-1"
            },
            {
                "input": "triangle_area(1, 2, 3)",
                "output": "-1"
            },
            {
                "input": "triangle_area(3, 6, 7)",
                "output": "8.94"
            },
            {
                "input": "triangle_area(5, 6, 3)",
                "output": "7.48"
            },
            {
                "input": "triangle_area(2, 4, 7)",
                "output": "-1"
            },
            {
                "input": "triangle_area(7, 8, 5)",
                "output": "17.32"
            },
            {
                "input": "triangle_area(6, 5, 5)",
                "output": "12.0"
            },
            {
                "input": "triangle_area(4, 8, 5)",
                "output": "8.18"
            },
            {
                "input": "triangle_area(1, 5, 3)",
                "output": "-1"
            },
            {
                "input": "triangle_area(6, 1, 6)",
                "output": "2.99"
            },
            {
                "input": "triangle_area(15, 4, 7)",
                "output": "-1"
            },
            {
                "input": "triangle_area(3, 3, 3)",
                "output": "3.9"
            }
        ]
    },
    {
        "problem_description": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
        "ground truth": "def will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
        "instances": [
            {
                "input": "will_it_fly([8, 6, 6], 6)",
                "output": "False"
            },
            {
                "input": "will_it_fly([2, 4], 6)",
                "output": "False"
            },
            {
                "input": "will_it_fly([6, 3, 5], 2)",
                "output": "False"
            },
            {
                "input": "will_it_fly([1, 4], 4)",
                "output": "False"
            },
            {
                "input": "will_it_fly([4, 3, 6], 3)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 3, 6], 8)",
                "output": "False"
            },
            {
                "input": "will_it_fly([6, 3, 1], 8)",
                "output": "False"
            },
            {
                "input": "will_it_fly([7, 5, 6], 14)",
                "output": "False"
            },
            {
                "input": "will_it_fly([1, 5], 4)",
                "output": "False"
            },
            {
                "input": "will_it_fly([1, 1, 2], 1)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 2, 6], 4)",
                "output": "False"
            },
            {
                "input": "will_it_fly([2, 7], 1)",
                "output": "False"
            },
            {
                "input": "will_it_fly([1, 2, 3], 6)",
                "output": "False"
            },
            {
                "input": "will_it_fly([5, 4], 4)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 1, 1], 2)",
                "output": "False"
            },
            {
                "input": "will_it_fly([2, 1, 3], 2)",
                "output": "False"
            },
            {
                "input": "will_it_fly([2, 7], 9)",
                "output": "False"
            },
            {
                "input": "will_it_fly([4, 3, 3], 2)",
                "output": "False"
            },
            {
                "input": "will_it_fly([5], 7)",
                "output": "True"
            },
            {
                "input": "will_it_fly([1, 2], 5)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 3, 3], 5)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 7, 2], 6)",
                "output": "False"
            },
            {
                "input": "will_it_fly([1], 5)",
                "output": "True"
            },
            {
                "input": "will_it_fly([2, 4, 7], 14)",
                "output": "False"
            },
            {
                "input": "will_it_fly([2], 3)",
                "output": "True"
            },
            {
                "input": "will_it_fly([1, 3, 3], 8)",
                "output": "False"
            },
            {
                "input": "will_it_fly([7], 3)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 2, 3], 1)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 3], 9)",
                "output": "True"
            },
            {
                "input": "will_it_fly([6, 1], 5)",
                "output": "False"
            },
            {
                "input": "will_it_fly([2, 5], 6)",
                "output": "False"
            },
            {
                "input": "will_it_fly([1], 8)",
                "output": "True"
            },
            {
                "input": "will_it_fly([1, 3, 6], 6)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3], 5)",
                "output": "True"
            },
            {
                "input": "will_it_fly([1, 2, 7], 3)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 3, 4], 2)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 3, 7], 4)",
                "output": "False"
            },
            {
                "input": "will_it_fly([7, 6, 7], 6)",
                "output": "False"
            },
            {
                "input": "will_it_fly([6, 7], 6)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 2, 8], 4)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 3, 4], 7)",
                "output": "False"
            },
            {
                "input": "will_it_fly([7], 9)",
                "output": "True"
            },
            {
                "input": "will_it_fly([2, 5, 6], 5)",
                "output": "False"
            },
            {
                "input": "will_it_fly([5, 4, 5], 5)",
                "output": "False"
            },
            {
                "input": "will_it_fly([7], 2)",
                "output": "False"
            },
            {
                "input": "will_it_fly([4, 5, 8], 9)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 5, 3], 1)",
                "output": "False"
            },
            {
                "input": "will_it_fly([2, 2, 2], 5)",
                "output": "False"
            },
            {
                "input": "will_it_fly([4, 7, 1], 2)",
                "output": "False"
            },
            {
                "input": "will_it_fly([5, 5], 1)",
                "output": "False"
            },
            {
                "input": "will_it_fly([5, 1, 4], 7)",
                "output": "False"
            },
            {
                "input": "will_it_fly([2, 1, 4], 3)",
                "output": "False"
            },
            {
                "input": "will_it_fly([5, 7, 1], 9)",
                "output": "False"
            },
            {
                "input": "will_it_fly([6], 10)",
                "output": "True"
            },
            {
                "input": "will_it_fly([6, 2], 10)",
                "output": "False"
            },
            {
                "input": "will_it_fly([2, 4, 8], 3)",
                "output": "False"
            },
            {
                "input": "will_it_fly([1, 1, 8], 7)",
                "output": "False"
            },
            {
                "input": "will_it_fly([5, 6], 9)",
                "output": "False"
            },
            {
                "input": "will_it_fly([1, 2, 7], 2)",
                "output": "False"
            },
            {
                "input": "will_it_fly([7, 2, 5], 8)",
                "output": "False"
            },
            {
                "input": "will_it_fly([5, 5, 2], 8)",
                "output": "False"
            },
            {
                "input": "will_it_fly([5], 5)",
                "output": "True"
            },
            {
                "input": "will_it_fly([3, 2], 3)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 7, 7], 6)",
                "output": "False"
            },
            {
                "input": "will_it_fly([2, 4, 4], 9)",
                "output": "False"
            },
            {
                "input": "will_it_fly([5, 3], 10)",
                "output": "False"
            },
            {
                "input": "will_it_fly([5, 4, 3], 3)",
                "output": "False"
            },
            {
                "input": "will_it_fly([2, 6, 4], 8)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 3], 3)",
                "output": "False"
            },
            {
                "input": "will_it_fly([4, 5, 7], 8)",
                "output": "False"
            },
            {
                "input": "will_it_fly([2, 5], 4)",
                "output": "False"
            },
            {
                "input": "will_it_fly([4], 2)",
                "output": "False"
            },
            {
                "input": "will_it_fly([7, 7, 2], 7)",
                "output": "False"
            },
            {
                "input": "will_it_fly([5, 5], 10)",
                "output": "True"
            },
            {
                "input": "will_it_fly([4, 4, 2], 4)",
                "output": "False"
            },
            {
                "input": "will_it_fly([8], 1)",
                "output": "False"
            },
            {
                "input": "will_it_fly([7], 7)",
                "output": "True"
            },
            {
                "input": "will_it_fly([3], 3)",
                "output": "True"
            },
            {
                "input": "will_it_fly([4, 1, 1], 14)",
                "output": "False"
            },
            {
                "input": "will_it_fly([1, 2, 1], 8)",
                "output": "True"
            },
            {
                "input": "will_it_fly([2, 7, 7], 7)",
                "output": "False"
            },
            {
                "input": "will_it_fly([7, 4, 8], 7)",
                "output": "False"
            },
            {
                "input": "will_it_fly([1], 10)",
                "output": "True"
            },
            {
                "input": "will_it_fly([5, 5, 7], 10)",
                "output": "False"
            },
            {
                "input": "will_it_fly([8, 6, 4], 12)",
                "output": "False"
            },
            {
                "input": "will_it_fly([2, 2, 5], 12)",
                "output": "False"
            },
            {
                "input": "will_it_fly([1, 1], 7)",
                "output": "True"
            },
            {
                "input": "will_it_fly([6], 1)",
                "output": "False"
            },
            {
                "input": "will_it_fly([4], 1)",
                "output": "False"
            },
            {
                "input": "will_it_fly([7, 5, 5], 3)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3], 1)",
                "output": "False"
            },
            {
                "input": "will_it_fly([5, 4, 2], 11)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 5, 3], 2)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3], 6)",
                "output": "True"
            },
            {
                "input": "will_it_fly([2, 1, 7], 2)",
                "output": "False"
            },
            {
                "input": "will_it_fly([5, 7, 6], 1)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 5], 1)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 6, 3], 5)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 2, 3], 9)",
                "output": "True"
            },
            {
                "input": "will_it_fly([5, 4, 5], 3)",
                "output": "False"
            },
            {
                "input": "will_it_fly([2, 6, 5], 6)",
                "output": "False"
            },
            {
                "input": "will_it_fly([1, 6, 8], 4)",
                "output": "False"
            },
            {
                "input": "will_it_fly([3, 1, 2], 1)",
                "output": "False"
            }
        ]
    },
    {
        "problem_description": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
        "ground truth": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
        "instances": [
            {
                "input": "smallest_change([3, 5, 4, 7])",
                "output": "2"
            },
            {
                "input": "smallest_change([5, 2, 5, 5])",
                "output": "1"
            },
            {
                "input": "smallest_change([6, 4, 5, 1, 5])",
                "output": "2"
            },
            {
                "input": "smallest_change([3])",
                "output": "0"
            },
            {
                "input": "smallest_change([4, 6, 7, 1, 1])",
                "output": "2"
            },
            {
                "input": "smallest_change([6, 6, 8, 4, 5, 5, 5])",
                "output": "3"
            },
            {
                "input": "smallest_change([4, 1, 4, 3])",
                "output": "2"
            },
            {
                "input": "smallest_change([4, 8, 6])",
                "output": "1"
            },
            {
                "input": "smallest_change([6, 1, 3, 3, 1])",
                "output": "2"
            },
            {
                "input": "smallest_change([6, 4, 1, 4, 2, 2, 4])",
                "output": "3"
            },
            {
                "input": "smallest_change([1, 2, 3, 2, 1])",
                "output": "0"
            },
            {
                "input": "smallest_change([1, 1, 8, 4, 2, 6, 3])",
                "output": "3"
            },
            {
                "input": "smallest_change([2, 2, 7, 3, 8, 7, 4, 8])",
                "output": "3"
            },
            {
                "input": "smallest_change([2, 7, 6, 7])",
                "output": "2"
            },
            {
                "input": "smallest_change([1, 4, 6, 4, 8, 6, 9, 6])",
                "output": "3"
            },
            {
                "input": "smallest_change([1, 5, 4, 2, 6])",
                "output": "2"
            },
            {
                "input": "smallest_change([2, 3, 4, 3])",
                "output": "2"
            },
            {
                "input": "smallest_change([2, 5, 8, 6, 3, 7, 5])",
                "output": "3"
            },
            {
                "input": "smallest_change([6, 7, 3, 5, 6, 10, 11, 9])",
                "output": "4"
            },
            {
                "input": "smallest_change([2, 5, 2, 10, 4, 12, 5, 9])",
                "output": "3"
            },
            {
                "input": "smallest_change([1, 2, 6, 3, 6, 8, 6, 9])",
                "output": "4"
            },
            {
                "input": "smallest_change([1, 4, 5, 8])",
                "output": "2"
            },
            {
                "input": "smallest_change([5, 1, 5, 6, 1, 10, 9, 1])",
                "output": "4"
            },
            {
                "input": "smallest_change([4, 1, 4, 2, 2, 4, 5])",
                "output": "3"
            },
            {
                "input": "smallest_change([3, 4, 5, 5, 2, 3, 1])",
                "output": "3"
            },
            {
                "input": "smallest_change([3, 4, 9, 4])",
                "output": "2"
            },
            {
                "input": "smallest_change([6, 6, 6, 3, 5])",
                "output": "2"
            },
            {
                "input": "smallest_change([1, 4, 5])",
                "output": "1"
            },
            {
                "input": "smallest_change([5, 8, 4])",
                "output": "1"
            },
            {
                "input": "smallest_change([1, 6, 2])",
                "output": "1"
            },
            {
                "input": "smallest_change([7, 4, 1, 7])",
                "output": "1"
            },
            {
                "input": "smallest_change([2, 6, 1, 7])",
                "output": "2"
            },
            {
                "input": "smallest_change([1, 1, 2, 6, 1, 4, 14, 3])",
                "output": "4"
            },
            {
                "input": "smallest_change([4, 4, 4])",
                "output": "0"
            },
            {
                "input": "smallest_change([4, 1, 8, 8, 5, 3, 2])",
                "output": "3"
            },
            {
                "input": "smallest_change([3, 1, 2, 5, 6, 6, 1])",
                "output": "3"
            },
            {
                "input": "smallest_change([4, 4, 7])",
                "output": "1"
            },
            {
                "input": "smallest_change([1, 4, 1])",
                "output": "0"
            },
            {
                "input": "smallest_change([4, 2, 8, 7, 6, 3, 1])",
                "output": "3"
            },
            {
                "input": "smallest_change([5, 6, 1, 4, 2])",
                "output": "2"
            },
            {
                "input": "smallest_change([4, 1, 3, 6, 2])",
                "output": "2"
            },
            {
                "input": "smallest_change([2, 7, 4])",
                "output": "1"
            },
            {
                "input": "smallest_change([6, 4, 4, 3])",
                "output": "1"
            },
            {
                "input": "smallest_change([6, 5, 3, 7, 5, 4, 4])",
                "output": "3"
            },
            {
                "input": "smallest_change([5, 7, 7, 4])",
                "output": "1"
            },
            {
                "input": "smallest_change([1, 6, 1, 4, 5])",
                "output": "2"
            },
            {
                "input": "smallest_change([6, 1, 2, 6])",
                "output": "1"
            },
            {
                "input": "smallest_change([6, 5, 7, 6, 6, 5, 7])",
                "output": "2"
            },
            {
                "input": "smallest_change([5, 5, 1, 9, 5, 5, 1])",
                "output": "2"
            },
            {
                "input": "smallest_change([2, 1, 9, 5])",
                "output": "2"
            },
            {
                "input": "smallest_change([0, 1])",
                "output": "1"
            },
            {
                "input": "smallest_change([2, 7, 2, 5, 2])",
                "output": "1"
            },
            {
                "input": "smallest_change([3, 6, 5, 8, 1, 11, 11, 1])",
                "output": "4"
            },
            {
                "input": "smallest_change([2, 7, 3])",
                "output": "1"
            },
            {
                "input": "smallest_change([6, 4, 7])",
                "output": "1"
            },
            {
                "input": "smallest_change([5])",
                "output": "0"
            },
            {
                "input": "smallest_change([6, 5, 3])",
                "output": "1"
            },
            {
                "input": "smallest_change([4])",
                "output": "0"
            },
            {
                "input": "smallest_change([7, 2, 3, 6])",
                "output": "2"
            },
            {
                "input": "smallest_change([4, 8, 9, 5])",
                "output": "2"
            },
            {
                "input": "smallest_change([7, 1, 5, 7])",
                "output": "1"
            },
            {
                "input": "smallest_change([4, 2, 1, 4])",
                "output": "1"
            },
            {
                "input": "smallest_change([6, 8, 5, 7])",
                "output": "2"
            },
            {
                "input": "smallest_change([2, 6, 6, 5, 4])",
                "output": "2"
            },
            {
                "input": "smallest_change([1,2,3,5,4,7,9,6])",
                "output": "4"
            },
            {
                "input": "smallest_change([2, 5, 6])",
                "output": "1"
            },
            {
                "input": "smallest_change([2, 2, 1, 9, 6, 8, 11, 9])",
                "output": "4"
            },
            {
                "input": "smallest_change([4, 1, 6, 2])",
                "output": "2"
            },
            {
                "input": "smallest_change([1, 2, 3, 4, 3, 2, 2])",
                "output": "1"
            },
            {
                "input": "smallest_change([5, 2, 8, 3, 8, 5, 9, 8])",
                "output": "4"
            },
            {
                "input": "smallest_change([6, 8, 1, 2])",
                "output": "2"
            },
            {
                "input": "smallest_change([4, 5, 5, 6])",
                "output": "1"
            },
            {
                "input": "smallest_change([6, 6, 4, 8])",
                "output": "2"
            },
            {
                "input": "smallest_change([5, 8, 3, 7])",
                "output": "2"
            },
            {
                "input": "smallest_change([4, 3, 1, 1, 9, 8, 9, 2])",
                "output": "4"
            },
            {
                "input": "smallest_change([3, 3, 1, 7, 2, 7, 9, 10])",
                "output": "4"
            },
            {
                "input": "smallest_change([3, 1, 1, 3])",
                "output": "0"
            },
            {
                "input": "smallest_change([3, 6, 7, 5, 6, 1, 7])",
                "output": "3"
            },
            {
                "input": "smallest_change([5, 5, 6, 1, 2])",
                "output": "2"
            },
            {
                "input": "smallest_change([1, 1, 6, 2, 6])",
                "output": "2"
            },
            {
                "input": "smallest_change([3, 3, 3])",
                "output": "0"
            },
            {
                "input": "smallest_change([1])",
                "output": "0"
            },
            {
                "input": "smallest_change([3, 6, 4])",
                "output": "1"
            },
            {
                "input": "smallest_change([6, 4, 4, 2])",
                "output": "1"
            },
            {
                "input": "smallest_change([5, 4, 6, 7])",
                "output": "2"
            },
            {
                "input": "smallest_change([3, 5, 7, 6, 2, 6, 7])",
                "output": "3"
            },
            {
                "input": "smallest_change([1, 4, 2])",
                "output": "1"
            },
            {
                "input": "smallest_change([2, 5, 3, 3, 1])",
                "output": "2"
            },
            {
                "input": "smallest_change([4, 5, 8, 7])",
                "output": "2"
            },
            {
                "input": "smallest_change([2])",
                "output": "0"
            },
            {
                "input": "smallest_change([6, 2, 3, 6])",
                "output": "1"
            },
            {
                "input": "smallest_change([2, 8, 3, 6])",
                "output": "2"
            },
            {
                "input": "smallest_change([2, 7, 5, 8, 5, 8, 4, 4])",
                "output": "4"
            },
            {
                "input": "smallest_change([4, 2, 3, 2, 3])",
                "output": "1"
            },
            {
                "input": "smallest_change([2, 1, 6])",
                "output": "1"
            },
            {
                "input": "smallest_change([5, 2, 3, 3, 1])",
                "output": "2"
            },
            {
                "input": "smallest_change([4, 7, 4, 7])",
                "output": "2"
            },
            {
                "input": "smallest_change([1, 1, 4, 7])",
                "output": "2"
            },
            {
                "input": "smallest_change([6, 1, 6, 10, 7, 10, 11, 5])",
                "output": "4"
            },
            {
                "input": "smallest_change([5, 7, 3, 5, 6, 5, 5])",
                "output": "2"
            },
            {
                "input": "smallest_change([6, 7, 3, 10, 1, 7, 12, 10])",
                "output": "4"
            }
        ]
    },
    {
        "problem_description": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n",
        "ground truth": "def total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
        "instances": [
            {
                "input": "total_match(['ojdi', 'ywdy'], ['Ztuyh', 'vbuir', 'lbf'])",
                "output": "['ojdi', 'ywdy']"
            },
            {
                "input": "total_match(['eni', 'kaaxaq'], ['bmTIEx', 'pZful'])",
                "output": "['eni', 'kaaxaq']"
            },
            {
                "input": "total_match(['uing', 'vnstvg'], ['KGMU', 'oie', 'pbhpoqm'])",
                "output": "['uing', 'vnstvg']"
            },
            {
                "input": "total_match(['0'], ['7', '3', '2', '9', '0'])",
                "output": "['0']"
            },
            {
                "input": "total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])",
                "output": "['hi', 'admin']"
            },
            {
                "input": "total_match(['zimfb', 'ybllki'], ['eos', 'karf'])",
                "output": "['eos', 'karf']"
            },
            {
                "input": "total_match(['cgpz', 'xszax'], ['NBpw', 'jsvti', 'ldglw'])",
                "output": "['cgpz', 'xszax']"
            },
            {
                "input": "total_match(['uey', 'ksrrlgr'], ['qfm', 'esmcaf', 'pmjazyke', 'npigr'])",
                "output": "['uey', 'ksrrlgr']"
            },
            {
                "input": "total_match(['svqv', 'jvvqs'], ['vtc', 'aylk'])",
                "output": "['vtc', 'aylk']"
            },
            {
                "input": "total_match(['kqe', 'sodpst'], ['AZWyD', 'tfkqtw', 'rozvk'])",
                "output": "['kqe', 'sodpst']"
            },
            {
                "input": "total_match(['dmeo', 'qnkoepksc'], ['zno', 'kbt'])",
                "output": "['zno', 'kbt']"
            },
            {
                "input": "total_match(['bmmha', 'nhfqupt'], ['zgcwia', 'sfe', 'tzf', 'nhr'])",
                "output": "['bmmha', 'nhfqupt']"
            },
            {
                "input": "total_match(['vmvhjd', 'rzravingv'], ['qKhzdi', 'TydVAV'])",
                "output": "['qKhzdi', 'TydVAV']"
            },
            {
                "input": "total_match(['6'], ['5', '8', '3', '0', '6'])",
                "output": "['6']"
            },
            {
                "input": "total_match(['7'], ['6', '7', '2', '9', '7'])",
                "output": "['7']"
            },
            {
                "input": "total_match(['8'], ['8', '2', '7', '8', '9'])",
                "output": "['8']"
            },
            {
                "input": "total_match(['this'], [])",
                "output": "[]"
            },
            {
                "input": "total_match(['dnse', 'yfluvb'], ['bgbx', 'jwdou', 'ebrfvxwp', 'vvqujepncrv'])",
                "output": "['dnse', 'yfluvb']"
            },
            {
                "input": "total_match(['xqidu', 'hnph'], ['fEbF', 'tlah', 'ckejhrhz'])",
                "output": "['xqidu', 'hnph']"
            },
            {
                "input": "total_match(['eebxoh', 'nixliaavb'], ['agqf', 'qwu', 'rpyuhpiar', 'gnehgs'])",
                "output": "['eebxoh', 'nixliaavb']"
            },
            {
                "input": "total_match(['lbjjkd', 'tcjx'], ['kwGm', 'mbit', 'dxbln'])",
                "output": "['lbjjkd', 'tcjx']"
            },
            {
                "input": "total_match([], ['this'])",
                "output": "[]"
            },
            {
                "input": "total_match(['bmw', 'rfhst'], ['jikO', 'tqepf', 'wxi'])",
                "output": "['bmw', 'rfhst']"
            },
            {
                "input": "total_match(['qie', 'pcgvnlt'], ['keyp', 'mrg', 'rymhlu', 'msssnw'])",
                "output": "['qie', 'pcgvnlt']"
            },
            {
                "input": "total_match(['ykxw', 'zbyl'], ['kmn', 'tpogo'])",
                "output": "['ykxw', 'zbyl']"
            },
            {
                "input": "total_match(['zzc', 'wtv'], ['gRno', 'mkfn', 'mohepd'])",
                "output": "['zzc', 'wtv']"
            },
            {
                "input": "total_match(['djze', 'ynurnbkop'], ['iBlv', 'izjbl', 'jnp'])",
                "output": "['iBlv', 'izjbl', 'jnp']"
            },
            {
                "input": "total_match([], ['esqe'])",
                "output": "[]"
            },
            {
                "input": "total_match(['4'], ['0', '9', '7', '0', '1'])",
                "output": "['4']"
            },
            {
                "input": "total_match(['qumb', 'qcyikz'], ['SSQC', 'xvyut', 'picy'])",
                "output": "['qumb', 'qcyikz']"
            },
            {
                "input": "total_match(['ovkchl', 'bkrnlfsp'], ['IRgZA', 'mywP'])",
                "output": "['IRgZA', 'mywP']"
            },
            {
                "input": "total_match(['xxqfp', 'skxvjch'], ['gpbmy', 'zvk'])",
                "output": "['gpbmy', 'zvk']"
            },
            {
                "input": "total_match(['5'], ['8', '1', '0', '2', '2'])",
                "output": "['5']"
            },
            {
                "input": "total_match(['cbn', 'grjg'], ['lltl', 'vxjupk', 'qxdptxdss'])",
                "output": "['cbn', 'grjg']"
            },
            {
                "input": "total_match(['lyh', 'nic'], ['hjNr', 'YJavSm'])",
                "output": "['lyh', 'nic']"
            },
            {
                "input": "total_match(['gpeg', 'amlxxqla'], ['GLM', 'KHdOaZ'])",
                "output": "['GLM', 'KHdOaZ']"
            },
            {
                "input": "total_match(['paohv', 'llhlltr'], ['CnjDg', 'fykwe', 'thrjcrap'])",
                "output": "['paohv', 'llhlltr']"
            },
            {
                "input": "total_match(['glihe', 'ajce'], ['OHvTd', 'gwUKG'])",
                "output": "['glihe', 'ajce']"
            },
            {
                "input": "total_match([], ['hzzixniek'])",
                "output": "[]"
            },
            {
                "input": "total_match(['tplpe', 'yzizq'], ['WHYZWP', 'wtd', 'xoqufoias'])",
                "output": "['tplpe', 'yzizq']"
            },
            {
                "input": "total_match(['hwsyak', 'lzkuljmob'], ['brxzfw', 'vyib'])",
                "output": "['brxzfw', 'vyib']"
            },
            {
                "input": "total_match(['tjqa', 'sxzq'], ['ojw', 'jpy', 'vpefnv', 'bdbxf'])",
                "output": "['tjqa', 'sxzq']"
            },
            {
                "input": "total_match(['nemm', 'lyf'], ['chxjd', 'cfjwc'])",
                "output": "['nemm', 'lyf']"
            },
            {
                "input": "total_match(['ozlrwf', 'znrbo'], ['Hurkru', 'gtvadb', 'dntqu'])",
                "output": "['ozlrwf', 'znrbo']"
            },
            {
                "input": "total_match(['htlu', 'btg'], ['nWfUbi', 'kezzg', 'vjwhx'])",
                "output": "['htlu', 'btg']"
            },
            {
                "input": "total_match(['lgtpwb', 'xbgfppc'], ['hvh', 'pyq', 'czktqi', 'pflzxbvcl'])",
                "output": "['lgtpwb', 'xbgfppc']"
            },
            {
                "input": "total_match(['rcoo', 'hhweadvl'], ['ahTkUL', 'ahrjpd', 'cfngg'])",
                "output": "['rcoo', 'hhweadvl']"
            },
            {
                "input": "total_match([], ['gkfsf'])",
                "output": "[]"
            },
            {
                "input": "total_match([], ['lrzdjbpbp'])",
                "output": "[]"
            },
            {
                "input": "total_match(['ifc', 'mekydfv'], ['NPBP', 'yhsb', 'hxbmpq'])",
                "output": "['ifc', 'mekydfv']"
            },
            {
                "input": "total_match(['bsmcnk', 'gmirteebn'], ['wkej', 'fjzmb', 'awebiu', 'nwnurukytme'])",
                "output": "['bsmcnk', 'gmirteebn']"
            },
            {
                "input": "total_match([], ['sxwto'])",
                "output": "[]"
            },
            {
                "input": "total_match(['2'], ['0', '3', '2', '8', '1'])",
                "output": "['2']"
            },
            {
                "input": "total_match(['npn', 'nfiehn'], ['UPTvt', 'gaua', 'zlwa'])",
                "output": "['npn', 'nfiehn']"
            },
            {
                "input": "total_match(['gzzji', 'boz'], ['kOuf', 'hRDYu'])",
                "output": "['gzzji', 'boz']"
            },
            {
                "input": "total_match(['3'], ['7', '4', '6', '0', '1'])",
                "output": "['3']"
            },
            {
                "input": "total_match(['mzpigv', 'ohdkfev'], ['qxar', 'zsnp', 'wkhdqgob', 'lccizt'])",
                "output": "['mzpigv', 'ohdkfev']"
            },
            {
                "input": "total_match([], ['gqmjhnjms'])",
                "output": "[]"
            },
            {
                "input": "total_match([], ['oalzawl'])",
                "output": "[]"
            },
            {
                "input": "total_match(['vmuywl', 'jjjbxnb'], ['RRq', 'jyyq', 'xcejyjcyi'])",
                "output": "['vmuywl', 'jjjbxnb']"
            },
            {
                "input": "total_match(['hbvqy', 'pfahngdrj'], ['jqp', 'kvpafq', 'sysht', 'hvkcyumt'])",
                "output": "['hbvqy', 'pfahngdrj']"
            },
            {
                "input": "total_match(['fozvsq', 'irypjl'], ['ssirjv', 'ouxowl'])",
                "output": "['fozvsq', 'irypjl']"
            },
            {
                "input": "total_match([], ['aospj'])",
                "output": "[]"
            },
            {
                "input": "total_match(['wqc', 'ntwdjvatg'], ['yybjwi', 'sjnx', 'naldqg', 'nffuptrzcjh'])",
                "output": "['wqc', 'ntwdjvatg']"
            },
            {
                "input": "total_match([], ['urcxh'])",
                "output": "[]"
            },
            {
                "input": "total_match(['bon', 'dhfnxi'], ['xpqtuo', 'sdykpo'])",
                "output": "['bon', 'dhfnxi']"
            },
            {
                "input": "total_match(['bgbkd', 'juq'], ['mjmdcv', 'slearh'])",
                "output": "['bgbkd', 'juq']"
            },
            {
                "input": "total_match(['jvgh', 'hlimtafj'], ['GBg', 'mvttgn', 'vkdx'])",
                "output": "['jvgh', 'hlimtafj']"
            },
            {
                "input": "total_match(['ruif', 'vqdcfk'], ['iCJaE', 'oyhbj', 'nlxjqsvx'])",
                "output": "['ruif', 'vqdcfk']"
            },
            {
                "input": "total_match(['7'], ['9', '0', '5', '2', '8'])",
                "output": "['7']"
            },
            {
                "input": "total_match(['0'], ['9', '5', '2', '0', '8'])",
                "output": "['0']"
            },
            {
                "input": "total_match(['mcji', 'rsofzj'], ['cqLjne', 'fha', 'ofwn'])",
                "output": "['mcji', 'rsofzj']"
            },
            {
                "input": "total_match(['gmfbtd', 'zxkdswl'], ['uzHJV', 'olx', 'zgljwk'])",
                "output": "['gmfbtd', 'zxkdswl']"
            },
            {
                "input": "total_match([], ['lzvwcxfm'])",
                "output": "[]"
            },
            {
                "input": "total_match(['0'], ['2', '1', '5', '0', '1'])",
                "output": "['0']"
            },
            {
                "input": "total_match(['kret', 'rqjkgth'], ['tuui', 'xdg', 'kgbwpziff', 'ctefa'])",
                "output": "['kret', 'rqjkgth']"
            },
            {
                "input": "total_match(['woh', 'jviqyrgo'], ['gnLdW', 'yhup', 'dnx'])",
                "output": "['woh', 'jviqyrgo']"
            },
            {
                "input": "total_match(['lntjf', 'zfehism'], ['nKee', 'bzJMVh'])",
                "output": "['nKee', 'bzJMVh']"
            },
            {
                "input": "total_match(['wqmar', 'bpzb'], ['BlDN', 'qpi', 'wuwogq'])",
                "output": "['wqmar', 'bpzb']"
            },
            {
                "input": "total_match([], ['ohfdzarl'])",
                "output": "[]"
            },
            {
                "input": "total_match(['qka', 'zhtvol'], ['Yzg', 'dgtw', 'qmpag'])",
                "output": "['qka', 'zhtvol']"
            },
            {
                "input": "total_match(['ardn', 'mmwhbpb'], ['Mfkb', 'XuHTQG'])",
                "output": "['Mfkb', 'XuHTQG']"
            },
            {
                "input": "total_match(['6'], ['7', '3', '1', '5', '5'])",
                "output": "['6']"
            },
            {
                "input": "total_match(['ilqm', 'pvvz'], ['mxWkBQ', 'MDljnN'])",
                "output": "['ilqm', 'pvvz']"
            },
            {
                "input": "total_match(['hi', 'admin'], ['hi', 'hi'])",
                "output": "['hi', 'hi']"
            },
            {
                "input": "total_match(['1'], ['2', '3', '7', '7', '8'])",
                "output": "['1']"
            },
            {
                "input": "total_match(['hrx', 'tfqwzyd'], ['fzo', 'tnjfbl'])",
                "output": "['fzo', 'tnjfbl']"
            },
            {
                "input": "total_match(['qxmmc', 'fvvle'], ['Islf', 'ttxkyx', 'cuhcat'])",
                "output": "['qxmmc', 'fvvle']"
            },
            {
                "input": "total_match(['4'], ['1', '2', '3', '4', '5'])",
                "output": "['4']"
            },
            {
                "input": "total_match(['rpeilt', 'mbmspvh'], ['IPr', 'qyquv', 'ohq'])",
                "output": "['IPr', 'qyquv', 'ohq']"
            },
            {
                "input": "total_match(['noqv', 'mrod'], ['nmi', 'xedwkq'])",
                "output": "['noqv', 'mrod']"
            },
            {
                "input": "total_match(['hi', 'admin'], ['hI', 'Hi'])",
                "output": "['hI', 'Hi']"
            },
            {
                "input": "total_match(['kybhlz', 'jbdfpg'], ['gSFyj', 'CsYY'])",
                "output": "['gSFyj', 'CsYY']"
            },
            {
                "input": "total_match(['kip', 'afxldkr'], ['odvrbz', 'jfv'])",
                "output": "['odvrbz', 'jfv']"
            },
            {
                "input": "total_match(['wow', 'ljbc'], ['vnRN', 'gDh'])",
                "output": "['wow', 'ljbc']"
            },
            {
                "input": "total_match(['qnwod', 'uzv'], ['ryd', 'asskh', 'yrwkmu', 'xqh'])",
                "output": "['qnwod', 'uzv']"
            },
            {
                "input": "total_match(['mexur', 'eweclnqa'], ['jgd', 'ytfl'])",
                "output": "['jgd', 'ytfl']"
            },
            {
                "input": "total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])",
                "output": "['hI', 'hi', 'hi']"
            },
            {
                "input": "total_match(['9'], ['9', '4', '2', '8', '8'])",
                "output": "['9']"
            },
            {
                "input": "total_match(['bdjdb', 'fvigxnhw'], ['fLBCb', 'NHwmP'])",
                "output": "['fLBCb', 'NHwmP']"
            },
            {
                "input": "total_match([], [])",
                "output": "[]"
            },
            {
                "input": "total_match(['igftl', 'tkmaax'], ['mlojy', 'zbath', 'rosz', 'glvdwzycmsr'])",
                "output": "['igftl', 'tkmaax']"
            },
            {
                "input": "total_match([], ['zsoeys'])",
                "output": "[]"
            },
            {
                "input": "total_match(['jnf', 'xpd'], ['tIxE', 'JQPWvU'])",
                "output": "['jnf', 'xpd']"
            },
            {
                "input": "total_match([], ['jnk'])",
                "output": "[]"
            },
            {
                "input": "total_match([], ['qujl'])",
                "output": "[]"
            }
        ]
    },
    {
        "problem_description": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
        "ground truth": "def is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
        "instances": [
            {
                "input": "is_multiply_prime(1)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(3)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(3 * 5 * 7)",
                "output": "True"
            },
            {
                "input": "is_multiply_prime(889)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(127)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(724)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(101)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(730)",
                "output": "True"
            },
            {
                "input": "is_multiply_prime(9)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(104)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(728)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(14)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(2)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(5)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(891)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(110)",
                "output": "True"
            },
            {
                "input": "is_multiply_prime(734)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(131)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(129)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(122)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(128)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(893)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(30)",
                "output": "True"
            },
            {
                "input": "is_multiply_prime(887)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(27)",
                "output": "True"
            },
            {
                "input": "is_multiply_prime(895)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(121)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(725)",
                "output": "True"
            },
            {
                "input": "is_multiply_prime(11)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(125)",
                "output": "True"
            },
            {
                "input": "is_multiply_prime(6)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(124)",
                "output": "True"
            },
            {
                "input": "is_multiply_prime(9 * 9 * 9)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(31)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(26)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(727)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(107)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(729)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(11 * 9 * 9)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(11 * 13 * 7)",
                "output": "True"
            },
            {
                "input": "is_multiply_prime(894)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(10)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(126)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(32)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(3 * 6 * 7)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(13)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(130)",
                "output": "True"
            },
            {
                "input": "is_multiply_prime(28)",
                "output": "True"
            },
            {
                "input": "is_multiply_prime(109)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(25)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(8)",
                "output": "True"
            },
            {
                "input": "is_multiply_prime(7)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(12)",
                "output": "True"
            },
            {
                "input": "is_multiply_prime(890)",
                "output": "True"
            },
            {
                "input": "is_multiply_prime(106)",
                "output": "False"
            },
            {
                "input": "is_multiply_prime(726)",
                "output": "False"
            }
        ]
    },
    {
        "problem_description": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
        "ground truth": "def is_simple_power(x, n):\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
        "instances": [
            {
                "input": "is_simple_power(2401, 7)",
                "output": "True"
            },
            {
                "input": "is_simple_power(2, 2)",
                "output": "True"
            },
            {
                "input": "is_simple_power(28, 6)",
                "output": "False"
            },
            {
                "input": "is_simple_power(26, 5)",
                "output": "False"
            },
            {
                "input": "is_simple_power(512, 8)",
                "output": "True"
            },
            {
                "input": "is_simple_power(142224, 12)",
                "output": "False"
            },
            {
                "input": "is_simple_power(17, 10)",
                "output": "False"
            },
            {
                "input": "is_simple_power(125, 1)",
                "output": "False"
            },
            {
                "input": "is_simple_power(143958, 17)",
                "output": "False"
            },
            {
                "input": "is_simple_power(16, 2)",
                "output": "True"
            },
            {
                "input": "is_simple_power(13, 3)",
                "output": "False"
            },
            {
                "input": "is_simple_power(125, 9)",
                "output": "False"
            },
            {
                "input": "is_simple_power(4, 2)",
                "output": "True"
            },
            {
                "input": "is_simple_power(143173, 12)",
                "output": "False"
            },
            {
                "input": "is_simple_power(9, 3)",
                "output": "True"
            },
            {
                "input": "is_simple_power(28, 1)",
                "output": "False"
            },
            {
                "input": "is_simple_power(216, 6)",
                "output": "True"
            },
            {
                "input": "is_simple_power(64, 4)",
                "output": "True"
            },
            {
                "input": "is_simple_power(128, 4)",
                "output": "False"
            },
            {
                "input": "is_simple_power(126, 7)",
                "output": "False"
            },
            {
                "input": "is_simple_power(6, 6)",
                "output": "True"
            },
            {
                "input": "is_simple_power(143844, 17)",
                "output": "False"
            },
            {
                "input": "is_simple_power(1296, 6)",
                "output": "True"
            },
            {
                "input": "is_simple_power(133, 7)",
                "output": "False"
            },
            {
                "input": "is_simple_power(21, 6)",
                "output": "False"
            },
            {
                "input": "is_simple_power(124, 7)",
                "output": "False"
            },
            {
                "input": "is_simple_power(343, 7)",
                "output": "True"
            },
            {
                "input": "is_simple_power(1024, 4)",
                "output": "True"
            },
            {
                "input": "is_simple_power(256, 4)",
                "output": "True"
            },
            {
                "input": "is_simple_power(131, 3)",
                "output": "False"
            },
            {
                "input": "is_simple_power(81, 9)",
                "output": "True"
            },
            {
                "input": "is_simple_power(11, 3)",
                "output": "False"
            },
            {
                "input": "is_simple_power(144014, 11)",
                "output": "False"
            },
            {
                "input": "is_simple_power(7776, 6)",
                "output": "True"
            },
            {
                "input": "is_simple_power(142251, 16)",
                "output": "False"
            },
            {
                "input": "is_simple_power(24, 2)",
                "output": "False"
            },
            {
                "input": "is_simple_power(143322, 19)",
                "output": "False"
            },
            {
                "input": "is_simple_power(3, 3)",
                "output": "True"
            },
            {
                "input": "is_simple_power(4, 2)",
                "output": "True"
            },
            {
                "input": "is_simple_power(1, 1)",
                "output": "True"
            },
            {
                "input": "is_simple_power(142683, 18)",
                "output": "False"
            },
            {
                "input": "is_simple_power(21, 1)",
                "output": "False"
            },
            {
                "input": "is_simple_power(133, 8)",
                "output": "False"
            },
            {
                "input": "is_simple_power(1, 12)",
                "output": "True"
            },
            {
                "input": "is_simple_power(125, 5)",
                "output": "True"
            },
            {
                "input": "is_simple_power(143529, 19)",
                "output": "False"
            },
            {
                "input": "is_simple_power(13, 9)",
                "output": "False"
            },
            {
                "input": "is_simple_power(16, 2)",
                "output": "True"
            },
            {
                "input": "is_simple_power(1, 1)",
                "output": "True"
            },
            {
                "input": "is_simple_power(16807, 7)",
                "output": "True"
            },
            {
                "input": "is_simple_power(3125, 5)",
                "output": "True"
            },
            {
                "input": "is_simple_power(8, 3)",
                "output": "False"
            },
            {
                "input": "is_simple_power(16, 4)",
                "output": "True"
            },
            {
                "input": "is_simple_power(49, 7)",
                "output": "True"
            },
            {
                "input": "is_simple_power(123, 6)",
                "output": "False"
            },
            {
                "input": "is_simple_power(21, 5)",
                "output": "False"
            },
            {
                "input": "is_simple_power(9, 3)",
                "output": "True"
            },
            {
                "input": "is_simple_power(9, 2)",
                "output": "False"
            },
            {
                "input": "is_simple_power(59049, 9)",
                "output": "True"
            },
            {
                "input": "is_simple_power(143214, 16)",
                "output": "False"
            },
            {
                "input": "is_simple_power(21, 4)",
                "output": "False"
            },
            {
                "input": "is_simple_power(142575, 18)",
                "output": "False"
            },
            {
                "input": "is_simple_power(124, 5)",
                "output": "False"
            },
            {
                "input": "is_simple_power(8, 2)",
                "output": "True"
            },
            {
                "input": "is_simple_power(29, 2)",
                "output": "False"
            },
            {
                "input": "is_simple_power(14, 7)",
                "output": "False"
            },
            {
                "input": "is_simple_power(133, 6)",
                "output": "False"
            },
            {
                "input": "is_simple_power(4, 4)",
                "output": "True"
            },
            {
                "input": "is_simple_power(16, 4)",
                "output": "True"
            },
            {
                "input": "is_simple_power(27, 3)",
                "output": "True"
            },
            {
                "input": "is_simple_power(142711, 20)",
                "output": "False"
            },
            {
                "input": "is_simple_power(7, 7)",
                "output": "True"
            },
            {
                "input": "is_simple_power(12, 6)",
                "output": "False"
            },
            {
                "input": "is_simple_power(126, 5)",
                "output": "False"
            },
            {
                "input": "is_simple_power(25, 5)",
                "output": "True"
            },
            {
                "input": "is_simple_power(12, 2)",
                "output": "False"
            },
            {
                "input": "is_simple_power(243, 3)",
                "output": "True"
            },
            {
                "input": "is_simple_power(81, 3)",
                "output": "True"
            },
            {
                "input": "is_simple_power(17, 9)",
                "output": "False"
            },
            {
                "input": "is_simple_power(24, 4)",
                "output": "False"
            },
            {
                "input": "is_simple_power(625, 5)",
                "output": "True"
            },
            {
                "input": "is_simple_power(130, 7)",
                "output": "False"
            },
            {
                "input": "is_simple_power(27, 1)",
                "output": "False"
            },
            {
                "input": "is_simple_power(7, 5)",
                "output": "False"
            },
            {
                "input": "is_simple_power(28, 5)",
                "output": "False"
            },
            {
                "input": "is_simple_power(17, 11)",
                "output": "False"
            },
            {
                "input": "is_simple_power(8, 8)",
                "output": "True"
            },
            {
                "input": "is_simple_power(143962, 11)",
                "output": "False"
            },
            {
                "input": "is_simple_power(144029, 13)",
                "output": "False"
            },
            {
                "input": "is_simple_power(32, 2)",
                "output": "True"
            },
            {
                "input": "is_simple_power(20, 4)",
                "output": "False"
            },
            {
                "input": "is_simple_power(27, 2)",
                "output": "False"
            }
        ]
    },
    {
        "problem_description": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
        "ground truth": "def iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
        "instances": [
            {
                "input": "iscube(7)",
                "output": "False"
            },
            {
                "input": "iscube(1000)",
                "output": "True"
            },
            {
                "input": "iscube(658503)",
                "output": "True"
            },
            {
                "input": "iscube(185193)",
                "output": "True"
            },
            {
                "input": "iscube(941192)",
                "output": "True"
            },
            {
                "input": "iscube(373248)",
                "output": "True"
            },
            {
                "input": "iscube(176)",
                "output": "False"
            },
            {
                "input": "iscube(4)",
                "output": "False"
            },
            {
                "input": "iscube(314432)",
                "output": "True"
            },
            {
                "input": "iscube(681472)",
                "output": "True"
            },
            {
                "input": "iscube(729)",
                "output": "True"
            },
            {
                "input": "iscube(753571)",
                "output": "True"
            },
            {
                "input": "iscube(180)",
                "output": "False"
            },
            {
                "input": "iscube(238328)",
                "output": "True"
            },
            {
                "input": "iscube(704969)",
                "output": "True"
            },
            {
                "input": "iscube(474552)",
                "output": "True"
            },
            {
                "input": "iscube(85184)",
                "output": "True"
            },
            {
                "input": "iscube(64)",
                "output": "True"
            },
            {
                "input": "iscube(19683)",
                "output": "True"
            },
            {
                "input": "iscube(493039)",
                "output": "True"
            },
            {
                "input": "iscube(74088)",
                "output": "True"
            },
            {
                "input": "iscube(12167)",
                "output": "True"
            },
            {
                "input": "iscube(438976)",
                "output": "True"
            },
            {
                "input": "iscube(328509)",
                "output": "True"
            },
            {
                "input": "iscube(2744)",
                "output": "True"
            },
            {
                "input": "iscube(178)",
                "output": "False"
            },
            {
                "input": "iscube(4913)",
                "output": "True"
            },
            {
                "input": "iscube(571787)",
                "output": "True"
            },
            {
                "input": "iscube(2)",
                "output": "False"
            },
            {
                "input": "iscube(2197)",
                "output": "True"
            },
            {
                "input": "iscube(3375)",
                "output": "True"
            },
            {
                "input": "iscube(157464)",
                "output": "True"
            },
            {
                "input": "iscube(15625)",
                "output": "True"
            },
            {
                "input": "iscube(250047)",
                "output": "True"
            },
            {
                "input": "iscube(8)",
                "output": "True"
            },
            {
                "input": "iscube(262144)",
                "output": "True"
            },
            {
                "input": "iscube(103823)",
                "output": "True"
            },
            {
                "input": "iscube(3)",
                "output": "False"
            },
            {
                "input": "iscube(68921)",
                "output": "True"
            },
            {
                "input": "iscube(185)",
                "output": "False"
            },
            {
                "input": "iscube(1)",
                "output": "True"
            },
            {
                "input": "iscube(551368)",
                "output": "True"
            },
            {
                "input": "iscube(287496)",
                "output": "True"
            },
            {
                "input": "iscube(175)",
                "output": "False"
            },
            {
                "input": "iscube(21952)",
                "output": "True"
            },
            {
                "input": "iscube(54872)",
                "output": "True"
            },
            {
                "input": "iscube(1331)",
                "output": "True"
            },
            {
                "input": "iscube(857375)",
                "output": "True"
            },
            {
                "input": "iscube(226981)",
                "output": "True"
            },
            {
                "input": "iscube(884736)",
                "output": "True"
            },
            {
                "input": "iscube(5)",
                "output": "False"
            },
            {
                "input": "iscube(8000)",
                "output": "True"
            },
            {
                "input": "iscube(181)",
                "output": "False"
            },
            {
                "input": "iscube(274625)",
                "output": "True"
            },
            {
                "input": "iscube(1000000)",
                "output": "True"
            },
            {
                "input": "iscube(205379)",
                "output": "True"
            },
            {
                "input": "iscube(729000)",
                "output": "True"
            },
            {
                "input": "iscube(179)",
                "output": "False"
            },
            {
                "input": "iscube(512)",
                "output": "True"
            },
            {
                "input": "iscube(13824)",
                "output": "True"
            },
            {
                "input": "iscube(636056)",
                "output": "True"
            },
            {
                "input": "iscube(42875)",
                "output": "True"
            },
            {
                "input": "iscube(216)",
                "output": "True"
            },
            {
                "input": "iscube(405224)",
                "output": "True"
            }
        ]
    },
    {
        "problem_description": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
        "ground truth": "def hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
        "instances": [
            {
                "input": "hex_key(\"GIC\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"TTB\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"EEW\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"IHSCBC\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"OGWJ\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"5WBJPUJAWRKQJECUBRVTVYFCLLG\")",
                "output": "3"
            },
            {
                "input": "hex_key(\"2FJSEFZSO7K7BZ3X6WIGZBDCS1XAUF5A8E\")",
                "output": "8"
            },
            {
                "input": "hex_key(\"Z6PZN\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"ZJPAM\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"DVVW\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"4425009\")",
                "output": "2"
            },
            {
                "input": "hex_key(\"C4GJRK0VIOH11AW6I1TSIUR1BRGIIL31Z\")",
                "output": "2"
            },
            {
                "input": "hex_key(\"K83SK5PK71ZMOD\")",
                "output": "4"
            },
            {
                "input": "hex_key(\"1RYJ38YWMCKQWAI1TOJYRJ9O5U57XF1\")",
                "output": "4"
            },
            {
                "input": "hex_key(\"Y3MEYDWLAAEWTSWZ3QFX\")",
                "output": "3"
            },
            {
                "input": "hex_key(\"SD1RMVZD65YM68CF4XGNQSKBJCY3\")",
                "output": "5"
            },
            {
                "input": "hex_key(\"KQMDBB\")",
                "output": "3"
            },
            {
                "input": "hex_key(\"CPFY\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"VFZ\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"6OEO92R\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"3KV0\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"TQN6E4YN5YJS3RGTBVNREYMHA7TUXJR5DN\")",
                "output": "6"
            },
            {
                "input": "hex_key(\"BF2YBGRXBOND\")",
                "output": "5"
            },
            {
                "input": "hex_key(\"RXZYRT\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"717522626\")",
                "output": "6"
            },
            {
                "input": "hex_key(\"270503003\")",
                "output": "5"
            },
            {
                "input": "hex_key(\"UMNHPSNHD3QCB734Y18\")",
                "output": "5"
            },
            {
                "input": "hex_key(\"MVT70UX\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"TMVF\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"ZYICLQIIAO\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"U1WUXK1XC07PT1U0\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"LIXZ3A7\")",
                "output": "2"
            },
            {
                "input": "hex_key(\"FXX0IVOOC3U5RPUSB7085ACR72275R55VH0P\")",
                "output": "12"
            },
            {
                "input": "hex_key(\"FZJA4EJIZUO0PN1VBOY1ZGJWQ3TPQNZ\")",
                "output": "2"
            },
            {
                "input": "hex_key(\"UEYMX\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"WIJMZ\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"NQZETQ\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"82336\")",
                "output": "3"
            },
            {
                "input": "hex_key(\"V0D1\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"IQ8AOUVSIH9\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"QMEFPST9TU8WLOZ76\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"J6QTYRB0SHT05SGYG6SNKKH8MBLACVP3\")",
                "output": "4"
            },
            {
                "input": "hex_key(\"4XX72U3L\")",
                "output": "3"
            },
            {
                "input": "hex_key(\"LWWT\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"TE3MD9UP38LCIPFX3YK6C1S4G8P9GP0\")",
                "output": "4"
            },
            {
                "input": "hex_key(\"J01\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"JPXCB0FW9M\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"N0E\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"83TYJWK8507K0AFJDZCJI\")",
                "output": "4"
            },
            {
                "input": "hex_key(\"9CR3\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"ZY1W7R8V7633Z9KQQY2ZKNLQOT0GFO\")",
                "output": "5"
            },
            {
                "input": "hex_key(\"3507083\")",
                "output": "4"
            },
            {
                "input": "hex_key(\"008443\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"74U1P6CZG63S\")",
                "output": "2"
            },
            {
                "input": "hex_key(\"9S094T3CXGK61D1AG119ZI88J2626WR\")",
                "output": "4"
            },
            {
                "input": "hex_key(\"65H\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"GBHUVMHNQV6G87\")",
                "output": "2"
            },
            {
                "input": "hex_key(\"NSVF\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"SPK6R6D43I0UXY80IIPK\")",
                "output": "2"
            },
            {
                "input": "hex_key(\"AKQ4WH1QGSABCO8Z7GHKRCWF746V0N82\")",
                "output": "4"
            },
            {
                "input": "hex_key(\"JSOLE\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"AU417SX4BO20NJ6AIRUGL78G7621\")",
                "output": "6"
            },
            {
                "input": "hex_key(\"JW8NS32P\")",
                "output": "2"
            },
            {
                "input": "hex_key(\"0161174\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"8289\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"WSKHX2KOF3HV9618N3\")",
                "output": "3"
            },
            {
                "input": "hex_key(\"NMVT0TDKDYB2BP97\")",
                "output": "6"
            },
            {
                "input": "hex_key(\"RJL9\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"68YE\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"F87O3S2I8S\")",
                "output": "3"
            },
            {
                "input": "hex_key(\"277399763\")",
                "output": "6"
            },
            {
                "input": "hex_key(\"091097\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"TNRCI\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"4037\")",
                "output": "2"
            },
            {
                "input": "hex_key(\"26399\")",
                "output": "2"
            },
            {
                "input": "hex_key(\"V1I4X\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"1079093\")",
                "output": "2"
            },
            {
                "input": "hex_key(\"YN076UBXXFLOAN2G2N8II\")",
                "output": "4"
            },
            {
                "input": "hex_key(\"WNY2SA\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"NYRLKR\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"V4D4N\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"HD6I529K9506K6RH2M1XIGBRQVR\")",
                "output": "6"
            },
            {
                "input": "hex_key(\"0916085\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"2N0Q\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"WRRV\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"MMY6\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"4XR9L4\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"29980\")",
                "output": "1"
            },
            {
                "input": "hex_key([])",
                "output": "0"
            },
            {
                "input": "hex_key(\"4O0RNRFZXLSUIN9\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"3JQ5LNQL0G23\")",
                "output": "4"
            },
            {
                "input": "hex_key(\"N12O2H6SHVDFAM7I1X99SWUE8TYVJUY0Z5E\")",
                "output": "5"
            },
            {
                "input": "hex_key(\"DS4WECTHENH\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"K0Q5JFAOH8MDKS\")",
                "output": "2"
            },
            {
                "input": "hex_key(\"EU36FEMVO5YBKOYTG88R459OQOQ310Y\")",
                "output": "5"
            },
            {
                "input": "hex_key(\"H493EAK0T762ZR2ORDN7\")",
                "output": "6"
            },
            {
                "input": "hex_key(\"LDA1GEY8H\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"PR3EKGPBN0V9NGGRC73G5WQJALDYMZR0\")",
                "output": "6"
            },
            {
                "input": "hex_key(\"846570637\")",
                "output": "4"
            },
            {
                "input": "hex_key(\"FBMAY\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"5079031\")",
                "output": "3"
            },
            {
                "input": "hex_key(\"JCOAS9AO4VYU0LFAMIMD\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"OQUG0K9WKM4\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"NFPPM\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"O1V\")",
                "output": "0"
            },
            {
                "input": "hex_key(\"ZEP98JVE6GR02AR2VLOS\")",
                "output": "2"
            },
            {
                "input": "hex_key(\"CWC8QDL29\")",
                "output": "2"
            },
            {
                "input": "hex_key(\"310\")",
                "output": "1"
            },
            {
                "input": "hex_key(\"DKJYW\")",
                "output": "1"
            }
        ]
    },
    {
        "problem_description": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
        "ground truth": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "instances": [
            {
                "input": "decimal_to_binary(36)",
                "output": "'db100100db'"
            },
            {
                "input": "decimal_to_binary(103)",
                "output": "'db1100111db'"
            },
            {
                "input": "decimal_to_binary(2)",
                "output": "'db10db'"
            },
            {
                "input": "decimal_to_binary(102)",
                "output": "'db1100110db'"
            },
            {
                "input": "decimal_to_binary(27)",
                "output": "'db11011db'"
            },
            {
                "input": "decimal_to_binary(3)",
                "output": "'db11db'"
            },
            {
                "input": "decimal_to_binary(32)",
                "output": "'db100000db'"
            },
            {
                "input": "decimal_to_binary(30)",
                "output": "'db11110db'"
            },
            {
                "input": "decimal_to_binary(100)",
                "output": "'db1100100db'"
            },
            {
                "input": "decimal_to_binary(33)",
                "output": "'db100001db'"
            },
            {
                "input": "decimal_to_binary(1)",
                "output": "'db1db'"
            },
            {
                "input": "decimal_to_binary(5)",
                "output": "'db101db'"
            },
            {
                "input": "decimal_to_binary(35)",
                "output": "'db100011db'"
            },
            {
                "input": "decimal_to_binary(34)",
                "output": "'db100010db'"
            },
            {
                "input": "decimal_to_binary(107)",
                "output": "'db1101011db'"
            },
            {
                "input": "decimal_to_binary(104)",
                "output": "'db1101000db'"
            },
            {
                "input": "decimal_to_binary(37)",
                "output": "'db100101db'"
            },
            {
                "input": "decimal_to_binary(4)",
                "output": "'db100db'"
            },
            {
                "input": "decimal_to_binary(31)",
                "output": "'db11111db'"
            },
            {
                "input": "decimal_to_binary(106)",
                "output": "'db1101010db'"
            },
            {
                "input": "decimal_to_binary(99)",
                "output": "'db1100011db'"
            },
            {
                "input": "decimal_to_binary(101)",
                "output": "'db1100101db'"
            },
            {
                "input": "decimal_to_binary(29)",
                "output": "'db11101db'"
            },
            {
                "input": "decimal_to_binary(98)",
                "output": "'db1100010db'"
            },
            {
                "input": "decimal_to_binary(108)",
                "output": "'db1101100db'"
            },
            {
                "input": "decimal_to_binary(28)",
                "output": "'db11100db'"
            }
        ]
    },
    {
        "problem_description": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
        "ground truth": "def is_happy(s):\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
        "instances": [
            {
                "input": "is_happy(\"vmxdsmtbksb\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"lmsegi\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"adktufdnx\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"mkbrgekb\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"g\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"sda\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"w\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"tgglbg\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"mpiumqqx\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"tcnk\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"lsm\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"vsgjt\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"qwbjwaiu\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"b\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"hgfqilrj\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"ajtrhb\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"ipjy\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"khapsq\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"xivc\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"syvkwfj\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"imc\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"dpvxqd\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"xzyzwrab\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"vdxot\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"gylbrpyqiuw\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"yygnlyoas\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"dmseyemg\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"gxts\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"ldi\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"uxgftzdyg\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"kjcceshvfwai\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"ishkix\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"dyoywxi\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"ioruvha\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"h\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"ykq\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"vorlwobo\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"f\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"qfychpkht\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"ccnybors\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"mdg\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"zrqkybwt\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"uimsvgvy\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"lwpm\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"cpbecycwj\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"cdlq\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"s\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"edbikgtricp\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"ujeo\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"swh\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"qylehtb\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"mwi\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"qmxibr\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"xckdiwjz\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"ekzerpbq\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"asszruuw\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"hoijog\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"ydkfa\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"v\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"pqftbntafqcl\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"pnglo\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"bldcxi\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"jjzdrfcxx\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"znngeaumx\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"dktydg\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"jllyluo\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"gitokkmmex\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"cyqfh\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"y\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"freva\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"vjbekznsr\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"i\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"jgrvcizhi\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"ryrr\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"hevkrepn\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"eovqv\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"bhkokspiry\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"xpm\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"jsfnqiht\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"rajomlaz\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"wioqbm\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"gnntvon\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"p\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"d\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"xrc\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"kjba\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"qcrtlo\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"rjqhznla\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"osfqkfsjs\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"fyewnyygb\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"n\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"mckptsntv\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"hne\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"kxqis\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"vskqbz\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"tskgwrb\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"pgmq\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"pzofkfvtw\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"hcp\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"nkoeh\")",
                "output": "True"
            },
            {
                "input": "is_happy(\"ihhyzk\")",
                "output": "False"
            },
            {
                "input": "is_happy(\"yauwdcsfcwr\")",
                "output": "True"
            }
        ]
    },
    {
        "problem_description": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
        "ground truth": "def numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
        "instances": [
            {
                "input": "numerical_letter_grade([4.381])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([3.189])",
                "output": "['B+']"
            },
            {
                "input": "numerical_letter_grade([4, 2.626, 2.824, 7.424, 5.83])",
                "output": "['A+', 'B-', 'B', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([4.799])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([5.886])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([2.091])",
                "output": "['C+']"
            },
            {
                "input": "numerical_letter_grade([3.709])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([1.906])",
                "output": "['C']"
            },
            {
                "input": "numerical_letter_grade([5.012])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([1.412])",
                "output": "['C-']"
            },
            {
                "input": "numerical_letter_grade([4.454])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([3.054])",
                "output": "['B+']"
            },
            {
                "input": "numerical_letter_grade([4.104])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([4, 3.251, 2.546, 1.98, 3.082])",
                "output": "['A+', 'B+', 'B-', 'C', 'B+']"
            },
            {
                "input": "numerical_letter_grade([4.314])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([2.985])",
                "output": "['B']"
            },
            {
                "input": "numerical_letter_grade([2.412])",
                "output": "['B-']"
            },
            {
                "input": "numerical_letter_grade([5, 4.675, 6.301, 3.928, 5.804])",
                "output": "['A', 'A', 'A', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([3, 4.558, 2.072, 3.712, 5.809])",
                "output": "['B', 'A', 'C+', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([5.065, 4, 5.911, 2, 4.43])",
                "output": "['A', 'A+', 'A', 'C', 'A']"
            },
            {
                "input": "numerical_letter_grade([9.317, 8, 3.7, 6, 2.483])",
                "output": "['A', 'A', 'A-', 'A', 'B-']"
            },
            {
                "input": "numerical_letter_grade([1, 1.556, 6.189, 3.588, 1.625])",
                "output": "['D', 'C-', 'A', 'A-', 'C-']"
            },
            {
                "input": "numerical_letter_grade([1.076])",
                "output": "['D+']"
            },
            {
                "input": "numerical_letter_grade([4, 1.435, 5.824, 1.539, 7.492])",
                "output": "['A+', 'C-', 'A', 'C-', 'A']"
            },
            {
                "input": "numerical_letter_grade([4.822])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([3, 3.93, 1.74, 2.791, 2.576])",
                "output": "['B', 'A', 'C', 'B', 'B-']"
            },
            {
                "input": "numerical_letter_grade([1, 5.293, 4.749, 7.907, 5.656])",
                "output": "['D', 'A', 'A', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([4.813])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([5, 2.658, 2.151, 6.268, 5.527])",
                "output": "['A', 'B-', 'C+', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([5.401])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([5.976, 4, 1.433, 7, 3.077])",
                "output": "['A', 'A+', 'C-', 'A', 'B+']"
            },
            {
                "input": "numerical_letter_grade([4.835])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([4.873, 3, 2.438, 6, 5.365])",
                "output": "['A', 'B', 'B-', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([1.2])",
                "output": "['D+']"
            },
            {
                "input": "numerical_letter_grade([5, 3.231, 4.961, 5.91, 4.348])",
                "output": "['A', 'B+', 'A', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([5, 3.839, 3.698, 4.34, 1.955])",
                "output": "['A', 'A', 'A-', 'A', 'C']"
            },
            {
                "input": "numerical_letter_grade([1, 0.3, 1.5, 2.8, 3.3])",
                "output": "['D', 'D-', 'C-', 'B', 'B+']"
            },
            {
                "input": "numerical_letter_grade([1.978])",
                "output": "['C']"
            },
            {
                "input": "numerical_letter_grade([3.612])",
                "output": "['A-']"
            },
            {
                "input": "numerical_letter_grade([1.32, 8, 4.236, 1, 5.296])",
                "output": "['C-', 'A', 'A', 'D', 'A']"
            },
            {
                "input": "numerical_letter_grade([5.909, 4, 3.917, 4, 2.236])",
                "output": "['A', 'A+', 'A', 'A+', 'C+']"
            },
            {
                "input": "numerical_letter_grade([3.516])",
                "output": "['A-']"
            },
            {
                "input": "numerical_letter_grade([7.75, 2, 6.21, 4, 7.481])",
                "output": "['A', 'C', 'A', 'A+', 'A']"
            },
            {
                "input": "numerical_letter_grade([3.81])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([3.826])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([5.364])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([4.946])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([2.033])",
                "output": "['C+']"
            },
            {
                "input": "numerical_letter_grade([1.169])",
                "output": "['D+']"
            },
            {
                "input": "numerical_letter_grade([6, 4.502, 2.77, 6.757, 4.66])",
                "output": "['A', 'A', 'B', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([3, 3.758, 2.783, 2.733, 7.605])",
                "output": "['B', 'A', 'B', 'B', 'A']"
            },
            {
                "input": "numerical_letter_grade([1, 1.067, 5.544, 2.104, 6.994])",
                "output": "['D', 'D+', 'A', 'C+', 'A']"
            },
            {
                "input": "numerical_letter_grade([3, 4.425, 6.207, 4.631, 3.821])",
                "output": "['B', 'A', 'A', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([5.559])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([5.356])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([1.501])",
                "output": "['C-']"
            },
            {
                "input": "numerical_letter_grade([0.5])",
                "output": "['D-']"
            },
            {
                "input": "numerical_letter_grade([2.226])",
                "output": "['C+']"
            },
            {
                "input": "numerical_letter_grade([6.134, 3, 6.155, 3, 2.084])",
                "output": "['A', 'B', 'A', 'B', 'C+']"
            },
            {
                "input": "numerical_letter_grade([1.058, 4, 5.349, 2, 4.304])",
                "output": "['D+', 'A+', 'A', 'C', 'A']"
            },
            {
                "input": "numerical_letter_grade([6.463, 2, 3.954, 5, 7.145])",
                "output": "['A', 'C', 'A', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([5.309, 3, 3.031, 4, 3.721])",
                "output": "['A', 'B', 'B+', 'A+', 'A']"
            },
            {
                "input": "numerical_letter_grade([2.601])",
                "output": "['B-']"
            },
            {
                "input": "numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])",
                "output": "['A+', 'B', 'C-', 'C', 'A-']"
            },
            {
                "input": "numerical_letter_grade([4.697])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([3.925])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([6, 2.172, 3.849, 1.272, 6.298])",
                "output": "['A', 'C+', 'A', 'D+', 'A']"
            },
            {
                "input": "numerical_letter_grade([2.516])",
                "output": "['B-']"
            },
            {
                "input": "numerical_letter_grade([6, 5.144, 4.622, 7.362, 8.196])",
                "output": "['A', 'A', 'A', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([6.618])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([3.111])",
                "output": "['B+']"
            },
            {
                "input": "numerical_letter_grade([9.54, 5, 6.671, 1, 5.784])",
                "output": "['A', 'A', 'A', 'D', 'A']"
            },
            {
                "input": "numerical_letter_grade([3.367])",
                "output": "['A-']"
            },
            {
                "input": "numerical_letter_grade([4.202])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([3.411])",
                "output": "['A-']"
            },
            {
                "input": "numerical_letter_grade([4.845])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([6.363])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([1.699])",
                "output": "['C-']"
            },
            {
                "input": "numerical_letter_grade([4.682])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([2.597])",
                "output": "['B-']"
            },
            {
                "input": "numerical_letter_grade([1.275])",
                "output": "['D+']"
            },
            {
                "input": "numerical_letter_grade([5.288])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([0.0])",
                "output": "['E']"
            },
            {
                "input": "numerical_letter_grade([1.266, 7, 4.913, 2, 1.115])",
                "output": "['D+', 'A', 'A', 'C', 'D+']"
            },
            {
                "input": "numerical_letter_grade([1.891])",
                "output": "['C']"
            },
            {
                "input": "numerical_letter_grade([6.423])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([1.415])",
                "output": "['C-']"
            },
            {
                "input": "numerical_letter_grade([5.442])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([1.511])",
                "output": "['C-']"
            },
            {
                "input": "numerical_letter_grade([9.553, 3, 1.754, 7, 7.712])",
                "output": "['A', 'B', 'C', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([5.778])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([6, 2.642, 5.179, 5.542, 7.925])",
                "output": "['A', 'B-', 'A', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([2.169])",
                "output": "['C+']"
            },
            {
                "input": "numerical_letter_grade([4.86])",
                "output": "['A']"
            },
            {
                "input": "numerical_letter_grade([2.454, 8, 1.163, 2, 3.831])",
                "output": "['B-', 'A', 'D+', 'C', 'A']"
            },
            {
                "input": "numerical_letter_grade([3, 1.608, 4.584, 1.801, 5.528])",
                "output": "['B', 'C-', 'A', 'C', 'A']"
            },
            {
                "input": "numerical_letter_grade([8.911, 1, 5.562, 6, 1.001])",
                "output": "['A', 'D', 'A', 'A', 'D+']"
            },
            {
                "input": "numerical_letter_grade([4.84, 4, 4.974, 6, 5.319])",
                "output": "['A', 'A+', 'A', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([1.143])",
                "output": "['D+']"
            },
            {
                "input": "numerical_letter_grade([4.477, 7, 6.699, 6, 7.022])",
                "output": "['A', 'A', 'A', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([1.878])",
                "output": "['C']"
            },
            {
                "input": "numerical_letter_grade([4.152, 7, 2.102, 5, 8.879])",
                "output": "['A', 'A', 'C+', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([6.042, 3, 5.935, 5, 5.423])",
                "output": "['A', 'B', 'A', 'A', 'A']"
            },
            {
                "input": "numerical_letter_grade([2.259])",
                "output": "['C+']"
            },
            {
                "input": "numerical_letter_grade([1, 1.181, 4.176, 7.002, 5.356])",
                "output": "['D', 'D+', 'A', 'A', 'A']"
            }
        ]
    },
    {
        "problem_description": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
        "ground truth": "def prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
        "instances": [
            {
                "input": "prime_length(\"qchjyep\")",
                "output": "True"
            },
            {
                "input": "prime_length('MadaM')",
                "output": "True"
            },
            {
                "input": "prime_length(\"qdfzqf\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"tjrAO\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"tmuyfsz\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"bvapxjkbeidr\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"A\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"epfrnej\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"franuetws\")",
                "output": "False"
            },
            {
                "input": "prime_length('kittens')",
                "output": "True"
            },
            {
                "input": "prime_length('')",
                "output": "False"
            },
            {
                "input": "prime_length('abcdcba')",
                "output": "True"
            },
            {
                "input": "prime_length(\"GJT\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"CLkWVAy\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"fmvpwsnmexejwelfzrwd\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"Q\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"lgtybs\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"npprtgh\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"FFFHK\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"imP\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"RzcKTUMY\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"OXLRMH\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"rgToy\")",
                "output": "True"
            },
            {
                "input": "prime_length('HI')",
                "output": "True"
            },
            {
                "input": "prime_length(\"abxzTRAvy\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"shx\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"eli\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"iirpz\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"l\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"pfdybfcv\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"O\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"lqv\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"tzivbr\")",
                "output": "False"
            },
            {
                "input": "prime_length('Wow')",
                "output": "True"
            },
            {
                "input": "prime_length(\"sskt\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"jkgGmgN\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"juuknp\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"xlvxscr\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"nvyptlgbqohuyzhxa\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"rtwofnjpq\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"glho\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"kajdcplp\")",
                "output": "False"
            },
            {
                "input": "prime_length('wow')",
                "output": "True"
            },
            {
                "input": "prime_length(\"U\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"ZJmxcsrY\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"slden\")",
                "output": "True"
            },
            {
                "input": "prime_length('Hello')",
                "output": "True"
            },
            {
                "input": "prime_length(\"bokic\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"agrox\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"wZQhHpZ\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"tEvHnl\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"ovdreywuo\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"TYB\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"dqv\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"hnsfqprypsu\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"cSvovfhBl\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"QHC\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"jnln\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"jJpkg\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"wwIQdHJO\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"aQW\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"ltok\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"gamrlrwjxat\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"ACwrd\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"z\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"ouu\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"jeie\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"nktpxkp\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"RGBbsrmp\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"T\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"flvsizus\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"rpbojn\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"rlqmycut\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"hsidwvp\")",
                "output": "True"
            },
            {
                "input": "prime_length('go')",
                "output": "True"
            },
            {
                "input": "prime_length(\"ihngswanrco\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"xCOH\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"HGXWQ\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"pivnccob\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"thmdu\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"opumjzxrrcgwsktjnivm\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"iwekhb\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"KKZUZ\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"czxkhyfbyrqq\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"K\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"ols\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"cjIfCschr\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"dxn\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"QOQbMgiYa\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"vPlgFeox\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"woj\")",
                "output": "True"
            },
            {
                "input": "prime_length('0')",
                "output": "False"
            },
            {
                "input": "prime_length('gogo')",
                "output": "False"
            },
            {
                "input": "prime_length(\"PcaJIZ\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"qyfrfqfrk\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"qqeutcwkaubezglnynmo\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"EMwCiT\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"ker\")",
                "output": "True"
            },
            {
                "input": "prime_length('orange')",
                "output": "False"
            },
            {
                "input": "prime_length(\"gfnDFP\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"cmqpqfydpvzwnsxewhzf\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"uYCFavt\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"jxrsid\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"czwX\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"Z\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"jbmqdwtvhggs\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"ojj\")",
                "output": "True"
            },
            {
                "input": "prime_length('Madam')",
                "output": "True"
            },
            {
                "input": "prime_length(\"tXx\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"aqvfw\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"dirdF\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"xbZflKTlX\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"M\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"UrDBLbeLu\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"bZlkvUQw\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"ftfaho\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"qfymul\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"ipuadvzafio\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"diwb\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"mlgjcwr\")",
                "output": "True"
            },
            {
                "input": "prime_length('world')",
                "output": "True"
            },
            {
                "input": "prime_length(\"sjaprrmn\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"dvqzd\")",
                "output": "True"
            },
            {
                "input": "prime_length('M')",
                "output": "False"
            },
            {
                "input": "prime_length(\"jyqqpdapyzeytzzeg\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"hspswo\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"fuc\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"LhMKFpz\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"RXWYQ\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"nntrracrwmohj\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"njttx\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"tu\")",
                "output": "True"
            },
            {
                "input": "prime_length(\"ynslwx\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"ZNGakV\")",
                "output": "False"
            },
            {
                "input": "prime_length(\"t\")",
                "output": "False"
            }
        ]
    },
    {
        "problem_description": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n",
        "ground truth": "def starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
        "instances": [
            {
                "input": "starts_one_ends(7)",
                "output": "1800000"
            },
            {
                "input": "starts_one_ends(1)",
                "output": "1"
            },
            {
                "input": "starts_one_ends(6)",
                "output": "180000"
            },
            {
                "input": "starts_one_ends(19)",
                "output": "1800000000000000000"
            },
            {
                "input": "starts_one_ends(11)",
                "output": "18000000000"
            },
            {
                "input": "starts_one_ends(9)",
                "output": "180000000"
            },
            {
                "input": "starts_one_ends(15)",
                "output": "180000000000000"
            },
            {
                "input": "starts_one_ends(8)",
                "output": "18000000"
            },
            {
                "input": "starts_one_ends(20)",
                "output": "18000000000000000000"
            },
            {
                "input": "starts_one_ends(18)",
                "output": "180000000000000000"
            },
            {
                "input": "starts_one_ends(17)",
                "output": "18000000000000000"
            },
            {
                "input": "starts_one_ends(2)",
                "output": "18"
            },
            {
                "input": "starts_one_ends(4)",
                "output": "1800"
            },
            {
                "input": "starts_one_ends(14)",
                "output": "18000000000000"
            },
            {
                "input": "starts_one_ends(5)",
                "output": "18000"
            },
            {
                "input": "starts_one_ends(13)",
                "output": "1800000000000"
            },
            {
                "input": "starts_one_ends(16)",
                "output": "1800000000000000"
            },
            {
                "input": "starts_one_ends(12)",
                "output": "180000000000"
            },
            {
                "input": "starts_one_ends(3)",
                "output": "180"
            },
            {
                "input": "starts_one_ends(10)",
                "output": "1800000000"
            }
        ]
    },
    {
        "problem_description": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
        "ground truth": "def solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n",
        "instances": [
            {
                "input": "solve(8888)",
                "output": "'100000'"
            },
            {
                "input": "solve(1718)",
                "output": "'10001'"
            },
            {
                "input": "solve(3678)",
                "output": "'11000'"
            },
            {
                "input": "solve(6758)",
                "output": "'11010'"
            },
            {
                "input": "solve(7814)",
                "output": "'10100'"
            },
            {
                "input": "solve(2193)",
                "output": "'1111'"
            },
            {
                "input": "solve(4714)",
                "output": "'10000'"
            },
            {
                "input": "solve(6013)",
                "output": "'1010'"
            },
            {
                "input": "solve(4906)",
                "output": "'10011'"
            },
            {
                "input": "solve(5881)",
                "output": "'10110'"
            },
            {
                "input": "solve(6183)",
                "output": "'10010'"
            },
            {
                "input": "solve(7579)",
                "output": "'11100'"
            },
            {
                "input": "solve(4145)",
                "output": "'1110'"
            },
            {
                "input": "solve(4076)",
                "output": "'10001'"
            },
            {
                "input": "solve(6033)",
                "output": "'1100'"
            },
            {
                "input": "solve(8992)",
                "output": "'11100'"
            },
            {
                "input": "solve(9688)",
                "output": "'11111'"
            },
            {
                "input": "solve(8671)",
                "output": "'10110'"
            },
            {
                "input": "solve(4743)",
                "output": "'10010'"
            },
            {
                "input": "solve(1651)",
                "output": "'1101'"
            },
            {
                "input": "solve(9932)",
                "output": "'10111'"
            },
            {
                "input": "solve(120)",
                "output": "'11'"
            },
            {
                "input": "solve(4809)",
                "output": "'10101'"
            },
            {
                "input": "solve(7181)",
                "output": "'10001'"
            },
            {
                "input": "solve(5383)",
                "output": "'10011'"
            },
            {
                "input": "solve(5389)",
                "output": "'11001'"
            },
            {
                "input": "solve(8259)",
                "output": "'11000'"
            },
            {
                "input": "solve(8540)",
                "output": "'10001'"
            },
            {
                "input": "solve(1583)",
                "output": "'10001'"
            },
            {
                "input": "solve(9468)",
                "output": "'11011'"
            },
            {
                "input": "solve(8774)",
                "output": "'11010'"
            },
            {
                "input": "solve(1259)",
                "output": "'10001'"
            },
            {
                "input": "solve(4876)",
                "output": "'11001'"
            },
            {
                "input": "solve(9641)",
                "output": "'10100'"
            },
            {
                "input": "solve(4647)",
                "output": "'10101'"
            },
            {
                "input": "solve(6795)",
                "output": "'11011'"
            },
            {
                "input": "solve(9046)",
                "output": "'10011'"
            },
            {
                "input": "solve(1421)",
                "output": "'1000'"
            },
            {
                "input": "solve(2717)",
                "output": "'10001'"
            },
            {
                "input": "solve(2226)",
                "output": "'1100'"
            },
            {
                "input": "solve(9085)",
                "output": "'10110'"
            },
            {
                "input": "solve(2617)",
                "output": "'10000'"
            },
            {
                "input": "solve(1939)",
                "output": "'10110'"
            },
            {
                "input": "solve(1649)",
                "output": "'10100'"
            },
            {
                "input": "solve(9391)",
                "output": "'10110'"
            },
            {
                "input": "solve(8677)",
                "output": "'11100'"
            },
            {
                "input": "solve(5084)",
                "output": "'10001'"
            },
            {
                "input": "solve(9844)",
                "output": "'11001'"
            },
            {
                "input": "solve(4963)",
                "output": "'10110'"
            },
            {
                "input": "solve(336)",
                "output": "'1100'"
            },
            {
                "input": "solve(5037)",
                "output": "'1111'"
            },
            {
                "input": "solve(3304)",
                "output": "'1010'"
            },
            {
                "input": "solve(615)",
                "output": "'1100'"
            },
            {
                "input": "solve(6789)",
                "output": "'11110'"
            },
            {
                "input": "solve(4324)",
                "output": "'1101'"
            },
            {
                "input": "solve(6286)",
                "output": "'10110'"
            },
            {
                "input": "solve(5749)",
                "output": "'11001'"
            },
            {
                "input": "solve(8757)",
                "output": "'11011'"
            },
            {
                "input": "solve(7793)",
                "output": "'11010'"
            },
            {
                "input": "solve(9350)",
                "output": "'10001'"
            },
            {
                "input": "solve(5396)",
                "output": "'10111'"
            },
            {
                "input": "solve(7187)",
                "output": "'10111'"
            },
            {
                "input": "solve(4420)",
                "output": "'1010'"
            },
            {
                "input": "solve(445)",
                "output": "'1101'"
            },
            {
                "input": "solve(1154)",
                "output": "'1011'"
            },
            {
                "input": "solve(7839)",
                "output": "'11011'"
            },
            {
                "input": "solve(2762)",
                "output": "'10001'"
            },
            {
                "input": "solve(4989)",
                "output": "'11110'"
            },
            {
                "input": "solve(2206)",
                "output": "'1010'"
            },
            {
                "input": "solve(8319)",
                "output": "'10101'"
            },
            {
                "input": "solve(6028)",
                "output": "'10000'"
            },
            {
                "input": "solve(1011)",
                "output": "'11'"
            },
            {
                "input": "solve(4701)",
                "output": "'1100'"
            },
            {
                "input": "solve(8490)",
                "output": "'10101'"
            },
            {
                "input": "solve(8769)",
                "output": "'11110'"
            },
            {
                "input": "solve(6580)",
                "output": "'10011'"
            },
            {
                "input": "solve(8782)",
                "output": "'11001'"
            },
            {
                "input": "solve(6281)",
                "output": "'10001'"
            },
            {
                "input": "solve(8811)",
                "output": "'10010'"
            },
            {
                "input": "solve(1488)",
                "output": "'10101'"
            },
            {
                "input": "solve(1105)",
                "output": "'111'"
            },
            {
                "input": "solve(388)",
                "output": "'10011'"
            },
            {
                "input": "solve(9566)",
                "output": "'11010'"
            },
            {
                "input": "solve(4399)",
                "output": "'11001'"
            },
            {
                "input": "solve(8429)",
                "output": "'10111'"
            },
            {
                "input": "solve(5052)",
                "output": "'1100'"
            },
            {
                "input": "solve(4558)",
                "output": "'10110'"
            },
            {
                "input": "solve(7944)",
                "output": "'11000'"
            },
            {
                "input": "solve(4237)",
                "output": "'10000'"
            },
            {
                "input": "solve(122)",
                "output": "'101'"
            },
            {
                "input": "solve(8961)",
                "output": "'11000'"
            },
            {
                "input": "solve(8688)",
                "output": "'11110'"
            },
            {
                "input": "solve(8525)",
                "output": "'10100'"
            },
            {
                "input": "solve(4354)",
                "output": "'10000'"
            },
            {
                "input": "solve(8524)",
                "output": "'10011'"
            },
            {
                "input": "solve(529)",
                "output": "'10000'"
            },
            {
                "input": "solve(8438)",
                "output": "'10111'"
            },
            {
                "input": "solve(9508)",
                "output": "'10110'"
            },
            {
                "input": "solve(856)",
                "output": "'10011'"
            },
            {
                "input": "solve(7459)",
                "output": "'11001'"
            }
        ]
    },
    {
        "problem_description": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
        "ground truth": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
        "instances": [
            {
                "input": "add([7, 90])",
                "output": "90"
            },
            {
                "input": "add([6, 9, 7, 8, 2, 124])",
                "output": "132"
            },
            {
                "input": "add([8, 91])",
                "output": "0"
            },
            {
                "input": "add([9, 90])",
                "output": "90"
            },
            {
                "input": "add([4, 1, 8, 6])",
                "output": "6"
            },
            {
                "input": "add([5, 5, 9, 9])",
                "output": "0"
            },
            {
                "input": "add([5, 2, 10, 3])",
                "output": "2"
            },
            {
                "input": "add([6, 91])",
                "output": "0"
            },
            {
                "input": "add([7, 8, 2, 8, 5, 119])",
                "output": "16"
            },
            {
                "input": "add([2, 84])",
                "output": "84"
            },
            {
                "input": "add([6, 4, 6, 3])",
                "output": "4"
            },
            {
                "input": "add([6, 3, 8, 2])",
                "output": "2"
            },
            {
                "input": "add([8, 2, 2, 8])",
                "output": "10"
            },
            {
                "input": "add([8, 85])",
                "output": "0"
            },
            {
                "input": "add([7, 2, 10, 5])",
                "output": "2"
            },
            {
                "input": "add([1, 5, 7, 10])",
                "output": "10"
            },
            {
                "input": "add([7, 5, 1, 11, 4, 120])",
                "output": "120"
            },
            {
                "input": "add([5, 2, 5, 6])",
                "output": "8"
            },
            {
                "input": "add([1, 7, 3, 5, 6, 126])",
                "output": "126"
            },
            {
                "input": "add([3, 87])",
                "output": "0"
            },
            {
                "input": "add([6, 3, 9, 12])",
                "output": "12"
            },
            {
                "input": "add([6, 7, 5, 4, 7, 117])",
                "output": "4"
            },
            {
                "input": "add([4, 84])",
                "output": "84"
            },
            {
                "input": "add([8, 83])",
                "output": "0"
            },
            {
                "input": "add([7, 2, 9, 2])",
                "output": "4"
            },
            {
                "input": "add([8, 1, 8, 4])",
                "output": "4"
            },
            {
                "input": "add([2, 1, 11, 5])",
                "output": "0"
            },
            {
                "input": "add([3, 10, 9, 8, 1, 122])",
                "output": "140"
            },
            {
                "input": "add([7, 88])",
                "output": "88"
            },
            {
                "input": "add([7, 3, 4, 12, 5, 119])",
                "output": "12"
            },
            {
                "input": "add([9, 9, 11, 10, 6, 121])",
                "output": "10"
            },
            {
                "input": "add([9, 3, 9, 2])",
                "output": "2"
            },
            {
                "input": "add([5, 85])",
                "output": "0"
            },
            {
                "input": "add([3, 3, 11, 8])",
                "output": "8"
            },
            {
                "input": "add([7, 5, 4, 9])",
                "output": "0"
            },
            {
                "input": "add([2, 10, 1, 5, 1, 127])",
                "output": "10"
            },
            {
                "input": "add([9, 4, 9, 11, 2, 127])",
                "output": "4"
            },
            {
                "input": "add([4, 86])",
                "output": "86"
            },
            {
                "input": "add([6, 4, 9, 12, 1, 122])",
                "output": "138"
            },
            {
                "input": "add([9, 3, 8, 2])",
                "output": "2"
            },
            {
                "input": "add([3, 88])",
                "output": "88"
            },
            {
                "input": "add([5, 8, 10, 8, 7, 117])",
                "output": "16"
            },
            {
                "input": "add([2, 4, 11, 8, 6, 123])",
                "output": "12"
            },
            {
                "input": "add([2, 2, 3, 6, 7, 123])",
                "output": "8"
            },
            {
                "input": "add([9, 10, 4, 10, 2, 120])",
                "output": "140"
            },
            {
                "input": "add([4, 88])",
                "output": "88"
            },
            {
                "input": "add([8, 1, 9, 9, 1, 124])",
                "output": "124"
            },
            {
                "input": "add([5, 3, 5, 12])",
                "output": "12"
            },
            {
                "input": "add([2, 9, 5, 12, 6, 127])",
                "output": "12"
            },
            {
                "input": "add([2, 85])",
                "output": "0"
            },
            {
                "input": "add([1, 87])",
                "output": "0"
            },
            {
                "input": "add([4, 8, 9, 6, 2, 121])",
                "output": "14"
            },
            {
                "input": "add([6, 85])",
                "output": "0"
            },
            {
                "input": "add([4, 0, 6, 7])",
                "output": "0"
            },
            {
                "input": "add([8, 84])",
                "output": "84"
            },
            {
                "input": "add([8, 7, 5, 6, 2, 127])",
                "output": "6"
            },
            {
                "input": "add([6, 3, 6, 11])",
                "output": "0"
            },
            {
                "input": "add([2, 1, 10, 12])",
                "output": "12"
            },
            {
                "input": "add([9, 87])",
                "output": "0"
            },
            {
                "input": "add([8, 5, 8, 3])",
                "output": "0"
            },
            {
                "input": "add([7, 5, 9, 12, 6, 120])",
                "output": "132"
            },
            {
                "input": "add([1, 1, 5, 4, 3, 124])",
                "output": "128"
            },
            {
                "input": "add([5, 91])",
                "output": "0"
            },
            {
                "input": "add([1, 9, 11, 10, 3, 118])",
                "output": "128"
            },
            {
                "input": "add([8, 3, 8, 7, 4, 120])",
                "output": "120"
            },
            {
                "input": "add([9, 93])",
                "output": "0"
            },
            {
                "input": "add([3, 1, 9, 6])",
                "output": "6"
            },
            {
                "input": "add([3, 10, 4, 10, 4, 118])",
                "output": "138"
            },
            {
                "input": "add([2, 3, 1, 11])",
                "output": "0"
            },
            {
                "input": "add([2, 5, 1, 6, 3, 122])",
                "output": "128"
            },
            {
                "input": "add([4, 5, 10, 9])",
                "output": "0"
            },
            {
                "input": "add([5, 92])",
                "output": "92"
            },
            {
                "input": "add([3, 8, 5, 4, 4, 121])",
                "output": "12"
            },
            {
                "input": "add([6, 4, 7, 6])",
                "output": "10"
            },
            {
                "input": "add([6, 90])",
                "output": "90"
            },
            {
                "input": "add([9, 6, 11, 5, 4, 120])",
                "output": "126"
            },
            {
                "input": "add([7, 1, 8, 12])",
                "output": "12"
            },
            {
                "input": "add([4, 5, 6, 7, 2, 122])",
                "output": "122"
            },
            {
                "input": "add([2, 4, 6, 2])",
                "output": "6"
            },
            {
                "input": "add([5, 5, 6, 9])",
                "output": "0"
            },
            {
                "input": "add([6, 88])",
                "output": "88"
            },
            {
                "input": "add([9, 91])",
                "output": "0"
            },
            {
                "input": "add([7, 1, 1, 7, 7, 123])",
                "output": "0"
            },
            {
                "input": "add([5, 4, 2, 12])",
                "output": "16"
            },
            {
                "input": "add([5, 5, 4, 12, 5, 120])",
                "output": "132"
            },
            {
                "input": "add([4, 3, 3, 4])",
                "output": "4"
            },
            {
                "input": "add([9, 89])",
                "output": "0"
            },
            {
                "input": "add([4, 4, 1, 8, 6, 125])",
                "output": "12"
            },
            {
                "input": "add([6, 3, 1, 6])",
                "output": "6"
            },
            {
                "input": "add([5, 9, 1, 3, 6, 125])",
                "output": "0"
            },
            {
                "input": "add([5, 5, 5, 9])",
                "output": "0"
            },
            {
                "input": "add([6, 92])",
                "output": "92"
            },
            {
                "input": "add([7, 89])",
                "output": "0"
            },
            {
                "input": "add([1, 4, 7, 6, 5, 127])",
                "output": "10"
            }
        ]
    },
    {
        "problem_description": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
        "ground truth": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
        "instances": [
            {
                "input": "anti_shuffle(\"bogba\")",
                "output": "'abbgo'"
            },
            {
                "input": "anti_shuffle(\"vfvqwbwo\")",
                "output": "'bfoqvvww'"
            },
            {
                "input": "anti_shuffle(\"zhjdgioa\")",
                "output": "'adghijoz'"
            },
            {
                "input": "anti_shuffle(\"eyotuudlk\")",
                "output": "'deklotuuy'"
            },
            {
                "input": "anti_shuffle(\"^F|FQbJWYLysYdQj\")",
                "output": "'FFJLQQWYY^bdjsy|'"
            },
            {
                "input": "anti_shuffle(\"femlxfmmd\")",
                "output": "'defflmmmx'"
            },
            {
                "input": "anti_shuffle(\"uh\")",
                "output": "'hu'"
            },
            {
                "input": "anti_shuffle(\"n\")",
                "output": "'n'"
            },
            {
                "input": "anti_shuffle(\"ivwo\")",
                "output": "'iovw'"
            },
            {
                "input": "anti_shuffle(\"jnvizowzn\")",
                "output": "'ijnnovwzz'"
            },
            {
                "input": "anti_shuffle(\"wfnhodec\")",
                "output": "'cdefhnow'"
            },
            {
                "input": "anti_shuffle(\"|hYh/gEdoS|YIN|qp|\")",
                "output": "'/EINSYYdghhopq||||'"
            },
            {
                "input": "anti_shuffle(\"tfc\")",
                "output": "'cft'"
            },
            {
                "input": "anti_shuffle(\"+@^^iM%^Bi\")",
                "output": "'%+@BM^^^ii'"
            },
            {
                "input": "anti_shuffle(\"bi\")",
                "output": "'bi'"
            },
            {
                "input": "anti_shuffle(\"wvF\")",
                "output": "'Fvw'"
            },
            {
                "input": "anti_shuffle(\"ej\")",
                "output": "'ej'"
            },
            {
                "input": "anti_shuffle(\"eGCr\")",
                "output": "'CGer'"
            },
            {
                "input": "anti_shuffle(\"tyvbaqgq\")",
                "output": "'abgqqtvy'"
            },
            {
                "input": "anti_shuffle(\"zpvls\")",
                "output": "'lpsvz'"
            },
            {
                "input": "anti_shuffle(\"cMwLojCFt UZ!Ounjg\")",
                "output": "'CFLMcjotw !OUZgjnu'"
            },
            {
                "input": "anti_shuffle(\"orpb\")",
                "output": "'bopr'"
            },
            {
                "input": "anti_shuffle(\"ffe\")",
                "output": "'eff'"
            },
            {
                "input": "anti_shuffle(\"ckUS\")",
                "output": "'SUck'"
            },
            {
                "input": "anti_shuffle(\"D%kt +F_hYz\")",
                "output": "'%Dkt +FY_hz'"
            },
            {
                "input": "anti_shuffle(\"dbrynL\")",
                "output": "'Lbdnry'"
            },
            {
                "input": "anti_shuffle(\"mdnilma\")",
                "output": "'adilmmn'"
            },
            {
                "input": "anti_shuffle(\"mugrj\")",
                "output": "'gjmru'"
            },
            {
                "input": "anti_shuffle(\"jylaidovu\")",
                "output": "'adijlouvy'"
            },
            {
                "input": "anti_shuffle(\"rmkoahewjtxh\")",
                "output": "'aehhjkmortwx'"
            },
            {
                "input": "anti_shuffle(\"biiohmoi\")",
                "output": "'bhiiimoo'"
            },
            {
                "input": "anti_shuffle(\"faefoaekmj\")",
                "output": "'aaeeffjkmo'"
            },
            {
                "input": "anti_shuffle(\"PLl\")",
                "output": "'LPl'"
            },
            {
                "input": "anti_shuffle(\"jzmfq\")",
                "output": "'fjmqz'"
            },
            {
                "input": "anti_shuffle(\"per\")",
                "output": "'epr'"
            },
            {
                "input": "anti_shuffle(\"xenh\")",
                "output": "'ehnx'"
            },
            {
                "input": "anti_shuffle(\"vubglcl\")",
                "output": "'bcglluv'"
            },
            {
                "input": "anti_shuffle(\"ihnrb\")",
                "output": "'bhinr'"
            },
            {
                "input": "anti_shuffle(\"NeETP\")",
                "output": "'ENPTe'"
            },
            {
                "input": "anti_shuffle(\"ZUvIbBJNtqA~\")",
                "output": "'ABIJNUZbqtv~'"
            },
            {
                "input": "anti_shuffle(\"oo\")",
                "output": "'oo'"
            },
            {
                "input": "anti_shuffle(\"p\")",
                "output": "'p'"
            },
            {
                "input": "anti_shuffle(\"lJtH\")",
                "output": "'HJlt'"
            },
            {
                "input": "anti_shuffle(\"q\")",
                "output": "'q'"
            },
            {
                "input": "anti_shuffle(\"?a~s$ J+rMt!MzNQ~J\")",
                "output": "'$?as~ !+JJMMNQrtz~'"
            },
            {
                "input": "anti_shuffle(\"AtD\")",
                "output": "'ADt'"
            },
            {
                "input": "anti_shuffle(\"OhAOix\")",
                "output": "'AOOhix'"
            },
            {
                "input": "anti_shuffle(\"noefzjcyz\")",
                "output": "'cefjnoyzz'"
            },
            {
                "input": "anti_shuffle(\"+*ppiETg/Q/eT@S\")",
                "output": "'*+//@EQSTTegipp'"
            },
            {
                "input": "anti_shuffle(\"hnbO\")",
                "output": "'Obhn'"
            },
            {
                "input": "anti_shuffle(\"ubd\")",
                "output": "'bdu'"
            },
            {
                "input": "anti_shuffle(\"hjg\")",
                "output": "'ghj'"
            },
            {
                "input": "anti_shuffle(\"g\")",
                "output": "'g'"
            },
            {
                "input": "anti_shuffle(\"kcivkln\")",
                "output": "'cikklnv'"
            },
            {
                "input": "anti_shuffle(\"%aTGjg|^!Wsm/B\")",
                "output": "'!%/BGTW^agjms|'"
            },
            {
                "input": "anti_shuffle(\"zyptehc\")",
                "output": "'cehptyz'"
            },
            {
                "input": "anti_shuffle(\"bdbqgf\")",
                "output": "'bbdfgq'"
            },
            {
                "input": "anti_shuffle(\"zpdggq\")",
                "output": "'dggpqz'"
            },
            {
                "input": "anti_shuffle(\"tJ%sMi-jRu\")",
                "output": "'%-JMRijstu'"
            },
            {
                "input": "anti_shuffle('abcd')",
                "output": "'abcd'"
            },
            {
                "input": "anti_shuffle(\"a\")",
                "output": "'a'"
            },
            {
                "input": "anti_shuffle(\"ffi\")",
                "output": "'ffi'"
            },
            {
                "input": "anti_shuffle(\"ao\")",
                "output": "'ao'"
            },
            {
                "input": "anti_shuffle('Hi')",
                "output": "'Hi'"
            },
            {
                "input": "anti_shuffle(\"geu\")",
                "output": "'egu'"
            },
            {
                "input": "anti_shuffle(\"Vhp\")",
                "output": "'Vhp'"
            },
            {
                "input": "anti_shuffle(\"ouf\")",
                "output": "'fou'"
            },
            {
                "input": "anti_shuffle(\"veftsplp\")",
                "output": "'eflppstv'"
            },
            {
                "input": "anti_shuffle('Hello World!!!')",
                "output": "'Hello !!!Wdlor'"
            },
            {
                "input": "anti_shuffle('hello')",
                "output": "'ehllo'"
            },
            {
                "input": "anti_shuffle(\"wxmksuy\")",
                "output": "'kmsuwxy'"
            },
            {
                "input": "anti_shuffle(\"dbevtyqlk\")",
                "output": "'bdeklqtvy'"
            },
            {
                "input": "anti_shuffle(\"bzri\")",
                "output": "'birz'"
            },
            {
                "input": "anti_shuffle(\"yU!G+xMXm?\")",
                "output": "'!+?GMUXmxy'"
            },
            {
                "input": "anti_shuffle(\"d_^BpZ!S:J#\")",
                "output": "'!#:BJSZ^_dp'"
            },
            {
                "input": "anti_shuffle(\"npcpS\")",
                "output": "'Scnpp'"
            },
            {
                "input": "anti_shuffle(\"dsh\")",
                "output": "'dhs'"
            },
            {
                "input": "anti_shuffle(\"nkeipi\")",
                "output": "'eiiknp'"
            },
            {
                "input": "anti_shuffle(\"dj\")",
                "output": "'dj'"
            },
            {
                "input": "anti_shuffle(\"duiofqtyq\")",
                "output": "'dfioqqtuy'"
            },
            {
                "input": "anti_shuffle(\"mik\")",
                "output": "'ikm'"
            },
            {
                "input": "anti_shuffle(\"iKQEO\")",
                "output": "'EKOQi'"
            },
            {
                "input": "anti_shuffle(\"rpapvxs\")",
                "output": "'apprsvx'"
            },
            {
                "input": "anti_shuffle(\"SATigd\")",
                "output": "'ASTdgi'"
            },
            {
                "input": "anti_shuffle(\"celklujiw\")",
                "output": "'ceijklluw'"
            },
            {
                "input": "anti_shuffle('number')",
                "output": "'bemnru'"
            },
            {
                "input": "anti_shuffle(\"bnsvtwdz\")",
                "output": "'bdnstvwz'"
            },
            {
                "input": "anti_shuffle(\"k\")",
                "output": "'k'"
            },
            {
                "input": "anti_shuffle(\"zraxgcjms\")",
                "output": "'acgjmrsxz'"
            },
            {
                "input": "anti_shuffle(\"oosnf\")",
                "output": "'fnoos'"
            },
            {
                "input": "anti_shuffle('')",
                "output": "''"
            },
            {
                "input": "anti_shuffle(\"xscw\")",
                "output": "'cswx'"
            },
            {
                "input": "anti_shuffle(\"gyvvyfnxeabw\")",
                "output": "'abefgnvvwxyy'"
            },
            {
                "input": "anti_shuffle(\"GuRhW\")",
                "output": "'GRWhu'"
            },
            {
                "input": "anti_shuffle(\"byg\")",
                "output": "'bgy'"
            },
            {
                "input": "anti_shuffle(\"iuvjpx\")",
                "output": "'ijpuvx'"
            },
            {
                "input": "anti_shuffle(\"ylyd\")",
                "output": "'dlyy'"
            },
            {
                "input": "anti_shuffle(\"*Q*J@CV#c \")",
                "output": "'#**@CJQVc '"
            },
            {
                "input": "anti_shuffle(\"pgj\")",
                "output": "'gjp'"
            },
            {
                "input": "anti_shuffle(\"t\")",
                "output": "'t'"
            },
            {
                "input": "anti_shuffle(\"iqi\")",
                "output": "'iiq'"
            },
            {
                "input": "anti_shuffle(\"pyqinvmjl\")",
                "output": "'ijlmnpqvy'"
            },
            {
                "input": "anti_shuffle(\"jva\")",
                "output": "'ajv'"
            },
            {
                "input": "anti_shuffle(\"vHZc:ls!!|/+p/t\")",
                "output": "'!!+//:HZclpstv|'"
            },
            {
                "input": "anti_shuffle(\"q|GJBtlum__|oHCjO\")",
                "output": "'BCGHJO__jlmoqtu||'"
            },
            {
                "input": "anti_shuffle(\"CRkYEb\")",
                "output": "'CERYbk'"
            },
            {
                "input": "anti_shuffle(\"mNXEj\")",
                "output": "'ENXjm'"
            },
            {
                "input": "anti_shuffle(\"iabx$?GN%vn-TuM~v \")",
                "output": "'$%-?GMNTabinuvvx~ '"
            },
            {
                "input": "anti_shuffle(\"SXZKbBnNGkoJ\")",
                "output": "'BGJKNSXZbkno'"
            },
            {
                "input": "anti_shuffle(\"dqsix\")",
                "output": "'diqsx'"
            },
            {
                "input": "anti_shuffle(\"vywlbywvzgq\")",
                "output": "'bglqvvwwyyz'"
            },
            {
                "input": "anti_shuffle(\"nnlqs\")",
                "output": "'lnnqs'"
            },
            {
                "input": "anti_shuffle(\"$m@#cT-luArr+fG+\")",
                "output": "'#$++-@AGTcflmrru'"
            },
            {
                "input": "anti_shuffle(\"ntcnv\")",
                "output": "'cnntv'"
            }
        ]
    },
    {
        "problem_description": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
        "ground truth": "def get_row(lst, x):\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
        "instances": [
            {
                "input": "get_row([[5, 1, 6, 5, 8, 5], [4, 2, 2, 4, 9, 8], [6, 3, 7, 7, 4, 8], [1, 5, 8, 4, 10, 7], [3, 3, 6, 1, 6, 10], [2, 3, 3, 9, 9, 6]], 1)",
                "output": "[(0, 1), (3, 0), (4, 3)]"
            },
            {
                "input": "get_row([[1]], 6)",
                "output": "[]"
            },
            {
                "input": "get_row([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1)",
                "output": "[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]"
            },
            {
                "input": "get_row([[4, 7, 1, 8, 1, 1], [5, 3, 8, 9, 10, 6], [4, 6, 6, 1, 1, 1], [1, 4, 6, 3, 3, 11], [1, 3, 1, 3, 1, 10], [5, 7, 4, 9, 8, 3]], 7)",
                "output": "[(0, 1), (5, 1)]"
            },
            {
                "input": "get_row([[6, 6, 1, 4, 5, 11], [2, 2, 1, 5, 7, 4], [4, 5, 3, 5, 10, 1], [6, 5, 2, 5, 1, 10], [5, 7, 6, 8, 2, 2], [4, 5, 7, 3, 2, 5]], 6)",
                "output": "[(0, 1), (0, 0), (3, 0), (4, 2)]"
            },
            {
                "input": "get_row([[6]], 4)",
                "output": "[]"
            },
            {
                "input": "get_row([[3, 5, 2, 6, 9, 5], [5, 3, 7, 7, 6, 8], [6, 3, 3, 2, 5, 6]], 1)",
                "output": "[]"
            },
            {
                "input": "get_row([[2, 4, 7, 4, 2, 9], [2, 7, 5, 7, 10, 4], [4, 7, 6, 3, 5, 9], [4, 5, 7, 5, 2, 2], [6, 7, 7, 2, 2, 5], [5, 5, 4, 5, 5, 10]], 1)",
                "output": "[]"
            },
            {
                "input": "get_row([[6, 4, 6, 5, 10, 10], [3, 7, 7, 8, 10, 9], [1, 2, 4, 9, 9, 8], [1, 6, 1, 6, 3, 11], [1, 4, 5, 8, 6, 5], [5, 4, 7, 4, 9, 2]], 1)",
                "output": "[(2, 0), (3, 2), (3, 0), (4, 0)]"
            },
            {
                "input": "get_row([[6, 5, 4, 6, 2, 3], [3, 3, 1, 7, 6, 1], [2, 3, 8, 3, 1, 3], [2, 3, 6, 9, 3, 8], [5, 3, 3, 1, 3, 9], [4, 5, 7, 1, 7, 10]], 4)",
                "output": "[(0, 2), (5, 0)]"
            },
            {
                "input": "get_row([[4, 4, 1, 8, 10, 5], [1, 2, 5, 7, 8, 10], [4, 1, 8, 6, 2, 2], [6, 2, 3, 6, 8, 4], [6, 1, 2, 3, 1, 11], [1, 1, 5, 1, 6, 9], [3, 1, 6, 6, 5, 3]], 2)",
                "output": "[(1, 1), (2, 5), (2, 4), (3, 1), (4, 2)]"
            },
            {
                "input": "get_row([[6, 5, 3, 2, 5, 9], [4, 3, 6, 6, 5, 1], [5, 3, 2, 7, 6, 2]], 4)",
                "output": "[(1, 0)]"
            },
            {
                "input": "get_row([[5, 6, 3, 8, 9, 11], [6, 3, 7, 7, 10, 2], [3, 4, 6, 3, 1, 5], [1, 7, 6, 1, 6, 3], [6, 4, 1, 2, 7, 4], [4, 5, 7, 7, 4, 2]], 1)",
                "output": "[(2, 4), (3, 3), (3, 0), (4, 2)]"
            },
            {
                "input": "get_row([[5, 3, 3, 1, 1, 3], [6, 6, 2, 4, 6, 9], [5, 3, 8, 2, 5, 3]], 3)",
                "output": "[(0, 5), (0, 2), (0, 1), (2, 5), (2, 1)]"
            },
            {
                "input": "get_row([[5, 6, 7, 1, 4, 1], [5, 2, 8, 9, 1, 7], [6, 4, 5, 8, 1, 8], [5, 2, 4, 3, 5, 4], [4, 1, 6, 2, 3, 8], [2, 7, 2, 9, 7, 6]], 7)",
                "output": "[(0, 2), (1, 5), (5, 4), (5, 1)]"
            },
            {
                "input": "get_row([[4, 2, 7, 4, 10, 5], [5, 4, 8, 6, 6, 10], [6, 5, 3, 7, 4, 1]], 5)",
                "output": "[(0, 5), (1, 0), (2, 1)]"
            },
            {
                "input": "get_row([[6, 5, 8, 6, 5, 1], [5, 4, 3, 2, 2, 11], [6, 1, 1, 8, 1, 9], [6, 6, 1, 4, 7, 8], [6, 4, 3, 7, 7, 2], [1, 1, 6, 8, 4, 7]], 4)",
                "output": "[(1, 1), (3, 3), (4, 1), (5, 4)]"
            },
            {
                "input": "get_row([[5, 2, 6, 1, 10, 3], [5, 1, 3, 3, 3, 4], [1, 3, 4, 6, 1, 2], [4, 2, 3, 4, 8, 10], [5, 4, 7, 5, 10, 1], [5, 4, 1, 2, 1, 6], [1, 7, 4, 9, 6, 6]], 5)",
                "output": "[(0, 0), (1, 0), (4, 3), (4, 0), (5, 0)]"
            },
            {
                "input": "get_row([[5, 2, 2, 3, 2, 6], [4, 4, 1, 9, 1, 10], [1, 3, 8, 1, 10, 3], [1, 3, 1, 8, 5, 9], [4, 1, 1, 8, 5, 2], [3, 6, 2, 6, 5, 9]], 6)",
                "output": "[(0, 5), (5, 3), (5, 1)]"
            },
            {
                "input": "get_row([], 3)",
                "output": "[]"
            },
            {
                "input": "get_row([[3, 7, 6, 5, 5, 10], [1, 1, 7, 2, 2, 10], [3, 2, 2, 6, 4, 1]], 4)",
                "output": "[(2, 4)]"
            },
            {
                "input": "get_row([[2]], 5)",
                "output": "[]"
            },
            {
                "input": "get_row([[5]], 6)",
                "output": "[]"
            },
            {
                "input": "get_row([[5]], 7)",
                "output": "[]"
            },
            {
                "input": "get_row([[6, 2, 7, 6, 8, 3], [2, 2, 5, 9, 6, 11], [2, 2, 1, 9, 1, 4]], 2)",
                "output": "[(0, 1), (1, 1), (1, 0), (2, 1), (2, 0)]"
            },
            {
                "input": "get_row([[6, 5, 2, 3, 2, 4], [3, 1, 8, 6, 8, 10], [4, 6, 5, 3, 8, 3], [6, 3, 1, 6, 1, 7], [4, 7, 6, 1, 4, 2], [2, 4, 2, 1, 1, 3]], 1)",
                "output": "[(1, 1), (3, 4), (3, 2), (4, 3), (5, 4), (5, 3)]"
            },
            {
                "input": "get_row([[2, 4, 5, 8, 8, 9], [3, 1, 4, 8, 9, 10], [5, 3, 7, 6, 3, 7], [3, 7, 6, 3, 3, 10], [1, 5, 8, 6, 3, 2], [4, 2, 7, 6, 1, 11], [3, 2, 5, 1, 5, 6]], 2)",
                "output": "[(0, 0), (4, 5), (5, 1), (6, 1)]"
            },
            {
                "input": "get_row([[3]], 3)",
                "output": "[(0, 0)]"
            },
            {
                "input": "get_row([[1, 2, 2, 3, 1, 3], [2, 7, 5, 6, 5, 3], [1, 7, 8, 4, 3, 4]], 5)",
                "output": "[(1, 4), (1, 2)]"
            },
            {
                "input": "get_row([[5, 2, 7, 1, 5, 7], [3, 1, 1, 3, 6, 2], [2, 5, 4, 4, 7, 6], [2, 7, 1, 5, 6, 10], [4, 4, 7, 6, 9, 3], [1, 2, 6, 9, 3, 2], [2, 2, 5, 5, 6, 5]], 2)",
                "output": "[(0, 1), (1, 5), (2, 0), (3, 0), (5, 5), (5, 1), (6, 1), (6, 0)]"
            },
            {
                "input": "get_row([[1, 2, 4, 8, 6, 8], [3, 4, 5, 1, 3, 9], [3, 4, 7, 8, 10, 4], [6, 3, 5, 1, 8, 2], [5, 5, 5, 3, 10, 10], [3, 6, 1, 7, 5, 3], [1, 2, 8, 4, 1, 5]], 2)",
                "output": "[(0, 1), (3, 5), (6, 1)]"
            },
            {
                "input": "get_row([[3, 7, 3, 4, 10, 6], [5, 7, 1, 1, 7, 10], [4, 1, 5, 2, 2, 6], [5, 1, 5, 7, 6, 5], [4, 4, 7, 3, 5, 5], [6, 5, 5, 7, 4, 5]], 7)",
                "output": "[(0, 1), (1, 4), (1, 1), (3, 3), (4, 2), (5, 3)]"
            },
            {
                "input": "get_row([[5, 7, 2, 6, 3, 2], [5, 7, 8, 4, 10, 6], [1, 4, 4, 8, 3, 1], [6, 3, 6, 3, 9, 11], [5, 1, 5, 4, 4, 11], [6, 4, 2, 2, 2, 7]], 2)",
                "output": "[(0, 5), (0, 2), (5, 4), (5, 3), (5, 2)]"
            },
            {
                "input": "get_row([[2, 6, 5, 5, 5, 7], [5, 4, 6, 3, 2, 7], [3, 4, 4, 7, 2, 10], [1, 3, 7, 9, 6, 3], [5, 4, 6, 4, 1, 7], [2, 6, 8, 3, 2, 2]], 6)",
                "output": "[(0, 1), (1, 2), (3, 4), (4, 2), (5, 1)]"
            },
            {
                "input": "get_row([[6, 5, 1, 9, 4, 3], [6, 4, 6, 8, 10, 5], [5, 1, 6, 4, 6, 10], [2, 7, 5, 3, 9, 10], [4, 1, 7, 3, 6, 4], [3, 1, 3, 1, 5, 1]], 4)",
                "output": "[(0, 4), (1, 1), (2, 3), (4, 5), (4, 0)]"
            },
            {
                "input": "get_row([[4, 7, 5, 6, 6, 8], [2, 1, 7, 1, 8, 2], [1, 6, 6, 6, 10, 8], [6, 6, 3, 1, 1, 5], [3, 6, 6, 7, 2, 4], [6, 5, 4, 6, 10, 11]], 1)",
                "output": "[(1, 3), (1, 1), (2, 0), (3, 4), (3, 3)]"
            },
            {
                "input": "get_row([[1]], 3)",
                "output": "[]"
            },
            {
                "input": "get_row([], 5)",
                "output": "[]"
            },
            {
                "input": "get_row([[4]], 4)",
                "output": "[(0, 0)]"
            },
            {
                "input": "get_row([[2, 7, 4, 2, 6, 11], [2, 2, 1, 2, 8, 1], [3, 4, 5, 8, 7, 9], [5, 2, 2, 2, 8, 8], [3, 4, 8, 1, 7, 2], [3, 7, 7, 8, 8, 9]], 4)",
                "output": "[(0, 2), (2, 1), (4, 1)]"
            },
            {
                "input": "get_row([[6, 7, 4, 8, 7, 3], [5, 5, 6, 9, 5, 9], [1, 1, 8, 5, 6, 3]], 4)",
                "output": "[(0, 2)]"
            },
            {
                "input": "get_row([[3, 7, 5, 5, 5, 3], [2, 1, 5, 1, 1, 4], [5, 2, 6, 7, 7, 1]], 6)",
                "output": "[(2, 2)]"
            },
            {
                "input": "get_row([[3, 7, 1, 5, 5, 2], [4, 5, 1, 1, 4, 6], [3, 1, 5, 1, 7, 8], [5, 3, 6, 6, 10, 1], [3, 4, 4, 1, 2, 6], [2, 4, 3, 9, 6, 1], [1, 1, 2, 2, 7, 5]], 6)",
                "output": "[(1, 5), (3, 3), (3, 2), (4, 5), (5, 4)]"
            },
            {
                "input": "get_row([[6, 5, 5, 9, 7, 9], [6, 5, 2, 1, 8, 4], [6, 2, 2, 1, 5, 1], [2, 1, 3, 1, 10, 5], [3, 3, 1, 4, 6, 4], [6, 6, 7, 2, 5, 10], [6, 4, 4, 2, 9, 5]], 3)",
                "output": "[(3, 2), (4, 1), (4, 0)]"
            },
            {
                "input": "get_row([], 1)",
                "output": "[]"
            },
            {
                "input": "get_row([[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6]], 2)",
                "output": "[(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]"
            },
            {
                "input": "get_row([[2]], 4)",
                "output": "[]"
            },
            {
                "input": "get_row([[3, 5, 3, 7, 8, 8], [6, 3, 3, 7, 4, 4], [5, 4, 7, 3, 10, 1], [6, 3, 5, 7, 10, 8], [1, 3, 5, 6, 8, 9], [5, 2, 6, 7, 2, 4], [5, 7, 5, 9, 7, 2]], 5)",
                "output": "[(0, 1), (2, 0), (3, 2), (4, 2), (5, 0), (6, 2), (6, 0)]"
            },
            {
                "input": "get_row([[3, 6, 5, 9, 7, 4], [4, 1, 5, 8, 6, 7], [1, 6, 4, 8, 6, 3], [3, 1, 5, 8, 3, 8], [2, 6, 1, 1, 1, 2], [2, 2, 1, 1, 3, 5], [6, 4, 1, 1, 9, 1]], 4)",
                "output": "[(0, 5), (1, 0), (2, 2), (6, 1)]"
            },
            {
                "input": "get_row([[2, 5, 4, 9, 9, 1], [3, 2, 1, 6, 2, 9], [2, 6, 6, 3, 3, 2]], 1)",
                "output": "[(0, 5), (1, 2)]"
            },
            {
                "input": "get_row([], 4)",
                "output": "[]"
            },
            {
                "input": "get_row([[3, 7, 7, 5, 3, 11], [3, 1, 2, 6, 5, 2], [6, 6, 1, 2, 6, 7], [3, 6, 4, 4, 5, 9], [3, 4, 2, 2, 1, 10], [5, 2, 7, 2, 1, 6], [3, 3, 8, 1, 2, 4]], 4)",
                "output": "[(3, 3), (3, 2), (4, 1), (6, 5)]"
            },
            {
                "input": "get_row([[1, 1, 5, 1, 10, 10], [4, 7, 8, 6, 4, 9], [4, 5, 3, 5, 9, 3], [3, 2, 6, 5, 9, 8], [5, 4, 3, 5, 10, 3], [4, 1, 7, 5, 3, 8], [4, 1, 3, 1, 8, 3]], 2)",
                "output": "[(3, 1)]"
            },
            {
                "input": "get_row([[6, 7, 4, 3, 10, 4], [3, 2, 3, 1, 4, 2], [3, 4, 3, 1, 5, 4]], 6)",
                "output": "[(0, 0)]"
            },
            {
                "input": "get_row([], 6)",
                "output": "[]"
            },
            {
                "input": "get_row([[1, 3, 2, 5, 2, 6], [5, 4, 5, 8, 1, 5], [6, 3, 3, 4, 4, 5]], 1)",
                "output": "[(0, 0), (1, 4)]"
            },
            {
                "input": "get_row([], 2)",
                "output": "[]"
            },
            {
                "input": "get_row([[5, 7, 4, 8, 5, 10], [2, 6, 4, 5, 1, 10], [5, 1, 8, 5, 9, 5]], 5)",
                "output": "[(0, 4), (0, 0), (1, 3), (2, 5), (2, 3), (2, 0)]"
            },
            {
                "input": "get_row([[5, 4, 6, 1, 1, 2], [5, 1, 1, 3, 10, 2], [5, 4, 6, 3, 4, 8], [2, 4, 3, 8, 4, 1], [6, 3, 8, 5, 6, 7], [6, 5, 6, 5, 2, 8], [2, 7, 1, 9, 9, 5]], 2)",
                "output": "[(0, 5), (1, 5), (3, 0), (5, 4), (6, 0)]"
            },
            {
                "input": "get_row([[2, 5, 3, 1, 6, 8], [6, 3, 5, 3, 8, 8], [2, 1, 3, 4, 3, 11], [1, 5, 4, 8, 10, 10], [1, 1, 6, 3, 10, 8], [6, 1, 5, 4, 7, 5]], 3)",
                "output": "[(0, 2), (1, 3), (1, 1), (2, 4), (2, 2), (4, 3)]"
            },
            {
                "input": "get_row([[5, 7, 8, 4, 3, 7], [3, 6, 6, 1, 10, 6], [5, 6, 2, 8, 5, 2], [4, 1, 6, 7, 4, 8], [3, 3, 7, 1, 3, 6], [5, 3, 2, 8, 5, 8], [2, 4, 8, 5, 5, 6]], 6)",
                "output": "[(1, 5), (1, 2), (1, 1), (2, 1), (3, 2), (4, 5), (6, 5)]"
            },
            {
                "input": "get_row([[4, 7, 4, 2, 8, 2], [3, 6, 4, 9, 4, 2], [5, 7, 4, 5, 1, 2]], 1)",
                "output": "[(2, 4)]"
            },
            {
                "input": "get_row([[6]], 3)",
                "output": "[]"
            },
            {
                "input": "get_row([[1]], 2)",
                "output": "[]"
            },
            {
                "input": "get_row([[6, 6, 5, 9, 2, 3], [2, 6, 5, 5, 2, 5], [5, 6, 7, 6, 8, 7], [6, 7, 6, 8, 10, 6], [4, 7, 3, 4, 10, 3], [3, 2, 8, 6, 4, 2], [1, 1, 5, 7, 7, 2]], 5)",
                "output": "[(0, 2), (1, 5), (1, 3), (1, 2), (2, 0), (6, 2)]"
            },
            {
                "input": "get_row([[2]], 7)",
                "output": "[]"
            },
            {
                "input": "get_row([[1, 6, 7, 2, 4, 8], [5, 1, 4, 8, 4, 2], [4, 1, 8, 6, 9, 3], [2, 1, 5, 8, 5, 11], [3, 4, 6, 5, 4, 8], [2, 7, 4, 3, 4, 7], [6, 1, 8, 6, 10, 3]], 6)",
                "output": "[(0, 1), (2, 3), (4, 2), (6, 3), (6, 0)]"
            },
            {
                "input": "get_row([[5, 6, 5, 9, 3, 10], [3, 6, 4, 1, 4, 8], [2, 1, 3, 5, 10, 2]], 5)",
                "output": "[(0, 2), (0, 0), (2, 3)]"
            },
            {
                "input": "get_row([[6, 3, 6, 5, 5, 1], [1, 6, 5, 3, 4, 2], [4, 6, 4, 8, 2, 7], [5, 4, 3, 6, 1, 2], [2, 2, 7, 4, 1, 11], [4, 5, 6, 2, 2, 1], [2, 7, 3, 5, 10, 6]], 5)",
                "output": "[(0, 4), (0, 3), (1, 2), (3, 0), (5, 1), (6, 3)]"
            },
            {
                "input": "get_row([[1, 2, 2, 9, 5, 6], [2, 2, 6, 6, 2, 7], [2, 4, 1, 4, 9, 4], [3, 5, 2, 6, 5, 5], [5, 5, 4, 2, 4, 3], [1, 2, 4, 3, 5, 10], [3, 1, 4, 3, 5, 2]], 5)",
                "output": "[(0, 4), (3, 5), (3, 4), (3, 1), (4, 1), (4, 0), (5, 4), (6, 4)]"
            },
            {
                "input": "get_row([[2, 1, 2, 2, 7, 6], [2, 5, 4, 9, 9, 6], [3, 1, 7, 6, 5, 10], [3, 4, 4, 2, 5, 4], [5, 4, 8, 1, 3, 10], [5, 5, 4, 6, 2, 6], [2, 5, 5, 3, 7, 1]], 1)",
                "output": "[(0, 1), (2, 1), (4, 3), (6, 5)]"
            },
            {
                "input": "get_row([[1]], 4)",
                "output": "[]"
            },
            {
                "input": "get_row([[3]], 6)",
                "output": "[]"
            },
            {
                "input": "get_row([[5, 4, 3, 2, 5, 3], [4, 7, 4, 1, 1, 10], [3, 7, 3, 5, 6, 6]], 5)",
                "output": "[(0, 4), (0, 0), (2, 3)]"
            },
            {
                "input": "get_row([[6, 5, 8, 1, 7, 11], [1, 1, 8, 9, 1, 1], [6, 7, 1, 7, 3, 3]], 2)",
                "output": "[]"
            },
            {
                "input": "get_row([[2]], 3)",
                "output": "[]"
            },
            {
                "input": "get_row([[4, 1, 8, 8, 5, 3], [1, 6, 2, 3, 7, 2], [4, 5, 2, 7, 6, 1], [5, 3, 2, 2, 3, 6], [2, 7, 3, 8, 2, 4], [6, 4, 7, 8, 4, 7]], 5)",
                "output": "[(0, 4), (2, 1), (3, 0)]"
            },
            {
                "input": "get_row([[4, 4, 4, 5, 2, 2], [4, 3, 1, 1, 4, 4], [3, 7, 7, 5, 4, 4]], 4)",
                "output": "[(0, 2), (0, 1), (0, 0), (1, 5), (1, 4), (1, 0), (2, 5), (2, 4)]"
            },
            {
                "input": "get_row([[2, 7, 1, 5, 3, 4], [6, 3, 3, 9, 8, 7], [1, 6, 2, 7, 7, 7], [3, 5, 6, 9, 1, 6], [6, 3, 7, 5, 5, 3], [2, 7, 3, 9, 5, 6], [6, 7, 3, 1, 1, 3]], 2)",
                "output": "[(0, 0), (2, 2), (5, 0)]"
            },
            {
                "input": "get_row([[1, 5, 2, 1, 8, 10], [2, 7, 3, 8, 1, 3], [2, 3, 5, 2, 9, 6]], 4)",
                "output": "[]"
            },
            {
                "input": "get_row([[5, 1, 8, 8, 10, 6], [6, 3, 6, 8, 7, 4], [2, 6, 3, 1, 5, 4], [2, 2, 3, 5, 10, 7], [1, 4, 8, 5, 4, 3], [5, 4, 3, 8, 2, 5]], 2)",
                "output": "[(2, 0), (3, 1), (3, 0), (5, 4)]"
            },
            {
                "input": "get_row([[4]], 3)",
                "output": "[]"
            },
            {
                "input": "get_row([[6, 5, 8, 8, 3, 6], [1, 3, 2, 4, 5, 8], [4, 2, 2, 2, 5, 1]], 4)",
                "output": "[(1, 3), (2, 0)]"
            },
            {
                "input": "get_row([[5, 1, 3, 8, 10, 5], [4, 7, 1, 8, 9, 4], [6, 2, 6, 4, 4, 1], [6, 2, 4, 5, 2, 7], [1, 5, 4, 4, 1, 10], [2, 2, 4, 1, 1, 4], [3, 4, 2, 6, 10, 1]], 5)",
                "output": "[(0, 5), (0, 0), (3, 3), (4, 1)]"
            },
            {
                "input": "get_row([[6]], 5)",
                "output": "[]"
            }
        ]
    },
    {
        "problem_description": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
        "ground truth": "def sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
        "instances": [
            {
                "input": "sort_array([13, 40, 91, 32, 10, 4])",
                "output": "[4, 10, 13, 32, 40, 91]"
            },
            {
                "input": "sort_array([1, 8, 7, 3, 5, 10])",
                "output": "[1, 3, 5, 7, 8, 10]"
            },
            {
                "input": "sort_array([1, 4, 8, 5, 1, 3])",
                "output": "[8, 5, 4, 3, 1, 1]"
            },
            {
                "input": "sort_array([7, 3, 3, 1, 1, 9, 7])",
                "output": "[9, 7, 7, 3, 3, 1, 1]"
            },
            {
                "input": "sort_array([3, 3, 1, 4, 5, 7])",
                "output": "[7, 5, 4, 3, 3, 1]"
            },
            {
                "input": "sort_array([2, 7, 3, 3, 4, 1])",
                "output": "[1, 2, 3, 3, 4, 7]"
            },
            {
                "input": "sort_array([4])",
                "output": "[4]"
            },
            {
                "input": "sort_array([17, 40, 85, 33, 12, 2])",
                "output": "[2, 12, 17, 33, 40, 85]"
            },
            {
                "input": "sort_array([5, 4])",
                "output": "[4, 5]"
            },
            {
                "input": "sort_array([17, 47, 91, 27, 9, 3])",
                "output": "[91, 47, 27, 17, 9, 3]"
            },
            {
                "input": "sort_array([4, 6, 4, 2, 3, 10])",
                "output": "[10, 6, 4, 4, 3, 2]"
            },
            {
                "input": "sort_array([2, 2, 6, 5, 3, 7])",
                "output": "[2, 2, 3, 5, 6, 7]"
            },
            {
                "input": "sort_array([5, 7, 7, 4, 1, 7, 5])",
                "output": "[7, 7, 7, 5, 5, 4, 1]"
            },
            {
                "input": "sort_array([5, 9, 5, 4, 1, 3, 3])",
                "output": "[9, 5, 5, 4, 3, 3, 1]"
            },
            {
                "input": "sort_array([2, 8, 4, 2, 4, 2, 10])",
                "output": "[10, 8, 4, 4, 2, 2, 2]"
            },
            {
                "input": "sort_array([4, 3, 8, 5, 3, 8, 4])",
                "output": "[8, 8, 5, 4, 4, 3, 3]"
            },
            {
                "input": "sort_array([17, 41, 88, 37, 13, 5])",
                "output": "[88, 41, 37, 17, 13, 5]"
            },
            {
                "input": "sort_array([6, 5, 4, 4, 6, 1, 1])",
                "output": "[1, 1, 4, 4, 5, 6, 6]"
            },
            {
                "input": "sort_array([19, 41, 82, 29, 14, 1])",
                "output": "[82, 41, 29, 19, 14, 1]"
            },
            {
                "input": "sort_array([3, 1])",
                "output": "[3, 1]"
            },
            {
                "input": "sort_array([5, 3])",
                "output": "[5, 3]"
            },
            {
                "input": "sort_array([2, 1, 7, 1, 4, 10, 10])",
                "output": "[10, 10, 7, 4, 2, 1, 1]"
            },
            {
                "input": "sort_array([8])",
                "output": "[8]"
            },
            {
                "input": "sort_array([13, 40, 91, 29, 15, 5])",
                "output": "[91, 40, 29, 15, 13, 5]"
            },
            {
                "input": "sort_array([12, 42, 83, 36, 8, 4])",
                "output": "[83, 42, 36, 12, 8, 4]"
            },
            {
                "input": "sort_array([2, 6])",
                "output": "[6, 2]"
            },
            {
                "input": "sort_array([2, 2, 2, 3, 5, 1])",
                "output": "[1, 2, 2, 2, 3, 5]"
            },
            {
                "input": "sort_array([3, 3, 6, 3, 3, 5])",
                "output": "[6, 5, 3, 3, 3, 3]"
            },
            {
                "input": "sort_array([12, 41, 88, 32, 15, 3])",
                "output": "[3, 12, 15, 32, 41, 88]"
            },
            {
                "input": "sort_array([18, 42, 84, 33, 16, 2])",
                "output": "[84, 42, 33, 18, 16, 2]"
            },
            {
                "input": "sort_array([7, 2, 5, 1, 2, 8, 5])",
                "output": "[8, 7, 5, 5, 2, 2, 1]"
            },
            {
                "input": "sort_array([5, 6, 6, 4, 4, 6])",
                "output": "[4, 4, 5, 6, 6, 6]"
            },
            {
                "input": "sort_array([5, 7, 1, 3, 4, 4, 8])",
                "output": "[1, 3, 4, 4, 5, 7, 8]"
            },
            {
                "input": "sort_array([6])",
                "output": "[6]"
            },
            {
                "input": "sort_array([7, 1, 4, 3, 3, 1, 2])",
                "output": "[1, 1, 2, 3, 3, 4, 7]"
            },
            {
                "input": "sort_array([13, 42, 84, 33, 6, 4])",
                "output": "[4, 6, 13, 33, 42, 84]"
            },
            {
                "input": "sort_array([5, 1, 5, 2, 3, 7])",
                "output": "[7, 5, 5, 3, 2, 1]"
            },
            {
                "input": "sort_array([4, 7, 6, 5, 3, 2])",
                "output": "[7, 6, 5, 4, 3, 2]"
            },
            {
                "input": "sort_array([7])",
                "output": "[7]"
            },
            {
                "input": "sort_array([19, 43, 92, 29, 10, 5])",
                "output": "[92, 43, 29, 19, 10, 5]"
            },
            {
                "input": "sort_array([2, 4])",
                "output": "[4, 2]"
            },
            {
                "input": "sort_array([9])",
                "output": "[9]"
            },
            {
                "input": "sort_array([1, 3])",
                "output": "[3, 1]"
            },
            {
                "input": "sort_array([1, 4])",
                "output": "[1, 4]"
            },
            {
                "input": "sort_array([2, 3])",
                "output": "[2, 3]"
            },
            {
                "input": "sort_array([7, 5])",
                "output": "[7, 5]"
            },
            {
                "input": "sort_array([7, 5, 7, 1, 3, 1, 5])",
                "output": "[7, 7, 5, 5, 3, 1, 1]"
            },
            {
                "input": "sort_array([2, 5])",
                "output": "[2, 5]"
            },
            {
                "input": "sort_array([5])",
                "output": "[5]"
            },
            {
                "input": "sort_array([3])",
                "output": "[3]"
            },
            {
                "input": "sort_array([7, 6])",
                "output": "[6, 7]"
            },
            {
                "input": "sort_array([2, 2, 4, 3, 5, 2])",
                "output": "[5, 4, 3, 2, 2, 2]"
            },
            {
                "input": "sort_array([1, 2, 4, 3, 2, 8])",
                "output": "[1, 2, 2, 3, 4, 8]"
            },
            {
                "input": "sort_array([6, 9, 2, 5, 1, 10, 8])",
                "output": "[10, 9, 8, 6, 5, 2, 1]"
            },
            {
                "input": "sort_array([15, 39, 90, 27, 10, 4])",
                "output": "[4, 10, 15, 27, 39, 90]"
            },
            {
                "input": "sort_array([])",
                "output": "[]"
            },
            {
                "input": "sort_array([6, 4, 8, 4, 2, 3])",
                "output": "[2, 3, 4, 4, 6, 8]"
            },
            {
                "input": "sort_array([12, 44, 88, 34, 15, 4])",
                "output": "[88, 44, 34, 15, 12, 4]"
            },
            {
                "input": "sort_array([19, 40, 90, 35, 14, 2])",
                "output": "[2, 14, 19, 35, 40, 90]"
            },
            {
                "input": "sort_array([20, 44, 88, 37, 6, 3])",
                "output": "[3, 6, 20, 37, 44, 88]"
            },
            {
                "input": "sort_array([1, 4, 2, 3, 5, 1, 9])",
                "output": "[9, 5, 4, 3, 2, 1, 1]"
            },
            {
                "input": "sort_array([1, 3, 6, 3, 6, 8, 3])",
                "output": "[8, 6, 6, 3, 3, 3, 1]"
            },
            {
                "input": "sort_array([19, 42, 86, 33, 14, 5])",
                "output": "[86, 42, 33, 19, 14, 5]"
            },
            {
                "input": "sort_array([4, 5, 6, 2, 1, 7])",
                "output": "[1, 2, 4, 5, 6, 7]"
            },
            {
                "input": "sort_array([5, 8, 7, 2, 3, 8, 5])",
                "output": "[8, 8, 7, 5, 5, 3, 2]"
            },
            {
                "input": "sort_array([4, 4])",
                "output": "[4, 4]"
            },
            {
                "input": "sort_array([1, 4, 4, 3, 3, 7])",
                "output": "[7, 4, 4, 3, 3, 1]"
            },
            {
                "input": "sort_array([10])",
                "output": "[10]"
            },
            {
                "input": "sort_array([1, 1, 4, 1, 6, 3])",
                "output": "[6, 4, 3, 1, 1, 1]"
            },
            {
                "input": "sort_array([5, 7, 2, 3, 4, 5, 5])",
                "output": "[7, 5, 5, 5, 4, 3, 2]"
            },
            {
                "input": "sort_array([3, 8, 1, 4, 3, 7])",
                "output": "[8, 7, 4, 3, 3, 1]"
            },
            {
                "input": "sort_array([5, 2, 8, 5, 4, 9, 10])",
                "output": "[2, 4, 5, 5, 8, 9, 10]"
            },
            {
                "input": "sort_array([1, 1, 4, 4, 3, 5, 6])",
                "output": "[1, 1, 3, 4, 4, 5, 6]"
            },
            {
                "input": "sort_array([17, 42, 85, 34, 12, 2])",
                "output": "[2, 12, 17, 34, 42, 85]"
            },
            {
                "input": "sort_array([4, 1])",
                "output": "[1, 4]"
            },
            {
                "input": "sort_array([19, 37, 86, 36, 14, 5])",
                "output": "[86, 37, 36, 19, 14, 5]"
            }
        ]
    },
    {
        "problem_description": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
        "ground truth": "def encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
        "instances": [
            {
                "input": "encrypt('et')",
                "output": "'ix'"
            },
            {
                "input": "encrypt(\"iweg\")",
                "output": "'maik'"
            },
            {
                "input": "encrypt(\"cbnkip\")",
                "output": "'gfromt'"
            },
            {
                "input": "encrypt(\"dfkku\")",
                "output": "'hjooy'"
            },
            {
                "input": "encrypt(\"hiozaupjaxn\")",
                "output": "'lmsdeytnebr'"
            },
            {
                "input": "encrypt(\"hzwcknqyfdy\")",
                "output": "'ldagorucjhc'"
            },
            {
                "input": "encrypt(\"edos\")",
                "output": "'ihsw'"
            },
            {
                "input": "encrypt(\"iaaqxr\")",
                "output": "'meeubv'"
            },
            {
                "input": "encrypt(\"wryepbt\")",
                "output": "'avcitfx'"
            },
            {
                "input": "encrypt(\"rbonb\")",
                "output": "'vfsrf'"
            },
            {
                "input": "encrypt(\"omqyojvvdgdtzoweweuxguoewqemqvzjrgxpxfvcysiibrsb\")",
                "output": "'squcsnzzhkhxdsaiaiybkysiauiquzdnvkbtbjzgcwmmfvwf'"
            },
            {
                "input": "encrypt(\"cxjqzxyj\")",
                "output": "'gbnudbcn'"
            },
            {
                "input": "encrypt(\"kejihadgwjawxllizcdymgesbstydszfsvisnfoprrmh\")",
                "output": "'oinmlehkaneabppmdghcqkiwfwxchwdjwzmwrjstvvql'"
            },
            {
                "input": "encrypt(\"hssxlrbvcza\")",
                "output": "'lwwbpvfzgde'"
            },
            {
                "input": "encrypt(\"igd\")",
                "output": "'mkh'"
            },
            {
                "input": "encrypt(\"bacpsnyuqihtc\")",
                "output": "'fegtwrcyumlxg'"
            },
            {
                "input": "encrypt(\"rshsbzuwunhkyfla\")",
                "output": "'vwlwfdyayrlocjpe'"
            },
            {
                "input": "encrypt(\"fthxiuur\")",
                "output": "'jxlbmyyv'"
            },
            {
                "input": "encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')",
                "output": "'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'"
            },
            {
                "input": "encrypt(\"tgwoggktxwxlkcutrmpoegpnwryeegqtunvtchgdlstw\")",
                "output": "'xkaskkoxbabpogyxvqtsiktravciikuxyrzxglkhpwxa'"
            },
            {
                "input": "encrypt(\"scckvgqaqvgtrpjxscrttodtfddygbogmsejojgqpolqitdupu\")",
                "output": "'wggozkueuzkxvtnbwgvxxshxjhhckfskqwinsnkutspumxhyty'"
            },
            {
                "input": "encrypt(\"vjld\")",
                "output": "'znph'"
            },
            {
                "input": "encrypt(\"ootuhtsyoclpfz\")",
                "output": "'ssxylxwcsgptjd'"
            },
            {
                "input": "encrypt(\"inqgyxjjbxjivfaumwuwlaictecgedssmtfxyreihxoftc\")",
                "output": "'mrukcbnnfbnmzjeyqayapemgxigkihwwqxjbcvimlbsjxg'"
            },
            {
                "input": "encrypt(\"bjhpaepqdvdxe\")",
                "output": "'fnlteituhzhbi'"
            },
            {
                "input": "encrypt(\"dwjksymbefjbdttbozxljxnivsdygyektzoevzcludwmzzv\")",
                "output": "'hanowcqfijnfhxxfsdbpnbrmzwhckcioxdsizdgpyhaqddz'"
            },
            {
                "input": "encrypt('gf')",
                "output": "'kj'"
            },
            {
                "input": "encrypt(\"xcegcyrndybwwdnis\")",
                "output": "'bgikgcvrhcfaahrmw'"
            },
            {
                "input": "encrypt(\"ghpevdaov\")",
                "output": "'kltizhesz'"
            },
            {
                "input": "encrypt(\"uldvv\")",
                "output": "'yphzz'"
            },
            {
                "input": "encrypt(\"osr\")",
                "output": "'swv'"
            },
            {
                "input": "encrypt(\"qodfsxptaswjxea\")",
                "output": "'ushjwbtxewanbie'"
            },
            {
                "input": "encrypt(\"lovcfz\")",
                "output": "'pszgjd'"
            },
            {
                "input": "encrypt(\"uiccmyfyikhtpneemoiglrphjsfyudawcethrgeewwg\")",
                "output": "'ymggqcjcmolxtriiqsmkpvtlnwjcyheagixlvkiiaak'"
            },
            {
                "input": "encrypt(\"cbu\")",
                "output": "'gfy'"
            },
            {
                "input": "encrypt(\"gjv\")",
                "output": "'knz'"
            },
            {
                "input": "encrypt(\"ecvxboifogyvhhndxqmrwzrycvvzumjrmpuokojfhoyjrrsvqys\")",
                "output": "'igzbfsmjskczllrhbuqvadvcgzzdyqnvqtysosnjlscnvvwzucw'"
            },
            {
                "input": "encrypt(\"ppnfsbzpkrlgc\")",
                "output": "'ttrjwfdtovpkg'"
            },
            {
                "input": "encrypt(\"tcgkwaoxisclqjuhcg\")",
                "output": "'xgkoaesbmwgpunylgk'"
            },
            {
                "input": "encrypt(\"apycxz\")",
                "output": "'etcgbd'"
            },
            {
                "input": "encrypt(\"jesneksjqo\")",
                "output": "'niwriownus'"
            },
            {
                "input": "encrypt(\"xhkwgznkc\")",
                "output": "'bloakdrog'"
            },
            {
                "input": "encrypt(\"pincbgwsxcgd\")",
                "output": "'tmrgfkawbgkh'"
            },
            {
                "input": "encrypt(\"qxy\")",
                "output": "'ubc'"
            },
            {
                "input": "encrypt(\"qug\")",
                "output": "'uyk'"
            },
            {
                "input": "encrypt(\"yvjmva\")",
                "output": "'cznqze'"
            },
            {
                "input": "encrypt(\"jigeiwr\")",
                "output": "'nmkimav'"
            },
            {
                "input": "encrypt(\"xefukaqfllnckjbsshsuruxojimpploykicgbijpgfenkvyku\")",
                "output": "'bijyoeujpprgonfwwlwyvybsnmqttpscomgkfmntkjirozcoy'"
            },
            {
                "input": "encrypt(\"srsba\")",
                "output": "'wvwfe'"
            },
            {
                "input": "encrypt(\"iyhglogovmaivb\")",
                "output": "'mclkpskszqemzf'"
            },
            {
                "input": "encrypt('a')",
                "output": "'e'"
            },
            {
                "input": "encrypt(\"snrp\")",
                "output": "'wrvt'"
            },
            {
                "input": "encrypt(\"ydbsopfos\")",
                "output": "'chfwstjsw'"
            },
            {
                "input": "encrypt(\"jigty\")",
                "output": "'nmkxc'"
            },
            {
                "input": "encrypt(\"ltoqiorhbefpupjriabdqcsogcuerqihuxqbrbkgrdtmasa\")",
                "output": "'pxsumsvlfijtytnvmefhugwskgyivumlybufvfokvhxqewe'"
            },
            {
                "input": "encrypt(\"qydzk\")",
                "output": "'uchdo'"
            },
            {
                "input": "encrypt(\"zvnrqh\")",
                "output": "'dzrvul'"
            },
            {
                "input": "encrypt(\"myqyqo\")",
                "output": "'qcucus'"
            },
            {
                "input": "encrypt(\"yfmlxmzfjwpagz\")",
                "output": "'cjqpbqdjnatekd'"
            },
            {
                "input": "encrypt(\"apemxwhfoivo\")",
                "output": "'etiqbaljsmzs'"
            },
            {
                "input": "encrypt('faewfawefaewg')",
                "output": "'jeiajeaijeiak'"
            },
            {
                "input": "encrypt(\"mlcf\")",
                "output": "'qpgj'"
            },
            {
                "input": "encrypt(\"ylyahikkdltvcwhmgf\")",
                "output": "'cpcelmoohpxzgalqkj'"
            },
            {
                "input": "encrypt(\"jdtgdqerkvdjo\")",
                "output": "'nhxkhuivozhns'"
            },
            {
                "input": "encrypt(\"btijac\")",
                "output": "'fxmneg'"
            },
            {
                "input": "encrypt(\"vpf\")",
                "output": "'ztj'"
            },
            {
                "input": "encrypt(\"kljfcu\")",
                "output": "'opnjgy'"
            },
            {
                "input": "encrypt(\"bcdyegdqur\")",
                "output": "'fghcikhuyv'"
            },
            {
                "input": "encrypt(\"kemsjc\")",
                "output": "'oiqwng'"
            },
            {
                "input": "encrypt(\"zkeab\")",
                "output": "'doief'"
            },
            {
                "input": "encrypt(\"mghcjd\")",
                "output": "'qklgnh'"
            },
            {
                "input": "encrypt(\"vcjcpaipaotbrhwzwkzqvdnotysiqjquxjfcyfxdsnycowlxw\")",
                "output": "'zgngtemtesxfvladaoduzhrsxcwmunuybnjgcjbhwrcgsapba'"
            },
            {
                "input": "encrypt(\"nqb\")",
                "output": "'ruf'"
            },
            {
                "input": "encrypt(\"pxuqg\")",
                "output": "'tbyuk'"
            },
            {
                "input": "encrypt(\"khdzqn\")",
                "output": "'olhdur'"
            },
            {
                "input": "encrypt(\"eszlshy\")",
                "output": "'iwdpwlc'"
            },
            {
                "input": "encrypt(\"vndetsxgjgjyo\")",
                "output": "'zrhixwbknkncs'"
            },
            {
                "input": "encrypt('hi')",
                "output": "'lm'"
            },
            {
                "input": "encrypt(\"okcgikrnpkwhdxjjt\")",
                "output": "'sogkmovrtoalhbnnx'"
            },
            {
                "input": "encrypt(\"icep\")",
                "output": "'mgit'"
            },
            {
                "input": "encrypt(\"zzeb\")",
                "output": "'ddif'"
            },
            {
                "input": "encrypt(\"gudkyx\")",
                "output": "'kyhocb'"
            },
            {
                "input": "encrypt(\"qlwbifaxvfpbtigmd\")",
                "output": "'upafmjebzjtfxmkqh'"
            },
            {
                "input": "encrypt(\"orwoj\")",
                "output": "'svasn'"
            },
            {
                "input": "encrypt(\"jmfqkenawveukey\")",
                "output": "'nqjuoireaziyoic'"
            },
            {
                "input": "encrypt(\"wxssoiwft\")",
                "output": "'abwwsmajx'"
            },
            {
                "input": "encrypt(\"wahnwedqvdrhzkoczaqgfulcpkdwxlxfutmwoxfxhtihx\")",
                "output": "'aelraihuzhvldosgdeukjypgtohabpbjyxqasbjblxmlb'"
            },
            {
                "input": "encrypt(\"dvprq\")",
                "output": "'hztvu'"
            },
            {
                "input": "encrypt(\"qxnl\")",
                "output": "'ubrp'"
            },
            {
                "input": "encrypt('hellomyfriend')",
                "output": "'lippsqcjvmirh'"
            },
            {
                "input": "encrypt(\"qzoowqmdpgs\")",
                "output": "'udssauqhtkw'"
            },
            {
                "input": "encrypt(\"wbqrfuufjolm\")",
                "output": "'afuvjyyjnspq'"
            },
            {
                "input": "encrypt(\"qufnwybuudtnstebb\")",
                "output": "'uyjracfyyhxrwxiff'"
            },
            {
                "input": "encrypt(\"pdkwkxl\")",
                "output": "'thoaobp'"
            },
            {
                "input": "encrypt(\"hqmdzalclkbjfknjkiesfhckhkffveoykjypxavcroiyrawesb\")",
                "output": "'luqhdepgpofnjornomiwjlgolojjzisconctbezgvsmcveaiwf'"
            },
            {
                "input": "encrypt(\"dodbzraky\")",
                "output": "'hshfdveoc'"
            },
            {
                "input": "encrypt(\"jyacovitrlbvmooowiredgrqaeoufrzjqvrvmbbfqifg\")",
                "output": "'ncegszmxvpfzqsssamvihkvueisyjvdnuzvzqffjumjk'"
            },
            {
                "input": "encrypt(\"eamlxvxtmyq\")",
                "output": "'ieqpbzbxqcu'"
            },
            {
                "input": "encrypt('asdfghjkl')",
                "output": "'ewhjklnop'"
            },
            {
                "input": "encrypt(\"xnspkq\")",
                "output": "'brwtou'"
            },
            {
                "input": "encrypt(\"xtkq\")",
                "output": "'bxou'"
            },
            {
                "input": "encrypt(\"dkbwxzxweek\")",
                "output": "'hofabdbaiio'"
            },
            {
                "input": "encrypt(\"pfafbn\")",
                "output": "'tjejfr'"
            },
            {
                "input": "encrypt(\"hqc\")",
                "output": "'lug'"
            },
            {
                "input": "encrypt(\"sxzd\")",
                "output": "'wbdh'"
            },
            {
                "input": "encrypt(\"oqzpfpvmstecwor\")",
                "output": "'sudtjtzqwxigasv'"
            },
            {
                "input": "encrypt(\"zuxjxvgmbe\")",
                "output": "'dybnbzkqfi'"
            },
            {
                "input": "encrypt(\"dhvb\")",
                "output": "'hlzf'"
            },
            {
                "input": "encrypt(\"fwycjuyymmhkzehzifkxyxpshiakkthethvnlkcjufunkag\")",
                "output": "'jacgnyccqqlodildmjobcbtwlmeooxlixlzrpognyjyroek'"
            },
            {
                "input": "encrypt(\"srzakihijmoxy\")",
                "output": "'wvdeomlmnqsbc'"
            },
            {
                "input": "encrypt(\"eoieom\")",
                "output": "'ismisq'"
            },
            {
                "input": "encrypt(\"iucuekiixpeocogw\")",
                "output": "'mygyiommbtisgska'"
            },
            {
                "input": "encrypt(\"gryaomsjpheksgfl\")",
                "output": "'kvcesqwntliowkjp'"
            }
        ]
    },
    {
        "problem_description": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
        "ground truth": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
        "instances": [
            {
                "input": "next_smallest([1, 4, 1, 2, 1])",
                "output": "2"
            },
            {
                "input": "next_smallest([5, 5, 1, 8, 3])",
                "output": "3"
            },
            {
                "input": "next_smallest([2, 3, 4, 6, 2])",
                "output": "3"
            },
            {
                "input": "next_smallest([8, 3, 1, 5, 4])",
                "output": "3"
            },
            {
                "input": "next_smallest([9, 6, 4, 1, 1])",
                "output": "4"
            },
            {
                "input": "next_smallest([2, 3])",
                "output": "3"
            },
            {
                "input": "next_smallest([1, 2, 3, 4, 5])",
                "output": "2"
            },
            {
                "input": "next_smallest([1, 2, 1, 2, 3])",
                "output": "2"
            },
            {
                "input": "next_smallest([6, 1, 4, 3, 2])",
                "output": "2"
            },
            {
                "input": "next_smallest([4, 2, 3, 2, 3])",
                "output": "3"
            },
            {
                "input": "next_smallest([2, 4])",
                "output": "4"
            },
            {
                "input": "next_smallest([2, 5, 5, 6, 2])",
                "output": "5"
            },
            {
                "input": "next_smallest([4, 6, 2, 4, 4])",
                "output": "4"
            },
            {
                "input": "next_smallest([1, 1, 2, 3, 7])",
                "output": "2"
            },
            {
                "input": "next_smallest([5, 1, 4, 3, 2])",
                "output": "2"
            },
            {
                "input": "next_smallest([2, 1, 6, 6, 3])",
                "output": "2"
            },
            {
                "input": "next_smallest([3, 5, 4, 8, 5])",
                "output": "4"
            },
            {
                "input": "next_smallest([4, 3, 8, 6, 9])",
                "output": "4"
            },
            {
                "input": "next_smallest([4, 2, 5, 4, 7])",
                "output": "4"
            },
            {
                "input": "next_smallest([5, 6])",
                "output": "6"
            },
            {
                "input": "next_smallest([4, 6, 1, 4, 5])",
                "output": "4"
            },
            {
                "input": "next_smallest([5, 6, 6, 6, 5])",
                "output": "6"
            },
            {
                "input": "next_smallest([6, 3, 1, 6, 2])",
                "output": "2"
            },
            {
                "input": "next_smallest([1, 3, 3, 9, 7])",
                "output": "3"
            },
            {
                "input": "next_smallest([2, 6, 3, 2, 7])",
                "output": "3"
            },
            {
                "input": "next_smallest([4, 4, 6, 5, 5])",
                "output": "5"
            },
            {
                "input": "next_smallest([3, 3, 5, 1, 10])",
                "output": "3"
            },
            {
                "input": "next_smallest([1,1,1,1,0])",
                "output": "1"
            },
            {
                "input": "next_smallest([1, 6, 3, 1, 7])",
                "output": "3"
            },
            {
                "input": "next_smallest([2, 5])",
                "output": "5"
            },
            {
                "input": "next_smallest([1, 4, 6, 9, 4])",
                "output": "4"
            },
            {
                "input": "next_smallest([7, 2, 9, 7, 7])",
                "output": "7"
            },
            {
                "input": "next_smallest([1, 6])",
                "output": "6"
            },
            {
                "input": "next_smallest([6, 3, 4, 3, 2])",
                "output": "3"
            },
            {
                "input": "next_smallest([4, 2])",
                "output": "4"
            },
            {
                "input": "next_smallest([3, 5, 3, 5, 6])",
                "output": "5"
            },
            {
                "input": "next_smallest([1, 1, 8, 9, 6])",
                "output": "6"
            },
            {
                "input": "next_smallest([5, 1])",
                "output": "5"
            },
            {
                "input": "next_smallest([5, 3, 2, 1, 1])",
                "output": "2"
            },
            {
                "input": "next_smallest([6, 2, 5, 3, 4])",
                "output": "3"
            },
            {
                "input": "next_smallest([5, 6, 6, 9, 10])",
                "output": "6"
            },
            {
                "input": "next_smallest([1, 2, 1, 5, 3])",
                "output": "2"
            },
            {
                "input": "next_smallest([1, 2, 2, 4, 4])",
                "output": "2"
            },
            {
                "input": "next_smallest([1, 5])",
                "output": "5"
            },
            {
                "input": "next_smallest([5, 3])",
                "output": "5"
            },
            {
                "input": "next_smallest([4, 5, 7, 7, 4])",
                "output": "5"
            },
            {
                "input": "next_smallest([4, 1, 4, 8, 5])",
                "output": "4"
            },
            {
                "input": "next_smallest([3, 1, 5, 1, 6])",
                "output": "3"
            },
            {
                "input": "next_smallest([2, 3, 1, 5, 5])",
                "output": "2"
            },
            {
                "input": "next_smallest([3, 1, 3, 3, 5])",
                "output": "3"
            },
            {
                "input": "next_smallest([5, 5, 4, 3, 2])",
                "output": "3"
            },
            {
                "input": "next_smallest([4, 5])",
                "output": "5"
            },
            {
                "input": "next_smallest([5, 5, 3, 6, 5])",
                "output": "5"
            },
            {
                "input": "next_smallest([10, 6, 8, 7, 3])",
                "output": "6"
            },
            {
                "input": "next_smallest([3, 5, 4, 9, 5])",
                "output": "4"
            },
            {
                "input": "next_smallest([4, 1, 8, 2, 6])",
                "output": "2"
            },
            {
                "input": "next_smallest([5, 4])",
                "output": "5"
            },
            {
                "input": "next_smallest([1, 5, 3, 6, 4])",
                "output": "3"
            },
            {
                "input": "next_smallest([3, 6, 1, 4, 3])",
                "output": "3"
            },
            {
                "input": "next_smallest([4, 1])",
                "output": "4"
            },
            {
                "input": "next_smallest([4, 3])",
                "output": "4"
            },
            {
                "input": "next_smallest([10, 6, 8, 2, 5])",
                "output": "5"
            },
            {
                "input": "next_smallest([6, 4])",
                "output": "6"
            },
            {
                "input": "next_smallest([4, 1, 3, 2, 2])",
                "output": "2"
            },
            {
                "input": "next_smallest([4, 1, 5, 1, 2])",
                "output": "2"
            },
            {
                "input": "next_smallest([2, 1, 7, 7, 3])",
                "output": "2"
            },
            {
                "input": "next_smallest([1, 4])",
                "output": "4"
            },
            {
                "input": "next_smallest([9, 6, 7, 7, 6])",
                "output": "7"
            },
            {
                "input": "next_smallest([6, 2])",
                "output": "6"
            },
            {
                "input": "next_smallest([3, 4, 8, 8, 5])",
                "output": "4"
            },
            {
                "input": "next_smallest([3, 2, 5, 4, 2])",
                "output": "3"
            },
            {
                "input": "next_smallest([2, 4, 6, 5, 5])",
                "output": "4"
            },
            {
                "input": "next_smallest([6, 4, 1, 1, 5])",
                "output": "4"
            },
            {
                "input": "next_smallest([6, 7, 8, 2, 7])",
                "output": "6"
            },
            {
                "input": "next_smallest([6, 3])",
                "output": "6"
            },
            {
                "input": "next_smallest([4, 6])",
                "output": "6"
            },
            {
                "input": "next_smallest([5, 6, 5, 3, 3])",
                "output": "5"
            },
            {
                "input": "next_smallest([6, 5, 8, 5, 5])",
                "output": "6"
            }
        ]
    },
    {
        "problem_description": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "ground truth": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
        "instances": [
            {
                "input": "is_bored(\"world I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I I . I . I I a I\")",
                "output": "3"
            },
            {
                "input": "is_bored(\"blue? I world blue? I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"world world I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"world I world\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"sky I I I I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I I I . I I the . I be I I\")",
                "output": "3"
            },
            {
                "input": "is_bored(\"I . . I today. I I I will I . I\")",
                "output": "3"
            },
            {
                "input": "is_bored(\"I I I I Hello\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I I I . I going I I I\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I kill I I I blue? I good I productive. I I\")",
                "output": "3"
            },
            {
                "input": "is_bored(\"I .\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"sky blue? I sky sky\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"Hello . I I will I I I I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"kill . I I the . I I blue? be productive. .\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I be I I Is . . . I Hello . I\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I . world\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"Is I It I I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"the . the blue? .\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I I I . I I I . I I I I\")",
                "output": "3"
            },
            {
                "input": "is_bored(\"I blue? Is . Hello\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"Hello . I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I I I I . I . I I\")",
                "output": "3"
            },
            {
                "input": "is_bored(\"the .\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"love . today. . bIt . I I .\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I I kill I I I . I I\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I be I I I I I I . Hello I I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I I I Is .\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I It I I I . I I I . I I\")",
                "output": "3"
            },
            {
                "input": "is_bored(\"world I Hello\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"world I .\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"productive. world productive. I . I I feel productive. I I I\")",
                "output": "3"
            },
            {
                "input": "is_bored(\"I ! I . sky\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I I world . sky\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"world world Hello\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I I love sky I . I I I I . productive.\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"sky I I the .\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"Hello I Hello\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I I I I I a I . .\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"world . I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I I . I I\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I I world I I . are I .\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I the . I world\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"sky . I . I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"sky I I I Hello\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I . I I I . be I I I I I\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I sky I I I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"walk I I I I I be I I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I . going I I I I I .\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"Is I I I the\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"blue? I I blue? I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I I . I I I I I .\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I I I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I I I Is I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I sky I . blue?\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"sky I ! I I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I I I I walk for . I productive.\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I I I I I It I I . world I I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"Hello I I . I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I blue? the Hello I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"! .\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"world . world\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I I I I I I I I .\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I I I . I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"Hello I I I I I I I I be ! I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"the Is the . I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I Hello . I I\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I Hello Hello\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"sky I I sky I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"Hello I sky blue? I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I good I I I sky world I .\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"It I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"the I I . the\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I I I I I I I I I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"Is I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I I I . . blue? bIt . . I good kill\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"Hello world world\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I I I will I I . I I today. the I\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"Hello I .\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I . I I I I I It I\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I I I I I I I It . I I I\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I blue? I Is .\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"world It I It I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"bIt I\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I the world I It\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I I I I kill I I for I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I It Is I I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I . . I world\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I . I I !\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"Hello Hello love . blue?\")",
                "output": "0"
            },
            {
                "input": "is_bored(\"I I . . sky I I I I be will I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I I I . I be I I . I will I\")",
                "output": "3"
            },
            {
                "input": "is_bored(\"I . . I I I a I kill\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I I world\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I . . I I I world I .\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I . the I It I . I I feel I I\")",
                "output": "2"
            },
            {
                "input": "is_bored(\"I Hello I\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I I Hello\")",
                "output": "1"
            },
            {
                "input": "is_bored(\"I . blue? . I I . I I I I I\")",
                "output": "3"
            },
            {
                "input": "is_bored(\"I I I . . I . blue? I\")",
                "output": "2"
            }
        ]
    },
    {
        "problem_description": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n",
        "ground truth": "def any_int(x, y, z):\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
        "instances": [
            {
                "input": "any_int(4, 2, 2)",
                "output": "True"
            },
            {
                "input": "any_int(2.459, 5, 11)",
                "output": "False"
            },
            {
                "input": "any_int(6, 2, 7)",
                "output": "False"
            },
            {
                "input": "any_int(3, 1, 2)",
                "output": "True"
            },
            {
                "input": "any_int(1.834, 7.255, 6.304)",
                "output": "False"
            },
            {
                "input": "any_int(4, 3, 1)",
                "output": "True"
            },
            {
                "input": "any_int(7.307, 7.071, 5.088)",
                "output": "False"
            },
            {
                "input": "any_int(5, 6, 11)",
                "output": "True"
            },
            {
                "input": "any_int(3, 3, 6)",
                "output": "True"
            },
            {
                "input": "any_int(3.103, 3, 10)",
                "output": "False"
            },
            {
                "input": "any_int(2, 5, 4)",
                "output": "False"
            },
            {
                "input": "any_int(4.38, 6, 1)",
                "output": "False"
            },
            {
                "input": "any_int(7, 1, 8)",
                "output": "True"
            },
            {
                "input": "any_int(4, 11, 1)",
                "output": "False"
            },
            {
                "input": "any_int(5, 9, 5)",
                "output": "False"
            },
            {
                "input": "any_int(3.376, 6.953, 2.111)",
                "output": "False"
            },
            {
                "input": "any_int(3,4,7)",
                "output": "True"
            },
            {
                "input": "any_int(8.854, 2, 8)",
                "output": "False"
            },
            {
                "input": "any_int(7.656, 1, 7)",
                "output": "False"
            },
            {
                "input": "any_int(5, 7, 2)",
                "output": "True"
            },
            {
                "input": "any_int(5, 2, 3)",
                "output": "True"
            },
            {
                "input": "any_int(10, 7, 3)",
                "output": "True"
            },
            {
                "input": "any_int(7.829, 2, 9)",
                "output": "False"
            },
            {
                "input": "any_int(3.685, 2, 6)",
                "output": "False"
            },
            {
                "input": "any_int(5.586, 1, 2)",
                "output": "False"
            },
            {
                "input": "any_int(6.9, 4, 12)",
                "output": "False"
            },
            {
                "input": "any_int(6, 10, 4)",
                "output": "True"
            },
            {
                "input": "any_int(3.033, 6.554, 7.391)",
                "output": "False"
            },
            {
                "input": "any_int(4, 6, 3)",
                "output": "False"
            },
            {
                "input": "any_int(6.175, 9, 4)",
                "output": "False"
            },
            {
                "input": "any_int(2.007, 9, 7.198)",
                "output": "False"
            },
            {
                "input": "any_int(3.754, 6, 5.044)",
                "output": "False"
            },
            {
                "input": "any_int(6, 12, 6)",
                "output": "True"
            },
            {
                "input": "any_int(1, 1, 7)",
                "output": "False"
            },
            {
                "input": "any_int(5, 5, 10)",
                "output": "True"
            },
            {
                "input": "any_int(4, 5, 9)",
                "output": "True"
            },
            {
                "input": "any_int(-1, 0, 1)",
                "output": "True"
            },
            {
                "input": "any_int(2.858, 1, 2)",
                "output": "False"
            },
            {
                "input": "any_int(4, 11, 5)",
                "output": "False"
            },
            {
                "input": "any_int(4, 7, 3)",
                "output": "True"
            },
            {
                "input": "any_int(7, 6, 1)",
                "output": "True"
            },
            {
                "input": "any_int(-3, 2, 5)",
                "output": "True"
            },
            {
                "input": "any_int(12, 3, 9)",
                "output": "True"
            },
            {
                "input": "any_int(12, 11, 1)",
                "output": "True"
            },
            {
                "input": "any_int(6, 16, 10)",
                "output": "True"
            },
            {
                "input": "any_int(1, 7, 2)",
                "output": "False"
            },
            {
                "input": "any_int(1.157, 8, 2)",
                "output": "False"
            },
            {
                "input": "any_int(-4, 11, 7)",
                "output": "True"
            },
            {
                "input": "any_int(1, 1, 2)",
                "output": "True"
            },
            {
                "input": "any_int(2, 6, 4)",
                "output": "True"
            },
            {
                "input": "any_int(6.681, 8, 4.747)",
                "output": "False"
            },
            {
                "input": "any_int(4, 3, 7)",
                "output": "True"
            },
            {
                "input": "any_int(2.2, 2.2, 2.2)",
                "output": "False"
            },
            {
                "input": "any_int(2.834, 7, 9)",
                "output": "False"
            },
            {
                "input": "any_int(3.692, 2, 7.2)",
                "output": "False"
            },
            {
                "input": "any_int(12, 8, 4)",
                "output": "True"
            },
            {
                "input": "any_int(6.086, 4, 4)",
                "output": "False"
            },
            {
                "input": "any_int(2.5, 2, 3)",
                "output": "False"
            },
            {
                "input": "any_int(0, 2, 2)",
                "output": "True"
            },
            {
                "input": "any_int(4.272, 6.612, 6.663)",
                "output": "False"
            },
            {
                "input": "any_int(3.228, 6, 6)",
                "output": "False"
            },
            {
                "input": "any_int(4, 8, 4)",
                "output": "True"
            },
            {
                "input": "any_int(2.003, 3, 11)",
                "output": "False"
            },
            {
                "input": "any_int(3.0,4,7)",
                "output": "False"
            },
            {
                "input": "any_int(8, 10, 2)",
                "output": "True"
            },
            {
                "input": "any_int(3.357, 7, 8.074)",
                "output": "False"
            },
            {
                "input": "any_int(7, 13, 6)",
                "output": "True"
            },
            {
                "input": "any_int(2.805, 3, 6.418)",
                "output": "False"
            },
            {
                "input": "any_int(5, 3, 8)",
                "output": "True"
            },
            {
                "input": "any_int(2, 3, 1)",
                "output": "True"
            },
            {
                "input": "any_int(5, 6, 1)",
                "output": "True"
            },
            {
                "input": "any_int(1, 4, 5)",
                "output": "True"
            },
            {
                "input": "any_int(0, 3, 3)",
                "output": "True"
            },
            {
                "input": "any_int(6.61, 1.687, 2.647)",
                "output": "False"
            },
            {
                "input": "any_int(7.194, 1.302, 7.462)",
                "output": "False"
            },
            {
                "input": "any_int(9, 1, 10)",
                "output": "True"
            },
            {
                "input": "any_int(9, 6, 3)",
                "output": "True"
            },
            {
                "input": "any_int(7.73, 5.041, 6.418)",
                "output": "False"
            },
            {
                "input": "any_int(6, 6, 12)",
                "output": "True"
            },
            {
                "input": "any_int(2, 2, 4)",
                "output": "True"
            },
            {
                "input": "any_int(2.583, 3.749, 4.738)",
                "output": "False"
            },
            {
                "input": "any_int(10, 5, 5)",
                "output": "True"
            },
            {
                "input": "any_int(1.346, 5, 6)",
                "output": "False"
            },
            {
                "input": "any_int(15, 9, 6)",
                "output": "True"
            },
            {
                "input": "any_int(5, 8, 3)",
                "output": "True"
            },
            {
                "input": "any_int(3.599, 5, 1)",
                "output": "False"
            },
            {
                "input": "any_int(6, 3, 3)",
                "output": "True"
            },
            {
                "input": "any_int(5.408, 8, 3.454)",
                "output": "False"
            },
            {
                "input": "any_int(13, 7, 6)",
                "output": "True"
            },
            {
                "input": "any_int(2, 1, 1)",
                "output": "True"
            },
            {
                "input": "any_int(1.705, 2, 6.616)",
                "output": "False"
            },
            {
                "input": "any_int(3, 10, 7)",
                "output": "True"
            },
            {
                "input": "any_int(3.158, 8, 6.135)",
                "output": "False"
            },
            {
                "input": "any_int(2,1,1)",
                "output": "True"
            },
            {
                "input": "any_int(12, 5, 7)",
                "output": "True"
            },
            {
                "input": "any_int(6, 4, 2)",
                "output": "True"
            },
            {
                "input": "any_int(8, 19, 11)",
                "output": "True"
            },
            {
                "input": "any_int(3.211, 4, 3)",
                "output": "False"
            },
            {
                "input": "any_int(7, 2, 9)",
                "output": "True"
            },
            {
                "input": "any_int(1.812, 6.567, 7.145)",
                "output": "False"
            },
            {
                "input": "any_int(12, 7, 5)",
                "output": "True"
            },
            {
                "input": "any_int(7, 3, 10)",
                "output": "True"
            },
            {
                "input": "any_int(2, 7, 5)",
                "output": "True"
            },
            {
                "input": "any_int(6.068, 1, 3.454)",
                "output": "False"
            },
            {
                "input": "any_int(3, 2, 5)",
                "output": "True"
            },
            {
                "input": "any_int(1.726, 3, 1)",
                "output": "False"
            },
            {
                "input": "any_int(1, 3, 2)",
                "output": "True"
            },
            {
                "input": "any_int(-4, 6, 2)",
                "output": "True"
            },
            {
                "input": "any_int(6.254, 6, 7)",
                "output": "False"
            },
            {
                "input": "any_int(7.797, 7, 4)",
                "output": "False"
            },
            {
                "input": "any_int(2, 3, 5)",
                "output": "True"
            },
            {
                "input": "any_int(6.155, 2.926, 1.672)",
                "output": "False"
            },
            {
                "input": "any_int(6, 10, 1)",
                "output": "False"
            },
            {
                "input": "any_int(3.445, 2, 2)",
                "output": "False"
            },
            {
                "input": "any_int(6.511, 2, 3)",
                "output": "False"
            },
            {
                "input": "any_int(12, 6, 6)",
                "output": "True"
            },
            {
                "input": "any_int(3, 4, 1)",
                "output": "True"
            },
            {
                "input": "any_int(3.621, 6.679, 2.542)",
                "output": "False"
            },
            {
                "input": "any_int(1, 7, 8)",
                "output": "True"
            },
            {
                "input": "any_int(2, 6, 2)",
                "output": "False"
            },
            {
                "input": "any_int(7, 5, 12)",
                "output": "True"
            },
            {
                "input": "any_int(-7, 5, -2)",
                "output": "True"
            },
            {
                "input": "any_int(1.5, 5, 3.5)",
                "output": "False"
            },
            {
                "input": "any_int(2.389, 9, 10)",
                "output": "False"
            },
            {
                "input": "any_int(4.039, 5, 5.992)",
                "output": "False"
            },
            {
                "input": "any_int(3.785, 6.308, 7.367)",
                "output": "False"
            },
            {
                "input": "any_int(2.08, 7, 1.239)",
                "output": "False"
            },
            {
                "input": "any_int(4, 6, 2)",
                "output": "True"
            },
            {
                "input": "any_int(3.683, 8, 1.193)",
                "output": "False"
            },
            {
                "input": "any_int(5.114, 5, 4)",
                "output": "False"
            },
            {
                "input": "any_int(6, 2, 4)",
                "output": "True"
            }
        ]
    },
    {
        "problem_description": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "ground truth": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
        "instances": [
            {
                "input": "encode(\"FPENQAZGK\")",
                "output": "'fpgnqczgk'"
            },
            {
                "input": "encode(\"JRG\")",
                "output": "'jrg'"
            },
            {
                "input": "encode(\"SSMAQL\")",
                "output": "'ssmcql'"
            },
            {
                "input": "encode(\"IMIJTK\")",
                "output": "'kmkjtk'"
            },
            {
                "input": "encode(\"Hmj\")",
                "output": "'hMJ'"
            },
            {
                "input": "encode(\"bBSM\")",
                "output": "'Bbsm'"
            },
            {
                "input": "encode(\"EORCSH\")",
                "output": "'gqrcsh'"
            },
            {
                "input": "encode(\"FHEcvmCWtbF aJg\")",
                "output": "'fhgCVMcwTBf CjG'"
            },
            {
                "input": "encode(\"TLU\")",
                "output": "'tlw'"
            },
            {
                "input": "encode(\"BnHJZme\")",
                "output": "'bNhjzMG'"
            },
            {
                "input": "encode(\"ZyWrbakVZJKkkAmmKNRmUPDCi\")",
                "output": "'zYwRBCKvzjkKKcMMknrMwpdcK'"
            },
            {
                "input": "encode(\"aZPgQ vnmhPPOLdLIutuJO\")",
                "output": "'CzpGq VNMHppqlDlkWTWjq'"
            },
            {
                "input": "encode(\"AZOCBJD\")",
                "output": "'czqcbjd'"
            },
            {
                "input": "encode(\"YcxmhivPyJIw\")",
                "output": "'yCXMHKVpYjkW'"
            },
            {
                "input": "encode(\"WNYEUHDUE\")",
                "output": "'wnygwhdwg'"
            },
            {
                "input": "encode(\"jjHqlFViqHz\")",
                "output": "'JJhQLfvKQhZ'"
            },
            {
                "input": "encode(\"BODPGNO\")",
                "output": "'bqdpgnq'"
            },
            {
                "input": "encode(\"xOzJhrPNcVCLkJeMgwsBcYm\")",
                "output": "'XqZjHRpnCvclKjGmGWSbCyM'"
            },
            {
                "input": "encode(\"CLY\")",
                "output": "'cly'"
            },
            {
                "input": "encode(\"DXZBFN\")",
                "output": "'dxzbfn'"
            },
            {
                "input": "encode(\"FDMjHnZkEhmsNmlJNItsJQlasO\")",
                "output": "'fdmJhNzKgHMSnMLjnkTSjqLCSq'"
            },
            {
                "input": "encode(\"TEGPKXNB\")",
                "output": "'tggpkxnb'"
            },
            {
                "input": "encode(\"IstxgcEpahvkDruGyiK\")",
                "output": "'kSTXGCgPCHVKdRWgYKk'"
            },
            {
                "input": "encode(\"Sjf\")",
                "output": "'sJF'"
            },
            {
                "input": "encode(\"TEPUFH\")",
                "output": "'tgpwfh'"
            },
            {
                "input": "encode(\"KTBXLNF\")",
                "output": "'ktbxlnf'"
            },
            {
                "input": "encode(\"c XkUXkBchEddL\")",
                "output": "'C xKwxKbCHgDDl'"
            },
            {
                "input": "encode(\"DPGWLEVT\")",
                "output": "'dpgwlgvt'"
            },
            {
                "input": "encode(\"mejsPoZxTWVZINkltbTC\")",
                "output": "'MGJSpQzXtwvzknKLTBtc'"
            },
            {
                "input": "encode(\"SgPXbDsCxLlYIAFFhhIbRfXHjaZ\")",
                "output": "'sGpxBdScXlLykcffHHkBrFxhJCz'"
            },
            {
                "input": "encode(\"kkAuzPMaJbY\")",
                "output": "'KKcWZpmCjBy'"
            },
            {
                "input": "encode(\"RcQZkLoILujJnUJ BK lQgY\")",
                "output": "'rCqzKlQklWJjNwj bk LqGy'"
            },
            {
                "input": "encode(\"JMFDUNNFN\")",
                "output": "'jmfdwnnfn'"
            },
            {
                "input": "encode(\"ZfDqK\")",
                "output": "'zFdQk'"
            },
            {
                "input": "encode(\"BRVLN\")",
                "output": "'brvln'"
            },
            {
                "input": "encode(\"jAqqTMHiqs\")",
                "output": "'JcQQtmhKQS'"
            },
            {
                "input": "encode(\"UEeG\")",
                "output": "'wgGg'"
            },
            {
                "input": "encode(\"cJbiuaENQvBuUexfhUuJRbvP\")",
                "output": "'CjBKWCgnqVbWwGXFHwWjrBVp'"
            },
            {
                "input": "encode(\"rjXQvzxCjzaWcAuNeOiaXPpdYVoxCt\")",
                "output": "'RJxqVZXcJZCwCcWnGqKCxpPDyvQXcT'"
            },
            {
                "input": "encode(\"BCKPNMVO\")",
                "output": "'bckpnmvq'"
            },
            {
                "input": "encode(\"PKKLGPQOY\")",
                "output": "'pkklgpqqy'"
            },
            {
                "input": "encode(\"oSYVfHWo kWWvnziVt\")",
                "output": "'QsyvFhwQ KwwVNZKvT'"
            },
            {
                "input": "encode(\"HKWXPGN\")",
                "output": "'hkwxpgn'"
            },
            {
                "input": "encode(\"XgnELkHHAAUiCCpSfJ\")",
                "output": "'xGNglKhhccwKccPsFj'"
            },
            {
                "input": "encode(\"TQRZQWU\")",
                "output": "'tqrzqww'"
            },
            {
                "input": "encode(\"OSWDQFIR\")",
                "output": "'qswdqfkr'"
            },
            {
                "input": "encode(\"WWBsZMYcpjfNzyCeVVgesJoJhjy\")",
                "output": "'wwbSzmyCPJFnZYcGvvGGSjQjHJY'"
            },
            {
                "input": "encode(\"DNHIUUVX\")",
                "output": "'dnhkwwvx'"
            },
            {
                "input": "encode(\"ZVS\")",
                "output": "'zvs'"
            },
            {
                "input": "encode(\"QwJoXypNyPZVVwtdhDxHhBKXS\")",
                "output": "'qWjQxYPnYpzvvWTDHdXhHbkxs'"
            },
            {
                "input": "encode(\"I DoNt KnOw WhAt tO WrItE\")",
                "output": "'k dQnT kNqW wHcT Tq wRkTg'"
            },
            {
                "input": "encode(\"BYRAIVE\")",
                "output": "'byrckvg'"
            },
            {
                "input": "encode(\"RHO\")",
                "output": "'rhq'"
            },
            {
                "input": "encode(\"DZAXVXQ\")",
                "output": "'dzcxvxq'"
            },
            {
                "input": "encode(\"KtvgHCwhJPHhZoPrTShCCFjb\")",
                "output": "'kTVGhcWHjphHzQpRtsHccfJB'"
            },
            {
                "input": "encode(\"OJMQGVupooekW\")",
                "output": "'qjmqgvWPQQGKw'"
            },
            {
                "input": "encode('Mudasir')",
                "output": "'mWDCSKR'"
            },
            {
                "input": "encode(\"PRREkliEYbvcKGoNqvSfsJ\")",
                "output": "'prrgKLKgyBVCkgQnQVsFSj'"
            },
            {
                "input": "encode(\"HNDsWbIhInLlAGVoRFZw\")",
                "output": "'hndSwBkHkNlLcgvQrfzW'"
            },
            {
                "input": "encode(\"WYLLSZM\")",
                "output": "'wyllszm'"
            },
            {
                "input": "encode(\"OpzdoaiWPrtwH\")",
                "output": "'qPZDQCKwpRTWh'"
            },
            {
                "input": "encode(\"WNRIIJWGO\")",
                "output": "'wnrkkjwgq'"
            },
            {
                "input": "encode(\"grukYfBTTJtVX\")",
                "output": "'GRWKyFbttjTvx'"
            },
            {
                "input": "encode(\"ROWVCETC\")",
                "output": "'rqwvcgtc'"
            },
            {
                "input": "encode(\"IzXkNbTRYEDDLFF\")",
                "output": "'kZxKnBtrygddlff'"
            },
            {
                "input": "encode(\"RkeGn HyKwTJKYqIJSWnu\")",
                "output": "'rKGgN hYkWtjkyQkjswNW'"
            },
            {
                "input": "encode(\"BGPB\")",
                "output": "'bgpb'"
            },
            {
                "input": "encode(\"EjhSPNSJMPQ\")",
                "output": "'gJHspnsjmpq'"
            },
            {
                "input": "encode(\"XQAXbNmLpmobUzQtNvacz\")",
                "output": "'xqcxBnMlPMQBwZqTnVCCZ'"
            },
            {
                "input": "encode(\"DARS\")",
                "output": "'dcrs'"
            },
            {
                "input": "encode(\"JJWNGDOT\")",
                "output": "'jjwngdqt'"
            },
            {
                "input": "encode(\"ETMDXUEBC\")",
                "output": "'gtmdxwgbc'"
            },
            {
                "input": "encode(\"rKELArbzBNVyXuUr\")",
                "output": "'RkglcRBZbnvYxWwR'"
            },
            {
                "input": "encode(\"TEIPDCVYN\")",
                "output": "'tgkpdcvyn'"
            },
            {
                "input": "encode(\"jZheceVgKgTLjRwOLeRrrtwbE\")",
                "output": "'JzHGCGvGkGtlJrWqlGrRRTWBg'"
            },
            {
                "input": "encode(\"hnbzSknod dSFfSG\")",
                "output": "'HNBZsKNQD DsfFsg'"
            },
            {
                "input": "encode(\"ApBJTja\")",
                "output": "'cPbjtJC'"
            },
            {
                "input": "encode(\"LHfTwSNWVA\")",
                "output": "'lhFtWsnwvc'"
            },
            {
                "input": "encode(\"ElaZse dYXHgdVq\")",
                "output": "'gLCzSG DyxhGDvQ'"
            },
            {
                "input": "encode('TEST')",
                "output": "'tgst'"
            },
            {
                "input": "encode(\"DWUOPpLjiGck\")",
                "output": "'dwwqpPlJKgCK'"
            },
            {
                "input": "encode(\"OHUJlX\")",
                "output": "'qhwjLx'"
            },
            {
                "input": "encode(\"EoisHGBfMOUHhIftINGIdF DJqugm\")",
                "output": "'gQKShgbFmqwhHkFTkngkDf djQWGM'"
            },
            {
                "input": "encode(\"nds\")",
                "output": "'NDS'"
            },
            {
                "input": "encode(\"DVKfMTlbOESs\")",
                "output": "'dvkFmtLBqgsS'"
            },
            {
                "input": "encode(\"LPVHOUZC\")",
                "output": "'lpvhqwzc'"
            },
            {
                "input": "encode(\"AGMBICYE\")",
                "output": "'cgmbkcyg'"
            },
            {
                "input": "encode(\"PSBSBey\")",
                "output": "'psbsbGY'"
            },
            {
                "input": "encode(\"FVABgUJcvAO\")",
                "output": "'fvcbGwjCVcq'"
            },
            {
                "input": "encode(\"HzEMwPWyLehG jFTacHALOraUoB\")",
                "output": "'hZgmWpwYlGHg JftCChclqRCwQb'"
            },
            {
                "input": "encode(\"ITNaCJiUmgbbsXbJggeE\")",
                "output": "'ktnCcjKwMGBBSxBjGGGg'"
            },
            {
                "input": "encode(\"gnJhAIkj\")",
                "output": "'GNjHckKJ'"
            },
            {
                "input": "encode(\"DXV\")",
                "output": "'dxv'"
            },
            {
                "input": "encode(\" dNVahxVjKzB JTneIFjKfXsk \")",
                "output": "' DnvCHXvJkZb jtNGkfJkFxSK '"
            },
            {
                "input": "encode(\" BuOTEofYkQJauJaclURS\")",
                "output": "' bWqtgQFyKqjCWjCCLwrs'"
            },
            {
                "input": "encode(\"ZUvOnpFUjJGGWcJQYQmTY W\")",
                "output": "'zwVqNPfwJjggwCjqyqMty w'"
            },
            {
                "input": "encode(\"TXAFFIW\")",
                "output": "'txcffkw'"
            },
            {
                "input": "encode(\"qmjcLnfY lObRZrX\")",
                "output": "'QMJClNFy LqBrzRx'"
            },
            {
                "input": "encode(\"rRrZwWEjxTIMMSNiS\")",
                "output": "'RrRzWwgJXtkmmsnKs'"
            },
            {
                "input": "encode(\"hgxUMf\")",
                "output": "'HGXwmF'"
            },
            {
                "input": "encode(\"URMC\")",
                "output": "'wrmc'"
            },
            {
                "input": "encode(\"lljsyoqvdrgHLkvty\")",
                "output": "'LLJSYQQVDRGhlKVTY'"
            },
            {
                "input": "encode(\"OBEcrSHMuaCS\")",
                "output": "'qbgCRshmWCcs'"
            },
            {
                "input": "encode('This is a message')",
                "output": "'tHKS KS C MGSSCGG'"
            },
            {
                "input": "encode(\"IYS\")",
                "output": "'kys'"
            },
            {
                "input": "encode(\"ZTTSSFEL\")",
                "output": "'zttssfgl'"
            },
            {
                "input": "encode(\"LCLBDYXRN\")",
                "output": "'lclbdyxrn'"
            },
            {
                "input": "encode(\"vFk rhQEfvOP ZgydPEhvIVWD\")",
                "output": "'VfK RHqgFVqp zGYDpgHVkvwd'"
            },
            {
                "input": "encode(\"gEQTanRJKhLxXlJDZQHPwvbnq\")",
                "output": "'GgqtCNrjkHlXxLjdzqhpWVBNQ'"
            },
            {
                "input": "encode(\"YaFsT\")",
                "output": "'yCfSt'"
            },
            {
                "input": "encode(\"kzLQOefkAweHvGBycjn\")",
                "output": "'KZlqqGFKcWGhVgbYCJN'"
            },
            {
                "input": "encode(\"kwfcMJBvOIscxpuRJYMQxX\")",
                "output": "'KWFCmjbVqkSCXPWrjymqXx'"
            },
            {
                "input": "encode('YES')",
                "output": "'ygs'"
            },
            {
                "input": "encode(\"FKRTJOGJR\")",
                "output": "'fkrtjqgjr'"
            },
            {
                "input": "encode(\"GWHK\")",
                "output": "'gwhk'"
            },
            {
                "input": "encode(\"CNJ\")",
                "output": "'cnj'"
            },
            {
                "input": "encode(\"rhgAVJOAnVugEnMSSKWsc\")",
                "output": "'RHGcvjqcNvWGgNmsskwSC'"
            },
            {
                "input": "encode(\"gIVppcmTSMtmvhg ZjTdBs\")",
                "output": "'GkvPPCMtsmTMVHG zJtDbS'"
            },
            {
                "input": "encode(\"NNoTLfuGwSHDJdTlRXSyC\")",
                "output": "'nnQtlFWgWshdjDtLrxsYc'"
            },
            {
                "input": "encode(\"QRX\")",
                "output": "'qrx'"
            },
            {
                "input": "encode(\"kqmseH\")",
                "output": "'KQMSGh'"
            },
            {
                "input": "encode(\"HrRcDpPaxYYXID\")",
                "output": "'hRrCdPpCXyyxkd'"
            },
            {
                "input": "encode(\"CVLBOWSP\")",
                "output": "'cvlbqwsp'"
            },
            {
                "input": "encode(\"fZoHFcbTcLTUWG VdZ\")",
                "output": "'FzQhfCBtCltwwg vDz'"
            },
            {
                "input": "encode(\"zTBpeQNFrEsJ\")",
                "output": "'ZtbPGqnfRgSj'"
            },
            {
                "input": "encode(\"UNVEY\")",
                "output": "'wnvgy'"
            },
            {
                "input": "encode(\"GUAU\")",
                "output": "'gwcw'"
            },
            {
                "input": "encode(\"pvQeerpuzVbW\")",
                "output": "'PVqGGRPWZvBw'"
            },
            {
                "input": "encode(\"SETPXKRTE\")",
                "output": "'sgtpxkrtg'"
            },
            {
                "input": "encode(\"pUgmIEYWAnzEuqFElVbVs\")",
                "output": "'PwGMkgywcNZgWQfgLvBvS'"
            }
        ]
    },
    {
        "problem_description": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
        "ground truth": "def skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
        "instances": [
            {
                "input": "skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])",
                "output": "10"
            },
            {
                "input": "skjkasdkd([3, 5, 5, 30, 4831, 37, 83712, 114, 161, 27, 2975, 29, 27, 4, 10, 1])",
                "output": "16"
            },
            {
                "input": "skjkasdkd([1, 85, 16, 6, 1, 26])",
                "output": "1"
            },
            {
                "input": "skjkasdkd([5, 7, 5, 6, 6, 6])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([126, 99, 8790])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([3, 13, 5, 5, 4, 12])",
                "output": "4"
            },
            {
                "input": "skjkasdkd([123, 96, 8623])",
                "output": "19"
            },
            {
                "input": "skjkasdkd([5, 85, 17, 6, 3, 26])",
                "output": "8"
            },
            {
                "input": "skjkasdkd([7337, 122667, 123, 10])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([2, 7, 1, 37, 4211, 31, 83200, 107, 158, 28, 1455, 29, 30, 4, 13, 3])",
                "output": "8"
            },
            {
                "input": "skjkasdkd([131, 93, 8571])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([8191])",
                "output": "19"
            },
            {
                "input": "skjkasdkd([8379, 123265, 124, 2])",
                "output": "2"
            },
            {
                "input": "skjkasdkd([5, 2, 2, 11, 5, 3626, 4, 5, 5, 38, 2, 2, 6, 7, 7, 6, 8, 5])",
                "output": "2"
            },
            {
                "input": "skjkasdkd([6, 3, 2, 32, 5561, 31, 83909, 107, 166, 26, 3275, 29, 32, 5, 14, 6])",
                "output": "8"
            },
            {
                "input": "skjkasdkd([8491])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([2, 8, 4, 6, 4, 10])",
                "output": "2"
            },
            {
                "input": "skjkasdkd([132, 94, 7961])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([8472])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([1, 5, 3, 6, 5, 4637, 6, 2, 6, 39, 2, 2, 1, 5, 3, 1, 7, 2])",
                "output": "20"
            },
            {
                "input": "skjkasdkd([5, 6, 2, 3, 6, 2])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([5, 2, 5, 2, 7, 9, 7, 5, 5, 7, 7, 2, 181, 35, 4, 34, 1, 4, 35, 320, 3, 7])",
                "output": "10"
            },
            {
                "input": "skjkasdkd([4, 84, 11, 6, 4, 20])",
                "output": "2"
            },
            {
                "input": "skjkasdkd([8677, 122524, 129, 7])",
                "output": "28"
            },
            {
                "input": "skjkasdkd([8957])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([7534])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([4, 726, 34, 75, 95, 28, 7, 1, 3, 94, 83, 3, 3, 6])",
                "output": "11"
            },
            {
                "input": "skjkasdkd([5, 9, 5, 5, 5, 4])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([2, 76, 15, 3, 3, 25])",
                "output": "3"
            },
            {
                "input": "skjkasdkd([2, 6, 2, 33, 4932, 39, 82581, 106, 165, 25, 3239, 31, 30, 5, 9, 5])",
                "output": "4"
            },
            {
                "input": "skjkasdkd([7207])",
                "output": "16"
            },
            {
                "input": "skjkasdkd([4, 8, 6, 6, 3, 9, 10, 7, 2, 7, 9, 3, 184, 32, 2, 27, 5, 6, 31, 319, 2, 8])",
                "output": "4"
            },
            {
                "input": "skjkasdkd([1, 5, 1, 4, 5, 4161, 1, 3, 3, 35, 6, 2, 2, 2, 9, 1, 7, 2])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([2, 725, 28, 72, 103, 33, 1, 1, 2, 96, 86, 1, 5, 11])",
                "output": "4"
            },
            {
                "input": "skjkasdkd([127, 97, 8192])",
                "output": "10"
            },
            {
                "input": "skjkasdkd([1, 9, 6, 5, 1, 12])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])",
                "output": "25"
            },
            {
                "input": "skjkasdkd([8267, 123600, 124, 7])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([2, 5, 2, 7, 3, 4101, 3, 4, 1, 36, 5, 3, 3, 4, 2, 1, 8, 1])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([5, 727, 35, 66, 97, 33, 3, 4, 7, 96, 84, 2, 6, 7])",
                "output": "16"
            },
            {
                "input": "skjkasdkd([1, 84, 7, 3, 4, 25])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([4, 5, 2, 4, 5, 4354, 3, 4, 5, 35, 3, 3, 4, 6, 7, 3, 9, 6])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([8839])",
                "output": "28"
            },
            {
                "input": "skjkasdkd([5, 3, 1, 10, 2, 3930, 4, 2, 5, 45, 2, 3, 2, 4, 3, 6, 2, 3])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([1, 8, 4, 2, 6, 4, 7, 4, 7, 8, 10, 3, 186, 27, 9, 37, 5, 7, 32, 325, 4, 8])",
                "output": "10"
            },
            {
                "input": "skjkasdkd([132, 96, 8998])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([131, 99, 8407])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([8982])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([3, 8, 3, 2, 1, 7])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([7732])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([2, 7, 7, 3, 2, 3, 4, 2, 8, 1, 9, 2, 180, 35, 7, 32, 1, 6, 27, 322, 7, 6])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([8558, 122558, 127, 8])",
                "output": "10"
            },
            {
                "input": "skjkasdkd([8096, 123506, 128, 12])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([4, 729, 27, 69, 101, 35, 1, 1, 3, 89, 84, 4, 10, 1])",
                "output": "2"
            },
            {
                "input": "skjkasdkd([1, 9, 5, 4, 1, 11])",
                "output": "2"
            },
            {
                "input": "skjkasdkd([3, 1, 1, 8, 1, 4909, 3, 4, 6, 43, 6, 4, 6, 5, 1, 1, 4, 5])",
                "output": "22"
            },
            {
                "input": "skjkasdkd([3, 78, 16, 3, 1, 17])",
                "output": "8"
            },
            {
                "input": "skjkasdkd([3, 4, 3, 9, 5, 4816, 2, 1, 1, 44, 6, 6, 3, 2, 9, 1, 10, 4])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([6, 3, 2, 7, 1, 5133, 6, 4, 4, 37, 6, 4, 4, 2, 3, 3, 7, 5])",
                "output": "10"
            },
            {
                "input": "skjkasdkd([2, 1, 5, 3, 2, 7, 11, 9, 9, 9, 4, 7, 185, 31, 8, 29, 6, 6, 29, 328, 3, 2])",
                "output": "4"
            },
            {
                "input": "skjkasdkd([4, 84, 9, 8, 4, 23])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([7273, 122950, 128, 10])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([1, 724, 36, 72, 103, 34, 8, 2, 8, 87, 78, 1, 10, 4])",
                "output": "4"
            },
            {
                "input": "skjkasdkd([5, 722, 35, 76, 102, 28, 11, 1, 6, 93, 83, 3, 1, 5])",
                "output": "11"
            },
            {
                "input": "skjkasdkd([5, 79, 12, 2, 6, 16])",
                "output": "16"
            },
            {
                "input": "skjkasdkd([4, 725, 37, 70, 100, 27, 11, 1, 7, 90, 88, 1, 6, 9])",
                "output": "10"
            },
            {
                "input": "skjkasdkd([131, 98, 7278])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([2, 80, 16, 1, 2, 26])",
                "output": "2"
            },
            {
                "input": "skjkasdkd([2, 83, 14, 1, 3, 21])",
                "output": "11"
            },
            {
                "input": "skjkasdkd([5, 2, 5, 9, 5, 4969, 4, 1, 7, 38, 5, 6, 6, 1, 3, 4, 7, 1])",
                "output": "28"
            },
            {
                "input": "skjkasdkd([9057, 122599, 125, 4])",
                "output": "28"
            },
            {
                "input": "skjkasdkd([8995])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])",
                "output": "11"
            },
            {
                "input": "skjkasdkd([5, 12, 5, 7, 6, 9])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([130, 95, 8293])",
                "output": "22"
            },
            {
                "input": "skjkasdkd([2, 720, 31, 66, 98, 30, 10, 1, 2, 93, 78, 5, 10, 3])",
                "output": "4"
            },
            {
                "input": "skjkasdkd([4, 4, 1, 33, 5640, 39, 84108, 111, 165, 24, 3055, 32, 26, 5, 12, 8])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([2, 4, 5, 34, 5912, 29, 83693, 108, 164, 25, 3174, 30, 29, 6, 10, 4])",
                "output": "11"
            },
            {
                "input": "skjkasdkd([5, 5, 3, 1, 5, 3])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([3, 81, 15, 4, 5, 25])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([2, 13, 3, 4, 6, 4])",
                "output": "4"
            },
            {
                "input": "skjkasdkd([2, 724, 35, 68, 97, 29, 3, 1, 8, 86, 88, 2, 8, 1])",
                "output": "16"
            },
            {
                "input": "skjkasdkd([8721, 122608, 128, 7])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([1, 1, 1, 34, 5604, 29, 83308, 108, 167, 22, 1969, 32, 29, 1, 4, 4])",
                "output": "14"
            },
            {
                "input": "skjkasdkd([8305])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([3, 719, 31, 66, 97, 29, 1, 3, 5, 86, 80, 3, 7, 3])",
                "output": "17"
            },
            {
                "input": "skjkasdkd([3, 722, 34, 72, 97, 30, 10, 1, 6, 91, 80, 2, 3, 7])",
                "output": "16"
            },
            {
                "input": "skjkasdkd([8035])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([1, 7, 1, 3, 4, 2, 8, 8, 7, 3, 10, 7, 176, 27, 9, 35, 5, 7, 28, 329, 1, 5])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([8138, 123467, 128, 10])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([8910, 123905, 128, 3])",
                "output": "3"
            },
            {
                "input": "skjkasdkd([1, 13, 3, 5, 1, 8])",
                "output": "4"
            },
            {
                "input": "skjkasdkd([5, 86, 15, 1, 5, 21])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([129, 100, 7701])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([1, 3, 4, 13, 3, 4527, 1, 2, 2, 41, 6, 5, 5, 6, 8, 1, 3, 4])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])",
                "output": "13"
            },
            {
                "input": "skjkasdkd([8449, 123035, 132, 12])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([7730])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([3, 7, 6, 5, 5, 2, 12, 6, 6, 2, 5, 1, 183, 37, 5, 30, 1, 5, 29, 321, 9, 8])",
                "output": "10"
            },
            {
                "input": "skjkasdkd([2, 4, 6, 4, 2, 5344, 6, 1, 5, 39, 4, 3, 3, 2, 7, 6, 8, 5])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([0,81,12,3,1,21])",
                "output": "3"
            },
            {
                "input": "skjkasdkd([129, 93, 7500])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([4, 7, 2, 6, 5, 3, 12, 6, 8, 5, 2, 4, 186, 36, 1, 28, 7, 6, 37, 322, 8, 1])",
                "output": "10"
            },
            {
                "input": "skjkasdkd([1, 4, 3, 29, 4849, 35, 83707, 107, 168, 19, 2483, 34, 30, 5, 12, 2])",
                "output": "8"
            },
            {
                "input": "skjkasdkd([2, 8, 1, 33, 4189, 32, 82229, 109, 167, 22, 1460, 30, 28, 1, 8, 6])",
                "output": "14"
            },
            {
                "input": "skjkasdkd([2, 6, 1, 1, 5, 1, 10, 6, 1, 2, 6, 2, 176, 32, 5, 33, 3, 1, 36, 319, 7, 7])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([5, 7, 2, 30, 4641, 32, 83437, 111, 158, 27, 3279, 29, 27, 6, 9, 1])",
                "output": "25"
            },
            {
                "input": "skjkasdkd([3, 7, 3, 1, 1, 5])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([6, 2, 2, 34, 4802, 29, 83179, 104, 163, 20, 2855, 28, 34, 6, 5, 6])",
                "output": "10"
            },
            {
                "input": "skjkasdkd([5, 2, 3, 5, 3, 8, 10, 5, 4, 8, 6, 4, 179, 28, 2, 35, 4, 7, 29, 324, 4, 5])",
                "output": "17"
            },
            {
                "input": "skjkasdkd([7476, 123438, 129, 6])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([2, 5, 1, 13, 3, 3861, 1, 3, 1, 40, 1, 6, 5, 4, 5, 2, 10, 4])",
                "output": "4"
            },
            {
                "input": "skjkasdkd([4, 6, 2, 35, 4257, 37, 82857, 113, 166, 24, 1400, 30, 34, 5, 6, 1])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([1, 7, 3, 28, 4374, 34, 82577, 108, 161, 22, 2382, 31, 35, 3, 14, 4])",
                "output": "4"
            },
            {
                "input": "skjkasdkd([8839, 122979, 125, 10])",
                "output": "28"
            },
            {
                "input": "skjkasdkd([5, 3, 2, 4, 5, 7, 7, 9, 3, 10, 9, 1, 183, 29, 3, 31, 3, 4, 31, 328, 7, 5])",
                "output": "4"
            },
            {
                "input": "skjkasdkd([2, 8, 3, 3, 4, 3, 5, 6, 2, 6, 9, 3, 184, 30, 7, 37, 7, 2, 34, 324, 1, 5])",
                "output": "10"
            },
            {
                "input": "skjkasdkd([127, 100, 7275])",
                "output": "10"
            },
            {
                "input": "skjkasdkd([1, 3, 6, 5, 8, 7, 4, 2, 5, 3, 6, 7, 183, 28, 2, 33, 2, 6, 27, 319, 8, 8])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([1, 11, 1, 2, 1, 10])",
                "output": "2"
            },
            {
                "input": "skjkasdkd([1, 724, 28, 71, 94, 37, 1, 2, 10, 87, 81, 1, 7, 7])",
                "output": "8"
            },
            {
                "input": "skjkasdkd([8202])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([3, 729, 37, 66, 95, 33, 8, 5, 1, 93, 79, 5, 9, 2])",
                "output": "16"
            },
            {
                "input": "skjkasdkd([5, 729, 37, 72, 94, 31, 8, 5, 7, 90, 85, 2, 8, 10])",
                "output": "10"
            },
            {
                "input": "skjkasdkd([2, 83, 16, 4, 4, 25])",
                "output": "11"
            },
            {
                "input": "skjkasdkd([129, 101, 8468])",
                "output": "2"
            },
            {
                "input": "skjkasdkd([0,8,1,2,1,7])",
                "output": "7"
            },
            {
                "input": "skjkasdkd([6, 3, 6, 9, 1, 4258, 5, 1, 7, 41, 3, 1, 1, 7, 6, 1, 1, 3])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([1, 4, 4, 2, 1, 4, 5, 8, 3, 3, 3, 6, 185, 29, 7, 33, 4, 7, 36, 322, 6, 7])",
                "output": "11"
            },
            {
                "input": "skjkasdkd([129, 95, 7634])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([126, 92, 8168])",
                "output": "0"
            },
            {
                "input": "skjkasdkd([3, 80, 12, 5, 5, 24])",
                "output": "5"
            },
            {
                "input": "skjkasdkd([8191, 123456, 127, 7])",
                "output": "19"
            },
            {
                "input": "skjkasdkd([1, 6, 2, 36, 4276, 36, 83181, 106, 168, 23, 2295, 37, 27, 3, 7, 6])",
                "output": "10"
            }
        ]
    },
    {
        "problem_description": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
        "ground truth": "def check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
        "instances": [
            {
                "input": "check_dict_case({'n': 'xahbfntlzktuzug', 8: 'jctakc', 'm': 'skml'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'qhskalyon': 'jTkUuceZR', 'ypyvn': 'CoCbYQ'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'ISymfszDc': 'TfMacT', 'GuNgc': '50057', 'kAP': 'osNWsqkQ'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'b': 'tzyaufsrkaffc', 'm': 'atgbi'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'j': 'fcgyragevddkvk', 'X': 'myasjlwty', 'E': 'wkjgzzoosgpi'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'UvtMlty': 'nVGDmDrCJ', 'BePcz': '374227', 'ZXEl': 'fKPqJsOvjbeo'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'ZGZGV': 'EFPM', 'WUIX': '668604994'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'i': 'kombtwcenp', 'l': 'umxhlr'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'w': 'vmnvozhiocvkqh', 2: 'wgrteaeecuez', 'g': 'fxyzqtmxa'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'k': 'rsepwmm'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'XYJC': 'jNuzHbk', 'zEx': '4860', 'zdFwlW': 'ZSxwsjPwxXtL'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'s': 'jnuocmugsgrxukh', 10: 'qvwwhlo', 't': 'ohcjmtlzc'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'pKs': 'xVF', 'JuXee': '085', 'EXXukTz': 'Byik'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'y': 'juyddabdrnlrn', 'T': 'cazvvctpga', 'B': 'dbg'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'MEUHYJ': 'TEM', 'NYK': '34633713'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'OGCTqCm': 'HReaO', 'yQPf': '6207', 'LmegQqnKv': 'GWSx'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'WUF': 'qMfFM', 'NtYD': '832', 'oKskZGfDX': 'WUvQyjc'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'KZLZ': 'SFT', 'KKFRSLKIY': '02303705'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'m': 'hbbijvhbbrba', 'D': 'mxxkdqgu', 'K': 'raxko'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'c': 'tiuegeqq', 9: 'cpfxzgkgirje', 'q': 'vrueasg'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'hnexdzem': 'DPAbnQw', 'dxljjrw': 'nLzTAmBzF'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'l': 'vnqfwvujzwfwyj', 'B': 'oqutyhqli', 'X': 'iajwq'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'CNPlUyKIA': 'PYEe', 'NuCOYaAJz': '867846', 'inWSe': 'dxeqPgMIdB'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'a': 'jzwwvdupalxyi', 'q': 'edvtpkwxm'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'pva': 'gdt', 'tqwqjnm': 'rFtgEIIfU'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'v': 'doephj', 6: 'ywyax', 'o': 'ncaz'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'gfxnbl': 'AWZf', 'wbptpnqg': 'KRbNA'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'wKxGuyq': 'HrrH', 'VFiUO': '3154', 'kxO': 'pRiJqhnNOvYp'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'KEBnAZ': 'qhsnjgSnS', 'PefJT': '34073', 'JtVAjuodw': 'KaPSDGEJ'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'VCOKEHUZW': 'TQJ', 'ROMV': '3254'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'gbd': 'KLgAIXqIZfV', 'gdgfpyf': 'RNQJX'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'mlm': 'zOhHfD', 'xtzf': 'uJsuR'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'e': 'filcbtnfjni', 3: 'jnqosqrgmny', 'b': 'pfdi'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'z': 'ybgxprswhqgh', 'D': 'zhkwzgd', 'B': 'bwcgnexhx'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'OPHYC': 'DZJLL', 'XHO': '4958528'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'g': 'gybkdjrhp', 5: 'wzmbwr'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'l': 'eaufkyaebdl', 'h': 'sbi'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'prpw': 'WDf', 'onoscuy': 'uzybSwqZ'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'bddotika': 'nRFb', 'jwprcqddz': 'bBR'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'LSTAF': 'UAZSVT', 'XIS': '713'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'u': 'bftlcu', 'F': 'hxeag', 'Q': 'uzfnw'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'kdmdoymmf': 'sdvwzSyPe', 'cvtnh': 'air'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'DAL': 'KEWRR', 'SHIFWEEMW': '58926385'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'zszouxi': 'yeMsjaF', 'sks': 'cBSJXJwX'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'CuYwc': 'rAdthhp', 'XzJaxnpP': '332954', 'kTf': 'vGasJU'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'n': 'qjkmwxqngd', 'w': 'iiuqsmtwe'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'vdk': 'MepbyhEjC', 'tdiernvi': 'LfqIO'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'zdyouS': 'LOwog', 'dpnawfDD': '981962', 'DcXeOlW': 'imL'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'ceugtmuz': 'TmP', 'stmg': 'BLl'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'RWETIY': 'YCDPL', 'GNTE': '451020125'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'v': 'dfbbgvzdscrv', 'E': 'sxencbvlia', 'L': 'twtxnlavj'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'MEIDTL': 'VRDKN', 'FZZWX': '1407'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'luo': 'zzh', 'EhEH': '148', 'idVMULBj': 'BOIcgZHT'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'m': 'mqrzjw', 'T': 'sikpsucfl', 'E': 'cbgmxxnmdrxg'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'x': 'rpaqitm', 'u': 'rtdwwvdybsic'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'p': 'irxohxlzzyvw', 8: 'awlrbu', 'w': 'ctdentj'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'VYA': 'TBCF', 'HDHYKLPTN': '12914'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'m': 'sezrcoqwvnr', 'n': 'ldlxrkiot'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'PFHKF': 'UZVY', 'KXCCX': '31603'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'u': 'bvnywqo', 'f': 'lflfulzuds'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'VApyOCO': 'qeVr', 'SJzTNH': '679047', 'Jvwh': 'RvfMcp'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'o': 'vqgkfowerkxp', 's': 'gfxx'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'g': 'xopdadefplk', 5: 'awdkxulto', 'v': 'rfl'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'BMEOMSJDJ': 'FGQWI', 'SBBPXXNJ': '9993484'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'CJSRG': 'ZQGTSH', 'RQOC': '7511'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'o': 'cmssdkn', 'E': 'recynfrwfua', 'L': 'pbhzdabxdqf'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'b': 'zgfpqzqgchia', 't': 'vwrphb'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'n': 'wdjmxjjdc', 'l': 'nvvdrvkpm'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'h': 'zprecd', 'y': 'afv'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'n': 'wdjvdltslua', 'i': 'peurlqybqvct'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'n': 'dnukqzbtoup', 'D': 'oohaoy', 'V': 'vsapzys'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'vTKV': 'vfcSoY', 'MqbjHgS': '9138', 'cGkgssLVr': 'yIuvFksPqM'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'c': 'eexvfiew', 'C': 'xopcqmg', 'G': 'kbwypgf'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'j': 'parojmcxtaz', 8: 'iepc', 'w': 'guplmpum'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'c': 'exhkugly', 'H': 'hxljxqntbie', 'N': 'puptvlju'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'bTDgmKv': 'rVwBHUauC', 'cWYzfZw': '934', 'TtWunxv': 'TvklwNHxNs'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'o': 'oop', 5: 'jcdvmy'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'WEJAX': 'YWBJXH', 'HLZLLV': '7304084'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'w': 'iduoimnfubqlxbq', 'R': 'ovifuvem', 'D': 'klw'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'SBVUBTB': 'DIGG', 'BGMCYFGS': '105758'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'vymrps': 'tRQlVfOy', 'xgn': 'LBJtlb'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'MBJMTMK': 'KNH', 'INKZWO': '89852'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'f': 'exlzue', 'i': 'yrewpjx'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'m': 'zoykqipp', 'N': 'kmsnbylkc', 'B': 'ccpy'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'YNBEJI': 'SGLU', 'INYRRDKZ': '571'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'TVMBVK': 'JVCDMR', 'JZGPKVLPN': '14605'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'l': 'tzovbnefdft', 4: 'pjztyrhmutrk', 'q': 'dhwxpbwsp'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'BHmT': 'irq', 'uHvyEu': '8647', 'RrUKbfpO': 'zgJmtsWM'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'g': 'xlzmrlvob', 'H': 'vhpyporwr', 'W': 'ligdfquvi'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'l': 'btvngk', 'h': 'ongztnabsigc'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'w': 'ypghvpfdrq', 6: 'fyzqdslgte', 'e': 'hboeipeq'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'qgt': 'rCmkqP', 'dvdmod': 'nMGgkaLu'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'a': 'ynlnmxsajad', 'O': 'hspyi', 'Y': 'euhm'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'AXMaj': 'YMhfFKO', 'xLUFwrhU': '99507', 'LCZ': 'OvkprKzu'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'f': 'ddkomprr', 2: 'whev', 'k': 'xzdw'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'vdoj': 'foQoqjSYT', 'vlvrbtrxt': 'haVFtae'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'d': 'tahdnaz', 10: 'icakelzp', 'y': 'hawbuz'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'k': 'fscjjnkxljechg', 1: 'wnzjtm', 'u': 'mnkqnqkin'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'x': 'kqnfkdowweb', 'E': 'xzenelobbp', 'N': 'owrxqsq'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'duase': 'StBcsYaUZFV', 'mbnuc': 'SDGj'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'w': 'mvnibigx', 'j': 'ijosvsbswe'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'pyuocwi': 'ACWLpFml', 'nbnak': 'nfhBi'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'ilioz': 'uPobK', 'wfvwx': 'FTy'})",
                "output": "True"
            },
            {
                "input": "check_dict_case({'n': 'tffsua', 'W': 'xldwoonez'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'aohHoCn': 'rxNzkmv', 'BTGHom': '963', 'aRySCQA': 'IGu'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'j': 'kllixbfik', 7: 'qge', 'y': 'qdhfvkvd'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'m': 'avbvoxk', 10: 'xfiao', 'd': 'nji'})",
                "output": "False"
            },
            {
                "input": "check_dict_case({'r': 'dyywxj', 'e': 'jyn'})",
                "output": "True"
            }
        ]
    },
    {
        "problem_description": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
        "ground truth": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
        "instances": [
            {
                "input": "count_up_to(1)",
                "output": "[]"
            },
            {
                "input": "count_up_to(54)",
                "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53]"
            },
            {
                "input": "count_up_to(18)",
                "output": "[2, 3, 5, 7, 11, 13, 17]"
            },
            {
                "input": "count_up_to(47)",
                "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]"
            },
            {
                "input": "count_up_to(0)",
                "output": "[]"
            },
            {
                "input": "count_up_to(27)",
                "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23]"
            },
            {
                "input": "count_up_to(53)",
                "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]"
            },
            {
                "input": "count_up_to(13)",
                "output": "[2, 3, 5, 7, 11]"
            },
            {
                "input": "count_up_to(44)",
                "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]"
            }
        ]
    },
    {
        "problem_description": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n",
        "ground truth": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n",
        "instances": [
            {
                "input": "multiply(18, 24)",
                "output": "32"
            },
            {
                "input": "multiply(1656, 1840)",
                "output": "0"
            },
            {
                "input": "multiply(2882, 1009)",
                "output": "18"
            },
            {
                "input": "multiply(76, 72)",
                "output": "12"
            },
            {
                "input": "multiply(23, 24)",
                "output": "12"
            },
            {
                "input": "multiply(144, 412)",
                "output": "8"
            },
            {
                "input": "multiply(73, 63)",
                "output": "9"
            },
            {
                "input": "multiply(16, 25)",
                "output": "30"
            },
            {
                "input": "multiply(24, 23)",
                "output": "12"
            },
            {
                "input": "multiply(152, 407)",
                "output": "14"
            },
            {
                "input": "multiply(1095, 1248)",
                "output": "40"
            },
            {
                "input": "multiply(4, 2)",
                "output": "8"
            },
            {
                "input": "multiply(23, 30)",
                "output": "0"
            },
            {
                "input": "multiply(13, -12)",
                "output": "24"
            },
            {
                "input": "multiply(16, 33)",
                "output": "18"
            },
            {
                "input": "multiply(76, 68)",
                "output": "48"
            },
            {
                "input": "multiply(18, 29)",
                "output": "72"
            },
            {
                "input": "multiply(2308, 1634)",
                "output": "32"
            },
            {
                "input": "multiply(2, 1)",
                "output": "2"
            },
            {
                "input": "multiply(1460, 1196)",
                "output": "0"
            },
            {
                "input": "multiply(19, -10)",
                "output": "0"
            },
            {
                "input": "multiply(16, 26)",
                "output": "36"
            },
            {
                "input": "multiply(2909, 1405)",
                "output": "45"
            },
            {
                "input": "multiply(1, 3)",
                "output": "3"
            },
            {
                "input": "multiply(1058, 1869)",
                "output": "72"
            },
            {
                "input": "multiply(15, 25)",
                "output": "25"
            },
            {
                "input": "multiply(3, 2)",
                "output": "6"
            },
            {
                "input": "multiply(19, -19)",
                "output": "9"
            },
            {
                "input": "multiply(15, 23)",
                "output": "15"
            },
            {
                "input": "multiply(1468, 1899)",
                "output": "72"
            },
            {
                "input": "multiply(21, 28)",
                "output": "8"
            },
            {
                "input": "multiply(71, 71)",
                "output": "1"
            },
            {
                "input": "multiply(80, 71)",
                "output": "0"
            },
            {
                "input": "multiply(18, -11)",
                "output": "72"
            },
            {
                "input": "multiply(4, 5)",
                "output": "20"
            },
            {
                "input": "multiply(2896, 2735)",
                "output": "30"
            },
            {
                "input": "multiply(77, 71)",
                "output": "7"
            },
            {
                "input": "multiply(13, -16)",
                "output": "12"
            },
            {
                "input": "multiply(4, 3)",
                "output": "12"
            },
            {
                "input": "multiply(146, 411)",
                "output": "6"
            },
            {
                "input": "multiply(2, 4)",
                "output": "8"
            },
            {
                "input": "multiply(15, -13)",
                "output": "35"
            },
            {
                "input": "multiply(1839, 2786)",
                "output": "54"
            },
            {
                "input": "multiply(22, 23)",
                "output": "6"
            },
            {
                "input": "multiply(150, 409)",
                "output": "0"
            },
            {
                "input": "multiply(148, 414)",
                "output": "32"
            },
            {
                "input": "multiply(1, 4)",
                "output": "4"
            },
            {
                "input": "multiply(152, 409)",
                "output": "18"
            },
            {
                "input": "multiply(78, 70)",
                "output": "0"
            },
            {
                "input": "multiply(3, 4)",
                "output": "12"
            },
            {
                "input": "multiply(9, -20)",
                "output": "0"
            },
            {
                "input": "multiply(1241, 1987)",
                "output": "7"
            },
            {
                "input": "multiply(12, -19)",
                "output": "2"
            },
            {
                "input": "multiply(2, 5)",
                "output": "10"
            },
            {
                "input": "multiply(72, 65)",
                "output": "10"
            },
            {
                "input": "multiply(18, -17)",
                "output": "24"
            },
            {
                "input": "multiply(72, 67)",
                "output": "14"
            },
            {
                "input": "multiply(11, -16)",
                "output": "4"
            },
            {
                "input": "multiply(14, 24)",
                "output": "16"
            },
            {
                "input": "multiply(143, 410)",
                "output": "0"
            },
            {
                "input": "multiply(24, 24)",
                "output": "16"
            },
            {
                "input": "multiply(3, 3)",
                "output": "9"
            },
            {
                "input": "multiply(144, 409)",
                "output": "36"
            },
            {
                "input": "multiply(12, -13)",
                "output": "14"
            },
            {
                "input": "multiply(4, 1)",
                "output": "4"
            },
            {
                "input": "multiply(15, 26)",
                "output": "30"
            },
            {
                "input": "multiply(23, 23)",
                "output": "9"
            },
            {
                "input": "multiply(1, 5)",
                "output": "5"
            },
            {
                "input": "multiply(74, 62)",
                "output": "8"
            },
            {
                "input": "multiply(14, -15)",
                "output": "20"
            },
            {
                "input": "multiply(22, 29)",
                "output": "18"
            },
            {
                "input": "multiply(19, 32)",
                "output": "18"
            },
            {
                "input": "multiply(81, 64)",
                "output": "4"
            },
            {
                "input": "multiply(17, 29)",
                "output": "63"
            },
            {
                "input": "multiply(1, 2)",
                "output": "2"
            },
            {
                "input": "multiply(1155, 2042)",
                "output": "10"
            },
            {
                "input": "multiply(81, 69)",
                "output": "9"
            },
            {
                "input": "multiply(1208, 2631)",
                "output": "8"
            },
            {
                "input": "multiply(12, 30)",
                "output": "0"
            },
            {
                "input": "multiply(17, 31)",
                "output": "7"
            },
            {
                "input": "multiply(149, 407)",
                "output": "63"
            },
            {
                "input": "multiply(4, 4)",
                "output": "16"
            },
            {
                "input": "multiply(77, 62)",
                "output": "14"
            },
            {
                "input": "multiply(19, -18)",
                "output": "18"
            },
            {
                "input": "multiply(21, 29)",
                "output": "9"
            },
            {
                "input": "multiply(146, 415)",
                "output": "30"
            },
            {
                "input": "multiply(147, 411)",
                "output": "7"
            },
            {
                "input": "multiply(12, 26)",
                "output": "12"
            },
            {
                "input": "multiply(146, 412)",
                "output": "12"
            },
            {
                "input": "multiply(18, 30)",
                "output": "0"
            },
            {
                "input": "multiply(2163, 1596)",
                "output": "18"
            },
            {
                "input": "multiply(77, 69)",
                "output": "63"
            },
            {
                "input": "multiply(151, 409)",
                "output": "9"
            },
            {
                "input": "multiply(80, 63)",
                "output": "0"
            },
            {
                "input": "multiply(5, 2)",
                "output": "10"
            },
            {
                "input": "multiply(19, 26)",
                "output": "54"
            },
            {
                "input": "multiply(17, 28)",
                "output": "56"
            },
            {
                "input": "multiply(2762, 813)",
                "output": "6"
            },
            {
                "input": "multiply(5, 4)",
                "output": "20"
            },
            {
                "input": "multiply(153, 407)",
                "output": "21"
            }
        ]
    },
    {
        "problem_description": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
        "ground truth": "def count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
        "instances": [
            {
                "input": "count_upper(\"abcdUfg\")",
                "output": "1"
            },
            {
                "input": "count_upper(\"dBBU\")",
                "output": "0"
            },
            {
                "input": "count_upper(\"abcdefU\")",
                "output": "1"
            },
            {
                "input": "count_upper('U')",
                "output": "1"
            },
            {
                "input": "count_upper(\"Ebcdefg\")",
                "output": "1"
            },
            {
                "input": "count_upper(\"I\")",
                "output": "1"
            },
            {
                "input": "count_upper(\"EUEE\")",
                "output": "2"
            },
            {
                "input": "count_upper('B')",
                "output": "0"
            },
            {
                "input": "count_upper(\"abcdeAg\")",
                "output": "0"
            },
            {
                "input": "count_upper(\"OBCdEA\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"aOcdOfg\")",
                "output": "1"
            },
            {
                "input": "count_upper(\"aBUAEf\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"aBAUEf\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"AbcdefA\")",
                "output": "2"
            },
            {
                "input": "count_upper('aBCdEf')",
                "output": "1"
            },
            {
                "input": "count_upper(\"UBBE\")",
                "output": "1"
            },
            {
                "input": "count_upper(\"dBOE\")",
                "output": "1"
            },
            {
                "input": "count_upper(\"OBCdEf\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"U\")",
                "output": "1"
            },
            {
                "input": "count_upper(\"IEEU\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"abUdOfg\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"UBCdUf\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"abOUAfg\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"EIEE\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"B\")",
                "output": "0"
            },
            {
                "input": "count_upper(\"dEOE\")",
                "output": "1"
            },
            {
                "input": "count_upper(\"aBEdEI\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"O\")",
                "output": "1"
            },
            {
                "input": "count_upper('dBBE')",
                "output": "0"
            },
            {
                "input": "count_upper(\"EOEE\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"aBCdEf\")",
                "output": "1"
            },
            {
                "input": "count_upper(\"IBBE\")",
                "output": "1"
            },
            {
                "input": "count_upper(\"AEAE\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"abcdefg\")",
                "output": "0"
            },
            {
                "input": "count_upper(\"ABCdEf\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"abOdefg\")",
                "output": "1"
            },
            {
                "input": "count_upper(\"A\")",
                "output": "1"
            },
            {
                "input": "count_upper(\"EBIdUU\")",
                "output": "3"
            },
            {
                "input": "count_upper(\"abcUefU\")",
                "output": "1"
            },
            {
                "input": "count_upper('')",
                "output": "0"
            },
            {
                "input": "count_upper(\"abIdUfg\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"EBCdEf\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"aEcdefg\")",
                "output": "0"
            },
            {
                "input": "count_upper(\"EEEE\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"aBIdIf\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"AEEE\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"ABIE\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"dBIE\")",
                "output": "1"
            },
            {
                "input": "count_upper(\"IICdEf\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"aBEdEf\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"E\")",
                "output": "1"
            },
            {
                "input": "count_upper('abcdefg')",
                "output": "0"
            },
            {
                "input": "count_upper(\"IbcdeAg\")",
                "output": "1"
            },
            {
                "input": "count_upper(\"UBUE\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"dUBE\")",
                "output": "0"
            },
            {
                "input": "count_upper(\"aUCdEf\")",
                "output": "1"
            },
            {
                "input": "count_upper(\"aBIOEf\")",
                "output": "2"
            },
            {
                "input": "count_upper(\"\")",
                "output": "0"
            },
            {
                "input": "count_upper(\"dBBE\")",
                "output": "0"
            }
        ]
    },
    {
        "problem_description": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "ground truth": "def closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
        "instances": [
            {
                "input": "closest_integer(\"7752780.5410381165130523\")",
                "output": "7752781"
            },
            {
                "input": "closest_integer(\"-10.7668049208854797\")",
                "output": "-11"
            },
            {
                "input": "closest_integer(\"90.754166\")",
                "output": "91"
            },
            {
                "input": "closest_integer(\"9909140.22019882247107447\")",
                "output": "9909140"
            },
            {
                "input": "closest_integer(\"219670.3814735103021585\")",
                "output": "219670"
            },
            {
                "input": "closest_integer(\"8647610.19615183923123347\")",
                "output": "8647610"
            },
            {
                "input": "closest_integer(\"304510.07731976168722998\")",
                "output": "304510"
            },
            {
                "input": "closest_integer(\"90.310328840125088\")",
                "output": "90"
            },
            {
                "input": "closest_integer(\"0.9093998495250931\")",
                "output": "1"
            },
            {
                "input": "closest_integer(\"-9.\")",
                "output": "-9"
            },
            {
                "input": "closest_integer(\"4870.7514635289854439\")",
                "output": "4871"
            },
            {
                "input": "closest_integer(\"2002770.9156885375054495\")",
                "output": "2002771"
            },
            {
                "input": "closest_integer(\"90.8718389292538408\")",
                "output": "91"
            },
            {
                "input": "closest_integer(\"0910.38918638690228935\")",
                "output": "910"
            },
            {
                "input": "closest_integer(\"96830.7798358829352927\")",
                "output": "96831"
            },
            {
                "input": "closest_integer(\"90.19186788324286208\")",
                "output": "90"
            },
            {
                "input": "closest_integer(\"9556050.7817362719643586\")",
                "output": "9556051"
            },
            {
                "input": "closest_integer(\"420.3730741094554919\")",
                "output": "420"
            },
            {
                "input": "closest_integer(\"2750.9171920354992185\")",
                "output": "2751"
            },
            {
                "input": "closest_integer(\"105759420.7092501708226783\")",
                "output": "105759421"
            },
            {
                "input": "closest_integer(\".55\")",
                "output": "1"
            },
            {
                "input": "closest_integer(\"93539740.8429573417816859\")",
                "output": "93539741"
            },
            {
                "input": "closest_integer(\"7474101960.9946621112548985\")",
                "output": "7474101961"
            },
            {
                "input": "closest_integer(\"49530.9923686605409962\")",
                "output": "49531"
            },
            {
                "input": "closest_integer(\"21095172.\")",
                "output": "21095172"
            },
            {
                "input": "closest_integer(\"965180090.27865264317516414\")",
                "output": "965180090"
            },
            {
                "input": "closest_integer(\"7284790.9387083108844197\")",
                "output": "7284791"
            },
            {
                "input": "closest_integer(\"400421550.6045760047304053\")",
                "output": "400421551"
            },
            {
                "input": "closest_integer(\"2127780.6194993537705912\")",
                "output": "2127781"
            },
            {
                "input": "closest_integer(\"643190.9074997847487993\")",
                "output": "643191"
            },
            {
                "input": "closest_integer(\"716986380.8908632298127022\")",
                "output": "716986381"
            },
            {
                "input": "closest_integer(\"0.47356705599235294\")",
                "output": "0"
            },
            {
                "input": "closest_integer(\"5510.8938181386660865\")",
                "output": "5511"
            },
            {
                "input": "closest_integer(\"58340.27521511057002124\")",
                "output": "58340"
            },
            {
                "input": "closest_integer(\"8.26\")",
                "output": "8"
            },
            {
                "input": "closest_integer(\"18030.8511815378525301\")",
                "output": "18031"
            },
            {
                "input": "closest_integer(\"80.9081244975972714\")",
                "output": "81"
            },
            {
                "input": "closest_integer(\"568882230.3460506747741575\")",
                "output": "568882230"
            },
            {
                "input": "closest_integer(\"30651380.06269969697942035\")",
                "output": "30651380"
            },
            {
                "input": "closest_integer(\"188164680.8625164010892828\")",
                "output": "188164681"
            },
            {
                "input": "closest_integer(\"+740.7675428815072424\")",
                "output": "741"
            },
            {
                "input": "closest_integer(\"50.6846461124165827\")",
                "output": "51"
            },
            {
                "input": "closest_integer(\"80.18362563426599365\")",
                "output": "80"
            },
            {
                "input": "closest_integer(\"87061.2\")",
                "output": "87061"
            },
            {
                "input": "closest_integer(\"335640.43815039154886604\")",
                "output": "335640"
            },
            {
                "input": "closest_integer(\"70.9074597640722244\")",
                "output": "71"
            },
            {
                "input": "closest_integer(\"30.4875496675711467\")",
                "output": "30"
            },
            {
                "input": "closest_integer(\"50.06568006872727938\")",
                "output": "50"
            },
            {
                "input": "closest_integer(\"20.\")",
                "output": "20"
            },
            {
                "input": "closest_integer(\"29540.8266023455315558\")",
                "output": "29541"
            },
            {
                "input": "closest_integer(\"920.5503068267302647\")",
                "output": "921"
            },
            {
                "input": "closest_integer(\"0.08050974009664802\")",
                "output": "0"
            },
            {
                "input": "closest_integer(\"4.3\")",
                "output": "4"
            },
            {
                "input": "closest_integer(\"50.5108701326835627\")",
                "output": "51"
            },
            {
                "input": "closest_integer(\"25270.26236878929945096\")",
                "output": "25270"
            },
            {
                "input": "closest_integer(\"32950.12731759775110685\")",
                "output": "32950"
            },
            {
                "input": "closest_integer(\"8667431660.1773809642921491\")",
                "output": "8667431660"
            },
            {
                "input": "closest_integer(\"70.1069369965509347\")",
                "output": "70"
            },
            {
                "input": "closest_integer(\"5956430.2031336848206573\")",
                "output": "5956430"
            },
            {
                "input": "closest_integer(\"8450.5441516861955107\")",
                "output": "8451"
            },
            {
                "input": "closest_integer(\"3370.20175253216166456\")",
                "output": "3370"
            },
            {
                "input": "closest_integer(\"58720470.3151774565803682\")",
                "output": "58720470"
            },
            {
                "input": "closest_integer(\"90.41784910359843574\")",
                "output": "90"
            },
            {
                "input": "closest_integer(\"14550.36803024128148376\")",
                "output": "14550"
            },
            {
                "input": "closest_integer(\"95630.00899682001984714\")",
                "output": "95630"
            },
            {
                "input": "closest_integer(\"9120.7857264964633935\")",
                "output": "9121"
            },
            {
                "input": "closest_integer(\"70.7148103668424428\")",
                "output": "71"
            },
            {
                "input": "closest_integer(\"8090.2130747773426992\")",
                "output": "8090"
            },
            {
                "input": "closest_integer(\".917694\")",
                "output": "1"
            },
            {
                "input": "closest_integer(\"396.\")",
                "output": "396"
            },
            {
                "input": "closest_integer(\"720.33604724999783553\")",
                "output": "720"
            },
            {
                "input": "closest_integer(\"7170.16745005290685966\")",
                "output": "7170"
            },
            {
                "input": "closest_integer(\".10826\")",
                "output": "0"
            },
            {
                "input": "closest_integer(\"5589713.\")",
                "output": "5589713"
            },
            {
                "input": "closest_integer(\"3550.3795035988000094\")",
                "output": "3550"
            },
            {
                "input": "closest_integer(\"807720.6176298175605032\")",
                "output": "807721"
            },
            {
                "input": "closest_integer(\"79.29738\")",
                "output": "79"
            },
            {
                "input": "closest_integer(\"60.4151789292601701\")",
                "output": "60"
            },
            {
                "input": "closest_integer(\"2920.2909064116656561\")",
                "output": "2920"
            },
            {
                "input": "closest_integer(\"9682550.8652164441655846\")",
                "output": "9682551"
            },
            {
                "input": "closest_integer(\"60.6541701356105623\")",
                "output": "61"
            },
            {
                "input": "closest_integer(\"54538150.6638877369321192\")",
                "output": "54538151"
            },
            {
                "input": "closest_integer(\".73\")",
                "output": "1"
            },
            {
                "input": "closest_integer(\"80.5093924567968169\")",
                "output": "81"
            },
            {
                "input": "closest_integer(\"387460.9626228213640998\")",
                "output": "387461"
            },
            {
                "input": "closest_integer(\"36490.19589678824090695\")",
                "output": "36490"
            },
            {
                "input": "closest_integer(\"6277620.047448415643293274\")",
                "output": "6277620"
            },
            {
                "input": "closest_integer(\"20.9952573487089358\")",
                "output": "21"
            },
            {
                "input": "closest_integer(\"20.9560740535157867\")",
                "output": "21"
            },
            {
                "input": "closest_integer(\"184964420.27548611693624514\")",
                "output": "184964420"
            },
            {
                "input": "closest_integer(\"9830.2887871019878405\")",
                "output": "9830"
            },
            {
                "input": "closest_integer(\"4.1\")",
                "output": "4"
            },
            {
                "input": "closest_integer(\"396630.07482315193744715\")",
                "output": "396630"
            },
            {
                "input": "closest_integer(\"2510.8534760249415141\")",
                "output": "2511"
            },
            {
                "input": "closest_integer(\"80.7127796045265017\")",
                "output": "81"
            },
            {
                "input": "closest_integer(\"35730.009102915382992016\")",
                "output": "35730"
            },
            {
                "input": "closest_integer(\"8588230.0004916487098123312\")",
                "output": "8588230"
            },
            {
                "input": "closest_integer(\"4790.3957977986146939\")",
                "output": "4790"
            },
            {
                "input": "closest_integer(\"3250.6874339166783494\")",
                "output": "3251"
            },
            {
                "input": "closest_integer(\"473120.6040377644717714\")",
                "output": "473121"
            },
            {
                "input": "closest_integer(\"5420.6753885072984122\")",
                "output": "5421"
            },
            {
                "input": "closest_integer(\"3840583540.8121445801379602\")",
                "output": "3840583541"
            },
            {
                "input": "closest_integer(\"7180.08904084585638494\")",
                "output": "7180"
            },
            {
                "input": "closest_integer(\"60.3982054790544489\")",
                "output": "60"
            },
            {
                "input": "closest_integer(\"4560.07986037903944365\")",
                "output": "4560"
            },
            {
                "input": "closest_integer(\"6130.863753701502481\")",
                "output": "6131"
            },
            {
                "input": "closest_integer(\".23\")",
                "output": "0"
            },
            {
                "input": "closest_integer(\"40.4775205107302265\")",
                "output": "40"
            },
            {
                "input": "closest_integer(\"20.2284164882780635\")",
                "output": "20"
            },
            {
                "input": "closest_integer(\"79430.17924732795127563\")",
                "output": "79430"
            },
            {
                "input": "closest_integer(\"79050.9507930940642703\")",
                "output": "79051"
            },
            {
                "input": "closest_integer(\"5.9\")",
                "output": "6"
            },
            {
                "input": "closest_integer(\"170.6921985077015881\")",
                "output": "171"
            },
            {
                "input": "closest_integer(\"4930.8578331989039943\")",
                "output": "4931"
            },
            {
                "input": "closest_integer(\"234430.8213641009547066\")",
                "output": "234431"
            },
            {
                "input": "closest_integer(\"349.7\")",
                "output": "350"
            },
            {
                "input": "closest_integer(\"42850.9135283560202653\")",
                "output": "42851"
            },
            {
                "input": "closest_integer(\"810.05084880400338965\")",
                "output": "810"
            },
            {
                "input": "closest_integer(\"9376920.32484597586363007\")",
                "output": "9376920"
            },
            {
                "input": "closest_integer(\"90050.4404481408550571\")",
                "output": "90050"
            },
            {
                "input": "closest_integer(\"9470.5170825437128881\")",
                "output": "9471"
            },
            {
                "input": "closest_integer(\"20.287830685087748\")",
                "output": "20"
            },
            {
                "input": "closest_integer(\"1187974430.6396705049308593\")",
                "output": "1187974431"
            },
            {
                "input": "closest_integer(\"281040.6070070426978076\")",
                "output": "281041"
            },
            {
                "input": "closest_integer(\"58720.6576278790833077\")",
                "output": "58721"
            }
        ]
    },
    {
        "problem_description": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
        "ground truth": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n",
        "instances": [
            {
                "input": "make_a_pile(14)",
                "output": "[14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]"
            },
            {
                "input": "make_a_pile(1)",
                "output": "[1]"
            },
            {
                "input": "make_a_pile(8)",
                "output": "[8, 10, 12, 14, 16, 18, 20, 22]"
            },
            {
                "input": "make_a_pile(6)",
                "output": "[6, 8, 10, 12, 14, 16]"
            },
            {
                "input": "make_a_pile(19)",
                "output": "[19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55]"
            },
            {
                "input": "make_a_pile(15)",
                "output": "[15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43]"
            },
            {
                "input": "make_a_pile(17)",
                "output": "[17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]"
            },
            {
                "input": "make_a_pile(2)",
                "output": "[2, 4]"
            },
            {
                "input": "make_a_pile(7)",
                "output": "[7, 9, 11, 13, 15, 17, 19]"
            },
            {
                "input": "make_a_pile(10)",
                "output": "[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]"
            },
            {
                "input": "make_a_pile(16)",
                "output": "[16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46]"
            },
            {
                "input": "make_a_pile(18)",
                "output": "[18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52]"
            },
            {
                "input": "make_a_pile(9)",
                "output": "[9, 11, 13, 15, 17, 19, 21, 23, 25]"
            },
            {
                "input": "make_a_pile(5)",
                "output": "[5, 7, 9, 11, 13]"
            },
            {
                "input": "make_a_pile(3)",
                "output": "[3, 5, 7]"
            },
            {
                "input": "make_a_pile(13)",
                "output": "[13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]"
            }
        ]
    },
    {
        "problem_description": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
        "ground truth": "def words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
        "instances": [
            {
                "input": "words_string(\"DyVi WoWpxT\")",
                "output": "['DyVi', 'WoWpxT']"
            },
            {
                "input": "words_string(\"IETXcW,sm,bpYf\")",
                "output": "['IETXcW', 'sm', 'bpYf']"
            },
            {
                "input": "words_string(\"ecTCx vezfoWOrvTTOcGRTMFEEOaohYR\")",
                "output": "['ecTCx', 'vezfoWOrvTTOcGRTMFEEOaohYR']"
            },
            {
                "input": "words_string(\"GWcJmjkQKIx\")",
                "output": "['GWcJmjkQKIx']"
            },
            {
                "input": "words_string(\"EMJ mpDTiunggTKAzXplshTbiFiGA NFNb,C\")",
                "output": "['EMJ', 'mpDTiunggTKAzXplshTbiFiGA', 'NFNb', 'C']"
            },
            {
                "input": "words_string(\"OTDpNx,FwFRdmtkrDjQy\")",
                "output": "['OTDpNx', 'FwFRdmtkrDjQy']"
            },
            {
                "input": "words_string(\"gYeyPwGHDIZRlz\")",
                "output": "['gYeyPwGHDIZRlz']"
            },
            {
                "input": "words_string(\"zhosdwvtflvydiauoba\")",
                "output": "['zhosdwvtflvydiauoba']"
            },
            {
                "input": "words_string(\"DrpROLcKKuGcer,bWorhjxCeSeaq\")",
                "output": "['DrpROLcKKuGcer', 'bWorhjxCeSeaq']"
            },
            {
                "input": "words_string(\"bkfyLMuKdOsEVsV\")",
                "output": "['bkfyLMuKdOsEVsV']"
            },
            {
                "input": "words_string(\"t\")",
                "output": "['t']"
            },
            {
                "input": "words_string(\"ahsXZqEouQtXINycLOKbGOuGcwphxqrRqvBZt\")",
                "output": "['ahsXZqEouQtXINycLOKbGOuGcwphxqrRqvBZt']"
            },
            {
                "input": "words_string(\"qnyc bwziheuwny\")",
                "output": "['qnyc', 'bwziheuwny']"
            },
            {
                "input": "words_string(\"CAWUQQFzesyEaUEDQzlrOnwMJ SLIzU SUAUiY\")",
                "output": "['CAWUQQFzesyEaUEDQzlrOnwMJ', 'SLIzU', 'SUAUiY']"
            },
            {
                "input": "words_string(\"cQDiHWkehrOfupG\")",
                "output": "['cQDiHWkehrOfupG']"
            },
            {
                "input": "words_string(\"SRcWhegcy U\")",
                "output": "['SRcWhegcy', 'U']"
            },
            {
                "input": "words_string(\"LURNOizrjMckoEKIzFTuyRTR jSKHkrZtLTYx\")",
                "output": "['LURNOizrjMckoEKIzFTuyRTR', 'jSKHkrZtLTYx']"
            },
            {
                "input": "words_string(\"kqntl,i ,wktrx eextto\")",
                "output": "['kqntl', 'i', 'wktrx', 'eextto']"
            },
            {
                "input": "words_string(\"KPkJArYQ\")",
                "output": "['KPkJArYQ']"
            },
            {
                "input": "words_string(\"yKwlUpa\")",
                "output": "['yKwlUpa']"
            },
            {
                "input": "words_string(\"themh,ymgzbtho\")",
                "output": "['themh', 'ymgzbtho']"
            },
            {
                "input": "words_string(\"zhEMApF ZweLYvTJzJyCSIyeSRwcLhh\")",
                "output": "['zhEMApF', 'ZweLYvTJzJyCSIyeSRwcLhh']"
            },
            {
                "input": "words_string(\"rz\")",
                "output": "['rz']"
            },
            {
                "input": "words_string(\"JC,gCMCtZrAwEFcYjC,RWXgMXixfBWI\")",
                "output": "['JC', 'gCMCtZrAwEFcYjC', 'RWXgMXixfBWI']"
            },
            {
                "input": "words_string(\"VygouQdfHOtVolHJlKVLMqqEmwzHabijOymo\")",
                "output": "['VygouQdfHOtVolHJlKVLMqqEmwzHabijOymo']"
            },
            {
                "input": "words_string(\"ArkAaiedRkLQtjmpSQ,iR,RclZFvQYpyYZR\")",
                "output": "['ArkAaiedRkLQtjmpSQ', 'iR', 'RclZFvQYpyYZR']"
            },
            {
                "input": "words_string(\"MsArpfwKikWOX EkQCvGey\")",
                "output": "['MsArpfwKikWOX', 'EkQCvGey']"
            },
            {
                "input": "words_string(\"cw\")",
                "output": "['cw']"
            },
            {
                "input": "words_string(\"imdljccdkztanux\")",
                "output": "['imdljccdkztanux']"
            },
            {
                "input": "words_string(\"so ttkzweq swrqcdtbaz\")",
                "output": "['so', 'ttkzweq', 'swrqcdtbaz']"
            },
            {
                "input": "words_string(\"UYttolHhOXzUbBiaVzfhkRW,BFWdArkBi\")",
                "output": "['UYttolHhOXzUbBiaVzfhkRW', 'BFWdArkBi']"
            },
            {
                "input": "words_string(\"cnfzRFFNFwfXPSqXjqUElvUsZggNF \")",
                "output": "['cnfzRFFNFwfXPSqXjqUElvUsZggNF']"
            },
            {
                "input": "words_string(\"WgDd scUKSF\")",
                "output": "['WgDd', 'scUKSF']"
            },
            {
                "input": "words_string(\"qhggiasekci,ysdfjlhy\")",
                "output": "['qhggiasekci', 'ysdfjlhy']"
            },
            {
                "input": "words_string(\"VlLJgpwhOBzVLcbhqkmQmzeWXlHSccuyrpHH\")",
                "output": "['VlLJgpwhOBzVLcbhqkmQmzeWXlHSccuyrpHH']"
            },
            {
                "input": "words_string(\"le\")",
                "output": "['le']"
            },
            {
                "input": "words_string(\"oLJLCcDoACDxL\")",
                "output": "['oLJLCcDoACDxL']"
            },
            {
                "input": "words_string(\"OoOrgcyESQK FlPUvBbNPdqpgWwJvBi\")",
                "output": "['OoOrgcyESQK', 'FlPUvBbNPdqpgWwJvBi']"
            },
            {
                "input": "words_string(\"b\")",
                "output": "['b']"
            },
            {
                "input": "words_string(\"hym\")",
                "output": "['hym']"
            },
            {
                "input": "words_string(\"\")",
                "output": "[]"
            },
            {
                "input": "words_string(\"mevgcg,wvgt,\")",
                "output": "['mevgcg', 'wvgt']"
            },
            {
                "input": "words_string(\"TKEzFSnzlpthExzMWvTNBJOctWaefVxDHhP\")",
                "output": "['TKEzFSnzlpthExzMWvTNBJOctWaefVxDHhP']"
            },
            {
                "input": "words_string(\"ihUWzcgFsQ lzJliFKk\")",
                "output": "['ihUWzcgFsQ', 'lzJliFKk']"
            },
            {
                "input": "words_string(\"ZlSBYyUCTAnKCmw\")",
                "output": "['ZlSBYyUCTAnKCmw']"
            },
            {
                "input": "words_string(\"FgejvV,\")",
                "output": "['FgejvV']"
            },
            {
                "input": "words_string(\"MviVJBmw,ncuWatloKvGCSUIpiXDYjA,ztGeFQ\")",
                "output": "['MviVJBmw', 'ncuWatloKvGCSUIpiXDYjA', 'ztGeFQ']"
            },
            {
                "input": "words_string(\"UexJfvVLheQPeDpDfHvbdRRDtKKbN\")",
                "output": "['UexJfvVLheQPeDpDfHvbdRRDtKKbN']"
            },
            {
                "input": "words_string(\"dhvYVGkVVyznhoKsnLVdRwx\")",
                "output": "['dhvYVGkVVyznhoKsnLVdRwx']"
            },
            {
                "input": "words_string(\"sdzr,lexdbcesu\")",
                "output": "['sdzr', 'lexdbcesu']"
            },
            {
                "input": "words_string(\"naUjUlpJaMOOof\")",
                "output": "['naUjUlpJaMOOof']"
            },
            {
                "input": "words_string(\"ddGcSinGJPgxVVVteggdQU,\")",
                "output": "['ddGcSinGJPgxVVVteggdQU']"
            },
            {
                "input": "words_string(\"YaF,F kRmeIGcYbSeYjQomoLcgsDxbtIUl\")",
                "output": "['YaF', 'F', 'kRmeIGcYbSeYjQomoLcgsDxbtIUl']"
            },
            {
                "input": "words_string(\"IzeHVkGFOidcsptUUXRxusgNq sm iAtJd \")",
                "output": "['IzeHVkGFOidcsptUUXRxusgNq', 'sm', 'iAtJd']"
            },
            {
                "input": "words_string(\"uTivmZXAK\")",
                "output": "['uTivmZXAK']"
            },
            {
                "input": "words_string(\"eXNTVyasv dSIyLCMOvbWmNhvLNOxyOup,y\")",
                "output": "['eXNTVyasv', 'dSIyLCMOvbWmNhvLNOxyOup', 'y']"
            },
            {
                "input": "words_string(\"VRg eCKTNreW\")",
                "output": "['VRg', 'eCKTNreW']"
            },
            {
                "input": "words_string(\"RRfAjhePwiRmMhWdKnjIYPzzLYrPHJubkNAF\")",
                "output": "['RRfAjhePwiRmMhWdKnjIYPzzLYrPHJubkNAF']"
            },
            {
                "input": "words_string(\" leZBbO qQuGjnhqkIdNGdRvkeadXMFT\")",
                "output": "['leZBbO', 'qQuGjnhqkIdNGdRvkeadXMFT']"
            },
            {
                "input": "words_string(\"stb\")",
                "output": "['stb']"
            },
            {
                "input": "words_string(\"tk\")",
                "output": "['tk']"
            },
            {
                "input": "words_string(\"dvDbFjMvIs,yPOhhjSDw\")",
                "output": "['dvDbFjMvIs', 'yPOhhjSDw']"
            },
            {
                "input": "words_string(\"xWzaUixFW\")",
                "output": "['xWzaUixFW']"
            },
            {
                "input": "words_string(\"wp\")",
                "output": "['wp']"
            },
            {
                "input": "words_string(\"gfWpHipxkdkzAOwTs c,a \")",
                "output": "['gfWpHipxkdkzAOwTs', 'c', 'a']"
            },
            {
                "input": "words_string(\"bte\")",
                "output": "['bte']"
            },
            {
                "input": "words_string(\"mcCcfVi\")",
                "output": "['mcCcfVi']"
            },
            {
                "input": "words_string(\"yELtMNRoKeFaNNWQS\")",
                "output": "['yELtMNRoKeFaNNWQS']"
            },
            {
                "input": "words_string(\"xRkNssRLsifBpmfRABRk,UjYxpSgeBhCPv\")",
                "output": "['xRkNssRLsifBpmfRABRk', 'UjYxpSgeBhCPv']"
            },
            {
                "input": "words_string(\"l ldd,yz acrnudynbq r\")",
                "output": "['l', 'ldd', 'yz', 'acrnudynbq', 'r']"
            },
            {
                "input": "words_string(\"va\")",
                "output": "['va']"
            },
            {
                "input": "words_string(\"ibK I, bkGB,bjbOTKWfyjRDbQeWgqbBC\")",
                "output": "['ibK', 'I', 'bkGB', 'bjbOTKWfyjRDbQeWgqbBC']"
            },
            {
                "input": "words_string(\"fvh\")",
                "output": "['fvh']"
            },
            {
                "input": "words_string(\"bBWYyFOJXxQcsnfEsQk,ZeoBjA,jk\")",
                "output": "['bBWYyFOJXxQcsnfEsQk', 'ZeoBjA', 'jk']"
            },
            {
                "input": "words_string(\"pugjwcoritrfumvzsd\")",
                "output": "['pugjwcoritrfumvzsd']"
            },
            {
                "input": "words_string(\"gSucSDyVhoD\")",
                "output": "['gSucSDyVhoD']"
            },
            {
                "input": "words_string(\"qMXAauHwjKptfaZTyGPsLhvoGDWzqncRTM\")",
                "output": "['qMXAauHwjKptfaZTyGPsLhvoGDWzqncRTM']"
            },
            {
                "input": "words_string(\"u\")",
                "output": "['u']"
            },
            {
                "input": "words_string(\"IJvqozJwqj,OzRPOWZG\")",
                "output": "['IJvqozJwqj', 'OzRPOWZG']"
            },
            {
                "input": "words_string(\" iLJsRzuIwY,hOcg\")",
                "output": "['iLJsRzuIwY', 'hOcg']"
            },
            {
                "input": "words_string(\"WlM oCXmJWnF\")",
                "output": "['WlM', 'oCXmJWnF']"
            },
            {
                "input": "words_string(\"uaQiIFqLrxeNXvrHuobWBve\")",
                "output": "['uaQiIFqLrxeNXvrHuobWBve']"
            },
            {
                "input": "words_string(\"r\")",
                "output": "['r']"
            },
            {
                "input": "words_string(\"GsjyQgOavmhBupf\")",
                "output": "['GsjyQgOavmhBupf']"
            },
            {
                "input": "words_string(\"f oxbpoemunlpv\")",
                "output": "['f', 'oxbpoemunlpv']"
            },
            {
                "input": "words_string(\"sl,ofctrbjdchqv\")",
                "output": "['sl', 'ofctrbjdchqv']"
            },
            {
                "input": "words_string(\"kvrvqAfyGQii,LRqxgnsSKZuCPlRVdLSSoPL\")",
                "output": "['kvrvqAfyGQii', 'LRqxgnsSKZuCPlRVdLSSoPL']"
            },
            {
                "input": "words_string(\"lapaLhIeTOzXNKe,hnBK\")",
                "output": "['lapaLhIeTOzXNKe', 'hnBK']"
            },
            {
                "input": "words_string(\"essJbwCw,kDukNqtdENjUIrEDxBpP\")",
                "output": "['essJbwCw', 'kDukNqtdENjUIrEDxBpP']"
            },
            {
                "input": "words_string(\"sfvgqmtflnbda\")",
                "output": "['sfvgqmtflnbda']"
            },
            {
                "input": "words_string(\"CJnDHVRfDmGmkBDsLuZFv,SmQuqePvghf\")",
                "output": "['CJnDHVRfDmGmkBDsLuZFv', 'SmQuqePvghf']"
            },
            {
                "input": "words_string(\"wv\")",
                "output": "['wv']"
            },
            {
                "input": "words_string(\"SGtwBteVrtCvkSJA\")",
                "output": "['SGtwBteVrtCvkSJA']"
            },
            {
                "input": "words_string(\"MBiLLSWSRZGfoIsDQdEDimbvfJnyd\")",
                "output": "['MBiLLSWSRZGfoIsDQdEDimbvfJnyd']"
            },
            {
                "input": "words_string(\"eiDbEdQNTFsstgXJXOWTBSSpUKqmpp U\")",
                "output": "['eiDbEdQNTFsstgXJXOWTBSSpUKqmpp', 'U']"
            },
            {
                "input": "words_string(\" hwquelxbzzoe\")",
                "output": "['hwquelxbzzoe']"
            },
            {
                "input": "words_string(\"g\")",
                "output": "['g']"
            },
            {
                "input": "words_string(\"KPJacYGjuUmCWvwKJAveSFo\")",
                "output": "['KPJacYGjuUmCWvwKJAveSFo']"
            },
            {
                "input": "words_string(\"gLpHulEPVziizSczNccUgDLHoBTnFrn\")",
                "output": "['gLpHulEPVziizSczNccUgDLHoBTnFrn']"
            },
            {
                "input": "words_string(\"bkzihehhs,ceabnwya\")",
                "output": "['bkzihehhs', 'ceabnwya']"
            },
            {
                "input": "words_string(\"TTuFfwkGwCmFdTlbC\")",
                "output": "['TTuFfwkGwCmFdTlbC']"
            },
            {
                "input": "words_string(\"gvebQcmBsFwozD,oRQaAaIGGsafxNdm\")",
                "output": "['gvebQcmBsFwozD', 'oRQaAaIGGsafxNdm']"
            },
            {
                "input": "words_string(\"bkrUEEtoxSAaMATeSrJijoej\")",
                "output": "['bkrUEEtoxSAaMATeSrJijoej']"
            },
            {
                "input": "words_string(\"epb\")",
                "output": "['epb']"
            },
            {
                "input": "words_string(\"sov\")",
                "output": "['sov']"
            },
            {
                "input": "words_string(\"noshyiofr gli\")",
                "output": "['noshyiofr', 'gli']"
            },
            {
                "input": "words_string(\"blOXrKZ,qOqLgDcLBIoNmtEMKbLwAXlbRm\")",
                "output": "['blOXrKZ', 'qOqLgDcLBIoNmtEMKbLwAXlbRm']"
            },
            {
                "input": "words_string(\"Lsy,NFEbGfZechwIHnqpidqsbOGNkgzbCBO\")",
                "output": "['Lsy', 'NFEbGfZechwIHnqpidqsbOGNkgzbCBO']"
            },
            {
                "input": "words_string(\"JJpldjNpRPXfWVUqZdqmtPFdqTSVDs\")",
                "output": "['JJpldjNpRPXfWVUqZdqmtPFdqTSVDs']"
            },
            {
                "input": "words_string(\"MtvYkACzuMJOTZIiXgraJDRCqpmfK,me\")",
                "output": "['MtvYkACzuMJOTZIiXgraJDRCqpmfK', 'me']"
            },
            {
                "input": "words_string(\"HVFsXkNi\")",
                "output": "['HVFsXkNi']"
            },
            {
                "input": "words_string(\"WHyIHiunVGo,dDdturk,DICJf,jTtBF IR\")",
                "output": "['WHyIHiunVGo', 'dDdturk', 'DICJf', 'jTtBF', 'IR']"
            },
            {
                "input": "words_string(\"pBjJg vABqOhYXfSbFKLecWG,xNzVVrhsfh\")",
                "output": "['pBjJg', 'vABqOhYXfSbFKLecWG', 'xNzVVrhsfh']"
            },
            {
                "input": "words_string(\" infhpodtvqrszuo\")",
                "output": "['infhpodtvqrszuo']"
            },
            {
                "input": "words_string(\"xys,jxkxw ,tuoehpjer\")",
                "output": "['xys', 'jxkxw', 'tuoehpjer']"
            },
            {
                "input": "words_string(\"uEhummpbtTkgORcaLbXcJVGfvJsmz\")",
                "output": "['uEhummpbtTkgORcaLbXcJVGfvJsmz']"
            },
            {
                "input": "words_string(\"h\")",
                "output": "['h']"
            },
            {
                "input": "words_string(\"DTxPnHGKBttNX\")",
                "output": "['DTxPnHGKBttNX']"
            },
            {
                "input": "words_string(\"kurydrzteZjGjVb\")",
                "output": "['kurydrzteZjGjVb']"
            },
            {
                "input": "words_string(\"judm ulimqrmvmaz\")",
                "output": "['judm', 'ulimqrmvmaz']"
            }
        ]
    },
    {
        "problem_description": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n",
        "ground truth": "def choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
        "instances": [
            {
                "input": "choose_num(29, 10)",
                "output": "-1"
            },
            {
                "input": "choose_num(1, 32)",
                "output": "32"
            },
            {
                "input": "choose_num(38, 12926)",
                "output": "12926"
            },
            {
                "input": "choose_num(14, 9)",
                "output": "-1"
            },
            {
                "input": "choose_num(27, 6)",
                "output": "-1"
            },
            {
                "input": "choose_num(12, 6)",
                "output": "-1"
            },
            {
                "input": "choose_num(14, 11)",
                "output": "-1"
            },
            {
                "input": "choose_num(5, 26)",
                "output": "26"
            },
            {
                "input": "choose_num(8, 13)",
                "output": "12"
            },
            {
                "input": "choose_num(17, 13)",
                "output": "-1"
            },
            {
                "input": "choose_num(4547, 5362)",
                "output": "5362"
            },
            {
                "input": "choose_num(550, 543)",
                "output": "-1"
            },
            {
                "input": "choose_num(8, 14)",
                "output": "14"
            },
            {
                "input": "choose_num(9, 27)",
                "output": "26"
            },
            {
                "input": "choose_num(25, 13)",
                "output": "-1"
            },
            {
                "input": "choose_num(6, 32)",
                "output": "32"
            },
            {
                "input": "choose_num(5, 8)",
                "output": "8"
            },
            {
                "input": "choose_num(11, 10)",
                "output": "-1"
            },
            {
                "input": "choose_num(29, 12690)",
                "output": "12690"
            },
            {
                "input": "choose_num(5373, 4639)",
                "output": "-1"
            },
            {
                "input": "choose_num(36, 12359)",
                "output": "12358"
            },
            {
                "input": "choose_num(34, 12634)",
                "output": "12634"
            },
            {
                "input": "choose_num(12, 15)",
                "output": "14"
            },
            {
                "input": "choose_num(4292, 5649)",
                "output": "5648"
            },
            {
                "input": "choose_num(8, 32)",
                "output": "32"
            },
            {
                "input": "choose_num(28, 13)",
                "output": "-1"
            },
            {
                "input": "choose_num(4, 4)",
                "output": "4"
            },
            {
                "input": "choose_num(541, 542)",
                "output": "542"
            },
            {
                "input": "choose_num(36, 11976)",
                "output": "11976"
            },
            {
                "input": "choose_num(4494, 4861)",
                "output": "4860"
            },
            {
                "input": "choose_num(12, 7)",
                "output": "-1"
            },
            {
                "input": "choose_num(9, 11)",
                "output": "10"
            },
            {
                "input": "choose_num(7, 11)",
                "output": "10"
            },
            {
                "input": "choose_num(8, 31)",
                "output": "30"
            },
            {
                "input": "choose_num(8, 26)",
                "output": "26"
            },
            {
                "input": "choose_num(550, 542)",
                "output": "-1"
            },
            {
                "input": "choose_num(31, 12815)",
                "output": "12814"
            },
            {
                "input": "choose_num(3, 7)",
                "output": "6"
            },
            {
                "input": "choose_num(15, 14)",
                "output": "-1"
            },
            {
                "input": "choose_num(542, 547)",
                "output": "546"
            },
            {
                "input": "choose_num(31, 12511)",
                "output": "12510"
            },
            {
                "input": "choose_num(5962, 4558)",
                "output": "-1"
            },
            {
                "input": "choose_num(2, 9)",
                "output": "8"
            },
            {
                "input": "choose_num(3, 9)",
                "output": "8"
            },
            {
                "input": "choose_num(30, 13282)",
                "output": "13282"
            },
            {
                "input": "choose_num(4756, 5476)",
                "output": "5476"
            },
            {
                "input": "choose_num(34, 12261)",
                "output": "12260"
            },
            {
                "input": "choose_num(546, 550)",
                "output": "550"
            },
            {
                "input": "choose_num(548, 542)",
                "output": "-1"
            },
            {
                "input": "choose_num(31, 6)",
                "output": "-1"
            },
            {
                "input": "choose_num(31, 10)",
                "output": "-1"
            },
            {
                "input": "choose_num(9, 24)",
                "output": "24"
            },
            {
                "input": "choose_num(546, 549)",
                "output": "548"
            },
            {
                "input": "choose_num(4796, 5300)",
                "output": "5300"
            },
            {
                "input": "choose_num(7, 19)",
                "output": "18"
            },
            {
                "input": "choose_num(13, 9)",
                "output": "-1"
            },
            {
                "input": "choose_num(547, 548)",
                "output": "548"
            },
            {
                "input": "choose_num(4637, 5993)",
                "output": "5992"
            },
            {
                "input": "choose_num(36, 11801)",
                "output": "11800"
            },
            {
                "input": "choose_num(11, 29)",
                "output": "28"
            },
            {
                "input": "choose_num(545, 546)",
                "output": "546"
            },
            {
                "input": "choose_num(7, 16)",
                "output": "16"
            },
            {
                "input": "choose_num(7, 34)",
                "output": "34"
            },
            {
                "input": "choose_num(5338, 5267)",
                "output": "-1"
            },
            {
                "input": "choose_num(18, 16)",
                "output": "-1"
            },
            {
                "input": "choose_num(549, 549)",
                "output": "-1"
            },
            {
                "input": "choose_num(29, 15)",
                "output": "-1"
            },
            {
                "input": "choose_num(547, 542)",
                "output": "-1"
            },
            {
                "input": "choose_num(31, 13214)",
                "output": "13214"
            },
            {
                "input": "choose_num(32, 13283)",
                "output": "13282"
            },
            {
                "input": "choose_num(3, 12)",
                "output": "12"
            },
            {
                "input": "choose_num(13, 12)",
                "output": "-1"
            },
            {
                "input": "choose_num(7, 10)",
                "output": "10"
            },
            {
                "input": "choose_num(14, 15)",
                "output": "14"
            },
            {
                "input": "choose_num(4883, 5654)",
                "output": "5654"
            },
            {
                "input": "choose_num(32, 10)",
                "output": "-1"
            },
            {
                "input": "choose_num(547, 549)",
                "output": "548"
            },
            {
                "input": "choose_num(13, 17)",
                "output": "16"
            },
            {
                "input": "choose_num(11, 30)",
                "output": "30"
            },
            {
                "input": "choose_num(10, 11)",
                "output": "10"
            },
            {
                "input": "choose_num(9, 28)",
                "output": "28"
            },
            {
                "input": "choose_num(4249, 4823)",
                "output": "4822"
            },
            {
                "input": "choose_num(5830, 5508)",
                "output": "-1"
            },
            {
                "input": "choose_num(4386, 4651)",
                "output": "4650"
            },
            {
                "input": "choose_num(10, 14)",
                "output": "14"
            },
            {
                "input": "choose_num(543, 542)",
                "output": "-1"
            },
            {
                "input": "choose_num(10, 29)",
                "output": "28"
            },
            {
                "input": "choose_num(546, 546)",
                "output": "546"
            },
            {
                "input": "choose_num(9, 7)",
                "output": "-1"
            },
            {
                "input": "choose_num(4, 2)",
                "output": "-1"
            },
            {
                "input": "choose_num(6, 3)",
                "output": "-1"
            },
            {
                "input": "choose_num(6087, 4359)",
                "output": "-1"
            },
            {
                "input": "choose_num(7, 7)",
                "output": "-1"
            },
            {
                "input": "choose_num(33, 12354)",
                "output": "12354"
            },
            {
                "input": "choose_num(5234, 5233)",
                "output": "-1"
            },
            {
                "input": "choose_num(542, 543)",
                "output": "542"
            },
            {
                "input": "choose_num(27, 5)",
                "output": "-1"
            },
            {
                "input": "choose_num(32, 7)",
                "output": "-1"
            },
            {
                "input": "choose_num(34, 13247)",
                "output": "13246"
            },
            {
                "input": "choose_num(17, 15)",
                "output": "-1"
            },
            {
                "input": "choose_num(11, 12)",
                "output": "12"
            },
            {
                "input": "choose_num(6, 11)",
                "output": "10"
            },
            {
                "input": "choose_num(16, 17)",
                "output": "16"
            },
            {
                "input": "choose_num(11, 13)",
                "output": "12"
            },
            {
                "input": "choose_num(10, 8)",
                "output": "-1"
            },
            {
                "input": "choose_num(23, 10)",
                "output": "-1"
            },
            {
                "input": "choose_num(4623, 5093)",
                "output": "5092"
            },
            {
                "input": "choose_num(8, 15)",
                "output": "14"
            },
            {
                "input": "choose_num(11, 11)",
                "output": "-1"
            },
            {
                "input": "choose_num(28, 6)",
                "output": "-1"
            },
            {
                "input": "choose_num(31, 13152)",
                "output": "13152"
            },
            {
                "input": "choose_num(8, 12)",
                "output": "12"
            },
            {
                "input": "choose_num(37, 13023)",
                "output": "13022"
            },
            {
                "input": "choose_num(32, 11)",
                "output": "-1"
            },
            {
                "input": "choose_num(6, 29)",
                "output": "28"
            }
        ]
    },
    {
        "problem_description": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
        "ground truth": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
        "instances": [
            {
                "input": "rounded_avg(961, 980)",
                "output": "'0b1111001010'"
            },
            {
                "input": "rounded_avg(12, 15)",
                "output": "'0b1110'"
            },
            {
                "input": "rounded_avg(180, 543)",
                "output": "'0b101101010'"
            },
            {
                "input": "rounded_avg(966, 977)",
                "output": "'0b1111001100'"
            },
            {
                "input": "rounded_avg(5, 5)",
                "output": "'0b101'"
            },
            {
                "input": "rounded_avg(564, 847)",
                "output": "'0b1011000010'"
            },
            {
                "input": "rounded_avg(6, 1)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(995, 993)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(365, 501)",
                "output": "'0b110110001'"
            },
            {
                "input": "rounded_avg(7, 5)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(2, 2)",
                "output": "'0b10'"
            },
            {
                "input": "rounded_avg(561, 849)",
                "output": "'0b1011000001'"
            },
            {
                "input": "rounded_avg(197, 232)",
                "output": "'0b11010110'"
            },
            {
                "input": "rounded_avg(993, 992)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(11, 18)",
                "output": "'0b1110'"
            },
            {
                "input": "rounded_avg(348, 904)",
                "output": "'0b1001110010'"
            },
            {
                "input": "rounded_avg(992, 1001)",
                "output": "'0b1111100100'"
            },
            {
                "input": "rounded_avg(10, 13)",
                "output": "'0b1100'"
            },
            {
                "input": "rounded_avg(201, 228)",
                "output": "'0b11010110'"
            },
            {
                "input": "rounded_avg(991, 996)",
                "output": "'0b1111100010'"
            },
            {
                "input": "rounded_avg(6, 10)",
                "output": "'0b1000'"
            },
            {
                "input": "rounded_avg(361, 495)",
                "output": "'0b110101100'"
            },
            {
                "input": "rounded_avg(197, 238)",
                "output": "'0b11011010'"
            },
            {
                "input": "rounded_avg(11, 11)",
                "output": "'0b1011'"
            },
            {
                "input": "rounded_avg(180, 541)",
                "output": "'0b101101000'"
            },
            {
                "input": "rounded_avg(187, 545)",
                "output": "'0b101101110'"
            },
            {
                "input": "rounded_avg(8, 10)",
                "output": "'0b1001'"
            },
            {
                "input": "rounded_avg(197, 237)",
                "output": "'0b11011001'"
            },
            {
                "input": "rounded_avg(11, 15)",
                "output": "'0b1101'"
            },
            {
                "input": "rounded_avg(185, 542)",
                "output": "'0b101101100'"
            },
            {
                "input": "rounded_avg(4, 2)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(562, 847)",
                "output": "'0b1011000000'"
            },
            {
                "input": "rounded_avg(187, 548)",
                "output": "'0b101110000'"
            },
            {
                "input": "rounded_avg(5, 3)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(4, 15)",
                "output": "'0b1010'"
            },
            {
                "input": "rounded_avg(968, 972)",
                "output": "'0b1111001010'"
            },
            {
                "input": "rounded_avg(964, 973)",
                "output": "'0b1111001000'"
            },
            {
                "input": "rounded_avg(8, 1)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(352, 897)",
                "output": "'0b1001110000'"
            },
            {
                "input": "rounded_avg(4, 8)",
                "output": "'0b110'"
            },
            {
                "input": "rounded_avg(2, 3)",
                "output": "'0b10'"
            },
            {
                "input": "rounded_avg(359, 491)",
                "output": "'0b110101001'"
            },
            {
                "input": "rounded_avg(3, 7)",
                "output": "'0b101'"
            },
            {
                "input": "rounded_avg(7, 9)",
                "output": "'0b1000'"
            },
            {
                "input": "rounded_avg(564, 848)",
                "output": "'0b1011000010'"
            },
            {
                "input": "rounded_avg(565, 856)",
                "output": "'0b1011000110'"
            },
            {
                "input": "rounded_avg(564, 850)",
                "output": "'0b1011000011'"
            },
            {
                "input": "rounded_avg(355, 907)",
                "output": "'0b1001110111'"
            },
            {
                "input": "rounded_avg(193, 237)",
                "output": "'0b11010111'"
            },
            {
                "input": "rounded_avg(5, 17)",
                "output": "'0b1011'"
            },
            {
                "input": "rounded_avg(347, 905)",
                "output": "'0b1001110010'"
            },
            {
                "input": "rounded_avg(183, 546)",
                "output": "'0b101101100'"
            },
            {
                "input": "rounded_avg(186, 549)",
                "output": "'0b101110000'"
            },
            {
                "input": "rounded_avg(367, 500)",
                "output": "'0b110110010'"
            },
            {
                "input": "rounded_avg(563, 852)",
                "output": "'0b1011000100'"
            },
            {
                "input": "rounded_avg(960, 972)",
                "output": "'0b1111000110'"
            },
            {
                "input": "rounded_avg(10, 7)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(6, 6)",
                "output": "'0b110'"
            },
            {
                "input": "rounded_avg(1000, 997)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(364, 498)",
                "output": "'0b110101111'"
            },
            {
                "input": "rounded_avg(7, 2)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(349, 902)",
                "output": "'0b1001110010'"
            },
            {
                "input": "rounded_avg(357, 498)",
                "output": "'0b110101100'"
            },
            {
                "input": "rounded_avg(1, 1)",
                "output": "'0b1'"
            },
            {
                "input": "rounded_avg(10, 2)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(3, 6)",
                "output": "'0b100'"
            },
            {
                "input": "rounded_avg(4, 7)",
                "output": "'0b110'"
            },
            {
                "input": "rounded_avg(180, 546)",
                "output": "'0b101101011'"
            },
            {
                "input": "rounded_avg(9, 5)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(8, 3)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(365, 492)",
                "output": "'0b110101100'"
            },
            {
                "input": "rounded_avg(348, 902)",
                "output": "'0b1001110001'"
            },
            {
                "input": "rounded_avg(6, 4)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(555, 852)",
                "output": "'0b1011000000'"
            },
            {
                "input": "rounded_avg(357, 500)",
                "output": "'0b110101100'"
            },
            {
                "input": "rounded_avg(7, 1)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(350, 903)",
                "output": "'0b1001110010'"
            },
            {
                "input": "rounded_avg(359, 495)",
                "output": "'0b110101011'"
            },
            {
                "input": "rounded_avg(10, 15)",
                "output": "'0b1100'"
            },
            {
                "input": "rounded_avg(189, 544)",
                "output": "'0b101101110'"
            },
            {
                "input": "rounded_avg(558, 852)",
                "output": "'0b1011000001'"
            },
            {
                "input": "rounded_avg(3, 10)",
                "output": "'0b110'"
            },
            {
                "input": "rounded_avg(969, 972)",
                "output": "'0b1111001010'"
            },
            {
                "input": "rounded_avg(185, 546)",
                "output": "'0b101101110'"
            },
            {
                "input": "rounded_avg(194, 238)",
                "output": "'0b11011000'"
            },
            {
                "input": "rounded_avg(194, 237)",
                "output": "'0b11011000'"
            },
            {
                "input": "rounded_avg(964, 974)",
                "output": "'0b1111001001'"
            },
            {
                "input": "rounded_avg(192, 231)",
                "output": "'0b11010100'"
            },
            {
                "input": "rounded_avg(959, 976)",
                "output": "'0b1111001000'"
            },
            {
                "input": "rounded_avg(198, 229)",
                "output": "'0b11010110'"
            },
            {
                "input": "rounded_avg(355, 900)",
                "output": "'0b1001110100'"
            },
            {
                "input": "rounded_avg(991, 994)",
                "output": "'0b1111100000'"
            },
            {
                "input": "rounded_avg(2, 5)",
                "output": "'0b100'"
            },
            {
                "input": "rounded_avg(4, 5)",
                "output": "'0b100'"
            },
            {
                "input": "rounded_avg(994, 992)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(969, 973)",
                "output": "'0b1111001011'"
            },
            {
                "input": "rounded_avg(992, 998)",
                "output": "'0b1111100011'"
            },
            {
                "input": "rounded_avg(352, 900)",
                "output": "'0b1001110010'"
            },
            {
                "input": "rounded_avg(4, 6)",
                "output": "'0b101'"
            },
            {
                "input": "rounded_avg(1000, 992)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(995, 999)",
                "output": "'0b1111100101'"
            },
            {
                "input": "rounded_avg(3, 5)",
                "output": "'0b100'"
            },
            {
                "input": "rounded_avg(2, 6)",
                "output": "'0b100'"
            },
            {
                "input": "rounded_avg(555, 849)",
                "output": "'0b1010111110'"
            },
            {
                "input": "rounded_avg(965, 980)",
                "output": "'0b1111001100'"
            },
            {
                "input": "rounded_avg(5, 1)",
                "output": "-1"
            },
            {
                "input": "rounded_avg(3, 3)",
                "output": "'0b11'"
            },
            {
                "input": "rounded_avg(9, 12)",
                "output": "'0b1010'"
            },
            {
                "input": "rounded_avg(6, 2)",
                "output": "-1"
            }
        ]
    },
    {
        "problem_description": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "ground truth": "def unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
        "instances": [
            {
                "input": "unique_digits([154, 326, 2275, 5])",
                "output": "[5]"
            },
            {
                "input": "unique_digits([18, 30, 792, 3])",
                "output": "[3]"
            },
            {
                "input": "unique_digits([147, 325, 1540, 15])",
                "output": "[15]"
            },
            {
                "input": "unique_digits([15, 28, 2033, 4])",
                "output": "[15]"
            },
            {
                "input": "unique_digits([154, 322, 863, 6])",
                "output": "[]"
            },
            {
                "input": "unique_digits([154, 321, 941, 15])",
                "output": "[15]"
            },
            {
                "input": "unique_digits([13201, 1832, 113, 153])",
                "output": "[113, 153]"
            },
            {
                "input": "unique_digits([17, 29, 2012, 6])",
                "output": "[17]"
            },
            {
                "input": "unique_digits([147, 322, 2180, 15])",
                "output": "[15]"
            },
            {
                "input": "unique_digits([135, 103, 33])",
                "output": "[33, 135]"
            },
            {
                "input": "unique_digits([139, 102, 33])",
                "output": "[33, 139]"
            },
            {
                "input": "unique_digits([131, 103, 27])",
                "output": "[131]"
            },
            {
                "input": "unique_digits([12, 32, 1527, 3])",
                "output": "[3]"
            },
            {
                "input": "unique_digits([12669, 1865, 111, 151])",
                "output": "[111, 151]"
            },
            {
                "input": "unique_digits([12709, 2013, 109, 149])",
                "output": "[]"
            },
            {
                "input": "unique_digits([138, 104, 35])",
                "output": "[35]"
            },
            {
                "input": "unique_digits([151, 321, 686, 13])",
                "output": "[13, 151]"
            },
            {
                "input": "unique_digits([12590, 2103, 108, 149])",
                "output": "[]"
            },
            {
                "input": "unique_digits([12505, 2912, 114, 154])",
                "output": "[]"
            },
            {
                "input": "unique_digits([140, 107, 26])",
                "output": "[]"
            },
            {
                "input": "unique_digits([152, 323, 1422, 10])",
                "output": "[]"
            },
            {
                "input": "unique_digits([139, 108, 27])",
                "output": "[139]"
            },
            {
                "input": "unique_digits([13, 35, 1797, 4])",
                "output": "[13, 35, 1797]"
            },
            {
                "input": "unique_digits([15, 37, 629, 5])",
                "output": "[5, 15, 37]"
            },
            {
                "input": "unique_digits([12132, 1059, 110, 150])",
                "output": "[]"
            },
            {
                "input": "unique_digits([15, 37, 668, 3])",
                "output": "[3, 15, 37]"
            },
            {
                "input": "unique_digits([11466, 2311, 112, 150])",
                "output": "[]"
            },
            {
                "input": "unique_digits([13, 34, 2003, 6])",
                "output": "[13]"
            },
            {
                "input": "unique_digits([151, 320, 441, 5])",
                "output": "[5, 151]"
            },
            {
                "input": "unique_digits([12150, 1701, 115, 149])",
                "output": "[115]"
            },
            {
                "input": "unique_digits([20, 29, 817, 5])",
                "output": "[5]"
            },
            {
                "input": "unique_digits([16, 29, 1817, 5])",
                "output": "[5]"
            },
            {
                "input": "unique_digits([155, 323, 1014, 6])",
                "output": "[155]"
            },
            {
                "input": "unique_digits([155, 327, 1737, 14])",
                "output": "[155, 1737]"
            },
            {
                "input": "unique_digits([11323, 2509, 107, 146])",
                "output": "[]"
            },
            {
                "input": "unique_digits([12263, 2608, 106, 153])",
                "output": "[153]"
            },
            {
                "input": "unique_digits([16, 30, 2202, 3])",
                "output": "[3]"
            },
            {
                "input": "unique_digits([132, 108, 33])",
                "output": "[33]"
            },
            {
                "input": "unique_digits([12, 31, 740, 6])",
                "output": "[31]"
            },
            {
                "input": "unique_digits([11911, 2486, 116, 152])",
                "output": "[11911]"
            },
            {
                "input": "unique_digits([19, 35, 1750, 2])",
                "output": "[19, 35]"
            },
            {
                "input": "unique_digits([10, 29, 1708, 6])",
                "output": "[]"
            },
            {
                "input": "unique_digits([132, 98, 29])",
                "output": "[]"
            },
            {
                "input": "unique_digits([16, 36, 1245, 1])",
                "output": "[1]"
            },
            {
                "input": "unique_digits([147, 318, 852, 6])",
                "output": "[]"
            },
            {
                "input": "unique_digits([12296, 2695, 107, 152])",
                "output": "[]"
            },
            {
                "input": "unique_digits([16, 31, 1988, 2])",
                "output": "[31]"
            },
            {
                "input": "unique_digits([132, 108, 27])",
                "output": "[]"
            },
            {
                "input": "unique_digits([156, 321, 810, 8])",
                "output": "[]"
            },
            {
                "input": "unique_digits([136, 100, 31])",
                "output": "[31]"
            },
            {
                "input": "unique_digits([10, 29, 839, 2])",
                "output": "[]"
            },
            {
                "input": "unique_digits([136, 99, 26])",
                "output": "[99]"
            },
            {
                "input": "unique_digits([135, 101, 26])",
                "output": "[135]"
            },
            {
                "input": "unique_digits([12563, 2453, 106, 150])",
                "output": "[]"
            },
            {
                "input": "unique_digits([154, 323, 2077, 13])",
                "output": "[13]"
            },
            {
                "input": "unique_digits([12438, 2377, 108, 150])",
                "output": "[]"
            },
            {
                "input": "unique_digits([154, 319, 854, 8])",
                "output": "[319]"
            },
            {
                "input": "unique_digits([20, 32, 1433, 1])",
                "output": "[1]"
            },
            {
                "input": "unique_digits([147, 324, 1561, 10])",
                "output": "[]"
            },
            {
                "input": "unique_digits([153, 328, 616, 12])",
                "output": "[153]"
            },
            {
                "input": "unique_digits([12835, 1733, 115, 149])",
                "output": "[115, 1733]"
            },
            {
                "input": "unique_digits([12768, 2105, 110, 149])",
                "output": "[]"
            },
            {
                "input": "unique_digits([11, 28, 445, 6])",
                "output": "[11]"
            },
            {
                "input": "unique_digits([150, 320, 1086, 11])",
                "output": "[11]"
            },
            {
                "input": "unique_digits([13139, 2540, 110, 146])",
                "output": "[13139]"
            },
            {
                "input": "unique_digits([11, 28, 1070, 4])",
                "output": "[11]"
            },
            {
                "input": "unique_digits([156, 323, 1793, 9])",
                "output": "[9, 1793]"
            },
            {
                "input": "unique_digits([13169, 2835, 114, 155])",
                "output": "[155]"
            },
            {
                "input": "unique_digits([11330, 1632, 109, 146])",
                "output": "[]"
            },
            {
                "input": "unique_digits([155, 327, 606, 8])",
                "output": "[155]"
            },
            {
                "input": "unique_digits([133, 105, 30])",
                "output": "[133]"
            },
            {
                "input": "unique_digits([130, 105, 31])",
                "output": "[31]"
            },
            {
                "input": "unique_digits([17, 36, 625, 6])",
                "output": "[17]"
            },
            {
                "input": "unique_digits([12495, 2236, 115, 146])",
                "output": "[115]"
            },
            {
                "input": "unique_digits([137, 106, 32])",
                "output": "[137]"
            },
            {
                "input": "unique_digits([11838, 1681, 114, 152])",
                "output": "[]"
            },
            {
                "input": "unique_digits([17, 30, 2073, 4])",
                "output": "[17]"
            },
            {
                "input": "unique_digits([19, 30, 479, 5])",
                "output": "[5, 19]"
            },
            {
                "input": "unique_digits([11648, 1283, 106, 154])",
                "output": "[]"
            },
            {
                "input": "unique_digits([137, 103, 29])",
                "output": "[137]"
            },
            {
                "input": "unique_digits([11389, 1488, 112, 146])",
                "output": "[]"
            },
            {
                "input": "unique_digits([151, 325, 963, 8])",
                "output": "[151]"
            },
            {
                "input": "unique_digits([12, 36, 1972, 2])",
                "output": "[]"
            },
            {
                "input": "unique_digits([150, 323, 2227, 14])",
                "output": "[]"
            },
            {
                "input": "unique_digits([153, 322, 1603, 11])",
                "output": "[11, 153]"
            },
            {
                "input": "unique_digits([18, 31, 1093, 4])",
                "output": "[31]"
            },
            {
                "input": "unique_digits([148, 323, 1714, 14])",
                "output": "[]"
            },
            {
                "input": "unique_digits([153, 328, 2074, 12])",
                "output": "[153]"
            },
            {
                "input": "unique_digits([12, 30, 1352, 2])",
                "output": "[]"
            },
            {
                "input": "unique_digits([11706, 2681, 115, 149])",
                "output": "[115]"
            },
            {
                "input": "unique_digits([15, 33, 1422, 1])",
                "output": "[1, 15, 33]"
            },
            {
                "input": "unique_digits([157, 319, 842, 13])",
                "output": "[13, 157, 319]"
            },
            {
                "input": "unique_digits([153, 326, 1380, 15])",
                "output": "[15, 153]"
            },
            {
                "input": "unique_digits([11494, 2338, 115, 149])",
                "output": "[115]"
            },
            {
                "input": "unique_digits([157, 328, 2400, 12])",
                "output": "[157]"
            },
            {
                "input": "unique_digits([132, 100, 32])",
                "output": "[]"
            },
            {
                "input": "unique_digits([10, 30, 2076, 3])",
                "output": "[3]"
            },
            {
                "input": "unique_digits([137, 107, 30])",
                "output": "[137]"
            },
            {
                "input": "unique_digits([149, 325, 551, 13])",
                "output": "[13, 551]"
            },
            {
                "input": "unique_digits([138, 102, 33])",
                "output": "[33]"
            },
            {
                "input": "unique_digits([151, 328, 1473, 9])",
                "output": "[9, 151]"
            },
            {
                "input": "unique_digits([156, 319, 2349, 5])",
                "output": "[5, 319]"
            },
            {
                "input": "unique_digits([11355, 1562, 115, 146])",
                "output": "[115, 11355]"
            },
            {
                "input": "unique_digits([12158, 1034, 110, 152])",
                "output": "[]"
            },
            {
                "input": "unique_digits([13, 30, 1214, 6])",
                "output": "[13]"
            },
            {
                "input": "unique_digits([137, 102, 31])",
                "output": "[31, 137]"
            },
            {
                "input": "unique_digits([130, 99, 27])",
                "output": "[99]"
            },
            {
                "input": "unique_digits([12607, 2454, 115, 148])",
                "output": "[115]"
            },
            {
                "input": "unique_digits([11, 31, 600, 1])",
                "output": "[1, 11, 31]"
            },
            {
                "input": "unique_digits([135, 104, 33])",
                "output": "[33, 135]"
            },
            {
                "input": "unique_digits([156, 322, 761, 7])",
                "output": "[7]"
            },
            {
                "input": "unique_digits([133, 108, 33])",
                "output": "[33, 133]"
            },
            {
                "input": "unique_digits([134, 107, 35])",
                "output": "[35]"
            },
            {
                "input": "unique_digits([18, 29, 1203, 4])",
                "output": "[]"
            },
            {
                "input": "unique_digits([11957, 2956, 106, 146])",
                "output": "[11957]"
            },
            {
                "input": "unique_digits([138, 107, 33])",
                "output": "[33]"
            },
            {
                "input": "unique_digits([137, 105, 35])",
                "output": "[35, 137]"
            },
            {
                "input": "unique_digits([135, 99, 26])",
                "output": "[99, 135]"
            },
            {
                "input": "unique_digits([133, 99, 27])",
                "output": "[99, 133]"
            },
            {
                "input": "unique_digits([17, 29, 2356, 1])",
                "output": "[1, 17]"
            },
            {
                "input": "unique_digits([12345, 2033, 111, 151])",
                "output": "[111, 151]"
            },
            {
                "input": "unique_digits([151, 322, 2270, 7])",
                "output": "[7, 151]"
            },
            {
                "input": "unique_digits([152, 325, 2236, 9])",
                "output": "[9]"
            },
            {
                "input": "unique_digits([140, 102, 33])",
                "output": "[33]"
            },
            {
                "input": "unique_digits([12144, 2080, 111, 149])",
                "output": "[111]"
            },
            {
                "input": "unique_digits([11998, 1341, 115, 155])",
                "output": "[115, 155]"
            },
            {
                "input": "unique_digits([134, 98, 29])",
                "output": "[]"
            },
            {
                "input": "unique_digits([139, 100, 36])",
                "output": "[139]"
            },
            {
                "input": "unique_digits([13, 38, 1398, 5])",
                "output": "[5, 13]"
            },
            {
                "input": "unique_digits([12592, 1020, 115, 148])",
                "output": "[115]"
            }
        ]
    },
    {
        "problem_description": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
        "ground truth": "def by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
        "instances": [
            {
                "input": "by_length([11, 8, 12])",
                "output": "['Eight']"
            },
            {
                "input": "by_length([4, -6, 7, 6])",
                "output": "['Seven', 'Six', 'Four']"
            },
            {
                "input": "by_length([3, 5, 3, 7, 5, 7, 5, 3])",
                "output": "['Seven', 'Seven', 'Five', 'Five', 'Five', 'Three', 'Three', 'Three']"
            },
            {
                "input": "by_length([5, 4, 6, 3])",
                "output": "['Six', 'Five', 'Four', 'Three']"
            },
            {
                "input": "by_length([10, 9, 11])",
                "output": "['Nine']"
            },
            {
                "input": "by_length([6, 4, 54])",
                "output": "['Six', 'Four']"
            },
            {
                "input": "by_length([5, -5, 8, 5])",
                "output": "['Eight', 'Five', 'Five']"
            },
            {
                "input": "by_length([7, 5, 3, 6, 7, 12, 2, 8])",
                "output": "['Eight', 'Seven', 'Seven', 'Six', 'Five', 'Three', 'Two']"
            },
            {
                "input": "by_length([5, -5, 8, 4])",
                "output": "['Eight', 'Five', 'Four']"
            },
            {
                "input": "by_length([4, 5, 6, 5, 4, 4, 4, 6])",
                "output": "['Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Four', 'Four']"
            },
            {
                "input": "by_length([2, 4, 1, 2])",
                "output": "['Four', 'Two', 'Two', 'One']"
            },
            {
                "input": "by_length([6, 3, 1, 6, 4, 9, 1, 4])",
                "output": "['Nine', 'Six', 'Six', 'Four', 'Four', 'Three', 'One', 'One']"
            },
            {
                "input": "by_length([4, 3, 54])",
                "output": "['Four', 'Three']"
            },
            {
                "input": "by_length([8, 9, 7])",
                "output": "['Nine', 'Eight', 'Seven']"
            },
            {
                "input": "by_length([5, 5, 10])",
                "output": "['Five', 'Five']"
            },
            {
                "input": "by_length([6, 5, 3, 9, 7, 12, 3, 2])",
                "output": "['Nine', 'Seven', 'Six', 'Five', 'Three', 'Three', 'Two']"
            },
            {
                "input": "by_length([3, -6, 57])",
                "output": "['Three']"
            },
            {
                "input": "by_length([10, 4, 12])",
                "output": "['Four']"
            },
            {
                "input": "by_length([6, 3, 1, 7])",
                "output": "['Seven', 'Six', 'Three', 'One']"
            },
            {
                "input": "by_length([8, 4, 4])",
                "output": "['Eight', 'Four', 'Four']"
            },
            {
                "input": "by_length([3, 1, 55])",
                "output": "['Three', 'One']"
            },
            {
                "input": "by_length([5, 3, 2, 5])",
                "output": "['Five', 'Five', 'Three', 'Two']"
            },
            {
                "input": "by_length([7, 5, 5, 5, 3, 13, 3, 8])",
                "output": "['Eight', 'Seven', 'Five', 'Five', 'Five', 'Three', 'Three']"
            },
            {
                "input": "by_length([12, 7, 10])",
                "output": "['Seven']"
            },
            {
                "input": "by_length([4, -4, 53])",
                "output": "['Four']"
            },
            {
                "input": "by_length([4, 3, 56])",
                "output": "['Four', 'Three']"
            },
            {
                "input": "by_length([12, 8, 11])",
                "output": "['Eight']"
            },
            {
                "input": "by_length([4, 4, 8])",
                "output": "['Eight', 'Four', 'Four']"
            },
            {
                "input": "by_length([3, 0, 52])",
                "output": "['Three']"
            },
            {
                "input": "by_length([5, -5, 51])",
                "output": "['Five']"
            },
            {
                "input": "by_length([1, 5, 6, 3, 9, 13, 2, 8])",
                "output": "['Nine', 'Eight', 'Six', 'Five', 'Three', 'Two', 'One']"
            },
            {
                "input": "by_length([6, 4, 4, 2, 7, 8, 6, 2])",
                "output": "['Eight', 'Seven', 'Six', 'Six', 'Four', 'Four', 'Two', 'Two']"
            },
            {
                "input": "by_length([6, -6, 2, 4])",
                "output": "['Six', 'Four', 'Two']"
            },
            {
                "input": "by_length([3, -1, 8, 5])",
                "output": "['Eight', 'Five', 'Three']"
            },
            {
                "input": "by_length([5, 1, 2, 6, 5, 5, 1, 5])",
                "output": "['Six', 'Five', 'Five', 'Five', 'Five', 'Two', 'One', 'One']"
            },
            {
                "input": "by_length([5, 4, 2, 2])",
                "output": "['Five', 'Four', 'Two', 'Two']"
            },
            {
                "input": "by_length([5, 2, 6, 6])",
                "output": "['Six', 'Six', 'Five', 'Two']"
            },
            {
                "input": "by_length([4, -1, 3, 3])",
                "output": "['Four', 'Three', 'Three']"
            },
            {
                "input": "by_length([1, 4, 2, 5])",
                "output": "['Five', 'Four', 'Two', 'One']"
            },
            {
                "input": "by_length([5, -5, 8, 3])",
                "output": "['Eight', 'Five', 'Three']"
            },
            {
                "input": "by_length([2, -2, 4, 3])",
                "output": "['Four', 'Three', 'Two']"
            },
            {
                "input": "by_length([4, 4, 7, 6])",
                "output": "['Seven', 'Six', 'Four', 'Four']"
            },
            {
                "input": "by_length([3, -1, 52])",
                "output": "['Three']"
            },
            {
                "input": "by_length([4, -3, 6, 1])",
                "output": "['Six', 'Four', 'One']"
            },
            {
                "input": "by_length([5, 3, 3, 5])",
                "output": "['Five', 'Five', 'Three', 'Three']"
            },
            {
                "input": "by_length([2, 1, 3, 6, 9, 12, 4, 7])",
                "output": "['Nine', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One']"
            },
            {
                "input": "by_length([1, -6, 57])",
                "output": "['One']"
            },
            {
                "input": "by_length([1, 4, 6, 4, 1, 9, 1, 2])",
                "output": "['Nine', 'Six', 'Four', 'Four', 'Two', 'One', 'One', 'One']"
            },
            {
                "input": "by_length([2, 2, 2, 1, 8, 6, 7, 6])",
                "output": "['Eight', 'Seven', 'Six', 'Six', 'Two', 'Two', 'Two', 'One']"
            },
            {
                "input": "by_length([])",
                "output": "[]"
            },
            {
                "input": "by_length([5, -5, 60])",
                "output": "['Five']"
            },
            {
                "input": "by_length([6, -2, 50])",
                "output": "['Six']"
            },
            {
                "input": "by_length([6, 2, 50])",
                "output": "['Six', 'Two']"
            },
            {
                "input": "by_length([4, 3, 12])",
                "output": "['Four', 'Three']"
            },
            {
                "input": "by_length([4, 5, 7])",
                "output": "['Seven', 'Five', 'Four']"
            },
            {
                "input": "by_length([7, 5, 11])",
                "output": "['Seven', 'Five']"
            },
            {
                "input": "by_length([6, -2, 56])",
                "output": "['Six']"
            },
            {
                "input": "by_length([4, 4, 2, 6, 9, 8, 1, 8])",
                "output": "['Nine', 'Eight', 'Eight', 'Six', 'Four', 'Four', 'Two', 'One']"
            },
            {
                "input": "by_length([6, 4, 6, 1, 6, 6, 6, 4])",
                "output": "['Six', 'Six', 'Six', 'Six', 'Six', 'Four', 'Four', 'One']"
            },
            {
                "input": "by_length([4, 0, 6, 6])",
                "output": "['Six', 'Six', 'Four']"
            },
            {
                "input": "by_length([5, 5, 1, 2, 5, 6, 1, 1])",
                "output": "['Six', 'Five', 'Five', 'Five', 'Two', 'One', 'One', 'One']"
            },
            {
                "input": "by_length([4, 5, 4, 8, 5, 12, 2, 1])",
                "output": "['Eight', 'Five', 'Five', 'Four', 'Four', 'Two', 'One']"
            },
            {
                "input": "by_length([10, 1, 6])",
                "output": "['Six', 'One']"
            },
            {
                "input": "by_length([4, 2, 51])",
                "output": "['Four', 'Two']"
            },
            {
                "input": "by_length([3, 6, 5, 7, 3, 9, 1, 3])",
                "output": "['Nine', 'Seven', 'Six', 'Five', 'Three', 'Three', 'Three', 'One']"
            },
            {
                "input": "by_length([3, 1, 6, 9, 8, 3, 6, 3])",
                "output": "['Nine', 'Eight', 'Six', 'Six', 'Three', 'Three', 'Three', 'One']"
            },
            {
                "input": "by_length([2, 1, 50])",
                "output": "['Two', 'One']"
            },
            {
                "input": "by_length([1, -2, 2, 7])",
                "output": "['Seven', 'Two', 'One']"
            },
            {
                "input": "by_length([3, -3, 5, 1])",
                "output": "['Five', 'Three', 'One']"
            },
            {
                "input": "by_length([4, 7, 9])",
                "output": "['Nine', 'Seven', 'Four']"
            },
            {
                "input": "by_length([4, 3, 1, 6, 3, 5, 7, 1])",
                "output": "['Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'One', 'One']"
            },
            {
                "input": "by_length([3, 1, 3, 2, 4, 3, 1, 1])",
                "output": "['Four', 'Three', 'Three', 'Three', 'Two', 'One', 'One', 'One']"
            },
            {
                "input": "by_length([9, 8, 6])",
                "output": "['Nine', 'Eight', 'Six']"
            },
            {
                "input": "by_length([6, 6, 3, 8, 3, 11, 4, 2])",
                "output": "['Eight', 'Six', 'Six', 'Four', 'Three', 'Three', 'Two']"
            },
            {
                "input": "by_length([1, 4, 2, 7])",
                "output": "['Seven', 'Four', 'Two', 'One']"
            },
            {
                "input": "by_length([2, -6, 53])",
                "output": "['Two']"
            },
            {
                "input": "by_length([2, 0, 52])",
                "output": "['Two']"
            },
            {
                "input": "by_length([4, -2, 50])",
                "output": "['Four']"
            },
            {
                "input": "by_length([8, 7, 4])",
                "output": "['Eight', 'Seven', 'Four']"
            },
            {
                "input": "by_length([4, -2, 56])",
                "output": "['Four']"
            },
            {
                "input": "by_length([4, 3, 10])",
                "output": "['Four', 'Three']"
            },
            {
                "input": "by_length([6, -4, 50])",
                "output": "['Six']"
            },
            {
                "input": "by_length([3, 4, 50])",
                "output": "['Four', 'Three']"
            },
            {
                "input": "by_length([2, 1, 1, 8, 5, 10, 4, 4])",
                "output": "['Eight', 'Five', 'Four', 'Four', 'Two', 'One', 'One']"
            },
            {
                "input": "by_length([5, 9, 13])",
                "output": "['Nine', 'Five']"
            },
            {
                "input": "by_length([11, 3, 13])",
                "output": "['Three']"
            },
            {
                "input": "by_length([5, 0, 4, 4])",
                "output": "['Five', 'Four', 'Four']"
            },
            {
                "input": "by_length([2, -3, 8, 1])",
                "output": "['Eight', 'Two', 'One']"
            },
            {
                "input": "by_length([6, 1, 5, 4])",
                "output": "['Six', 'Five', 'Four', 'One']"
            },
            {
                "input": "by_length([1, 5, 2, 6, 6, 9, 5, 1])",
                "output": "['Nine', 'Six', 'Six', 'Five', 'Five', 'Two', 'One', 'One']"
            },
            {
                "input": "by_length([5, 7, 5])",
                "output": "['Seven', 'Five', 'Five']"
            },
            {
                "input": "by_length([9, 1, 3])",
                "output": "['Nine', 'Three', 'One']"
            },
            {
                "input": "by_length([5, -3, 51])",
                "output": "['Five']"
            },
            {
                "input": "by_length([9, 6, 13])",
                "output": "['Nine', 'Six']"
            },
            {
                "input": "by_length([1, 2, 60])",
                "output": "['Two', 'One']"
            },
            {
                "input": "by_length([12, 7, 4])",
                "output": "['Seven', 'Four']"
            },
            {
                "input": "by_length([2, 3, 5, 8, 5, 7, 6, 4])",
                "output": "['Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two']"
            },
            {
                "input": "by_length([5, 6, 2, 9, 3, 6, 4, 5])",
                "output": "['Nine', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two']"
            },
            {
                "input": "by_length([4, 1, 60])",
                "output": "['Four', 'One']"
            },
            {
                "input": "by_length([6, 7, 7])",
                "output": "['Seven', 'Seven', 'Six']"
            },
            {
                "input": "by_length([4, 2, 7])",
                "output": "['Seven', 'Four', 'Two']"
            }
        ]
    },
    {
        "problem_description": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
        "ground truth": "def f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
        "instances": [
            {
                "input": "f(13)",
                "output": "[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91]"
            },
            {
                "input": "f(12)",
                "output": "[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600]"
            },
            {
                "input": "f(3)",
                "output": "[1, 2, 6]"
            },
            {
                "input": "f(4)",
                "output": "[1, 2, 6, 24]"
            },
            {
                "input": "f(9)",
                "output": "[1, 2, 6, 24, 15, 720, 28, 40320, 45]"
            },
            {
                "input": "f(11)",
                "output": "[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66]"
            },
            {
                "input": "f(6)",
                "output": "[1, 2, 6, 24, 15, 720]"
            },
            {
                "input": "f(5)",
                "output": "[1, 2, 6, 24, 15]"
            },
            {
                "input": "f(14)",
                "output": "[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200]"
            },
            {
                "input": "f(2)",
                "output": "[1, 2]"
            },
            {
                "input": "f(7)",
                "output": "[1, 2, 6, 24, 15, 720, 28]"
            },
            {
                "input": "f(8)",
                "output": "[1, 2, 6, 24, 15, 720, 28, 40320]"
            },
            {
                "input": "f(10)",
                "output": "[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800]"
            },
            {
                "input": "f(1)",
                "output": "[1]"
            }
        ]
    },
    {
        "problem_description": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n",
        "ground truth": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
        "instances": [
            {
                "input": "even_odd_palindrome(670)",
                "output": "(35, 40)"
            },
            {
                "input": "even_odd_palindrome(105)",
                "output": "(8, 11)"
            },
            {
                "input": "even_odd_palindrome(980)",
                "output": "(48, 58)"
            },
            {
                "input": "even_odd_palindrome(448)",
                "output": "(23, 30)"
            },
            {
                "input": "even_odd_palindrome(389)",
                "output": "(18, 29)"
            },
            {
                "input": "even_odd_palindrome(423)",
                "output": "(20, 30)"
            },
            {
                "input": "even_odd_palindrome(63)",
                "output": "(6, 8)"
            },
            {
                "input": "even_odd_palindrome(628)",
                "output": "(31, 40)"
            },
            {
                "input": "even_odd_palindrome(470)",
                "output": "(25, 30)"
            },
            {
                "input": "even_odd_palindrome(56)",
                "output": "(6, 8)"
            },
            {
                "input": "even_odd_palindrome(190)",
                "output": "(8, 19)"
            },
            {
                "input": "even_odd_palindrome(403)",
                "output": "(18, 30)"
            },
            {
                "input": "even_odd_palindrome(376)",
                "output": "(18, 28)"
            },
            {
                "input": "even_odd_palindrome(688)",
                "output": "(37, 40)"
            },
            {
                "input": "even_odd_palindrome(845)",
                "output": "(42, 50)"
            },
            {
                "input": "even_odd_palindrome(133)",
                "output": "(8, 14)"
            },
            {
                "input": "even_odd_palindrome(539)",
                "output": "(28, 34)"
            },
            {
                "input": "even_odd_palindrome(572)",
                "output": "(28, 37)"
            },
            {
                "input": "even_odd_palindrome(824)",
                "output": "(40, 50)"
            },
            {
                "input": "even_odd_palindrome(385)",
                "output": "(18, 29)"
            },
            {
                "input": "even_odd_palindrome(510)",
                "output": "(28, 31)"
            },
            {
                "input": "even_odd_palindrome(570)",
                "output": "(28, 37)"
            },
            {
                "input": "even_odd_palindrome(843)",
                "output": "(42, 50)"
            },
            {
                "input": "even_odd_palindrome(506)",
                "output": "(28, 31)"
            },
            {
                "input": "even_odd_palindrome(452)",
                "output": "(23, 30)"
            },
            {
                "input": "even_odd_palindrome(898)",
                "output": "(48, 50)"
            },
            {
                "input": "even_odd_palindrome(319)",
                "output": "(18, 22)"
            },
            {
                "input": "even_odd_palindrome(971)",
                "output": "(48, 57)"
            },
            {
                "input": "even_odd_palindrome(860)",
                "output": "(44, 50)"
            },
            {
                "input": "even_odd_palindrome(993)",
                "output": "(48, 59)"
            },
            {
                "input": "even_odd_palindrome(40)",
                "output": "(5, 7)"
            },
            {
                "input": "even_odd_palindrome(395)",
                "output": "(18, 30)"
            },
            {
                "input": "even_odd_palindrome(808)",
                "output": "(39, 50)"
            },
            {
                "input": "even_odd_palindrome(725)",
                "output": "(38, 42)"
            },
            {
                "input": "even_odd_palindrome(3)",
                "output": "(1, 2)"
            },
            {
                "input": "even_odd_palindrome(193)",
                "output": "(8, 20)"
            },
            {
                "input": "even_odd_palindrome(369)",
                "output": "(18, 27)"
            },
            {
                "input": "even_odd_palindrome(661)",
                "output": "(34, 40)"
            },
            {
                "input": "even_odd_palindrome(291)",
                "output": "(17, 20)"
            },
            {
                "input": "even_odd_palindrome(434)",
                "output": "(22, 30)"
            },
            {
                "input": "even_odd_palindrome(617)",
                "output": "(30, 40)"
            },
            {
                "input": "even_odd_palindrome(460)",
                "output": "(24, 30)"
            },
            {
                "input": "even_odd_palindrome(603)",
                "output": "(28, 40)"
            },
            {
                "input": "even_odd_palindrome(421)",
                "output": "(20, 30)"
            },
            {
                "input": "even_odd_palindrome(415)",
                "output": "(20, 30)"
            },
            {
                "input": "even_odd_palindrome(19)",
                "output": "(4, 6)"
            },
            {
                "input": "even_odd_palindrome(722)",
                "output": "(38, 42)"
            },
            {
                "input": "even_odd_palindrome(12)",
                "output": "(4, 6)"
            },
            {
                "input": "even_odd_palindrome(613)",
                "output": "(29, 40)"
            },
            {
                "input": "even_odd_palindrome(330)",
                "output": "(18, 23)"
            },
            {
                "input": "even_odd_palindrome(38)",
                "output": "(5, 7)"
            },
            {
                "input": "even_odd_palindrome(566)",
                "output": "(28, 37)"
            },
            {
                "input": "even_odd_palindrome(999)",
                "output": "(48, 60)"
            },
            {
                "input": "even_odd_palindrome(949)",
                "output": "(48, 55)"
            },
            {
                "input": "even_odd_palindrome(951)",
                "output": "(48, 55)"
            },
            {
                "input": "even_odd_palindrome(893)",
                "output": "(47, 50)"
            },
            {
                "input": "even_odd_palindrome(28)",
                "output": "(5, 6)"
            },
            {
                "input": "even_odd_palindrome(170)",
                "output": "(8, 17)"
            },
            {
                "input": "even_odd_palindrome(672)",
                "output": "(35, 40)"
            },
            {
                "input": "even_odd_palindrome(95)",
                "output": "(8, 9)"
            },
            {
                "input": "even_odd_palindrome(151)",
                "output": "(8, 16)"
            },
            {
                "input": "even_odd_palindrome(631)",
                "output": "(31, 40)"
            },
            {
                "input": "even_odd_palindrome(307)",
                "output": "(18, 21)"
            },
            {
                "input": "even_odd_palindrome(548)",
                "output": "(28, 35)"
            },
            {
                "input": "even_odd_palindrome(485)",
                "output": "(27, 30)"
            },
            {
                "input": "even_odd_palindrome(987)",
                "output": "(48, 58)"
            },
            {
                "input": "even_odd_palindrome(799)",
                "output": "(38, 50)"
            },
            {
                "input": "even_odd_palindrome(130)",
                "output": "(8, 13)"
            },
            {
                "input": "even_odd_palindrome(956)",
                "output": "(48, 55)"
            },
            {
                "input": "even_odd_palindrome(25)",
                "output": "(5, 6)"
            },
            {
                "input": "even_odd_palindrome(911)",
                "output": "(48, 51)"
            },
            {
                "input": "even_odd_palindrome(687)",
                "output": "(37, 40)"
            },
            {
                "input": "even_odd_palindrome(210)",
                "output": "(9, 20)"
            },
            {
                "input": "even_odd_palindrome(154)",
                "output": "(8, 16)"
            },
            {
                "input": "even_odd_palindrome(335)",
                "output": "(18, 24)"
            },
            {
                "input": "even_odd_palindrome(944)",
                "output": "(48, 54)"
            },
            {
                "input": "even_odd_palindrome(550)",
                "output": "(28, 35)"
            },
            {
                "input": "even_odd_palindrome(701)",
                "output": "(38, 40)"
            },
            {
                "input": "even_odd_palindrome(960)",
                "output": "(48, 56)"
            },
            {
                "input": "even_odd_palindrome(203)",
                "output": "(9, 20)"
            },
            {
                "input": "even_odd_palindrome(545)",
                "output": "(28, 35)"
            },
            {
                "input": "even_odd_palindrome(848)",
                "output": "(43, 50)"
            },
            {
                "input": "even_odd_palindrome(26)",
                "output": "(5, 6)"
            },
            {
                "input": "even_odd_palindrome(627)",
                "output": "(31, 40)"
            },
            {
                "input": "even_odd_palindrome(8)",
                "output": "(4, 4)"
            },
            {
                "input": "even_odd_palindrome(405)",
                "output": "(19, 30)"
            },
            {
                "input": "even_odd_palindrome(830)",
                "output": "(41, 50)"
            },
            {
                "input": "even_odd_palindrome(994)",
                "output": "(48, 59)"
            },
            {
                "input": "even_odd_palindrome(934)",
                "output": "(48, 53)"
            },
            {
                "input": "even_odd_palindrome(792)",
                "output": "(38, 49)"
            },
            {
                "input": "even_odd_palindrome(507)",
                "output": "(28, 31)"
            },
            {
                "input": "even_odd_palindrome(93)",
                "output": "(8, 9)"
            },
            {
                "input": "even_odd_palindrome(876)",
                "output": "(45, 50)"
            },
            {
                "input": "even_odd_palindrome(629)",
                "output": "(31, 40)"
            },
            {
                "input": "even_odd_palindrome(820)",
                "output": "(40, 50)"
            },
            {
                "input": "even_odd_palindrome(446)",
                "output": "(23, 30)"
            },
            {
                "input": "even_odd_palindrome(175)",
                "output": "(8, 18)"
            },
            {
                "input": "even_odd_palindrome(9)",
                "output": "(4, 5)"
            },
            {
                "input": "even_odd_palindrome(328)",
                "output": "(18, 23)"
            },
            {
                "input": "even_odd_palindrome(84)",
                "output": "(7, 9)"
            },
            {
                "input": "even_odd_palindrome(633)",
                "output": "(31, 40)"
            },
            {
                "input": "even_odd_palindrome(769)",
                "output": "(38, 47)"
            },
            {
                "input": "even_odd_palindrome(123)",
                "output": "(8, 13)"
            },
            {
                "input": "even_odd_palindrome(585)",
                "output": "(28, 39)"
            },
            {
                "input": "even_odd_palindrome(922)",
                "output": "(48, 52)"
            },
            {
                "input": "even_odd_palindrome(1)",
                "output": "(0, 1)"
            },
            {
                "input": "even_odd_palindrome(315)",
                "output": "(18, 22)"
            },
            {
                "input": "even_odd_palindrome(778)",
                "output": "(38, 48)"
            },
            {
                "input": "even_odd_palindrome(890)",
                "output": "(47, 50)"
            },
            {
                "input": "even_odd_palindrome(71)",
                "output": "(7, 8)"
            },
            {
                "input": "even_odd_palindrome(537)",
                "output": "(28, 34)"
            },
            {
                "input": "even_odd_palindrome(664)",
                "output": "(34, 40)"
            },
            {
                "input": "even_odd_palindrome(554)",
                "output": "(28, 35)"
            },
            {
                "input": "even_odd_palindrome(188)",
                "output": "(8, 19)"
            },
            {
                "input": "even_odd_palindrome(541)",
                "output": "(28, 34)"
            },
            {
                "input": "even_odd_palindrome(854)",
                "output": "(43, 50)"
            },
            {
                "input": "even_odd_palindrome(113)",
                "output": "(8, 12)"
            },
            {
                "input": "even_odd_palindrome(947)",
                "output": "(48, 54)"
            },
            {
                "input": "even_odd_palindrome(680)",
                "output": "(36, 40)"
            },
            {
                "input": "even_odd_palindrome(108)",
                "output": "(8, 11)"
            },
            {
                "input": "even_odd_palindrome(986)",
                "output": "(48, 58)"
            },
            {
                "input": "even_odd_palindrome(487)",
                "output": "(27, 30)"
            }
        ]
    },
    {
        "problem_description": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "ground truth": "def count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "instances": [
            {
                "input": "count_nums([9, 26, 29, -42, -61, 1])",
                "output": "4"
            },
            {
                "input": "count_nums([5, 2, 1, -1, 1, 8, 3])",
                "output": "6"
            },
            {
                "input": "count_nums([1, 1, 6, -8, 2, 3, 9])",
                "output": "6"
            },
            {
                "input": "count_nums([3, 5, 3, -4, 5, 7, 2])",
                "output": "6"
            },
            {
                "input": "count_nums([17, 21, 29, -42, -52, 3])",
                "output": "4"
            },
            {
                "input": "count_nums([2, 4, 4, 2, 1, 2, 3])",
                "output": "7"
            },
            {
                "input": "count_nums([-2, -5, 1])",
                "output": "1"
            },
            {
                "input": "count_nums([5, 5, 10, -1, 1, 1, 10])",
                "output": "6"
            },
            {
                "input": "count_nums([2, 97, 101, -8, 5, 3])",
                "output": "5"
            },
            {
                "input": "count_nums([6, 1, 7, -1, 4, 4, 10])",
                "output": "6"
            },
            {
                "input": "count_nums([2, 5, 3, -2, 2, 6, 10])",
                "output": "6"
            },
            {
                "input": "count_nums([])",
                "output": "0"
            },
            {
                "input": "count_nums([4, 1, 3, -2, 5, 6, 3])",
                "output": "6"
            },
            {
                "input": "count_nums([4, 2, 10, -3, 4, 2, 4])",
                "output": "6"
            },
            {
                "input": "count_nums([1, 6, 9, -6, 0, 1, 5])",
                "output": "5"
            },
            {
                "input": "count_nums([5, 2, 14, -10, 3, 1, 1])",
                "output": "6"
            },
            {
                "input": "count_nums([4, -1, 2])",
                "output": "2"
            },
            {
                "input": "count_nums([2, 6, 6, -4, 1, 9, 8])",
                "output": "6"
            },
            {
                "input": "count_nums([5, 5])",
                "output": "2"
            },
            {
                "input": "count_nums([-4, -3, 3])",
                "output": "1"
            },
            {
                "input": "count_nums([4])",
                "output": "1"
            },
            {
                "input": "count_nums([6, 96, 102, -11, 4, 1])",
                "output": "5"
            },
            {
                "input": "count_nums([1, 2])",
                "output": "2"
            },
            {
                "input": "count_nums([1])",
                "output": "1"
            },
            {
                "input": "count_nums([4, 101, 103, -11, 3, -6])",
                "output": "4"
            },
            {
                "input": "count_nums([7, 23, 37, -42, -53, 1])",
                "output": "4"
            },
            {
                "input": "count_nums([3, 11, 6, -7, 5, 5, 5])",
                "output": "6"
            },
            {
                "input": "count_nums([5, 7, 13, -10, 1, 2, 1])",
                "output": "6"
            },
            {
                "input": "count_nums([2, -7, 4])",
                "output": "2"
            },
            {
                "input": "count_nums([3])",
                "output": "1"
            },
            {
                "input": "count_nums([2, 105, 99, -12, 2, 0])",
                "output": "5"
            },
            {
                "input": "count_nums([14, 18, 34, -45, -51, 1])",
                "output": "5"
            },
            {
                "input": "count_nums([10, 26, 34, -49, -60, 1])",
                "output": "5"
            },
            {
                "input": "count_nums([-1, -2, 0])",
                "output": "0"
            },
            {
                "input": "count_nums([1, 97, 95, -8, 6, -4])",
                "output": "4"
            },
            {
                "input": "count_nums([3, 3, 1, -5, 4, 1, 5])",
                "output": "6"
            },
            {
                "input": "count_nums([2, 105, 100, -9, 5, -4])",
                "output": "4"
            },
            {
                "input": "count_nums([6, 103, 99, -8, 4, -1])",
                "output": "4"
            },
            {
                "input": "count_nums([5, 3])",
                "output": "2"
            },
            {
                "input": "count_nums([5, 4, 5, 3, 5, 4, 8])",
                "output": "7"
            },
            {
                "input": "count_nums([1, 100, 94, -4, 2, 2])",
                "output": "5"
            },
            {
                "input": "count_nums([-5, 1, 4])",
                "output": "2"
            },
            {
                "input": "count_nums([13, 26, 39, -42, -59, 4])",
                "output": "5"
            },
            {
                "input": "count_nums([12, 25, 32, -41, -60, 2])",
                "output": "4"
            },
            {
                "input": "count_nums([1, 1, 2, -2, 3, 4, 5])",
                "output": "6"
            },
            {
                "input": "count_nums([3, 3, 4, -3, 2, 8, 7])",
                "output": "6"
            },
            {
                "input": "count_nums([5, 99, 93, -9, 3, -4])",
                "output": "4"
            },
            {
                "input": "count_nums([6, 4, 1, -5, 3, 3, 10])",
                "output": "6"
            },
            {
                "input": "count_nums([3, 0, 4])",
                "output": "2"
            },
            {
                "input": "count_nums([12, 21, 31, -45, -52, 2])",
                "output": "5"
            },
            {
                "input": "count_nums([5, 4, 2, 0, 7, 2, 5])",
                "output": "6"
            },
            {
                "input": "count_nums([11, 18, 38, -48, -59, 1])",
                "output": "6"
            },
            {
                "input": "count_nums([6, 105, 98, -6, 4, -2])",
                "output": "4"
            },
            {
                "input": "count_nums([-2, -7, 1])",
                "output": "1"
            },
            {
                "input": "count_nums([17, 26, 31, -40, -61, 4])",
                "output": "4"
            },
            {
                "input": "count_nums([2, 1, 4, -5, 5, 2, 9])",
                "output": "6"
            },
            {
                "input": "count_nums([3, 3, 14, -4, 2, 4, 10])",
                "output": "6"
            },
            {
                "input": "count_nums([1, 1, 10, -9, 1, 1, 9])",
                "output": "6"
            },
            {
                "input": "count_nums([8, 19, 38, -42, -61, 1])",
                "output": "4"
            },
            {
                "input": "count_nums([4, 1, 2])",
                "output": "3"
            },
            {
                "input": "count_nums([-3, -6, 5])",
                "output": "1"
            },
            {
                "input": "count_nums([4, 4, 14, -10, 3, 6, 10])",
                "output": "6"
            },
            {
                "input": "count_nums([3, 2, 6, -1, 5, 2, 3])",
                "output": "6"
            },
            {
                "input": "count_nums([4, 96, 97, -7, 2, -5])",
                "output": "4"
            },
            {
                "input": "count_nums([2, 2, 7, -3, 6, 2, 5])",
                "output": "6"
            },
            {
                "input": "count_nums([5, 6, 3, -4, 4, 8, 3])",
                "output": "6"
            },
            {
                "input": "count_nums([5, 2, 8, -1, 5, 4, 1])",
                "output": "6"
            },
            {
                "input": "count_nums([5, 2])",
                "output": "2"
            },
            {
                "input": "count_nums([5, 105, 93, -7, 6, -6])",
                "output": "4"
            },
            {
                "input": "count_nums([14, 23, 37, -48, -53, 1])",
                "output": "5"
            },
            {
                "input": "count_nums([2, 11, 7, -1, 2, 6, 5])",
                "output": "6"
            },
            {
                "input": "count_nums([3, 3])",
                "output": "2"
            },
            {
                "input": "count_nums([15, 20, 39, -43, -54, 3])",
                "output": "4"
            },
            {
                "input": "count_nums([4, -1, 1])",
                "output": "2"
            },
            {
                "input": "count_nums([2, 3, 5])",
                "output": "3"
            },
            {
                "input": "count_nums([5, 6])",
                "output": "2"
            },
            {
                "input": "count_nums([1, 100, 98, -7, 1, -1])",
                "output": "4"
            },
            {
                "input": "count_nums([3, 95, 96, -10, 5, -1])",
                "output": "4"
            },
            {
                "input": "count_nums([2])",
                "output": "1"
            },
            {
                "input": "count_nums([5])",
                "output": "1"
            },
            {
                "input": "count_nums([12, 23, 34, -45, -56, 0])",
                "output": "5"
            },
            {
                "input": "count_nums([7, 24, 39, -48, -54, 3])",
                "output": "5"
            },
            {
                "input": "count_nums([8, 22, 32, -44, -59, 1])",
                "output": "5"
            },
            {
                "input": "count_nums([1, 4])",
                "output": "2"
            },
            {
                "input": "count_nums([5, 4, 5, -8, 1, 3, 2])",
                "output": "6"
            },
            {
                "input": "count_nums([-0, 1**0])",
                "output": "1"
            },
            {
                "input": "count_nums([-1, 1, 3])",
                "output": "2"
            },
            {
                "input": "count_nums([-4, 3, 1])",
                "output": "2"
            },
            {
                "input": "count_nums([1, 101, 102, -3, 2, -3])",
                "output": "4"
            },
            {
                "input": "count_nums([1, 5, 1, -6, 6, 1, 1])",
                "output": "6"
            },
            {
                "input": "count_nums([2, 2])",
                "output": "2"
            },
            {
                "input": "count_nums([-6, -7, 2])",
                "output": "1"
            },
            {
                "input": "count_nums([1, 102, 101, -3, 2, -5])",
                "output": "4"
            },
            {
                "input": "count_nums([4, 1, 1])",
                "output": "3"
            },
            {
                "input": "count_nums([4, 8, 13, -4, 2, 6, 8])",
                "output": "6"
            }
        ]
    },
    {
        "problem_description": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
        "ground truth": "def move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
        "instances": [
            {
                "input": "move_one_ball([2, 5, 2, 2, 1])",
                "output": "False"
            },
            {
                "input": "move_one_ball([6, 8, 8, 3, 7])",
                "output": "False"
            },
            {
                "input": "move_one_ball([2, 8, 6, 6, 1])",
                "output": "False"
            },
            {
                "input": "move_one_ball([1, 3, 3, 6, 2])",
                "output": "False"
            },
            {
                "input": "move_one_ball([6, 4, 11, 5, 6])",
                "output": "False"
            },
            {
                "input": "move_one_ball([8, 1, 5, 5, 7])",
                "output": "True"
            },
            {
                "input": "move_one_ball([4, 8, 7, 3, 4])",
                "output": "False"
            },
            {
                "input": "move_one_ball([3, 5, 10, 1, 2])",
                "output": "True"
            },
            {
                "input": "move_one_ball([6, 4, 6, 3, 3])",
                "output": "False"
            },
            {
                "input": "move_one_ball([7, 9, 8, 3, 5])",
                "output": "False"
            },
            {
                "input": "move_one_ball([1, 3, 14, 2, 2])",
                "output": "False"
            },
            {
                "input": "move_one_ball([7, 2, 10, 5, 4])",
                "output": "False"
            },
            {
                "input": "move_one_ball([9, 5, 5, 6])",
                "output": "True"
            },
            {
                "input": "move_one_ball([3, 1, 5, 1])",
                "output": "False"
            },
            {
                "input": "move_one_ball([7, 4, 7, 5, 5])",
                "output": "False"
            },
            {
                "input": "move_one_ball([8, 1, 6, 5])",
                "output": "False"
            },
            {
                "input": "move_one_ball([3, 9, 14, 3, 6])",
                "output": "False"
            },
            {
                "input": "move_one_ball([1, 9, 3, 2, 7])",
                "output": "False"
            },
            {
                "input": "move_one_ball([8, 1, 3, 4, 7])",
                "output": "True"
            },
            {
                "input": "move_one_ball([1, 3, 4, 2, 4])",
                "output": "False"
            },
            {
                "input": "move_one_ball([1, 1, 9, 1, 3])",
                "output": "False"
            },
            {
                "input": "move_one_ball([4, 7, 6, 5])",
                "output": "False"
            },
            {
                "input": "move_one_ball([8, 3, 1, 6, 4])",
                "output": "False"
            },
            {
                "input": "move_one_ball([4, 2, 6, 5])",
                "output": "False"
            },
            {
                "input": "move_one_ball([1, 6, 2, 2, 7])",
                "output": "False"
            },
            {
                "input": "move_one_ball([7, 1, 8, 2, 6])",
                "output": "False"
            },
            {
                "input": "move_one_ball([9, 3, 5, 4])",
                "output": "False"
            },
            {
                "input": "move_one_ball([2, 4, 1, 3, 6])",
                "output": "False"
            },
            {
                "input": "move_one_ball([2, 3, 10, 4, 6])",
                "output": "False"
            },
            {
                "input": "move_one_ball([6, 2, 4, 1, 2])",
                "output": "False"
            },
            {
                "input": "move_one_ball([2, 2, 3, 2, 5])",
                "output": "False"
            },
            {
                "input": "move_one_ball([7, 1, 5, 2, 4])",
                "output": "False"
            },
            {
                "input": "move_one_ball([9, 3, 5, 6])",
                "output": "True"
            },
            {
                "input": "move_one_ball([])",
                "output": "True"
            },
            {
                "input": "move_one_ball([1, 8, 10, 4, 6])",
                "output": "False"
            },
            {
                "input": "move_one_ball([7, 8, 2, 4, 2])",
                "output": "False"
            },
            {
                "input": "move_one_ball([5, 3, 4, 4])",
                "output": "True"
            },
            {
                "input": "move_one_ball([3, 2, 5, 5, 4])",
                "output": "False"
            },
            {
                "input": "move_one_ball([5, 2, 7, 5, 2])",
                "output": "False"
            },
            {
                "input": "move_one_ball([8, 8, 1, 1, 1])",
                "output": "True"
            },
            {
                "input": "move_one_ball([4, 8, 5, 5, 1])",
                "output": "False"
            },
            {
                "input": "move_one_ball([6, 3, 4, 6, 5])",
                "output": "False"
            },
            {
                "input": "move_one_ball([4, 4, 2, 3])",
                "output": "True"
            },
            {
                "input": "move_one_ball([6, 6, 4, 6])",
                "output": "True"
            },
            {
                "input": "move_one_ball([4, 1, 9, 1, 7])",
                "output": "False"
            },
            {
                "input": "move_one_ball([9, 1, 4, 2])",
                "output": "False"
            },
            {
                "input": "move_one_ball([4, 6, 9, 3, 1])",
                "output": "False"
            },
            {
                "input": "move_one_ball([6, 2, 3, 1, 1])",
                "output": "False"
            },
            {
                "input": "move_one_ball([1, 10, 11, 2, 6])",
                "output": "False"
            },
            {
                "input": "move_one_ball([2, 3, 7, 3, 4])",
                "output": "False"
            },
            {
                "input": "move_one_ball([5, 7, 3, 6, 6])",
                "output": "False"
            },
            {
                "input": "move_one_ball([5, 6, 6, 7])",
                "output": "True"
            },
            {
                "input": "move_one_ball([5, 4, 12, 2, 2])",
                "output": "False"
            },
            {
                "input": "move_one_ball([6, 4, 8, 5, 4])",
                "output": "False"
            },
            {
                "input": "move_one_ball([7, 7, 4, 6, 3])",
                "output": "False"
            },
            {
                "input": "move_one_ball([6, 2, 7, 2, 1])",
                "output": "False"
            },
            {
                "input": "move_one_ball([5, 7, 8, 4, 1])",
                "output": "False"
            },
            {
                "input": "move_one_ball([2, 5, 5, 2, 5])",
                "output": "False"
            },
            {
                "input": "move_one_ball([7, 4, 4, 3])",
                "output": "False"
            },
            {
                "input": "move_one_ball([5, 1, 2, 5, 7])",
                "output": "False"
            },
            {
                "input": "move_one_ball([3, 4, 5, 1, 2])",
                "output": "True"
            },
            {
                "input": "move_one_ball([1, 8, 6, 6])",
                "output": "False"
            },
            {
                "input": "move_one_ball([3, 5, 1, 3])",
                "output": "True"
            },
            {
                "input": "move_one_ball([2, 5, 6, 1, 7])",
                "output": "False"
            },
            {
                "input": "move_one_ball([5, 8, 2, 3, 5])",
                "output": "True"
            },
            {
                "input": "move_one_ball([8, 3, 9, 3, 7])",
                "output": "False"
            },
            {
                "input": "move_one_ball([8, 7, 5, 3, 7])",
                "output": "False"
            },
            {
                "input": "move_one_ball([])",
                "output": "True"
            },
            {
                "input": "move_one_ball([8, 8, 6, 3, 6])",
                "output": "False"
            },
            {
                "input": "move_one_ball([2, 10, 3, 6, 2])",
                "output": "False"
            },
            {
                "input": "move_one_ball([1, 9, 8, 5, 2])",
                "output": "False"
            },
            {
                "input": "move_one_ball([5, 2, 2, 2, 3])",
                "output": "True"
            },
            {
                "input": "move_one_ball([1, 7, 9, 5, 3])",
                "output": "False"
            },
            {
                "input": "move_one_ball([4, 9, 5, 1, 2])",
                "output": "False"
            },
            {
                "input": "move_one_ball([2, 8, 9, 5, 6])",
                "output": "False"
            },
            {
                "input": "move_one_ball([6, 9, 10, 1, 4])",
                "output": "True"
            },
            {
                "input": "move_one_ball([1, 6, 1, 7])",
                "output": "False"
            },
            {
                "input": "move_one_ball([1, 4, 8, 4, 5])",
                "output": "False"
            },
            {
                "input": "move_one_ball([3, 5, 4, 1, 2])",
                "output": "False"
            },
            {
                "input": "move_one_ball([1, 5, 15, 5, 4])",
                "output": "False"
            },
            {
                "input": "move_one_ball([9, 3, 6, 3])",
                "output": "False"
            },
            {
                "input": "move_one_ball([8, 1, 9, 5, 3])",
                "output": "False"
            },
            {
                "input": "move_one_ball([6, 5, 6, 6, 3])",
                "output": "False"
            },
            {
                "input": "move_one_ball([3, 7, 3, 2, 3])",
                "output": "False"
            },
            {
                "input": "move_one_ball([7, 2, 1, 3, 2])",
                "output": "False"
            },
            {
                "input": "move_one_ball([2, 4, 5, 5, 3])",
                "output": "False"
            },
            {
                "input": "move_one_ball([4, 8, 4, 7])",
                "output": "False"
            },
            {
                "input": "move_one_ball([1, 10, 1, 6, 1])",
                "output": "False"
            },
            {
                "input": "move_one_ball([5, 5, 2, 7])",
                "output": "False"
            },
            {
                "input": "move_one_ball([5, 4, 13, 3, 7])",
                "output": "False"
            },
            {
                "input": "move_one_ball([1, 8, 15, 2, 2])",
                "output": "False"
            },
            {
                "input": "move_one_ball([3, 10, 2, 5, 1])",
                "output": "False"
            },
            {
                "input": "move_one_ball([7, 9, 7, 1, 3])",
                "output": "False"
            },
            {
                "input": "move_one_ball([7, 9, 5, 5, 5])",
                "output": "True"
            },
            {
                "input": "move_one_ball([1, 1, 11, 3, 2])",
                "output": "False"
            },
            {
                "input": "move_one_ball([1, 4, 6, 2])",
                "output": "False"
            },
            {
                "input": "move_one_ball([7, 10, 11, 3, 3])",
                "output": "True"
            },
            {
                "input": "move_one_ball([7, 4, 3, 1])",
                "output": "False"
            },
            {
                "input": "move_one_ball([6, 6, 4, 1])",
                "output": "False"
            },
            {
                "input": "move_one_ball([4, 2, 3, 1])",
                "output": "False"
            },
            {
                "input": "move_one_ball([7, 5, 8, 6, 3])",
                "output": "False"
            },
            {
                "input": "move_one_ball([3, 4, 5, 5])",
                "output": "True"
            },
            {
                "input": "move_one_ball([5, 3, 4, 5, 4])",
                "output": "False"
            },
            {
                "input": "move_one_ball([1, 4, 2, 7])",
                "output": "False"
            },
            {
                "input": "move_one_ball([1, 9, 10, 1, 6])",
                "output": "False"
            }
        ]
    },
    {
        "problem_description": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
        "ground truth": "def exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
        "instances": [
            {
                "input": "exchange([4, 5, 5], [5, 10, 5])",
                "output": "'NO'"
            },
            {
                "input": "exchange([10, 9, 5], [7, 5, 7])",
                "output": "'NO'"
            },
            {
                "input": "exchange([1, 4, 3, 3], [4, 6, 8, 8])",
                "output": "'YES'"
            },
            {
                "input": "exchange([8, 11, 1], [4, 2, 4])",
                "output": "'YES'"
            },
            {
                "input": "exchange([7, 6, 3, 4, 3, 8], [7, 2, 5, 6, 1, 2])",
                "output": "'YES'"
            },
            {
                "input": "exchange([1, 6, 7, 1], [3, 9, 1, 2])",
                "output": "'NO'"
            },
            {
                "input": "exchange([8, 3, 1, 2, 7, 9], [4, 5, 3, 1, 2, 1])",
                "output": "'NO'"
            },
            {
                "input": "exchange([5, 2, 2, 8], [6, 6, 1, 6])",
                "output": "'YES'"
            },
            {
                "input": "exchange([95, 198], [200, 204])",
                "output": "'YES'"
            },
            {
                "input": "exchange([1, 5, 4, 7], [2, 9, 7, 1])",
                "output": "'NO'"
            },
            {
                "input": "exchange([6, 4, 4, 4], [6, 6, 5, 2])",
                "output": "'YES'"
            },
            {
                "input": "exchange([6, 2, 5, 8], [1, 6, 6, 2])",
                "output": "'YES'"
            },
            {
                "input": "exchange([6, 1, 5, 5], [5, 3, 5, 7])",
                "output": "'NO'"
            },
            {
                "input": "exchange([100, 204], [201, 204])",
                "output": "'YES'"
            },
            {
                "input": "exchange([6, 10, 7], [6, 3, 5])",
                "output": "'YES'"
            },
            {
                "input": "exchange([97, 204], [203, 203])",
                "output": "'NO'"
            },
            {
                "input": "exchange([1, 7, 1, 2], [3, 2, 4, 4])",
                "output": "'YES'"
            },
            {
                "input": "exchange([4, 5, 5, 8], [1, 5, 3, 1])",
                "output": "'NO'"
            },
            {
                "input": "exchange([3, 4, 2, 1, 3, 7], [3, 6, 8, 2, 6, 2])",
                "output": "'YES'"
            },
            {
                "input": "exchange([3, 4, 10, 1, 8, 4], [8, 10, 3, 4, 1, 2])",
                "output": "'YES'"
            },
            {
                "input": "exchange([3, 7, 2], [6, 9, 7])",
                "output": "'NO'"
            },
            {
                "input": "exchange([9, 4, 2], [4, 5, 7])",
                "output": "'YES'"
            },
            {
                "input": "exchange([6, 5, 3, 1], [2, 1, 1, 4])",
                "output": "'NO'"
            },
            {
                "input": "exchange([5, 1, 3, 6, 12, 9], [3, 6, 10, 1, 5, 6])",
                "output": "'NO'"
            },
            {
                "input": "exchange([3, 5, 5], [3, 10, 5])",
                "output": "'NO'"
            },
            {
                "input": "exchange([99, 195], [200, 200])",
                "output": "'YES'"
            },
            {
                "input": "exchange([10, 10, 3], [5, 7, 1])",
                "output": "'NO'"
            },
            {
                "input": "exchange([6, 4, 4, 6], [1, 2, 3, 4])",
                "output": "'YES'"
            },
            {
                "input": "exchange([3, 10, 6], [4, 6, 6])",
                "output": "'YES'"
            },
            {
                "input": "exchange([3, 7, 8, 4], [4, 3, 6, 1])",
                "output": "'YES'"
            },
            {
                "input": "exchange([3, 2, 3, 3, 13, 7], [1, 5, 9, 1, 6, 3])",
                "output": "'NO'"
            },
            {
                "input": "exchange([4, 1, 4, 7], [1, 2, 6, 6])",
                "output": "'YES'"
            },
            {
                "input": "exchange([2, 7, 8, 8], [1, 8, 6, 7])",
                "output": "'YES'"
            },
            {
                "input": "exchange([10, 9, 6], [2, 10, 9])",
                "output": "'YES'"
            },
            {
                "input": "exchange([2, 4, 1, 7], [5, 8, 8, 7])",
                "output": "'YES'"
            },
            {
                "input": "exchange([3, 6, 5, 7], [5, 3, 1, 6])",
                "output": "'NO'"
            },
            {
                "input": "exchange([6, 4, 4, 5], [1, 4, 1, 4])",
                "output": "'YES'"
            },
            {
                "input": "exchange([1, 9, 6], [1, 2, 4])",
                "output": "'YES'"
            },
            {
                "input": "exchange([4, 2, 8, 9], [2, 1, 4, 8])",
                "output": "'YES'"
            },
            {
                "input": "exchange([2, 1, 8, 9], [4, 7, 2, 9])",
                "output": "'YES'"
            },
            {
                "input": "exchange([5, 6, 3, 8], [5, 4, 4, 6])",
                "output": "'YES'"
            },
            {
                "input": "exchange([98, 203], [195, 199])",
                "output": "'NO'"
            },
            {
                "input": "exchange([2, 10, 7], [1, 5, 7])",
                "output": "'NO'"
            },
            {
                "input": "exchange([99, 202], [195, 197])",
                "output": "'NO'"
            },
            {
                "input": "exchange([4, 2, 6, 5], [2, 1, 2, 8])",
                "output": "'YES'"
            },
            {
                "input": "exchange([6, 5, 6, 1], [4, 4, 8, 1])",
                "output": "'YES'"
            },
            {
                "input": "exchange([7, 5, 6], [4, 10, 6])",
                "output": "'YES'"
            },
            {
                "input": "exchange([2, 12, 8], [2, 11, 3])",
                "output": "'YES'"
            },
            {
                "input": "exchange([4, 2, 6, 1], [7, 5, 8, 8])",
                "output": "'YES'"
            },
            {
                "input": "exchange([99, 198], [202, 199])",
                "output": "'YES'"
            },
            {
                "input": "exchange([5, 1, 4, 2], [5, 2, 4, 3])",
                "output": "'YES'"
            },
            {
                "input": "exchange([3, 6, 8, 3], [1, 5, 1, 1])",
                "output": "'NO'"
            },
            {
                "input": "exchange([95, 200], [195, 197])",
                "output": "'NO'"
            },
            {
                "input": "exchange([4, 3, 4, 8], [4, 4, 7, 7])",
                "output": "'YES'"
            },
            {
                "input": "exchange([10, 2, 3], [7, 6, 1])",
                "output": "'YES'"
            },
            {
                "input": "exchange([102, 204], [202, 203])",
                "output": "'YES'"
            },
            {
                "input": "exchange([2, 3, 7, 3], [6, 2, 7, 6])",
                "output": "'YES'"
            },
            {
                "input": "exchange([1, 6, 3], [4, 10, 7])",
                "output": "'YES'"
            },
            {
                "input": "exchange([6, 8, 5], [7, 5, 1])",
                "output": "'NO'"
            },
            {
                "input": "exchange([4, 3, 11, 3, 7, 12], [4, 4, 5, 3, 3, 3])",
                "output": "'NO'"
            },
            {
                "input": "exchange([4, 7, 6, 4], [4, 9, 7, 8])",
                "output": "'YES'"
            },
            {
                "input": "exchange([9, 6, 3], [1, 6, 6])",
                "output": "'YES'"
            },
            {
                "input": "exchange([100, 203], [196, 196])",
                "output": "'YES'"
            },
            {
                "input": "exchange([3, 3, 4, 5], [2, 2, 1, 5])",
                "output": "'NO'"
            },
            {
                "input": "exchange([8, 7, 7], [1, 6, 2])",
                "output": "'YES'"
            },
            {
                "input": "exchange([100, 203], [199, 204])",
                "output": "'YES'"
            },
            {
                "input": "exchange([6, 7, 3, 5], [2, 4, 3, 8])",
                "output": "'YES'"
            },
            {
                "input": "exchange([1, 6, 1], [5, 4, 3])",
                "output": "'NO'"
            },
            {
                "input": "exchange([105, 205], [201, 195])",
                "output": "'NO'"
            },
            {
                "input": "exchange([5, 6, 7, 7], [4, 3, 9, 2])",
                "output": "'NO'"
            },
            {
                "input": "exchange([5, 5, 7, 7], [4, 2, 6, 4])",
                "output": "'YES'"
            },
            {
                "input": "exchange([3, 3, 1, 1], [6, 4, 9, 4])",
                "output": "'NO'"
            },
            {
                "input": "exchange([3, 4, 1], [2, 11, 4])",
                "output": "'YES'"
            },
            {
                "input": "exchange([2, 3, 8, 7], [2, 1, 3, 1])",
                "output": "'NO'"
            },
            {
                "input": "exchange([5, 6, 4, 7], [5, 6, 1, 8])",
                "output": "'YES'"
            },
            {
                "input": "exchange([2, 3, 7, 6], [1, 6, 2, 3])",
                "output": "'YES'"
            },
            {
                "input": "exchange([4, 1, 11, 6, 8, 9], [1, 9, 3, 2, 2, 6])",
                "output": "'YES'"
            },
            {
                "input": "exchange([5, 11, 8], [6, 10, 6])",
                "output": "'YES'"
            },
            {
                "input": "exchange([3, 7, 1, 7], [4, 6, 1, 8])",
                "output": "'NO'"
            },
            {
                "input": "exchange([2, 1, 8, 6], [6, 10, 5, 8])",
                "output": "'YES'"
            },
            {
                "input": "exchange([6, 3, 3], [5, 1, 6])",
                "output": "'NO'"
            },
            {
                "input": "exchange([5, 11, 2], [5, 7, 1])",
                "output": "'NO'"
            },
            {
                "input": "exchange([3, 4, 7, 3], [1, 3, 5, 8])",
                "output": "'NO'"
            },
            {
                "input": "exchange([1, 1, 2, 1], [4, 1, 8, 2])",
                "output": "'YES'"
            },
            {
                "input": "exchange([1, 7, 6, 6, 12, 13], [6, 9, 7, 2, 6, 1])",
                "output": "'YES'"
            },
            {
                "input": "exchange([2, 4, 4, 5], [6, 4, 2, 3])",
                "output": "'YES'"
            },
            {
                "input": "exchange([5, 4, 3, 7], [4, 5, 2, 6])",
                "output": "'YES'"
            },
            {
                "input": "exchange([2, 6, 5, 6], [5, 5, 2, 4])",
                "output": "'YES'"
            },
            {
                "input": "exchange([1, 7, 7, 6], [2, 7, 5, 9])",
                "output": "'NO'"
            },
            {
                "input": "exchange([5, 2, 3, 1], [5, 3, 8, 8])",
                "output": "'NO'"
            },
            {
                "input": "exchange([103, 201], [205, 203])",
                "output": "'NO'"
            },
            {
                "input": "exchange([4, 8, 4], [6, 11, 5])",
                "output": "'YES'"
            },
            {
                "input": "exchange([100, 204], [202, 200])",
                "output": "'YES'"
            },
            {
                "input": "exchange([3, 5, 6, 6], [1, 5, 8, 4])",
                "output": "'YES'"
            },
            {
                "input": "exchange([7, 10, 8], [2, 1, 3])",
                "output": "'YES'"
            },
            {
                "input": "exchange([97, 196], [203, 201])",
                "output": "'NO'"
            },
            {
                "input": "exchange([105, 204], [197, 203])",
                "output": "'NO'"
            },
            {
                "input": "exchange([1, 3, 4, 2, 6, 6], [5, 1, 5, 4, 3, 5])",
                "output": "'NO'"
            },
            {
                "input": "exchange([6, 7, 8, 4, 10, 5], [8, 6, 8, 5, 6, 3])",
                "output": "'YES'"
            },
            {
                "input": "exchange([5, 4, 1], [7, 11, 1])",
                "output": "'NO'"
            },
            {
                "input": "exchange([3, 6, 8, 4], [6, 2, 7, 6])",
                "output": "'YES'"
            },
            {
                "input": "exchange([5, 7, 5, 7], [4, 6, 7, 1])",
                "output": "'NO'"
            },
            {
                "input": "exchange([8, 2, 1], [6, 10, 4])",
                "output": "'YES'"
            },
            {
                "input": "exchange([3, 10, 8], [7, 3, 1])",
                "output": "'NO'"
            },
            {
                "input": "exchange([1, 1, 4, 2], [6, 6, 2, 9])",
                "output": "'YES'"
            },
            {
                "input": "exchange([5, 1, 5, 6, 9, 13], [6, 9, 3, 5, 4, 4])",
                "output": "'NO'"
            },
            {
                "input": "exchange([8, 6, 10, 1, 10, 9], [5, 5, 2, 6, 4, 5])",
                "output": "'YES'"
            },
            {
                "input": "exchange([5, 2, 2, 5], [3, 2, 4, 8])",
                "output": "'YES'"
            },
            {
                "input": "exchange([8, 6, 2], [7, 8, 5])",
                "output": "'YES'"
            },
            {
                "input": "exchange([1, 2, 11, 2, 7, 5], [4, 10, 2, 6, 2, 2])",
                "output": "'YES'"
            },
            {
                "input": "exchange([100, 197], [202, 204])",
                "output": "'YES'"
            },
            {
                "input": "exchange([5, 11, 8], [5, 7, 9])",
                "output": "'NO'"
            },
            {
                "input": "exchange([6, 4, 8, 7], [4, 5, 3, 1])",
                "output": "'YES'"
            },
            {
                "input": "exchange([6, 6, 7, 3, 5, 11], [5, 1, 3, 3, 2, 4])",
                "output": "'NO'"
            },
            {
                "input": "exchange([7, 8, 3], [6, 8, 7])",
                "output": "'YES'"
            },
            {
                "input": "exchange([5, 6, 3], [6, 5, 5])",
                "output": "'NO'"
            },
            {
                "input": "exchange([6, 7, 8], [5, 10, 2])",
                "output": "'YES'"
            },
            {
                "input": "exchange([4, 4, 5, 7], [1, 5, 1, 9])",
                "output": "'NO'"
            },
            {
                "input": "exchange([10, 12, 4], [1, 9, 5])",
                "output": "'YES'"
            },
            {
                "input": "exchange([2, 7, 2, 8], [3, 6, 5, 8])",
                "output": "'YES'"
            },
            {
                "input": "exchange([99, 202], [199, 197])",
                "output": "'NO'"
            },
            {
                "input": "exchange([9, 9, 6], [7, 10, 8])",
                "output": "'YES'"
            },
            {
                "input": "exchange([1, 2, 7, 4, 4, 10], [4, 6, 7, 2, 5, 5])",
                "output": "'YES'"
            },
            {
                "input": "exchange([6, 5, 6, 4, 11, 5], [3, 4, 3, 6, 5, 1])",
                "output": "'NO'"
            },
            {
                "input": "exchange([1, 5, 4, 8], [3, 1, 8, 4])",
                "output": "'YES'"
            },
            {
                "input": "exchange([5, 4, 7, 2, 13, 10], [7, 7, 10, 4, 5, 6])",
                "output": "'YES'"
            }
        ]
    },
    {
        "problem_description": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
        "ground truth": "def histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
        "instances": [
            {
                "input": "histogram(\"ebpzk\")",
                "output": "{'ebpzk': 1}"
            },
            {
                "input": "histogram(\"kiyizlhs\")",
                "output": "{'kiyizlhs': 1}"
            },
            {
                "input": "histogram(\"ote\")",
                "output": "{'ote': 1}"
            },
            {
                "input": "histogram(\"fxuesfdgjk \")",
                "output": "{'fxuesfdgjk': 1, '': 1}"
            },
            {
                "input": "histogram('a')",
                "output": "{'a': 1}"
            },
            {
                "input": "histogram(\"r\")",
                "output": "{'r': 1}"
            },
            {
                "input": "histogram(\"qwo vt\")",
                "output": "{'qwo': 1, 'vt': 1}"
            },
            {
                "input": "histogram(\"qnvcehs\")",
                "output": "{'qnvcehs': 1}"
            },
            {
                "input": "histogram(\"a\")",
                "output": "{'a': 1}"
            },
            {
                "input": "histogram(\"vpthunm\")",
                "output": "{'vpthunm': 1}"
            },
            {
                "input": "histogram(\"alxzshsygrw\")",
                "output": "{'alxzshsygrw': 1}"
            },
            {
                "input": "histogram(\"zjtokgrtx\")",
                "output": "{'zjtokgrtx': 1}"
            },
            {
                "input": "histogram(\"extoxsm\")",
                "output": "{'extoxsm': 1}"
            },
            {
                "input": "histogram(\"xteoyzd\")",
                "output": "{'xteoyzd': 1}"
            },
            {
                "input": "histogram(\"xpi\")",
                "output": "{'xpi': 1}"
            },
            {
                "input": "histogram(\"ebrlpsfs\")",
                "output": "{'ebrlpsfs': 1}"
            },
            {
                "input": "histogram(\"nopvee\")",
                "output": "{'nopvee': 1}"
            },
            {
                "input": "histogram(\"xhsfxgka \")",
                "output": "{'xhsfxgka': 1, '': 1}"
            },
            {
                "input": "histogram(\"zqmwhabyrgjygt\")",
                "output": "{'zqmwhabyrgjygt': 1}"
            },
            {
                "input": "histogram(\"dedfr\")",
                "output": "{'dedfr': 1}"
            },
            {
                "input": "histogram(\"vaagpoufagwwr\")",
                "output": "{'vaagpoufagwwr': 1}"
            },
            {
                "input": "histogram(\"pkldcnocs cees\")",
                "output": "{'pkldcnocs': 1, 'cees': 1}"
            },
            {
                "input": "histogram(\"q\")",
                "output": "{'q': 1}"
            },
            {
                "input": "histogram(\"n\")",
                "output": "{'n': 1}"
            },
            {
                "input": "histogram(\"rs\")",
                "output": "{'rs': 1}"
            },
            {
                "input": "histogram(\"kzn ouqqfz\")",
                "output": "{'kzn': 1, 'ouqqfz': 1}"
            },
            {
                "input": "histogram(\"relsa\")",
                "output": "{'relsa': 1}"
            },
            {
                "input": "histogram(\"szngkijtjvzd\")",
                "output": "{'szngkijtjvzd': 1}"
            },
            {
                "input": "histogram(\"ofk\")",
                "output": "{'ofk': 1}"
            },
            {
                "input": "histogram(\"bfkxmcb\")",
                "output": "{'bfkxmcb': 1}"
            },
            {
                "input": "histogram(\"tibecrsz\")",
                "output": "{'tibecrsz': 1}"
            },
            {
                "input": "histogram('')",
                "output": "{}"
            },
            {
                "input": "histogram(\"ksqehkbwj\")",
                "output": "{'ksqehkbwj': 1}"
            },
            {
                "input": "histogram(\"sxaor\")",
                "output": "{'sxaor': 1}"
            },
            {
                "input": "histogram(\"t\")",
                "output": "{'t': 1}"
            },
            {
                "input": "histogram(\"b\")",
                "output": "{'b': 1}"
            },
            {
                "input": "histogram(\"kjdvicwm\")",
                "output": "{'kjdvicwm': 1}"
            },
            {
                "input": "histogram(\"nd\")",
                "output": "{'nd': 1}"
            },
            {
                "input": "histogram(\"hflhqahunywguz\")",
                "output": "{'hflhqahunywguz': 1}"
            },
            {
                "input": "histogram(\"vixitrb\")",
                "output": "{'vixitrb': 1}"
            },
            {
                "input": "histogram(\"nppv\")",
                "output": "{'nppv': 1}"
            },
            {
                "input": "histogram(\"mugytibcb\")",
                "output": "{'mugytibcb': 1}"
            },
            {
                "input": "histogram(\"o\")",
                "output": "{'o': 1}"
            },
            {
                "input": "histogram(\"ovcbmobr\")",
                "output": "{'ovcbmobr': 1}"
            },
            {
                "input": "histogram(\"iagusf\")",
                "output": "{'iagusf': 1}"
            },
            {
                "input": "histogram(\"oyrtsdmdudtafd\")",
                "output": "{'oyrtsdmdudtafd': 1}"
            },
            {
                "input": "histogram(\"zncaaa\")",
                "output": "{'zncaaa': 1}"
            },
            {
                "input": "histogram(\"ixldvyly ejnz\")",
                "output": "{'ixldvyly': 1, 'ejnz': 1}"
            },
            {
                "input": "histogram(\"fqrscrtr\")",
                "output": "{'fqrscrtr': 1}"
            },
            {
                "input": "histogram(\"ofiqwtkvu\")",
                "output": "{'ofiqwtkvu': 1}"
            },
            {
                "input": "histogram(\"ajmwtkiery\")",
                "output": "{'ajmwtkiery': 1}"
            },
            {
                "input": "histogram(\"qvarxoa\")",
                "output": "{'qvarxoa': 1}"
            },
            {
                "input": "histogram(\"nbw\")",
                "output": "{'nbw': 1}"
            },
            {
                "input": "histogram(\"hrrbvgkbalkra\")",
                "output": "{'hrrbvgkbalkra': 1}"
            },
            {
                "input": "histogram(\"ssgeefwsznskwds\")",
                "output": "{'ssgeefwsznskwds': 1}"
            },
            {
                "input": "histogram(\"k\")",
                "output": "{'k': 1}"
            },
            {
                "input": "histogram(\"pwjum ocmuglne\")",
                "output": "{'pwjum': 1, 'ocmuglne': 1}"
            },
            {
                "input": "histogram(\"mfus\")",
                "output": "{'mfus': 1}"
            },
            {
                "input": "histogram(\"ynszuyybemnm\")",
                "output": "{'ynszuyybemnm': 1}"
            },
            {
                "input": "histogram(\"j\")",
                "output": "{'j': 1}"
            },
            {
                "input": "histogram(\"s\")",
                "output": "{'s': 1}"
            },
            {
                "input": "histogram(\"qrwnx\")",
                "output": "{'qrwnx': 1}"
            },
            {
                "input": "histogram(\"bofyxoswpalc\")",
                "output": "{'bofyxoswpalc': 1}"
            },
            {
                "input": "histogram(\"xnrwz\")",
                "output": "{'xnrwz': 1}"
            },
            {
                "input": "histogram(\"opy\")",
                "output": "{'opy': 1}"
            },
            {
                "input": "histogram('a b c d g')",
                "output": "{'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}"
            },
            {
                "input": "histogram(\"mfq\")",
                "output": "{'mfq': 1}"
            },
            {
                "input": "histogram(\"ucgouvpafay\")",
                "output": "{'ucgouvpafay': 1}"
            },
            {
                "input": "histogram(\"dytvbkddxbb\")",
                "output": "{'dytvbkddxbb': 1}"
            },
            {
                "input": "histogram(\"jmy\")",
                "output": "{'jmy': 1}"
            },
            {
                "input": "histogram(\"w\")",
                "output": "{'w': 1}"
            },
            {
                "input": "histogram(\"puacbltqysqo\")",
                "output": "{'puacbltqysqo': 1}"
            },
            {
                "input": "histogram(\"ipnqcovwflclbgf\")",
                "output": "{'ipnqcovwflclbgf': 1}"
            },
            {
                "input": "histogram(\"tqi\")",
                "output": "{'tqi': 1}"
            },
            {
                "input": "histogram(\"l\")",
                "output": "{'l': 1}"
            },
            {
                "input": "histogram(\"zgwj ti\")",
                "output": "{'zgwj': 1, 'ti': 1}"
            },
            {
                "input": "histogram(\"rg\")",
                "output": "{'rg': 1}"
            },
            {
                "input": "histogram(\"jqqvzhh\")",
                "output": "{'jqqvzhh': 1}"
            },
            {
                "input": "histogram(\"akzmxaten\")",
                "output": "{'akzmxaten': 1}"
            },
            {
                "input": "histogram(\"rpzvizkuym\")",
                "output": "{'rpzvizkuym': 1}"
            },
            {
                "input": "histogram(\"lrmn\")",
                "output": "{'lrmn': 1}"
            },
            {
                "input": "histogram(\"qgbazuh\")",
                "output": "{'qgbazuh': 1}"
            },
            {
                "input": "histogram(\"pic\")",
                "output": "{'pic': 1}"
            },
            {
                "input": "histogram(\"x\")",
                "output": "{'x': 1}"
            },
            {
                "input": "histogram(\"comfnjz\")",
                "output": "{'comfnjz': 1}"
            },
            {
                "input": "histogram(\" hgtjtrox\")",
                "output": "{'': 1, 'hgtjtrox': 1}"
            },
            {
                "input": "histogram(\"hqfrif u\")",
                "output": "{'hqfrif': 1, 'u': 1}"
            },
            {
                "input": "histogram(\"ylpfxjytjxdubkk\")",
                "output": "{'ylpfxjytjxdubkk': 1}"
            },
            {
                "input": "histogram(\"pidc gx\")",
                "output": "{'pidc': 1, 'gx': 1}"
            },
            {
                "input": "histogram(\"gfqwzilfe\")",
                "output": "{'gfqwzilfe': 1}"
            },
            {
                "input": "histogram(\"zuqsdgrzu\")",
                "output": "{'zuqsdgrzu': 1}"
            },
            {
                "input": "histogram(\"gerqufkk\")",
                "output": "{'gerqufkk': 1}"
            },
            {
                "input": "histogram(\"vflxpn \")",
                "output": "{'vflxpn': 1, '': 1}"
            },
            {
                "input": "histogram(\"uskutc\")",
                "output": "{'uskutc': 1}"
            },
            {
                "input": "histogram(\"ffs\")",
                "output": "{'ffs': 1}"
            },
            {
                "input": "histogram(\"tqlzsnbemvaudbs\")",
                "output": "{'tqlzsnbemvaudbs': 1}"
            },
            {
                "input": "histogram(\"gu awuras nre\")",
                "output": "{'gu': 1, 'awuras': 1, 'nre': 1}"
            },
            {
                "input": "histogram(\"suh\")",
                "output": "{'suh': 1}"
            },
            {
                "input": "histogram(\"nsg\")",
                "output": "{'nsg': 1}"
            },
            {
                "input": "histogram(\"oooudqv eywbx\")",
                "output": "{'oooudqv': 1, 'eywbx': 1}"
            },
            {
                "input": "histogram(\"merfpzcloas\")",
                "output": "{'merfpzcloas': 1}"
            },
            {
                "input": "histogram(\"eorw\")",
                "output": "{'eorw': 1}"
            },
            {
                "input": "histogram(\"u\")",
                "output": "{'u': 1}"
            },
            {
                "input": "histogram('b b b b a')",
                "output": "{'b': 4}"
            },
            {
                "input": "histogram(\"pyjsqkszs\")",
                "output": "{'pyjsqkszs': 1}"
            },
            {
                "input": "histogram(\"np\")",
                "output": "{'np': 1}"
            },
            {
                "input": "histogram(\"yidenuxbk pgr\")",
                "output": "{'yidenuxbk': 1, 'pgr': 1}"
            },
            {
                "input": "histogram(\" clsersklwqd\")",
                "output": "{'': 1, 'clsersklwqd': 1}"
            },
            {
                "input": "histogram(\"n rivtvpbjz\")",
                "output": "{'n': 1, 'rivtvpbjz': 1}"
            },
            {
                "input": "histogram(\"e\")",
                "output": "{'e': 1}"
            },
            {
                "input": "histogram(\"un pjkbvq\")",
                "output": "{'un': 1, 'pjkbvq': 1}"
            },
            {
                "input": "histogram(\"jjmjpltkmmqa\")",
                "output": "{'jjmjpltkmmqa': 1}"
            },
            {
                "input": "histogram(\"giu fdd qvgg\")",
                "output": "{'giu': 1, 'fdd': 1, 'qvgg': 1}"
            },
            {
                "input": "histogram(\"mlclpljwxvnxv\")",
                "output": "{'mlclpljwxvnxv': 1}"
            },
            {
                "input": "histogram('a b c a b')",
                "output": "{'a': 2, 'b': 2}"
            },
            {
                "input": "histogram(\"ukqdacqw\")",
                "output": "{'ukqdacqw': 1}"
            },
            {
                "input": "histogram(\"c\")",
                "output": "{'c': 1}"
            },
            {
                "input": "histogram(\"uxsylkbyigbm\")",
                "output": "{'uxsylkbyigbm': 1}"
            },
            {
                "input": "histogram(\"uacomzq\")",
                "output": "{'uacomzq': 1}"
            },
            {
                "input": "histogram(\"y\")",
                "output": "{'y': 1}"
            },
            {
                "input": "histogram(\"bpsdtkh\")",
                "output": "{'bpsdtkh': 1}"
            },
            {
                "input": "histogram(\"waxgtdtlce\")",
                "output": "{'waxgtdtlce': 1}"
            }
        ]
    },
    {
        "problem_description": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n",
        "ground truth": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
        "instances": [
            {
                "input": "reverse_delete('bvjfmwzwv', 'anz')",
                "output": "('bvjfmwwv', False)"
            },
            {
                "input": "reverse_delete('z', 'v')",
                "output": "('z', True)"
            },
            {
                "input": "reverse_delete('puhwartp', 'y')",
                "output": "('puhwartp', False)"
            },
            {
                "input": "reverse_delete('zuhw', 'wmkcu')",
                "output": "('zh', False)"
            },
            {
                "input": "reverse_delete('xqfoondu', 'h')",
                "output": "('xqfoondu', False)"
            },
            {
                "input": "reverse_delete('c', 'd')",
                "output": "('c', True)"
            },
            {
                "input": "reverse_delete('noat', 'zjmg')",
                "output": "('noat', False)"
            },
            {
                "input": "reverse_delete('pgsqectg', 'wqbkvn')",
                "output": "('pgsectg', False)"
            },
            {
                "input": "reverse_delete('xcqsxmllm', 'joey')",
                "output": "('xcqsxmllm', False)"
            },
            {
                "input": "reverse_delete('iwkhapzilupkyyg', 'h')",
                "output": "('iwkapzilupkyyg', False)"
            },
            {
                "input": "reverse_delete('hekrw', 'bkeirip')",
                "output": "('hw', False)"
            },
            {
                "input": "reverse_delete('d', 'x')",
                "output": "('d', True)"
            },
            {
                "input": "reverse_delete('pcqrus', 't')",
                "output": "('pcqrus', False)"
            },
            {
                "input": "reverse_delete('klfixuynt', 'q')",
                "output": "('klfixuynt', False)"
            },
            {
                "input": "reverse_delete('ovytondmfhurx', 'giutpo')",
                "output": "('vyndmfhrx', False)"
            },
            {
                "input": "reverse_delete('orm', 'a')",
                "output": "('orm', False)"
            },
            {
                "input": "reverse_delete('aigbd', 'xrfsbh')",
                "output": "('aigd', False)"
            },
            {
                "input": "reverse_delete('fcolefdp', 't')",
                "output": "('fcolefdp', False)"
            },
            {
                "input": "reverse_delete('jmyuypfd', 'ykchk')",
                "output": "('jmupfd', False)"
            },
            {
                "input": "reverse_delete('ovvchivfesdnzee', 'xrkym')",
                "output": "('ovvchivfesdnzee', False)"
            },
            {
                "input": "reverse_delete('wkwm', 'q')",
                "output": "('wkwm', False)"
            },
            {
                "input": "reverse_delete('iufxejqwc', 'l')",
                "output": "('iufxejqwc', False)"
            },
            {
                "input": "reverse_delete('i', 'i')",
                "output": "('', True)"
            },
            {
                "input": "reverse_delete('nrgjjngx', 'a')",
                "output": "('nrgjjngx', False)"
            },
            {
                "input": "reverse_delete('tovgjfskcu', 'j')",
                "output": "('tovgfskcu', False)"
            },
            {
                "input": "reverse_delete('uewzybhhlo', 'm')",
                "output": "('uewzybhhlo', False)"
            },
            {
                "input": "reverse_delete('tvfx', 'b')",
                "output": "('tvfx', False)"
            },
            {
                "input": "reverse_delete('bidipogteb', 'e')",
                "output": "('bidipogtb', False)"
            },
            {
                "input": "reverse_delete('nrhkr', 'p')",
                "output": "('nrhkr', False)"
            },
            {
                "input": "reverse_delete('u', 'e')",
                "output": "('u', True)"
            },
            {
                "input": "reverse_delete('plzitgbsboly', 'v')",
                "output": "('plzitgbsboly', False)"
            },
            {
                "input": "reverse_delete('kskh', 'bqmu')",
                "output": "('kskh', False)"
            },
            {
                "input": "reverse_delete('cywbg', 'r')",
                "output": "('cywbg', False)"
            },
            {
                "input": "reverse_delete('jgwqwgbefwsiz', 'w')",
                "output": "('jgqgbefsiz', False)"
            },
            {
                "input": "reverse_delete('xqfvdunvktkfjx', 'z')",
                "output": "('xqfvdunvktkfjx', False)"
            },
            {
                "input": "reverse_delete('d', 'h')",
                "output": "('d', True)"
            },
            {
                "input": "reverse_delete('g', 's')",
                "output": "('g', True)"
            },
            {
                "input": "reverse_delete('uctcbtx', 'w')",
                "output": "('uctcbtx', False)"
            },
            {
                "input": "reverse_delete('slyyhbixlapcvrw', 'qzrzyd')",
                "output": "('slhbixlapcvw', False)"
            },
            {
                "input": "reverse_delete('nwskifsihaem', 'bcx')",
                "output": "('nwskifsihaem', False)"
            },
            {
                "input": "reverse_delete('mniqmjy', 'xhe')",
                "output": "('mniqmjy', False)"
            },
            {
                "input": "reverse_delete('dbybvrsyblrwpi', 'sqm')",
                "output": "('dbybvryblrwpi', False)"
            },
            {
                "input": "reverse_delete('fcbtofx', 'a')",
                "output": "('fcbtofx', False)"
            },
            {
                "input": "reverse_delete('rpsveo', 't')",
                "output": "('rpsveo', False)"
            },
            {
                "input": "reverse_delete('lekkc', 'nizlup')",
                "output": "('ekkc', False)"
            },
            {
                "input": "reverse_delete('rrs', 'j')",
                "output": "('rrs', False)"
            },
            {
                "input": "reverse_delete('jltmfeiq', 'mbst')",
                "output": "('jlfeiq', False)"
            },
            {
                "input": "reverse_delete('fciyayatwwev', 'r')",
                "output": "('fciyayatwwev', False)"
            },
            {
                "input": "reverse_delete('qgx', 'dyia')",
                "output": "('qgx', False)"
            },
            {
                "input": "reverse_delete('jrijhuql', 'b')",
                "output": "('jrijhuql', False)"
            },
            {
                "input": "reverse_delete('fuqqnaxcd', 'n')",
                "output": "('fuqqaxcd', False)"
            },
            {
                "input": "reverse_delete('wsqlilxao', 'z')",
                "output": "('wsqlilxao', False)"
            },
            {
                "input": "reverse_delete('apewbuhby', 'nfp')",
                "output": "('aewbuhby', False)"
            },
            {
                "input": "reverse_delete('pdpflwpnyou', 'n')",
                "output": "('pdpflwpyou', False)"
            },
            {
                "input": "reverse_delete('lhr', 'h')",
                "output": "('lr', False)"
            },
            {
                "input": "reverse_delete('mlltftbw', 'aaeqkz')",
                "output": "('mlltftbw', False)"
            },
            {
                "input": "reverse_delete('bdyxulrsnqe', 'whz')",
                "output": "('bdyxulrsnqe', False)"
            },
            {
                "input": "reverse_delete('h', 't')",
                "output": "('h', True)"
            },
            {
                "input": "reverse_delete('wbaehwkm', 'g')",
                "output": "('wbaehwkm', False)"
            },
            {
                "input": "reverse_delete('pbeyehmn', 'hicw')",
                "output": "('pbeyemn', False)"
            },
            {
                "input": "reverse_delete('elly', 'qyeboj')",
                "output": "('ll', True)"
            },
            {
                "input": "reverse_delete('frdzjcdrxn', 'i')",
                "output": "('frdzjcdrxn', False)"
            },
            {
                "input": "reverse_delete('rzfyurtld', 'n')",
                "output": "('rzfyurtld', False)"
            },
            {
                "input": "reverse_delete('fjrnrgzlbr', 'b')",
                "output": "('fjrnrgzlr', False)"
            },
            {
                "input": "reverse_delete('ior', 'adpk')",
                "output": "('ior', False)"
            },
            {
                "input": "reverse_delete('ksfvx', 'fglwvgd')",
                "output": "('ksx', False)"
            },
            {
                "input": "reverse_delete('i', 'f')",
                "output": "('i', True)"
            },
            {
                "input": "reverse_delete('uttzaxhqphjikef', 's')",
                "output": "('uttzaxhqphjikef', False)"
            },
            {
                "input": "reverse_delete('rfrwhwi', 'vpuf')",
                "output": "('rrwhwi', False)"
            },
            {
                "input": "reverse_delete('lfmxfbalnkb', 'o')",
                "output": "('lfmxfbalnkb', False)"
            },
            {
                "input": "reverse_delete('nlwjpcnc', 'kj')",
                "output": "('nlwpcnc', False)"
            },
            {
                "input": "reverse_delete('onpy', 'dzrc')",
                "output": "('onpy', False)"
            },
            {
                "input": "reverse_delete('vagijbi', 'j')",
                "output": "('vagibi', False)"
            },
            {
                "input": "reverse_delete('yyi', 'ndx')",
                "output": "('yyi', False)"
            },
            {
                "input": "reverse_delete('bpscieh', 'fodcicggw')",
                "output": "('bpseh', False)"
            },
            {
                "input": "reverse_delete('dahyb', 'zxgbehahj')",
                "output": "('dy', False)"
            },
            {
                "input": "reverse_delete('hoqxvvmle', 'zjy')",
                "output": "('hoqxvvmle', False)"
            },
            {
                "input": "reverse_delete('gngvwzmgrie', 'wcfd')",
                "output": "('gngvzmgrie', False)"
            },
            {
                "input": "reverse_delete('vjp', 'l')",
                "output": "('vjp', False)"
            },
            {
                "input": "reverse_delete('xfhio', 'u')",
                "output": "('xfhio', False)"
            },
            {
                "input": "reverse_delete('edzw', 'zmwt')",
                "output": "('ed', False)"
            },
            {
                "input": "reverse_delete('q', 'g')",
                "output": "('q', True)"
            },
            {
                "input": "reverse_delete('aaath', 'v')",
                "output": "('aaath', False)"
            },
            {
                "input": "reverse_delete('ptucpefoeswx', 'y')",
                "output": "('ptucpefoeswx', False)"
            },
            {
                "input": "reverse_delete('xobcogdevmjda', 'q')",
                "output": "('xobcogdevmjda', False)"
            },
            {
                "input": "reverse_delete('h', 'n')",
                "output": "('h', True)"
            },
            {
                "input": "reverse_delete('t', 'w')",
                "output": "('t', True)"
            },
            {
                "input": "reverse_delete('slfocylsw', 'p')",
                "output": "('slfocylsw', False)"
            },
            {
                "input": "reverse_delete('keeviwsiwcx', 'h')",
                "output": "('keeviwsiwcx', False)"
            },
            {
                "input": "reverse_delete('xtwqdmbqwj', 'emb')",
                "output": "('xtwqdqwj', False)"
            },
            {
                "input": "reverse_delete('p', 'l')",
                "output": "('p', True)"
            },
            {
                "input": "reverse_delete('zddkptut', 's')",
                "output": "('zddkptut', False)"
            },
            {
                "input": "reverse_delete('ltnalh', 'h')",
                "output": "('ltnal', False)"
            },
            {
                "input": "reverse_delete('o', 'l')",
                "output": "('o', True)"
            },
            {
                "input": "reverse_delete('bgoysxv', 'z')",
                "output": "('bgoysxv', False)"
            },
            {
                "input": "reverse_delete('pmonxbjingmp', 'zrhsdd')",
                "output": "('pmonxbjingmp', False)"
            },
            {
                "input": "reverse_delete('nqfqjdw', 'tlvtok')",
                "output": "('nqfqjdw', False)"
            },
            {
                "input": "reverse_delete('dyauaigkyl', 'x')",
                "output": "('dyauaigkyl', False)"
            },
            {
                "input": "reverse_delete('foykuf', 'kr')",
                "output": "('foyuf', False)"
            },
            {
                "input": "reverse_delete('nnkwsqy', 'm')",
                "output": "('nnkwsqy', False)"
            },
            {
                "input": "reverse_delete('bfexlxcpk', 'ed')",
                "output": "('bfxlxcpk', False)"
            },
            {
                "input": "reverse_delete('sdgrjwfrhonmpk', 'ljqr')",
                "output": "('sdgwfhonmpk', False)"
            },
            {
                "input": "reverse_delete('bnuuch', 'n')",
                "output": "('buuch', False)"
            },
            {
                "input": "reverse_delete('aia', 't')",
                "output": "('aia', True)"
            },
            {
                "input": "reverse_delete('yfemjie', 'i')",
                "output": "('yfemje', False)"
            },
            {
                "input": "reverse_delete('laxepw', 'e')",
                "output": "('laxpw', False)"
            },
            {
                "input": "reverse_delete('wbpv', 'nnpvcperv')",
                "output": "('wb', False)"
            },
            {
                "input": "reverse_delete('wczeqsnib', 'e')",
                "output": "('wczqsnib', False)"
            },
            {
                "input": "reverse_delete('tikrit', 'y')",
                "output": "('tikrit', False)"
            },
            {
                "input": "reverse_delete('vmpgswphznw', 'z')",
                "output": "('vmpgswphnw', False)"
            },
            {
                "input": "reverse_delete('hoxlpyprusuch', 'khb')",
                "output": "('oxlpyprusuc', False)"
            },
            {
                "input": "reverse_delete('cjiyggtsoqcuhuu', 'qql')",
                "output": "('cjiyggtsocuhuu', False)"
            },
            {
                "input": "reverse_delete('dbuygmfnkii', 'o')",
                "output": "('dbuygmfnkii', False)"
            },
            {
                "input": "reverse_delete('squtkmvrpmxi', 'i')",
                "output": "('squtkmvrpmx', False)"
            },
            {
                "input": "reverse_delete('abnjeb', 'a')",
                "output": "('bnjeb', False)"
            },
            {
                "input": "reverse_delete('lsnvhjucpduae', 'sxqlk')",
                "output": "('nvhjucpduae', False)"
            },
            {
                "input": "reverse_delete('hsjs', 'j')",
                "output": "('hss', False)"
            },
            {
                "input": "reverse_delete('thtflwmws', 'zcxtm')",
                "output": "('hflwws', False)"
            },
            {
                "input": "reverse_delete('gzts', 'z')",
                "output": "('gts', False)"
            },
            {
                "input": "reverse_delete('ejywjnnguvxzzne', 'x')",
                "output": "('ejywjnnguvzzne', False)"
            },
            {
                "input": "reverse_delete('zwvtfe', 'xiq')",
                "output": "('zwvtfe', False)"
            },
            {
                "input": "reverse_delete('arrvtwoe', 'zvxaao')",
                "output": "('rrtwe', False)"
            },
            {
                "input": "reverse_delete('blyzlhnmlqnn', 'i')",
                "output": "('blyzlhnmlqnn', False)"
            },
            {
                "input": "reverse_delete('zwrhlh', 'ivktpy')",
                "output": "('zwrhlh', False)"
            },
            {
                "input": "reverse_delete('toeu', 'lbgzto')",
                "output": "('eu', False)"
            },
            {
                "input": "reverse_delete('qwgwt', 't')",
                "output": "('qwgw', False)"
            }
        ]
    },
    {
        "problem_description": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
        "ground truth": "def odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
        "instances": [
            {
                "input": "odd_count(['6883'])",
                "output": "['the number of odd elements 1n the str1ng 1 of the 1nput.']"
            },
            {
                "input": "odd_count(['9050'])",
                "output": "['the number of odd elements 2n the str2ng 2 of the 2nput.']"
            },
            {
                "input": "odd_count(['940181585465'])",
                "output": "['the number of odd elements 6n the str6ng 6 of the 6nput.']"
            },
            {
                "input": "odd_count(['886'])",
                "output": "['the number of odd elements 0n the str0ng 0 of the 0nput.']"
            },
            {
                "input": "odd_count(['314740867408'])",
                "output": "['the number of odd elements 4n the str4ng 4 of the 4nput.']"
            },
            {
                "input": "odd_count(['83858'])",
                "output": "['the number of odd elements 2n the str2ng 2 of the 2nput.']"
            },
            {
                "input": "odd_count(['7680520'])",
                "output": "['the number of odd elements 2n the str2ng 2 of the 2nput.']"
            },
            {
                "input": "odd_count(['36156577'])",
                "output": "['the number of odd elements 6n the str6ng 6 of the 6nput.']"
            },
            {
                "input": "odd_count(['754'])",
                "output": "['the number of odd elements 2n the str2ng 2 of the 2nput.']"
            },
            {
                "input": "odd_count(['73831241'])",
                "output": "['the number of odd elements 5n the str5ng 5 of the 5nput.']"
            },
            {
                "input": "odd_count(['254'])",
                "output": "['the number of odd elements 1n the str1ng 1 of the 1nput.']"
            },
            {
                "input": "odd_count(['394305101'])",
                "output": "['the number of odd elements 6n the str6ng 6 of the 6nput.']"
            },
            {
                "input": "odd_count(['3533'])",
                "output": "['the number of odd elements 4n the str4ng 4 of the 4nput.']"
            },
            {
                "input": "odd_count(['501'])",
                "output": "['the number of odd elements 2n the str2ng 2 of the 2nput.']"
            },
            {
                "input": "odd_count(['697'])",
                "output": "['the number of odd elements 2n the str2ng 2 of the 2nput.']"
            },
            {
                "input": "odd_count(['81093250487'])",
                "output": "['the number of odd elements 5n the str5ng 5 of the 5nput.']"
            },
            {
                "input": "odd_count(['26813216'])",
                "output": "['the number of odd elements 3n the str3ng 3 of the 3nput.']"
            },
            {
                "input": "odd_count(['2608551086'])",
                "output": "['the number of odd elements 3n the str3ng 3 of the 3nput.']"
            },
            {
                "input": "odd_count(['01040680'])",
                "output": "['the number of odd elements 1n the str1ng 1 of the 1nput.']"
            },
            {
                "input": "odd_count(['73797055'])",
                "output": "['the number of odd elements 7n the str7ng 7 of the 7nput.']"
            },
            {
                "input": "odd_count(['9629'])",
                "output": "['the number of odd elements 2n the str2ng 2 of the 2nput.']"
            },
            {
                "input": "odd_count(['7797902'])",
                "output": "['the number of odd elements 5n the str5ng 5 of the 5nput.']"
            },
            {
                "input": "odd_count(['9780045'])",
                "output": "['the number of odd elements 3n the str3ng 3 of the 3nput.']"
            },
            {
                "input": "odd_count(['893409273951'])",
                "output": "['the number of odd elements 8n the str8ng 8 of the 8nput.']"
            },
            {
                "input": "odd_count(['717401786684'])",
                "output": "['the number of odd elements 5n the str5ng 5 of the 5nput.']"
            },
            {
                "input": "odd_count(['8202916'])",
                "output": "['the number of odd elements 2n the str2ng 2 of the 2nput.']"
            },
            {
                "input": "odd_count(['421'])",
                "output": "['the number of odd elements 1n the str1ng 1 of the 1nput.']"
            },
            {
                "input": "odd_count(['977'])",
                "output": "['the number of odd elements 3n the str3ng 3 of the 3nput.']"
            },
            {
                "input": "odd_count(['216894'])",
                "output": "['the number of odd elements 2n the str2ng 2 of the 2nput.']"
            },
            {
                "input": "odd_count(['940689635'])",
                "output": "['the number of odd elements 4n the str4ng 4 of the 4nput.']"
            },
            {
                "input": "odd_count(['300'])",
                "output": "['the number of odd elements 1n the str1ng 1 of the 1nput.']"
            },
            {
                "input": "odd_count(['0327066'])",
                "output": "['the number of odd elements 2n the str2ng 2 of the 2nput.']"
            },
            {
                "input": "odd_count(['3443737'])",
                "output": "['the number of odd elements 5n the str5ng 5 of the 5nput.']"
            },
            {
                "input": "odd_count(['484933'])",
                "output": "['the number of odd elements 3n the str3ng 3 of the 3nput.']"
            },
            {
                "input": "odd_count(['1943108221'])",
                "output": "['the number of odd elements 5n the str5ng 5 of the 5nput.']"
            },
            {
                "input": "odd_count(['59823'])",
                "output": "['the number of odd elements 3n the str3ng 3 of the 3nput.']"
            },
            {
                "input": "odd_count(['67391805539'])",
                "output": "['the number of odd elements 8n the str8ng 8 of the 8nput.']"
            },
            {
                "input": "odd_count(['603110684'])",
                "output": "['the number of odd elements 3n the str3ng 3 of the 3nput.']"
            },
            {
                "input": "odd_count(['5975'])",
                "output": "['the number of odd elements 4n the str4ng 4 of the 4nput.']"
            },
            {
                "input": "odd_count(['57972820'])",
                "output": "['the number of odd elements 4n the str4ng 4 of the 4nput.']"
            },
            {
                "input": "odd_count(['13157'])",
                "output": "['the number of odd elements 5n the str5ng 5 of the 5nput.']"
            },
            {
                "input": "odd_count(['03375159688'])",
                "output": "['the number of odd elements 7n the str7ng 7 of the 7nput.']"
            }
        ]
    },
    {
        "problem_description": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
        "ground truth": "def minSubArraySum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
        "instances": [
            {
                "input": "minSubArraySum([102, -29, 30, -6, 2, -5])",
                "output": "-29"
            },
            {
                "input": "minSubArraySum([12, 11, 17, 12, 7, 2])",
                "output": "2"
            },
            {
                "input": "minSubArraySum([-9999999999999998])",
                "output": "-9999999999999998"
            },
            {
                "input": "minSubArraySum([-1, 3, 1, 13, -6])",
                "output": "-6"
            },
            {
                "input": "minSubArraySum([-3, 0, 2])",
                "output": "-3"
            },
            {
                "input": "minSubArraySum([15, 12, 10, 3, 4, 7])",
                "output": "3"
            },
            {
                "input": "minSubArraySum([9])",
                "output": "9"
            },
            {
                "input": "minSubArraySum([97, -35, 33, -1, 3, -4])",
                "output": "-35"
            },
            {
                "input": "minSubArraySum([-10])",
                "output": "-10"
            },
            {
                "input": "minSubArraySum([-10])",
                "output": "-10"
            },
            {
                "input": "minSubArraySum([3, 12, 18, 1000591])",
                "output": "3"
            },
            {
                "input": "minSubArraySum([9, 12, 12, 9, 5, 1])",
                "output": "1"
            },
            {
                "input": "minSubArraySum([96, -28, 37, 2, 5, 0])",
                "output": "-28"
            },
            {
                "input": "minSubArraySum([-1, -6, -1, 6, -9])",
                "output": "-11"
            },
            {
                "input": "minSubArraySum([98, -30, 31, 3, 2, -4])",
                "output": "-30"
            },
            {
                "input": "minSubArraySum([4, -7, -1, 6, -6])",
                "output": "-8"
            },
            {
                "input": "minSubArraySum([-9])",
                "output": "-9"
            },
            {
                "input": "minSubArraySum([1, 0, -2])",
                "output": "-2"
            },
            {
                "input": "minSubArraySum([104, 1, -3, -1, 6, -10])",
                "output": "-10"
            },
            {
                "input": "minSubArraySum([103, -38, 35, 4, 5, -4])",
                "output": "-38"
            },
            {
                "input": "minSubArraySum([-11])",
                "output": "-11"
            },
            {
                "input": "minSubArraySum([14, 15, 17, 11, 8, 1])",
                "output": "1"
            },
            {
                "input": "minSubArraySum([7, 13, 10, 6, 3, 6])",
                "output": "3"
            },
            {
                "input": "minSubArraySum([4, 0, -4, 5, -8])",
                "output": "-8"
            },
            {
                "input": "minSubArraySum([5, -5])",
                "output": "-5"
            },
            {
                "input": "minSubArraySum([-3, -7, -4, 2, -6])",
                "output": "-18"
            },
            {
                "input": "minSubArraySum([-1, -2, -3, 10, -5])",
                "output": "-6"
            },
            {
                "input": "minSubArraySum([4, -3, -7, 12, -2])",
                "output": "-10"
            },
            {
                "input": "minSubArraySum([-4, -3, -5, 5, -12])",
                "output": "-19"
            },
            {
                "input": "minSubArraySum([95, -37, 29, 0, 1, -5])",
                "output": "-37"
            },
            {
                "input": "minSubArraySum([7])",
                "output": "7"
            },
            {
                "input": "minSubArraySum([3, 15, 23, 1000022])",
                "output": "3"
            },
            {
                "input": "minSubArraySum([4, 6, 18, 1000090])",
                "output": "4"
            },
            {
                "input": "minSubArraySum([-1, -7, -1, 12, -1])",
                "output": "-9"
            },
            {
                "input": "minSubArraySum([-9999999999999999])",
                "output": "-9999999999999999"
            },
            {
                "input": "minSubArraySum([3, 4, 5, 6, 2, 7])",
                "output": "2"
            },
            {
                "input": "minSubArraySum([5, 8, 12, 12, 4, 8])",
                "output": "4"
            },
            {
                "input": "minSubArraySum([11])",
                "output": "11"
            },
            {
                "input": "minSubArraySum([11, 13, 17, 9, 5, 2])",
                "output": "2"
            },
            {
                "input": "minSubArraySum([99, -36, 35, -1, 1, -4])",
                "output": "-36"
            },
            {
                "input": "minSubArraySum([5, 3, 5, 2, 2, 4])",
                "output": "2"
            },
            {
                "input": "minSubArraySum([3, -6])",
                "output": "-6"
            },
            {
                "input": "minSubArraySum([6, 2])",
                "output": "2"
            },
            {
                "input": "minSubArraySum([4, -2, -8, 2, -11])",
                "output": "-19"
            },
            {
                "input": "minSubArraySum([-10000000000000000])",
                "output": "-10000000000000000"
            },
            {
                "input": "minSubArraySum([101, 0, 2, 1, 14, -3])",
                "output": "-3"
            },
            {
                "input": "minSubArraySum([2, 3, 4, 1, 2, 4])",
                "output": "1"
            },
            {
                "input": "minSubArraySum([-1, 2, -3, 3, -11])",
                "output": "-11"
            },
            {
                "input": "minSubArraySum([-1, -2, -3])",
                "output": "-6"
            },
            {
                "input": "minSubArraySum([0, 10, 20, 1000000])",
                "output": "0"
            },
            {
                "input": "minSubArraySum([-6, 3, -6])",
                "output": "-9"
            },
            {
                "input": "minSubArraySum([1, -3])",
                "output": "-3"
            },
            {
                "input": "minSubArraySum([3, 7, 9, 6, 5, 7])",
                "output": "3"
            },
            {
                "input": "minSubArraySum([-6])",
                "output": "-6"
            },
            {
                "input": "minSubArraySum([100, 3, -2, 2, 6, -8])",
                "output": "-8"
            },
            {
                "input": "minSubArraySum([-4, 2, 0])",
                "output": "-4"
            },
            {
                "input": "minSubArraySum([-15])",
                "output": "-15"
            },
            {
                "input": "minSubArraySum([10, 11, 13, 8, 3, 4])",
                "output": "3"
            },
            {
                "input": "minSubArraySum([-10000000000000001])",
                "output": "-10000000000000001"
            },
            {
                "input": "minSubArraySum([1, -7, 0, 9, -1])",
                "output": "-7"
            },
            {
                "input": "minSubArraySum([101, 1, -7, -5, 9, -1])",
                "output": "-12"
            },
            {
                "input": "minSubArraySum([8])",
                "output": "8"
            },
            {
                "input": "minSubArraySum([1, -1])",
                "output": "-1"
            },
            {
                "input": "minSubArraySum([4, -3, -7])",
                "output": "-10"
            },
            {
                "input": "minSubArraySum([1, 12, 21, 999192])",
                "output": "1"
            },
            {
                "input": "minSubArraySum([3, -6, -3, 15, -2])",
                "output": "-9"
            },
            {
                "input": "minSubArraySum([100, 1, -2, 0, 8, -9])",
                "output": "-9"
            },
            {
                "input": "minSubArraySum([4, 7, 25, 1000789])",
                "output": "4"
            },
            {
                "input": "minSubArraySum([12])",
                "output": "12"
            },
            {
                "input": "minSubArraySum([5, -6])",
                "output": "-6"
            },
            {
                "input": "minSubArraySum([98, -36, 34, 0, 2, 0])",
                "output": "-36"
            },
            {
                "input": "minSubArraySum([-6, 3, -7])",
                "output": "-10"
            },
            {
                "input": "minSubArraySum([4, 4, 2, 3, 2, 1])",
                "output": "1"
            },
            {
                "input": "minSubArraySum([6])",
                "output": "6"
            },
            {
                "input": "minSubArraySum([4, -1])",
                "output": "-1"
            },
            {
                "input": "minSubArraySum([100, 0, -1, -7, 10, -9])",
                "output": "-9"
            },
            {
                "input": "minSubArraySum([0, -7, -3, 1, -12])",
                "output": "-21"
            },
            {
                "input": "minSubArraySum([4, 8, 3, 2, 5, 6])",
                "output": "2"
            },
            {
                "input": "minSubArraySum([0, -5, 0, 1, -15])",
                "output": "-19"
            },
            {
                "input": "minSubArraySum([3])",
                "output": "3"
            },
            {
                "input": "minSubArraySum([3, 4])",
                "output": "3"
            },
            {
                "input": "minSubArraySum([1, 1, -7, 11, -8])",
                "output": "-8"
            },
            {
                "input": "minSubArraySum([-9999999999999997])",
                "output": "-9999999999999997"
            },
            {
                "input": "minSubArraySum([105, -5, -2, 0, 10, -8])",
                "output": "-8"
            },
            {
                "input": "minSubArraySum([2])",
                "output": "2"
            },
            {
                "input": "minSubArraySum([100, -30, 30, 2, 4, -7])",
                "output": "-30"
            },
            {
                "input": "minSubArraySum([-5, 3, -2, 8, -5])",
                "output": "-5"
            },
            {
                "input": "minSubArraySum([96, 1, 1, -7, 14, -5])",
                "output": "-7"
            },
            {
                "input": "minSubArraySum([3, 9, 15, 1000630])",
                "output": "3"
            },
            {
                "input": "minSubArraySum([8, 8, 9, 5, 6, 5])",
                "output": "5"
            },
            {
                "input": "minSubArraySum([-6, 3, -4])",
                "output": "-7"
            },
            {
                "input": "minSubArraySum([-2, -4, 1])",
                "output": "-6"
            },
            {
                "input": "minSubArraySum([-12])",
                "output": "-12"
            },
            {
                "input": "minSubArraySum([3, 6, 22, 999684])",
                "output": "3"
            },
            {
                "input": "minSubArraySum([-2, -6, -7, 3, -8])",
                "output": "-20"
            },
            {
                "input": "minSubArraySum([15, 11, 16, 12, 3, 2])",
                "output": "2"
            },
            {
                "input": "minSubArraySum([2, 10, 21, 1000935])",
                "output": "2"
            },
            {
                "input": "minSubArraySum([-10000000000000004])",
                "output": "-10000000000000004"
            },
            {
                "input": "minSubArraySum([6, 4, 6, 2, 5, 1])",
                "output": "1"
            },
            {
                "input": "minSubArraySum([3, -5, -2, 5, -8])",
                "output": "-10"
            },
            {
                "input": "minSubArraySum([97, -6, 0, 1, 5, -6])",
                "output": "-6"
            },
            {
                "input": "minSubArraySum([5, 1, 9, 1, 1, 5])",
                "output": "1"
            },
            {
                "input": "minSubArraySum([-9999999999999995])",
                "output": "-9999999999999995"
            },
            {
                "input": "minSubArraySum([6, 2, 1, 2, 3, 1])",
                "output": "1"
            },
            {
                "input": "minSubArraySum([100, -1, -2, -3, 10, -5])",
                "output": "-6"
            },
            {
                "input": "minSubArraySum([2, 3, 9, 2, 2, 6])",
                "output": "2"
            },
            {
                "input": "minSubArraySum([4, 15, 24, 999923])",
                "output": "4"
            },
            {
                "input": "minSubArraySum([-1, -2, -3, 2, -10])",
                "output": "-14"
            },
            {
                "input": "minSubArraySum([5, -4])",
                "output": "-4"
            },
            {
                "input": "minSubArraySum([101, -6, -1, -3, 5, -9])",
                "output": "-14"
            },
            {
                "input": "minSubArraySum([1, 9, 16, 999736])",
                "output": "1"
            },
            {
                "input": "minSubArraySum([14, 11, 14, 7, 6, 5])",
                "output": "5"
            },
            {
                "input": "minSubArraySum([5, 6, 8, 3, 1, 9])",
                "output": "1"
            },
            {
                "input": "minSubArraySum([95, -29, 34, 4, 5, -3])",
                "output": "-29"
            },
            {
                "input": "minSubArraySum([1, 1, 0, 2, -12])",
                "output": "-12"
            },
            {
                "input": "minSubArraySum([-5, -4, -3, 15, -6])",
                "output": "-12"
            },
            {
                "input": "minSubArraySum([0, -3, 1])",
                "output": "-3"
            },
            {
                "input": "minSubArraySum([2, -6])",
                "output": "-6"
            },
            {
                "input": "minSubArraySum([3, 1, -3])",
                "output": "-3"
            }
        ]
    },
    {
        "problem_description": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
        "ground truth": "def max_fill(grid, capacity):\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
        "instances": []
    },
    {
        "problem_description": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
        "ground truth": "def sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
        "instances": [
            {
                "input": "sort_array([8, 4, 45, 11, 37, 8])",
                "output": "[4, 8, 8, 11, 37, 45]"
            },
            {
                "input": "sort_array([2,5,77,4,5,3,5,7,2,3,4])",
                "output": "[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]"
            },
            {
                "input": "sort_array([5, 3, 2, 3, 6])",
                "output": "[2, 3, 3, 5, 6]"
            },
            {
                "input": "sort_array([4, 1, 46, 14, 34, 9])",
                "output": "[1, 4, 9, 34, 14, 46]"
            },
            {
                "input": "sort_array([1, 6, 81, 8, 8, 2, 7, 8, 7, 8, 7])",
                "output": "[1, 2, 8, 8, 8, 8, 6, 7, 7, 7, 81]"
            },
            {
                "input": "sort_array([6, 2, 6, 17, 33])",
                "output": "[2, 6, 6, 17, 33]"
            },
            {
                "input": "sort_array([5, 7, 10, 21, 34])",
                "output": "[5, 10, 34, 7, 21]"
            },
            {
                "input": "sort_array([5, 4, 75, 8, 6, 2, 10, 4, 4, 6, 1])",
                "output": "[1, 2, 4, 4, 4, 8, 5, 6, 6, 10, 75]"
            },
            {
                "input": "sort_array([-6, -5, -5, -6, -6])",
                "output": "[-6, -6, -6, -5, -5]"
            },
            {
                "input": "sort_array([4, 4, 5, 4, 1])",
                "output": "[1, 4, 4, 4, 5]"
            },
            {
                "input": "sort_array([-7, -3, -4, -10, -10])",
                "output": "[-4, -10, -10, -3, -7]"
            },
            {
                "input": "sort_array([8, 9, 39, 9, 28, 3])",
                "output": "[8, 3, 9, 9, 28, 39]"
            },
            {
                "input": "sort_array([4, 2, 3, 4, 9])",
                "output": "[2, 4, 4, 3, 9]"
            },
            {
                "input": "sort_array([-6, -5, -9, -4, -8])",
                "output": "[-8, -4, -9, -6, -5]"
            },
            {
                "input": "sort_array([4, 4, 9, 16, 32])",
                "output": "[4, 4, 16, 32, 9]"
            },
            {
                "input": "sort_array([2, -5, -5, -6, -4])",
                "output": "[-4, 2, -6, -5, -5]"
            },
            {
                "input": "sort_array([4, 2, 6, 15, 30])",
                "output": "[2, 4, 6, 15, 30]"
            },
            {
                "input": "sort_array([1, 5, 75, 6, 4, 3, 7, 11, 7, 2, 4])",
                "output": "[1, 2, 4, 4, 3, 5, 6, 7, 7, 11, 75]"
            },
            {
                "input": "sort_array([5, 6, 4, 1, 2])",
                "output": "[1, 2, 4, 5, 6]"
            },
            {
                "input": "sort_array([2, 0, -7, -5, -3])",
                "output": "[0, 2, -5, -3, -7]"
            },
            {
                "input": "sort_array([1,0,2,3,4])",
                "output": "[0, 1, 2, 4, 3]"
            },
            {
                "input": "sort_array([1, 1, 47, 13, 30, 3])",
                "output": "[1, 1, 3, 13, 30, 47]"
            },
            {
                "input": "sort_array([1, 5, 8, 16, 27])",
                "output": "[1, 8, 16, 5, 27]"
            },
            {
                "input": "sort_array([7, 5, 10, 21, 33])",
                "output": "[5, 10, 33, 7, 21]"
            },
            {
                "input": "sort_array([3, 1, 6, 7, 7])",
                "output": "[1, 3, 6, 7, 7]"
            },
            {
                "input": "sort_array([2, 6, 6, 1, 6])",
                "output": "[1, 2, 6, 6, 6]"
            },
            {
                "input": "sort_array([-2,-3,-4,-5,-6])",
                "output": "[-4, -2, -6, -5, -3]"
            },
            {
                "input": "sort_array([1, 5, 2, 2, 2])",
                "output": "[1, 2, 2, 2, 5]"
            },
            {
                "input": "sort_array([5, 6, 10, 15, 31])",
                "output": "[5, 6, 10, 15, 31]"
            },
            {
                "input": "sort_array([7, 7, 79, 4, 3, 2, 10, 2, 2, 8, 8])",
                "output": "[2, 2, 2, 4, 8, 8, 3, 10, 7, 7, 79]"
            },
            {
                "input": "sort_array([3, 1, -6, -4, -3])",
                "output": "[-4, 1, -6, -3, 3]"
            },
            {
                "input": "sort_array([1, 3, 5, 1, 2])",
                "output": "[1, 1, 2, 3, 5]"
            },
            {
                "input": "sort_array([3, 2, 4, 2, 2])",
                "output": "[2, 2, 2, 4, 3]"
            },
            {
                "input": "sort_array([4, 8, 3, 21, 29])",
                "output": "[4, 8, 3, 21, 29]"
            },
            {
                "input": "sort_array([5, 10, 6, 3, 9])",
                "output": "[3, 5, 6, 9, 10]"
            },
            {
                "input": "sort_array([-4, -7, 0, -9, -1])",
                "output": "[0, -4, -1, -9, -7]"
            },
            {
                "input": "sort_array([3, 5, 81, 6, 5, 6, 9, 5, 3, 3, 3])",
                "output": "[3, 3, 3, 3, 5, 5, 5, 6, 6, 9, 81]"
            },
            {
                "input": "sort_array([6, 9, 2, 6, 7])",
                "output": "[2, 6, 6, 9, 7]"
            },
            {
                "input": "sort_array([])",
                "output": "[]"
            },
            {
                "input": "sort_array([3, 8, 78, 5, 10, 5, 9, 3, 4, 7, 1])",
                "output": "[1, 4, 8, 3, 3, 5, 5, 9, 10, 7, 78]"
            },
            {
                "input": "sort_array([3, 3, 5, 4, 8])",
                "output": "[4, 8, 3, 3, 5]"
            },
            {
                "input": "sort_array([6, 11, 43, 9, 29, 10])",
                "output": "[6, 9, 10, 11, 29, 43]"
            },
            {
                "input": "sort_array([3, 2, 2, 8, 3])",
                "output": "[2, 2, 8, 3, 3]"
            },
            {
                "input": "sort_array([6, 7, 9, 21, 33])",
                "output": "[6, 9, 33, 7, 21]"
            },
            {
                "input": "sort_array([2, 8, 76, 4, 7, 6, 6, 8, 6, 2, 8])",
                "output": "[2, 2, 4, 8, 8, 8, 6, 6, 6, 7, 76]"
            },
            {
                "input": "sort_array([4, 2, 8, 14, 30])",
                "output": "[2, 4, 8, 14, 30]"
            },
            {
                "input": "sort_array([4, 10, 1, 5, 2])",
                "output": "[1, 2, 4, 5, 10]"
            },
            {
                "input": "sort_array([3, -3, -7, -6, -3])",
                "output": "[-6, -3, -3, 3, -7]"
            },
            {
                "input": "sort_array([1, 3, 41, 16, 32, 3])",
                "output": "[1, 16, 32, 3, 3, 41]"
            },
            {
                "input": "sort_array([3, -7, -9, -2, -9])",
                "output": "[-2, -9, -9, 3, -7]"
            },
            {
                "input": "sort_array([6, 9, 48, 12, 34, 4])",
                "output": "[4, 6, 9, 12, 34, 48]"
            },
            {
                "input": "sort_array([6, 1, 4, 5, 4])",
                "output": "[1, 4, 4, 5, 6]"
            },
            {
                "input": "sort_array([3, 8, 74, 5, 8, 3, 8, 9, 2, 1, 5])",
                "output": "[1, 2, 8, 8, 8, 3, 3, 5, 5, 9, 74]"
            },
            {
                "input": "sort_array([5, 9, 74, 7, 6, 7, 3, 2, 1, 5, 8])",
                "output": "[1, 2, 8, 3, 5, 5, 6, 9, 7, 7, 74]"
            },
            {
                "input": "sort_array([3, 5, 8, 17, 27])",
                "output": "[8, 3, 5, 17, 27]"
            },
            {
                "input": "sort_array([3, 4, 2, 1, 3])",
                "output": "[1, 2, 4, 3, 3]"
            },
            {
                "input": "sort_array([1, 8, 7, 2, 3])",
                "output": "[1, 2, 8, 3, 7]"
            },
            {
                "input": "sort_array([6, 9, 13, 16, 37])",
                "output": "[16, 6, 9, 13, 37]"
            },
            {
                "input": "sort_array([3, 7, 42, 9, 34, 5])",
                "output": "[3, 5, 9, 34, 7, 42]"
            },
            {
                "input": "sort_array([4, 1, 13, 12, 33])",
                "output": "[1, 4, 12, 33, 13]"
            },
            {
                "input": "sort_array([3, 10, 1, 4, 7])",
                "output": "[1, 4, 3, 10, 7]"
            },
            {
                "input": "sort_array([7, 7, 7, 17, 29])",
                "output": "[17, 7, 7, 7, 29]"
            },
            {
                "input": "sort_array([3,6,44,12,32,5])",
                "output": "[32, 3, 5, 6, 12, 44]"
            },
            {
                "input": "sort_array([2, 3, 12, 20, 36])",
                "output": "[2, 3, 12, 20, 36]"
            },
            {
                "input": "sort_array([3, 4, 5, 8, 2])",
                "output": "[2, 4, 8, 3, 5]"
            },
            {
                "input": "sort_array([5, 2, 5, 4, 4])",
                "output": "[2, 4, 4, 5, 5]"
            },
            {
                "input": "sort_array([3, 2, 4, 17, 35])",
                "output": "[2, 4, 3, 17, 35]"
            },
            {
                "input": "sort_array([6, 7, 5, 6, 4])",
                "output": "[4, 5, 6, 6, 7]"
            },
            {
                "input": "sort_array([4, 10, 77, 3, 8, 2, 9, 3, 4, 8, 2])",
                "output": "[2, 2, 4, 4, 8, 8, 3, 3, 9, 10, 77]"
            },
            {
                "input": "sort_array([5, 3, 2, 1, 7])",
                "output": "[1, 2, 3, 5, 7]"
            },
            {
                "input": "sort_array([1, 5, 3, 5, 1])",
                "output": "[1, 1, 3, 5, 5]"
            },
            {
                "input": "sort_array([6, 7, 9, 15, 30])",
                "output": "[6, 9, 7, 15, 30]"
            },
            {
                "input": "sort_array([5, 3, 12, 17, 37])",
                "output": "[3, 5, 12, 17, 37]"
            },
            {
                "input": "sort_array([2,4,8,16,32])",
                "output": "[2, 4, 8, 16, 32]"
            },
            {
                "input": "sort_array([7, 7, 12, 15, 29])",
                "output": "[12, 7, 7, 15, 29]"
            },
            {
                "input": "sort_array([-3, -5, -9, -7, -4])",
                "output": "[-4, -9, -5, -3, -7]"
            },
            {
                "input": "sort_array([4, 3, 4, 4, 1])",
                "output": "[1, 4, 4, 4, 3]"
            },
            {
                "input": "sort_array([3, -4, -9, 0, -5])",
                "output": "[0, -4, -9, -5, 3]"
            },
            {
                "input": "sort_array([4, 1, 45, 10, 30, 7])",
                "output": "[1, 4, 10, 7, 30, 45]"
            },
            {
                "input": "sort_array([-4, 0, -1, -4, -7])",
                "output": "[0, -4, -4, -1, -7]"
            },
            {
                "input": "sort_array([-1, 1, -4, -6, -6])",
                "output": "[-4, -1, 1, -6, -6]"
            },
            {
                "input": "sort_array([1, 7, 11, 12, 32])",
                "output": "[1, 32, 12, 7, 11]"
            },
            {
                "input": "sort_array([1, 10, 74, 7, 1, 2, 1, 2, 6, 6, 1])",
                "output": "[1, 1, 1, 1, 2, 2, 6, 6, 10, 7, 74]"
            },
            {
                "input": "sort_array([6, 8, 5, 2, 3])",
                "output": "[2, 8, 3, 5, 6]"
            },
            {
                "input": "sort_array([2, 9, 1, 8, 8])",
                "output": "[1, 2, 8, 8, 9]"
            },
            {
                "input": "sort_array([1, 3, 9, 15, 27])",
                "output": "[1, 3, 9, 15, 27]"
            },
            {
                "input": "sort_array([2, 5, 80, 8, 2, 6, 6, 3, 2, 6, 3])",
                "output": "[2, 2, 2, 8, 3, 3, 5, 6, 6, 6, 80]"
            },
            {
                "input": "sort_array([3, 1, 8, 19, 32])",
                "output": "[1, 8, 32, 3, 19]"
            },
            {
                "input": "sort_array([3, 6, 72, 3, 7, 6, 7, 6, 3, 8, 3])",
                "output": "[8, 3, 3, 3, 3, 6, 6, 6, 72, 7, 7]"
            },
            {
                "input": "sort_array([4, 1, 75, 9, 7, 7, 4, 7, 4, 2, 5])",
                "output": "[1, 2, 4, 4, 4, 5, 9, 7, 7, 7, 75]"
            },
            {
                "input": "sort_array([5, 2, 1, 6, 5])",
                "output": "[1, 2, 5, 5, 6]"
            },
            {
                "input": "sort_array([2, 11, 41, 15, 37, 3])",
                "output": "[2, 3, 11, 37, 41, 15]"
            },
            {
                "input": "sort_array([5, 8, 46, 17, 28, 1])",
                "output": "[1, 8, 5, 17, 28, 46]"
            },
            {
                "input": "sort_array([4, 1, 6, 16, 30])",
                "output": "[1, 4, 16, 6, 30]"
            },
            {
                "input": "sort_array([3, 6, 3, 1, 7])",
                "output": "[1, 3, 3, 6, 7]"
            },
            {
                "input": "sort_array([4, 9, 13, 13, 27])",
                "output": "[4, 9, 13, 13, 27]"
            },
            {
                "input": "sort_array([5, 9, 42, 8, 34, 10])",
                "output": "[8, 5, 9, 10, 34, 42]"
            },
            {
                "input": "sort_array([2, 7, 11, 14, 37])",
                "output": "[2, 7, 11, 14, 37]"
            },
            {
                "input": "sort_array([7, 4, 46, 10, 29, 7])",
                "output": "[4, 10, 7, 7, 29, 46]"
            },
            {
                "input": "sort_array([-1, -6, 0, -2, -8])",
                "output": "[0, -8, -2, -1, -6]"
            },
            {
                "input": "sort_array([1,5,2,3,4])",
                "output": "[1, 2, 4, 3, 5]"
            },
            {
                "input": "sort_array([2, 2, 10, 13, 27])",
                "output": "[2, 2, 10, 13, 27]"
            },
            {
                "input": "sort_array([6, 4, 13, 13, 29])",
                "output": "[4, 6, 13, 13, 29]"
            },
            {
                "input": "sort_array([4, 11, 45, 13, 29, 8])",
                "output": "[4, 8, 11, 13, 29, 45]"
            },
            {
                "input": "sort_array([4, 4, 7, 17, 31])",
                "output": "[4, 4, 17, 7, 31]"
            },
            {
                "input": "sort_array([5, 5, 13, 20, 28])",
                "output": "[5, 5, 20, 13, 28]"
            },
            {
                "input": "sort_array([0, -3, -9, -7, -6])",
                "output": "[0, -9, -6, -3, -7]"
            },
            {
                "input": "sort_array([7, 6, 41, 12, 37, 6])",
                "output": "[6, 6, 12, 7, 37, 41]"
            },
            {
                "input": "sort_array([2, 9, 12, 15, 31])",
                "output": "[2, 9, 12, 15, 31]"
            },
            {
                "input": "sort_array([2, 3, 5, 5, 4])",
                "output": "[2, 4, 3, 5, 5]"
            },
            {
                "input": "sort_array([2, 6, 1, 5, 9])",
                "output": "[1, 2, 5, 6, 9]"
            },
            {
                "input": "sort_array([3, 2, 76, 9, 5, 3, 4, 2, 3, 3, 5])",
                "output": "[2, 2, 4, 3, 3, 3, 3, 5, 5, 9, 76]"
            }
        ]
    },
    {
        "problem_description": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
        "ground truth": "def select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
        "instances": [
            {
                "input": "select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22)",
                "output": "['TcXKTNbOnjCJLzWhlNELbGPc']"
            },
            {
                "input": "select_words('dzrmzilzoxn l', 9)",
                "output": "['dzrmzilzoxn']"
            },
            {
                "input": "select_words('yue', 2)",
                "output": "[]"
            },
            {
                "input": "select_words('jizrraatfiyetneqergnnbfn', 3)",
                "output": "[]"
            },
            {
                "input": "select_words('sl', 6)",
                "output": "[]"
            },
            {
                "input": "select_words('fmjizkhknnihqioic', 4)",
                "output": "[]"
            },
            {
                "input": "select_words('eoDDPoNuKJnQIcLHcFK', 14)",
                "output": "['eoDDPoNuKJnQIcLHcFK']"
            },
            {
                "input": "select_words('xwkxcjffocow', 5)",
                "output": "[]"
            },
            {
                "input": "select_words('afrrguc', 5)",
                "output": "['afrrguc']"
            },
            {
                "input": "select_words('kfohjsjunakqmmsx', 1)",
                "output": "[]"
            },
            {
                "input": "select_words('kumJjGm AFFO', 6)",
                "output": "['kumJjGm']"
            },
            {
                "input": "select_words('txXxge', 4)",
                "output": "[]"
            },
            {
                "input": "select_words('uoubngttn', 3)",
                "output": "[]"
            },
            {
                "input": "select_words('NSjIbZV', 2)",
                "output": "[]"
            },
            {
                "input": "select_words('uwnynnkeh', 7)",
                "output": "['uwnynnkeh']"
            },
            {
                "input": "select_words('oKNamFuRSJcV', 9)",
                "output": "['oKNamFuRSJcV']"
            },
            {
                "input": "select_words('hgwhtsvqihhm', 11)",
                "output": "['hgwhtsvqihhm']"
            },
            {
                "input": "select_words('bRJRZC', 3)",
                "output": "[]"
            },
            {
                "input": "select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1)",
                "output": "[]"
            },
            {
                "input": "select_words('tTxmhPuW', 7)",
                "output": "['tTxmhPuW']"
            },
            {
                "input": "select_words('d', 2)",
                "output": "[]"
            },
            {
                "input": "select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10)",
                "output": "['tPNuYXLnOLVv']"
            },
            {
                "input": "select_words('dl', 5)",
                "output": "[]"
            },
            {
                "input": "select_words('pzBxlNfcXEsOQzL', 13)",
                "output": "['pzBxlNfcXEsOQzL']"
            },
            {
                "input": "select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1)",
                "output": "[]"
            },
            {
                "input": "select_words('aDqyhePv', 6)",
                "output": "['aDqyhePv']"
            },
            {
                "input": "select_words('uwebicR RgZrAiEnPkq', 4)",
                "output": "['uwebicR']"
            },
            {
                "input": "select_words('nBmjWxiPV', 3)",
                "output": "[]"
            },
            {
                "input": "select_words('MjRnAErHPguQC', 1)",
                "output": "[]"
            },
            {
                "input": "select_words('WvvnDCbdBejJOXxALMQUP', 17)",
                "output": "['WvvnDCbdBejJOXxALMQUP']"
            },
            {
                "input": "select_words('IFKqNq ', 5)",
                "output": "['IFKqNq']"
            },
            {
                "input": "select_words('ny', 2)",
                "output": "['ny']"
            },
            {
                "input": "select_words('syk', 6)",
                "output": "[]"
            },
            {
                "input": "select_words('xqvooek icmfdiysshehnyqx', 7)",
                "output": "[]"
            },
            {
                "input": "select_words('kogmgdnk', 7)",
                "output": "['kogmgdnk']"
            },
            {
                "input": "select_words('cnxdrucrydrcyol', 13)",
                "output": "['cnxdrucrydrcyol']"
            },
            {
                "input": "select_words('xrbpxpncgqufqkq', 6)",
                "output": "[]"
            },
            {
                "input": "select_words('xdQgsAHI', 5)",
                "output": "[]"
            },
            {
                "input": "select_words('aecdOIhfIbEBTOfoKnT', 1)",
                "output": "[]"
            },
            {
                "input": "select_words('lfspeijyudniowk', 1)",
                "output": "[]"
            },
            {
                "input": "select_words('xzzxdz lkmvrvizpz z', 6)",
                "output": "['xzzxdz']"
            },
            {
                "input": "select_words('caurfxlpkygqxoknil', 4)",
                "output": "[]"
            },
            {
                "input": "select_words('tmchxmttrgfdanq', 3)",
                "output": "[]"
            },
            {
                "input": "select_words('ABIStgq', 5)",
                "output": "['ABIStgq']"
            },
            {
                "input": "select_words('SNeiILCez', 4)",
                "output": "[]"
            },
            {
                "input": "select_words('uuh', 6)",
                "output": "[]"
            },
            {
                "input": "select_words('AWrNREXAqD WePeTbIPTS', 4)",
                "output": "[]"
            },
            {
                "input": "select_words('ffqkhIIChADuzMQIrcFek', 15)",
                "output": "['ffqkhIIChADuzMQIrcFek']"
            },
            {
                "input": "select_words('hguHoJGaaNwX', 3)",
                "output": "[]"
            },
            {
                "input": "select_words('lxQnxHVtrUGfoufkLPXu', 16)",
                "output": "['lxQnxHVtrUGfoufkLPXu']"
            },
            {
                "input": "select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26)",
                "output": "['JfStfbdqmygzcqzJvvbivZfDbwg']"
            },
            {
                "input": "select_words('CbxmADxVZtHArXzwNxnuvda', 19)",
                "output": "['CbxmADxVZtHArXzwNxnuvda']"
            },
            {
                "input": "select_words('rPKhzIot', 6)",
                "output": "['rPKhzIot']"
            },
            {
                "input": "select_words('lINKPOlFIImtg', 3)",
                "output": "[]"
            },
            {
                "input": "select_words('zE sivlrNrHFgwiokUjTMdndl', 5)",
                "output": "[]"
            },
            {
                "input": "select_words('dvYLMt', 6)",
                "output": "['dvYLMt']"
            },
            {
                "input": "select_words('nPxmyTd', 7)",
                "output": "['nPxmyTd']"
            },
            {
                "input": "select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3)",
                "output": "[]"
            },
            {
                "input": "select_words('g', 5)",
                "output": "[]"
            },
            {
                "input": "select_words('djucfuuizrjfvuzzo', 4)",
                "output": "[]"
            },
            {
                "input": "select_words('iJxMQLiIZ', 6)",
                "output": "['iJxMQLiIZ']"
            },
            {
                "input": "select_words('nh vu lcakrb', 1)",
                "output": "['vu']"
            },
            {
                "input": "select_words('RBAY  hmsXCkloLHYheRDQL', 3)",
                "output": "['RBAY']"
            },
            {
                "input": "select_words('c zsYpMPdmr', 9)",
                "output": "['zsYpMPdmr']"
            },
            {
                "input": "select_words('KBDaAtwgkSQhbMcvLn', 16)",
                "output": "['KBDaAtwgkSQhbMcvLn']"
            },
            {
                "input": "select_words('fjnjvfo aqgasitdiyalwv', 1)",
                "output": "[]"
            },
            {
                "input": "select_words('svMzfBuoveQXEPPIVV', 13)",
                "output": "['svMzfBuoveQXEPPIVV']"
            },
            {
                "input": "select_words('zGMhBC', 6)",
                "output": "['zGMhBC']"
            },
            {
                "input": "select_words('yCRgLVwagpjADSN MUkt', 3)",
                "output": "['MUkt']"
            },
            {
                "input": "select_words('tJzO PnCT', 3)",
                "output": "['tJzO']"
            },
            {
                "input": "select_words('HWCLBC', 6)",
                "output": "['HWCLBC']"
            },
            {
                "input": "select_words('asfwxvbzdfsrymc', 3)",
                "output": "[]"
            },
            {
                "input": "select_words('KbpFfWgXZoVjXV', 1)",
                "output": "[]"
            },
            {
                "input": "select_words('kcpieuVjAOaxdpB', 4)",
                "output": "[]"
            },
            {
                "input": "select_words('sqgikswgssxsbwkl', 7)",
                "output": "[]"
            },
            {
                "input": "select_words('zIdcqeCrTYiDGGjYFC', 15)",
                "output": "['zIdcqeCrTYiDGGjYFC']"
            },
            {
                "input": "select_words('aru', 5)",
                "output": "[]"
            },
            {
                "input": "select_words('UIOcsXneOjxMkRLvRLSDTV', 4)",
                "output": "[]"
            },
            {
                "input": "select_words('nnchatjackywoavfwfps', 5)",
                "output": "[]"
            },
            {
                "input": "select_words('sqdcPgSPeHfNdISspJa', 16)",
                "output": "['sqdcPgSPeHfNdISspJa']"
            },
            {
                "input": "select_words('zdXc AqKVMGYLrZMPSz', 4)",
                "output": "['zdXc']"
            },
            {
                "input": "select_words('kg', 1)",
                "output": "[]"
            },
            {
                "input": "select_words('qhwubvrfmwy', 2)",
                "output": "[]"
            },
            {
                "input": "select_words('oh', 8)",
                "output": "[]"
            },
            {
                "input": "select_words('epzbicjvjcbxmxgfityzzv', 5)",
                "output": "[]"
            },
            {
                "input": "select_words('sYlP HUxjpHVfeWBNAvXo', 4)",
                "output": "['sYlP']"
            },
            {
                "input": "select_words('bnXA AjPVh', 5)",
                "output": "[]"
            },
            {
                "input": "select_words('DDdrgPy', 4)",
                "output": "[]"
            },
            {
                "input": "select_words('aztxoxesjkzqebhrfzw', 3)",
                "output": "[]"
            },
            {
                "input": "select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5)",
                "output": "[]"
            },
            {
                "input": "select_words('Reg MuZcF', 4)",
                "output": "['MuZcF']"
            },
            {
                "input": "select_words('omnivbqgmavyqdgqssas', 6)",
                "output": "[]"
            },
            {
                "input": "select_words('choounwx', 5)",
                "output": "['choounwx']"
            },
            {
                "input": "select_words('eg aqk', 2)",
                "output": "['aqk']"
            },
            {
                "input": "select_words('fT LxYLtzO', 6)",
                "output": "['LxYLtzO']"
            },
            {
                "input": "select_words('TQzrMVZMngInaglSfwvrbAh', 20)",
                "output": "['TQzrMVZMngInaglSfwvrbAh']"
            },
            {
                "input": "select_words('eywh qxreeexrrhyovpwl', 7)",
                "output": "[]"
            },
            {
                "input": "select_words('lDqgwtu rM tfTmeKEd', 2)",
                "output": "['rM']"
            },
            {
                "input": "select_words('gLFCSPHHP', 9)",
                "output": "['gLFCSPHHP']"
            },
            {
                "input": "select_words('aVCSziOkLCLGizHcmC', 2)",
                "output": "[]"
            },
            {
                "input": "select_words('ASDVzOVVDEdj J', 1)",
                "output": "['J']"
            },
            {
                "input": "select_words('jezkeorvxnruwhhwzxm', 7)",
                "output": "[]"
            },
            {
                "input": "select_words(' siweqafqot', 5)",
                "output": "[]"
            },
            {
                "input": "select_words('mehochzpausf', 2)",
                "output": "[]"
            },
            {
                "input": "select_words('jopfxbbvlslmluypcdt', 3)",
                "output": "[]"
            },
            {
                "input": "select_words('QOBKeojoDQGT jIZmKXyPl', 8)",
                "output": "['QOBKeojoDQGT', 'jIZmKXyPl']"
            },
            {
                "input": "select_words('u', 1)",
                "output": "[]"
            },
            {
                "input": "select_words('wzx', 5)",
                "output": "[]"
            },
            {
                "input": "select_words('EGiDfM', 1)",
                "output": "[]"
            },
            {
                "input": "select_words('etdrxwybqi', 1)",
                "output": "[]"
            },
            {
                "input": "select_words('gw', 9)",
                "output": "[]"
            },
            {
                "input": "select_words('ZpJhNYG', 7)",
                "output": "['ZpJhNYG']"
            },
            {
                "input": "select_words('r s rhhipmt', 6)",
                "output": "['rhhipmt']"
            },
            {
                "input": "select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4)",
                "output": "[]"
            },
            {
                "input": "select_words('GeLxcZJyRwUsQKBQkanf', 2)",
                "output": "[]"
            },
            {
                "input": "select_words('yp', 6)",
                "output": "[]"
            },
            {
                "input": "select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1)",
                "output": "['ne']"
            },
            {
                "input": "select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5)",
                "output": "[]"
            },
            {
                "input": "select_words('prFfoYsafgMfGYYGjsiqTXwL', 21)",
                "output": "['prFfoYsafgMfGYYGjsiqTXwL']"
            },
            {
                "input": "select_words('GFNxLvGHJnNx', 12)",
                "output": "['GFNxLvGHJnNx']"
            },
            {
                "input": "select_words('nb', 2)",
                "output": "['nb']"
            },
            {
                "input": "select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6)",
                "output": "['JIIwPCZW']"
            },
            {
                "input": "select_words('ySmjGAg', 6)",
                "output": "['ySmjGAg']"
            },
            {
                "input": "select_words('v', 4)",
                "output": "[]"
            },
            {
                "input": "select_words('ILkvuFIrW jXOOGXgdSWtd', 10)",
                "output": "['jXOOGXgdSWtd']"
            },
            {
                "input": "select_words('mc', 7)",
                "output": "[]"
            }
        ]
    },
    {
        "problem_description": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
        "ground truth": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
        "instances": [
            {
                "input": "get_closest_vowel(\"vqjo\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"rfsnzbkwn\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"skrikqwb\")",
                "output": "'i'"
            },
            {
                "input": "get_closest_vowel(\"oaznwzxb\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"hxzrg\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"WRVxzZb\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"bijAZ\")",
                "output": "'A'"
            },
            {
                "input": "get_closest_vowel(\"tujwth\")",
                "output": "'u'"
            },
            {
                "input": "get_closest_vowel(\"rvkg\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"ffvtklifh\")",
                "output": "'i'"
            },
            {
                "input": "get_closest_vowel(\"hwqcb\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"bqvhubae\")",
                "output": "'u'"
            },
            {
                "input": "get_closest_vowel(\"jlqd\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"dug\")",
                "output": "'u'"
            },
            {
                "input": "get_closest_vowel(\"lsmrpkds\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"kobcedy\")",
                "output": "'e'"
            },
            {
                "input": "get_closest_vowel(\"iyjwtc\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"nMzDyoquX\")",
                "output": "'u'"
            },
            {
                "input": "get_closest_vowel(\"gmfvvxa\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"avhsz\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"tngyskv\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"ypwdlj\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"sapndx\")",
                "output": "'a'"
            },
            {
                "input": "get_closest_vowel(\"ptbz\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"hqwgwnkhe\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"tkjdeq\")",
                "output": "'e'"
            },
            {
                "input": "get_closest_vowel(\"trngs\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"NDZBuU\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"sunhxtb\")",
                "output": "'u'"
            },
            {
                "input": "get_closest_vowel(\"vNdzcFb\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"hxzbb\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"kijxmjxy\")",
                "output": "'i'"
            },
            {
                "input": "get_closest_vowel(\"tltqbsfli\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"ogzv\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"vzl\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"itkzagrua\")",
                "output": "'a'"
            },
            {
                "input": "get_closest_vowel(\"cybl\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"xarlcy\")",
                "output": "'a'"
            },
            {
                "input": "get_closest_vowel(\"noyfmt\")",
                "output": "'o'"
            },
            {
                "input": "get_closest_vowel(\"lbvxaaupz\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"xsytk\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"euy\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"jebrugbg\")",
                "output": "'u'"
            },
            {
                "input": "get_closest_vowel(\"evw\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"fqE\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"xuyq\")",
                "output": "'u'"
            },
            {
                "input": "get_closest_vowel(\"lwwcnln\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"YsSJU\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"tcjfrktu\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"ocfsalgno\")",
                "output": "'a'"
            },
            {
                "input": "get_closest_vowel(\"QtM\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"ohueb\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"ijhvpy\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"fjbilzo\")",
                "output": "'i'"
            },
            {
                "input": "get_closest_vowel(\"wsqyq\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"FjDlDoF\")",
                "output": "'o'"
            },
            {
                "input": "get_closest_vowel(\"taQosTDF\")",
                "output": "'o'"
            },
            {
                "input": "get_closest_vowel(\"jjdw\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"hly\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"fttpojb\")",
                "output": "'o'"
            },
            {
                "input": "get_closest_vowel(\"ljibidugfgah\")",
                "output": "'a'"
            },
            {
                "input": "get_closest_vowel(\"ahfahd\")",
                "output": "'a'"
            },
            {
                "input": "get_closest_vowel(\"kgobnd\")",
                "output": "'o'"
            },
            {
                "input": "get_closest_vowel(\"nzxphpwl\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"ewatt\")",
                "output": "'a'"
            },
            {
                "input": "get_closest_vowel(\"ufqt\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"fJBfZSo\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"leneu\")",
                "output": "'e'"
            },
            {
                "input": "get_closest_vowel(\"akfpd\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"mjha\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"ewmwa\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"fvoq\")",
                "output": "'o'"
            },
            {
                "input": "get_closest_vowel(\"fvpsdx\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"btazqrg\")",
                "output": "'a'"
            },
            {
                "input": "get_closest_vowel(\"zDdxS\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"yqd\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"rebqcy\")",
                "output": "'e'"
            },
            {
                "input": "get_closest_vowel(\"miNITNc\")",
                "output": "'I'"
            },
            {
                "input": "get_closest_vowel(\"qqIV\")",
                "output": "'I'"
            },
            {
                "input": "get_closest_vowel(\"ziTTVi\")",
                "output": "'i'"
            },
            {
                "input": "get_closest_vowel(\"slvlbltbj\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"moh\")",
                "output": "'o'"
            },
            {
                "input": "get_closest_vowel(\"ngvqt\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"jHHWPTONQ\")",
                "output": "'O'"
            },
            {
                "input": "get_closest_vowel(\"rnrucalo\")",
                "output": "'a'"
            },
            {
                "input": "get_closest_vowel(\"zlptf\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"tGFYIJD\")",
                "output": "'I'"
            },
            {
                "input": "get_closest_vowel(\"qhceuv\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"mGea\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"jwr\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"hphfdo\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"izhnynh\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"usxeqslh\")",
                "output": "'e'"
            },
            {
                "input": "get_closest_vowel(\"xzyoqy\")",
                "output": "'o'"
            },
            {
                "input": "get_closest_vowel(\"KxRfZv\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"yfin\")",
                "output": "'i'"
            },
            {
                "input": "get_closest_vowel(\"DBpemZx\")",
                "output": "'e'"
            },
            {
                "input": "get_closest_vowel(\"bqrdgn\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"EpyvaZNy\")",
                "output": "'a'"
            },
            {
                "input": "get_closest_vowel(\"vaylznipp\")",
                "output": "'i'"
            },
            {
                "input": "get_closest_vowel(\"IBDJnJR\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"IzAIgi\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"cpizmgbr\")",
                "output": "'i'"
            },
            {
                "input": "get_closest_vowel(\"arvowxo\")",
                "output": "'o'"
            },
            {
                "input": "get_closest_vowel(\"gwtghbzzs\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"ycr\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"RGdufA\")",
                "output": "'u'"
            },
            {
                "input": "get_closest_vowel(\"wmxdyhz\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"nai\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"asl\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"ehumjln\")",
                "output": "'u'"
            },
            {
                "input": "get_closest_vowel(\"zbakq\")",
                "output": "'a'"
            },
            {
                "input": "get_closest_vowel(\"KlVgMzEdK\")",
                "output": "'E'"
            },
            {
                "input": "get_closest_vowel(\"nohi\")",
                "output": "'o'"
            },
            {
                "input": "get_closest_vowel(\"wBPWktE\")",
                "output": "''"
            },
            {
                "input": "get_closest_vowel(\"BBZVid\")",
                "output": "'i'"
            },
            {
                "input": "get_closest_vowel(\"qloyeb\")",
                "output": "'e'"
            }
        ]
    },
    {
        "problem_description": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
        "ground truth": "def match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
        "instances": [
            {
                "input": "match_parens(('(', '(()())(('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('())', ')())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('()', '())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('((((', ')'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(', '()))()'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('()(', '(()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('()', '()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(['(())))', '(()())(('])",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('())', ')('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(()(())', ')'))",
                "output": "'Yes'"
            },
            {
                "input": "match_parens((')', '(()()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('((())', '(()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('((((', '()'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('()', '(()())(('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(['(', ')'])",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('(()(())', ')())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('())', '()('))",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('(()())((', ')'))",
                "output": "'No'"
            },
            {
                "input": "match_parens((')', '())())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('()(', '()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(())))', '(()(())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(['(()(())', '())())'])",
                "output": "'No'"
            },
            {
                "input": "match_parens((')(()', '(())))'))",
                "output": "'No'"
            },
            {
                "input": "match_parens((')(', '()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(()(())', '()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('())', ')'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('()', '(()(())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens((')', '(()(())'))",
                "output": "'Yes'"
            },
            {
                "input": "match_parens((')())', '()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('())())', ')'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(()(())', ')('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('())())', ')())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens((')(()', '())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(())))', '(())))'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('())())', ')(()'))",
                "output": "'No'"
            },
            {
                "input": "match_parens((')(', '(()()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens((')', '()('))",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('()))()', '())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(()(', ')(()'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(())))', '()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('())())', '(()('))",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('(()(())', '())'))",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('())())', '(()(())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('()(', ')'))",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('(()()(', ')(()'))",
                "output": "'No'"
            },
            {
                "input": "match_parens((')())', '())())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(()(', '(()())(('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('()(', '())'))",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('(()(())', '())())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(()())((', '(()(())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(['()(', ')'])",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('()(', '())())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(['(()(', '()))()'])",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('(())))', '((())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('())', '(()()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens([')', ')'])",
                "output": "'No'"
            },
            {
                "input": "match_parens(['((((', '((())'])",
                "output": "'No'"
            },
            {
                "input": "match_parens(('()(', '(()())(('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(())))', '(()()('))",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('(()()(', '())())'))",
                "output": "'Yes'"
            },
            {
                "input": "match_parens((')(', ')(()'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('())())', '(()()('))",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('()))()', '(()('))",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('())())', '()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens((')())', '(()()('))",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('((((', '(()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(()(', '(()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(()()(', '(())))'))",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('(()()(', '(()(())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('()', ')())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(['()', '())'])",
                "output": "'No'"
            },
            {
                "input": "match_parens(('()(', ')())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens((')', ')'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('())', '()'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(()()(', '(()()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens((')', '(())))'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(()(())', '(()()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens([')', '('])",
                "output": "'Yes'"
            },
            {
                "input": "match_parens(('(()(', '()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('())())', '()'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(()()(', '()('))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('((((', '(((('))",
                "output": "'No'"
            },
            {
                "input": "match_parens((')())', '(())))'))",
                "output": "'No'"
            },
            {
                "input": "match_parens((')())', ')())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('(', ')'))",
                "output": "'Yes'"
            },
            {
                "input": "match_parens([')())', '(()()('])",
                "output": "'Yes'"
            },
            {
                "input": "match_parens([')(()', '(()('])",
                "output": "'No'"
            },
            {
                "input": "match_parens(('()(', '(()(())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens(('())', '(((('))",
                "output": "'No'"
            },
            {
                "input": "match_parens((')())', '((())'))",
                "output": "'No'"
            },
            {
                "input": "match_parens((')())', '(((('))",
                "output": "'No'"
            }
        ]
    },
    {
        "problem_description": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
        "ground truth": "def maximum(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
        "instances": [
            {
                "input": "maximum([6, 7, 8, -20, 243, -398, 5], 3)",
                "output": "[7, 8, 243]"
            },
            {
                "input": "maximum([3, 6, 2, -19, 243, -396, 4], 1)",
                "output": "[243]"
            },
            {
                "input": "maximum([6, 5, 2, -10], 5)",
                "output": "[-10, 2, 5, 6]"
            },
            {
                "input": "maximum([-3, 1, 2], 4)",
                "output": "[-3, 1, 2]"
            },
            {
                "input": "maximum([118, -119, 17, 4, 1, 1, -7], 2)",
                "output": "[17, 118]"
            },
            {
                "input": "maximum([-10, 10], 3)",
                "output": "[-10, 10]"
            },
            {
                "input": "maximum([6, 1, 3, -4], 6)",
                "output": "[-4, 1, 3, 6]"
            },
            {
                "input": "maximum([-2, 7, 4, 5, 0, 0, 4], 3)",
                "output": "[4, 5, 7]"
            },
            {
                "input": "maximum([127, -127, 21, 5, 3, 3, -2], 8)",
                "output": "[-127, -2, 3, 3, 5, 21, 127]"
            },
            {
                "input": "maximum([-7, -8, 6], 1)",
                "output": "[6]"
            },
            {
                "input": "maximum([9, -3, 1], 3)",
                "output": "[-3, 1, 9]"
            },
            {
                "input": "maximum([7, 20, 1, 4, -9, -13, 1], 4)",
                "output": "[1, 4, 7, 20]"
            },
            {
                "input": "maximum([-5, -6, 10], 1)",
                "output": "[10]"
            },
            {
                "input": "maximum([-6, 7], 2)",
                "output": "[-6, 7]"
            },
            {
                "input": "maximum([3, 1, 2, 7, 8, -11], 5)",
                "output": "[1, 2, 3, 7, 8]"
            },
            {
                "input": "maximum([5, 5, 4, -12], 4)",
                "output": "[-12, 4, 5, 5]"
            },
            {
                "input": "maximum([-1, 4, 7, 3, 8, -9], 7)",
                "output": "[-9, -1, 3, 4, 7, 8]"
            },
            {
                "input": "maximum([-4, 6, 4, 2, 4, -6, 5], 4)",
                "output": "[4, 4, 5, 6]"
            },
            {
                "input": "maximum([3, 19, 4, 5, -13, -8, 5], 4)",
                "output": "[4, 5, 5, 19]"
            },
            {
                "input": "maximum([-1, 3, 4, 7, 2, -3, 6], 1)",
                "output": "[7]"
            },
            {
                "input": "maximum([-121, 15, 3, 4, 7, -5], 3)",
                "output": "[4, 7, 15]"
            },
            {
                "input": "maximum([-7, 10], 7)",
                "output": "[-7, 10]"
            },
            {
                "input": "maximum([4, -9], 4)",
                "output": "[-9, 4]"
            },
            {
                "input": "maximum([123, -121, 22, 4, 2, 2, -6], 1)",
                "output": "[123]"
            },
            {
                "input": "maximum([7, -9, 7], 7)",
                "output": "[-9, 7, 7]"
            },
            {
                "input": "maximum([4, -4, 4], 2)",
                "output": "[4, 4]"
            },
            {
                "input": "maximum([-126, 15, 4, 3, 4, -4], 3)",
                "output": "[4, 4, 15]"
            },
            {
                "input": "maximum([10, 12, 1, 2, -11, -6, 2], 4)",
                "output": "[2, 2, 10, 12]"
            },
            {
                "input": "maximum([3, 6, 4, -26, 246, -403, 5], 5)",
                "output": "[3, 4, 5, 6, 246]"
            },
            {
                "input": "maximum([5, 1, 4], 2)",
                "output": "[4, 5]"
            },
            {
                "input": "maximum([5, 3, 5, -6], 3)",
                "output": "[3, 5, 5]"
            },
            {
                "input": "maximum([-5, 10], 6)",
                "output": "[-5, 10]"
            },
            {
                "input": "maximum([3, 13, 3, 4, -9, -11, 3], 2)",
                "output": "[4, 13]"
            },
            {
                "input": "maximum([-3, -4, 5], 3)",
                "output": "[-4, -3, 5]"
            },
            {
                "input": "maximum([-1, 2, 1, 2, -5, -5, 2], 3)",
                "output": "[2, 2, 2]"
            },
            {
                "input": "maximum([-7, 1, 4], 5)",
                "output": "[-7, 1, 4]"
            },
            {
                "input": "maximum([-125, 18, 3, 1, 5, -1], 1)",
                "output": "[18]"
            },
            {
                "input": "maximum([5, -2, 1], 6)",
                "output": "[-2, 1, 5]"
            },
            {
                "input": "maximum([8, -2, 4], 3)",
                "output": "[-2, 4, 8]"
            },
            {
                "input": "maximum([10, 12, 2, 1, -17, -3, 5], 4)",
                "output": "[2, 5, 10, 12]"
            },
            {
                "input": "maximum([119, -119, 21, 2, 4, 4, -3], 3)",
                "output": "[4, 21, 119]"
            },
            {
                "input": "maximum([7, 12, 4, 4, -16, -7, 3], 10)",
                "output": "[-16, -7, 3, 4, 4, 7, 12]"
            },
            {
                "input": "maximum([4, 5, 5, -22, 241, -401, 1], 1)",
                "output": "[241]"
            },
            {
                "input": "maximum([-2, 1, 1], 1)",
                "output": "[1]"
            },
            {
                "input": "maximum([123, -123, 20, 0 , 1, 2, -3], 3)",
                "output": "[2, 20, 123]"
            },
            {
                "input": "maximum([-119, 16, 5, 2, 3, -6], 8)",
                "output": "[-119, -6, 2, 3, 5, 16]"
            },
            {
                "input": "maximum([4, 6, 5, -18, 248, -403, 5], 3)",
                "output": "[5, 6, 248]"
            },
            {
                "input": "maximum([-1, 2, 1, 5, 6, -13], 2)",
                "output": "[5, 6]"
            },
            {
                "input": "maximum([2, 3, 5, 3, 1, -15], 3)",
                "output": "[3, 3, 5]"
            },
            {
                "input": "maximum([10, 16, 5, 2, -12, -3, 1], 7)",
                "output": "[-12, -3, 1, 2, 5, 10, 16]"
            },
            {
                "input": "maximum([-2, -7, 4], 4)",
                "output": "[-7, -2, 4]"
            },
            {
                "input": "maximum([5, 2, 5, -11], 5)",
                "output": "[-11, 2, 5, 5]"
            },
            {
                "input": "maximum([-119, 24, 5, 4, 1, -8], 9)",
                "output": "[-119, -8, 1, 4, 5, 24]"
            },
            {
                "input": "maximum([123, -128, 20, 4, 3, 2, 1], 6)",
                "output": "[1, 2, 3, 4, 20, 123]"
            },
            {
                "input": "maximum([6, 5, 1, -19, 242, -403, 5], 3)",
                "output": "[5, 6, 242]"
            },
            {
                "input": "maximum([-1, -2, 3], 3)",
                "output": "[-2, -1, 3]"
            },
            {
                "input": "maximum([3, 3, 2, -27, 243, -396, 5], 3)",
                "output": "[3, 5, 243]"
            },
            {
                "input": "maximum([-5, 3, 2, 8, 3, -10], 1)",
                "output": "[8]"
            },
            {
                "input": "maximum([1, -4, 2], 7)",
                "output": "[-4, 1, 2]"
            },
            {
                "input": "maximum([4, -4], 2)",
                "output": "[-4, 4]"
            },
            {
                "input": "maximum([8, 1, 2], 4)",
                "output": "[1, 2, 8]"
            },
            {
                "input": "maximum([8, -4], 7)",
                "output": "[-4, 8]"
            },
            {
                "input": "maximum([2, 13, 4, 6, -17, -3, 1], 7)",
                "output": "[-17, -3, 1, 2, 4, 6, 13]"
            },
            {
                "input": "maximum([0, 5, 2, 7, 2, -15], 3)",
                "output": "[2, 5, 7]"
            },
            {
                "input": "maximum([-6, -2, 5], 2)",
                "output": "[-2, 5]"
            },
            {
                "input": "maximum([-3, 2, 1, 2, -1, -2, 1], 1)",
                "output": "[2]"
            },
            {
                "input": "maximum([-1, 0, 2], 1)",
                "output": "[2]"
            },
            {
                "input": "maximum([8, -6], 7)",
                "output": "[-6, 8]"
            },
            {
                "input": "maximum([1, 4, 4, -9], 3)",
                "output": "[1, 4, 4]"
            },
            {
                "input": "maximum([128, -127, 25, 1, 3, 2, -8], 5)",
                "output": "[1, 2, 3, 25, 128]"
            },
            {
                "input": "maximum([6, -1], 5)",
                "output": "[-1, 6]"
            },
            {
                "input": "maximum([4, 5, 8, -28, 245, -402, 2], 4)",
                "output": "[4, 5, 8, 245]"
            },
            {
                "input": "maximum([3, 1, 1, -19, 248, -404, 5], 1)",
                "output": "[248]"
            },
            {
                "input": "maximum([1, 3, 3, 2, -2, -5, 5], 2)",
                "output": "[3, 5]"
            },
            {
                "input": "maximum([1, 0, 5, -7], 1)",
                "output": "[5]"
            },
            {
                "input": "maximum([9, -9], 1)",
                "output": "[9]"
            },
            {
                "input": "maximum([1, 1], 4)",
                "output": "[1, 1]"
            },
            {
                "input": "maximum([-8, 5], 6)",
                "output": "[-8, 5]"
            },
            {
                "input": "maximum([2, 2, 10, -3], 1)",
                "output": "[10]"
            },
            {
                "input": "maximum([-13, 11], 2)",
                "output": "[-13, 11]"
            },
            {
                "input": "maximum([2, 1, 9], 1)",
                "output": "[9]"
            },
            {
                "input": "maximum([5, 3, 2, -9], 5)",
                "output": "[-9, 2, 3, 5]"
            },
            {
                "input": "maximum([3, 15, 5, 4, -16, -10, 4], 11)",
                "output": "[-16, -10, 3, 4, 4, 5, 15]"
            },
            {
                "input": "maximum([6, 0, 8], 2)",
                "output": "[6, 8]"
            },
            {
                "input": "maximum([0, -5, 10], 1)",
                "output": "[10]"
            },
            {
                "input": "maximum([2, 6, 6, 3, 4, 3, 1], 2)",
                "output": "[6, 6]"
            },
            {
                "input": "maximum([-4, 4, 2, 10, 2, -5], 5)",
                "output": "[-4, 2, 2, 4, 10]"
            },
            {
                "input": "maximum([-9, 11], 3)",
                "output": "[-9, 11]"
            },
            {
                "input": "maximum([127, -124, 16, 1, 5, 7, -6], 7)",
                "output": "[-124, -6, 1, 5, 7, 16, 127]"
            },
            {
                "input": "maximum([-123, 24, 3, 4, 2, -7], 6)",
                "output": "[-123, -7, 2, 3, 4, 24]"
            },
            {
                "input": "maximum([119, -118, 15, 3, 3, 3, -8], 1)",
                "output": "[119]"
            },
            {
                "input": "maximum([128, -128, 22, 2, 3, 1, -5], 6)",
                "output": "[-5, 1, 2, 3, 22, 128]"
            },
            {
                "input": "maximum([1, 12, 2, 1, -11, -4, 5], 5)",
                "output": "[1, 1, 2, 5, 12]"
            },
            {
                "input": "maximum([-2, 5, 5, 5, -1, 2, 3], 6)",
                "output": "[-1, 2, 3, 5, 5, 5]"
            },
            {
                "input": "maximum([3, 2, 1, -9], 6)",
                "output": "[-9, 1, 2, 3]"
            },
            {
                "input": "maximum([122, -124, 25, 1, 1, 1, -2], 2)",
                "output": "[25, 122]"
            },
            {
                "input": "maximum([1, 1, 2, -2], 2)",
                "output": "[1, 2]"
            },
            {
                "input": "maximum([-11, 5], 4)",
                "output": "[-11, 5]"
            },
            {
                "input": "maximum([-12, 8], 2)",
                "output": "[-12, 8]"
            },
            {
                "input": "maximum([6, 6, 2, -24, 240, -402, 4], 1)",
                "output": "[240]"
            },
            {
                "input": "maximum([6, 1, 3, -26, 247, -400, 1], 1)",
                "output": "[247]"
            },
            {
                "input": "maximum([125, -119, 24, 2, 3, 4, -4], 6)",
                "output": "[-4, 2, 3, 4, 24, 125]"
            },
            {
                "input": "maximum([0, 1, 2, 5, 1, -9], 2)",
                "output": "[2, 5]"
            },
            {
                "input": "maximum([7, -2], 7)",
                "output": "[-2, 7]"
            },
            {
                "input": "maximum([4, 1, 9, -3], 3)",
                "output": "[1, 4, 9]"
            },
            {
                "input": "maximum([-126, 22, 2, 2, 5, -3], 3)",
                "output": "[2, 5, 22]"
            },
            {
                "input": "maximum([-14, 6], 4)",
                "output": "[-14, 6]"
            },
            {
                "input": "maximum([-1, 0, 2, 5, 3, -10], 2)",
                "output": "[3, 5]"
            },
            {
                "input": "maximum([4, 3, 4, 5, 1, -10], 1)",
                "output": "[5]"
            },
            {
                "input": "maximum([2, 5, 1, 2, -6, -2, 5], 6)",
                "output": "[-2, 1, 2, 2, 5, 5]"
            },
            {
                "input": "maximum([-120, 25, 1, 5, 6, -3], 7)",
                "output": "[-120, -3, 1, 5, 6, 25]"
            },
            {
                "input": "maximum([-3, 6, 3, 1, 0, -4, 6], 5)",
                "output": "[0, 1, 3, 6, 6]"
            },
            {
                "input": "maximum([2, 1, 1], 1)",
                "output": "[2]"
            },
            {
                "input": "maximum([-122, 16, 1, 4, 2, 1], 6)",
                "output": "[-122, 1, 1, 2, 4, 16]"
            },
            {
                "input": "maximum([-123, 20, 0 , 1, 2, -3], 4)",
                "output": "[0, 1, 2, 20]"
            },
            {
                "input": "maximum([-1, 2, 1, 1, 1, -5], 1)",
                "output": "[2]"
            },
            {
                "input": "maximum([1, 2, 3, -23, 243, -400, 0], 0)",
                "output": "[]"
            },
            {
                "input": "maximum([5, 15, 0, 3, -13, -8, 0], 7)",
                "output": "[-13, -8, 0, 0, 3, 5, 15]"
            },
            {
                "input": "maximum([-123, 19, 4, 5, 6, -2], 3)",
                "output": "[5, 6, 19]"
            },
            {
                "input": "maximum([-13, 13], 7)",
                "output": "[-13, 13]"
            },
            {
                "input": "maximum([2, -9], 4)",
                "output": "[-9, 2]"
            },
            {
                "input": "maximum([0, 3, 6, 2, -1, 3, 4], 4)",
                "output": "[3, 3, 4, 6]"
            },
            {
                "input": "maximum([119, -119, 24, 5, 5, 7, -4], 6)",
                "output": "[-4, 5, 5, 7, 24, 119]"
            },
            {
                "input": "maximum([-2, 2, 5, 2, 0, 2, 2], 4)",
                "output": "[2, 2, 2, 5]"
            },
            {
                "input": "maximum([8, 15, 1, 4, -14, -5, 2], 6)",
                "output": "[-5, 1, 2, 4, 8, 15]"
            },
            {
                "input": "maximum([6, 0, 5], 4)",
                "output": "[0, 5, 6]"
            },
            {
                "input": "maximum([1, 4, 4, 1, 2, -14], 5)",
                "output": "[1, 1, 2, 4, 4]"
            },
            {
                "input": "maximum([-120, 20, 2, 5, 1, -6], 7)",
                "output": "[-120, -6, 1, 2, 5, 20]"
            },
            {
                "input": "maximum([4, -6, 8], 4)",
                "output": "[-6, 4, 8]"
            },
            {
                "input": "maximum([5, 3, 7, -2], 3)",
                "output": "[3, 5, 7]"
            },
            {
                "input": "maximum([3, -4, 7], 3)",
                "output": "[-4, 3, 7]"
            },
            {
                "input": "maximum([-123, 23, 1, 3, 3, 1], 9)",
                "output": "[-123, 1, 1, 3, 3, 23]"
            },
            {
                "input": "maximum([1, -6], 1)",
                "output": "[1]"
            },
            {
                "input": "maximum([-1, 5, 3, 6, -2, -7, 6], 3)",
                "output": "[5, 6, 6]"
            },
            {
                "input": "maximum([-3, 1, 7, 7, 4, -12], 7)",
                "output": "[-12, -3, 1, 4, 7, 7]"
            },
            {
                "input": "maximum([3, -9, 1], 4)",
                "output": "[-9, 1, 3]"
            },
            {
                "input": "maximum([2, 1], 1)",
                "output": "[2]"
            },
            {
                "input": "maximum([4, 3, 4, -20, 247, -400, 4], 4)",
                "output": "[4, 4, 4, 247]"
            },
            {
                "input": "maximum([-9, 13], 3)",
                "output": "[-9, 13]"
            },
            {
                "input": "maximum([8, 13, 4, 2, -11, -4, 1], 11)",
                "output": "[-11, -4, 1, 2, 4, 8, 13]"
            },
            {
                "input": "maximum([6, -5], 2)",
                "output": "[-5, 6]"
            }
        ]
    },
    {
        "problem_description": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n",
        "ground truth": "def solution(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
        "instances": [
            {
                "input": "solution([7, 3, 6, 8, 4])",
                "output": "7"
            },
            {
                "input": "solution([8, 4, 8, 2, 1])",
                "output": "1"
            },
            {
                "input": "solution([5, 3, 10])",
                "output": "5"
            },
            {
                "input": "solution([3, 3, 3, 3, 3])",
                "output": "9"
            },
            {
                "input": "solution([29, 18, 20, 323])",
                "output": "29"
            },
            {
                "input": "solution([31, 13, 20, 323])",
                "output": "31"
            },
            {
                "input": "solution([8, 6, 12, 5])",
                "output": "0"
            },
            {
                "input": "solution([7, 1, 7, 1, 4])",
                "output": "14"
            },
            {
                "input": "solution([7, 17, 1, 4])",
                "output": "8"
            },
            {
                "input": "solution([3, 9, 4, 7])",
                "output": "3"
            },
            {
                "input": "solution([5, 3, 8, 1, 6])",
                "output": "5"
            },
            {
                "input": "solution([30, 14, 27, 319])",
                "output": "27"
            },
            {
                "input": "solution([2, 4, 8])",
                "output": "0"
            },
            {
                "input": "solution([4, 4, 8, 2])",
                "output": "0"
            },
            {
                "input": "solution([4, 3, 11])",
                "output": "11"
            },
            {
                "input": "solution([5, 8, 12])",
                "output": "5"
            },
            {
                "input": "solution([4, 8, 11])",
                "output": "11"
            },
            {
                "input": "solution([31, 11, 21, 27])",
                "output": "52"
            },
            {
                "input": "solution([2, 12, 4, 7])",
                "output": "0"
            },
            {
                "input": "solution([4, 7])",
                "output": "0"
            },
            {
                "input": "solution([6, 6, 3, 7, 3])",
                "output": "6"
            },
            {
                "input": "solution([6, 11, 4, 9])",
                "output": "0"
            },
            {
                "input": "solution([35, 16, 28, 30])",
                "output": "35"
            },
            {
                "input": "solution([4, 3, 5, 6, 4])",
                "output": "5"
            },
            {
                "input": "solution([1, 4])",
                "output": "1"
            },
            {
                "input": "solution([30, 8, 26, 325])",
                "output": "0"
            },
            {
                "input": "solution([10, 12, 4, 1])",
                "output": "0"
            },
            {
                "input": "solution([10, 7])",
                "output": "0"
            },
            {
                "input": "solution([27, 13, 24, 35])",
                "output": "27"
            },
            {
                "input": "solution([8, 9, 3, 8])",
                "output": "3"
            },
            {
                "input": "solution([7, 2, 13])",
                "output": "20"
            },
            {
                "input": "solution([5, 12, 3, 11])",
                "output": "8"
            },
            {
                "input": "solution([3, 12, 7, 14])",
                "output": "10"
            },
            {
                "input": "solution([7, 11, 6, 4])",
                "output": "7"
            },
            {
                "input": "solution([5, 4, 3, 1, 7])",
                "output": "15"
            },
            {
                "input": "solution([26, 11, 23, 319])",
                "output": "23"
            },
            {
                "input": "solution([8, 4, 5, 6, 4])",
                "output": "5"
            },
            {
                "input": "solution([25, 17, 22, 29])",
                "output": "25"
            },
            {
                "input": "solution([7, 7, 3])",
                "output": "10"
            },
            {
                "input": "solution([27, 18, 21, 32])",
                "output": "48"
            },
            {
                "input": "solution([29, 10, 27, 323])",
                "output": "56"
            },
            {
                "input": "solution([7, 4, 12])",
                "output": "7"
            },
            {
                "input": "solution([1, 9])",
                "output": "1"
            },
            {
                "input": "solution([4, 4, 6])",
                "output": "0"
            },
            {
                "input": "solution([7, 3, 2, 4])",
                "output": "7"
            },
            {
                "input": "solution([26, 12, 18, 31])",
                "output": "0"
            },
            {
                "input": "solution([1, 8, 8, 1, 1])",
                "output": "2"
            },
            {
                "input": "solution([7, 4, 5])",
                "output": "12"
            },
            {
                "input": "solution([6, 13, 11, 6])",
                "output": "11"
            },
            {
                "input": "solution([26, 14, 28, 324])",
                "output": "0"
            },
            {
                "input": "solution([3, 13, 6, 7])",
                "output": "3"
            },
            {
                "input": "solution([4, 8])",
                "output": "0"
            },
            {
                "input": "solution([9, 4, 8, 3])",
                "output": "9"
            },
            {
                "input": "solution([34, 13, 23, 36])",
                "output": "23"
            },
            {
                "input": "solution([5, 12, 6, 1])",
                "output": "5"
            },
            {
                "input": "solution([6, 2, 13])",
                "output": "13"
            },
            {
                "input": "solution([2, 4, 13])",
                "output": "13"
            },
            {
                "input": "solution([6, 4, 4])",
                "output": "0"
            },
            {
                "input": "solution([8, 8])",
                "output": "0"
            },
            {
                "input": "solution([10, 9])",
                "output": "0"
            },
            {
                "input": "solution([7, 6, 5, 5])",
                "output": "12"
            },
            {
                "input": "solution([29, 10, 28, 37])",
                "output": "29"
            },
            {
                "input": "solution([6, 3, 1, 1, 7])",
                "output": "8"
            },
            {
                "input": "solution([31, 8, 26, 34])",
                "output": "31"
            },
            {
                "input": "solution([5, 9])",
                "output": "5"
            },
            {
                "input": "solution([9, 9, 9, 2])",
                "output": "18"
            },
            {
                "input": "solution([30, 13, 23, 32])",
                "output": "23"
            },
            {
                "input": "solution([3, 8, 10, 5])",
                "output": "3"
            },
            {
                "input": "solution([1, 11])",
                "output": "1"
            },
            {
                "input": "solution([1, 10])",
                "output": "1"
            },
            {
                "input": "solution([35, 14, 19, 323])",
                "output": "54"
            },
            {
                "input": "solution([1, 3, 3, 6])",
                "output": "4"
            },
            {
                "input": "solution([30, 12, 18, 27])",
                "output": "0"
            },
            {
                "input": "solution([5, 16, 3, 12])",
                "output": "8"
            },
            {
                "input": "solution([32, 14, 20, 35])",
                "output": "0"
            },
            {
                "input": "solution([33, 16, 28, 27])",
                "output": "33"
            },
            {
                "input": "solution([5, 13, 3, 9])",
                "output": "8"
            },
            {
                "input": "solution([29, 17, 25, 34])",
                "output": "54"
            },
            {
                "input": "solution([32, 17, 27, 321])",
                "output": "27"
            },
            {
                "input": "solution([7, 15, 1, 10])",
                "output": "8"
            },
            {
                "input": "solution([9, 14])",
                "output": "9"
            },
            {
                "input": "solution([3, 3, 2, 1, 3])",
                "output": "6"
            },
            {
                "input": "solution([6, 3, 3, 3, 7])",
                "output": "10"
            },
            {
                "input": "solution([31, 17, 28, 318])",
                "output": "31"
            },
            {
                "input": "solution([7, 16, 7, 9])",
                "output": "14"
            },
            {
                "input": "solution([1, 13, 9, 4])",
                "output": "10"
            },
            {
                "input": "solution([4, 15, 5, 9])",
                "output": "5"
            },
            {
                "input": "solution([35, 18, 24, 318])",
                "output": "35"
            },
            {
                "input": "solution([34, 16, 22, 323])",
                "output": "0"
            },
            {
                "input": "solution([1, 7, 9])",
                "output": "10"
            },
            {
                "input": "solution([7, 9, 4])",
                "output": "7"
            },
            {
                "input": "solution([8, 13, 10, 1])",
                "output": "0"
            },
            {
                "input": "solution([5, 8, 7, 1])",
                "output": "12"
            },
            {
                "input": "solution([29, 17, 18, 34])",
                "output": "29"
            },
            {
                "input": "solution([2, 9, 10])",
                "output": "0"
            },
            {
                "input": "solution([29, 11, 18, 30])",
                "output": "29"
            },
            {
                "input": "solution([10, 5])",
                "output": "0"
            },
            {
                "input": "solution([6, 6])",
                "output": "0"
            },
            {
                "input": "solution([29, 9, 22, 322])",
                "output": "29"
            },
            {
                "input": "solution([2, 15, 5, 9])",
                "output": "5"
            },
            {
                "input": "solution([33, 10, 20, 37])",
                "output": "33"
            },
            {
                "input": "solution([1, 3, 2, 3, 8])",
                "output": "1"
            },
            {
                "input": "solution([1, 7, 3, 6])",
                "output": "4"
            },
            {
                "input": "solution([6, 10])",
                "output": "0"
            },
            {
                "input": "solution([30, 13, 24, 321])",
                "output": "0"
            },
            {
                "input": "solution([5, 6, 7, 1])",
                "output": "12"
            },
            {
                "input": "solution([3, 5])",
                "output": "3"
            },
            {
                "input": "solution([1, 16, 4, 8])",
                "output": "1"
            },
            {
                "input": "solution([3, 6])",
                "output": "3"
            },
            {
                "input": "solution([7, 5, 9])",
                "output": "16"
            },
            {
                "input": "solution([5, 3, 1, 1, 6])",
                "output": "6"
            },
            {
                "input": "solution([1, 5])",
                "output": "1"
            },
            {
                "input": "solution([2, 12, 7, 9])",
                "output": "7"
            },
            {
                "input": "solution([7, 9, 7, 11])",
                "output": "14"
            },
            {
                "input": "solution([26, 11, 29, 325])",
                "output": "29"
            },
            {
                "input": "solution([8, 7, 7, 7, 2])",
                "output": "7"
            },
            {
                "input": "solution([6, 7])",
                "output": "0"
            },
            {
                "input": "solution([2, 10, 7, 6])",
                "output": "7"
            },
            {
                "input": "solution([10, 7, 6, 4])",
                "output": "0"
            },
            {
                "input": "solution([7, 6, 13])",
                "output": "20"
            },
            {
                "input": "solution([29, 16, 21, 325])",
                "output": "50"
            },
            {
                "input": "solution([29, 8, 29, 319])",
                "output": "58"
            },
            {
                "input": "solution([34, 16, 24, 326])",
                "output": "0"
            },
            {
                "input": "solution([3, 10, 12, 2])",
                "output": "3"
            },
            {
                "input": "solution([2, 2, 4, 2, 7])",
                "output": "7"
            },
            {
                "input": "solution([9, 5])",
                "output": "9"
            },
            {
                "input": "solution([32, 13, 28, 325])",
                "output": "0"
            },
            {
                "input": "solution([1, 2, 4, 1, 8])",
                "output": "1"
            },
            {
                "input": "solution([27, 14, 21, 29])",
                "output": "48"
            },
            {
                "input": "solution([32, 17, 22, 31])",
                "output": "0"
            },
            {
                "input": "solution([4, 2, 4, 1, 6])",
                "output": "0"
            },
            {
                "input": "solution([4, 8, 13])",
                "output": "13"
            }
        ]
    },
    {
        "problem_description": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n",
        "ground truth": "def add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
        "instances": [
            {
                "input": "add_elements([1], 3)",
                "output": "1"
            },
            {
                "input": "add_elements([114, 125, 6, 3912, 6, 9], 6)",
                "output": "21"
            },
            {
                "input": "add_elements([111,121,3,4000,5,6], 2)",
                "output": "0"
            },
            {
                "input": "add_elements([114, 16, 3, 4584, 10, 10, 2, 6, 12], 2)",
                "output": "16"
            },
            {
                "input": "add_elements([114, 118, 1, 4249, 5, 5], 5)",
                "output": "6"
            },
            {
                "input": "add_elements([16, 22, 1, 86, 10, 8, 7, 4, 10], 4)",
                "output": "125"
            },
            {
                "input": "add_elements([11, 21, 8, 95, 3, 1, 6, 11, 13], 4)",
                "output": "135"
            },
            {
                "input": "add_elements([111, 119, 8, 3568, 6, 8], 5)",
                "output": "14"
            },
            {
                "input": "add_elements([106, 125, 5, 3265, 3, 9], 7)",
                "output": "17"
            },
            {
                "input": "add_elements([10, 20, 5, 91, 1, 11, 3, 4, 11], 9)",
                "output": "156"
            },
            {
                "input": "add_elements([112, 24, 8, 3223, 5, 4, 12, 11, 8], 6)",
                "output": "41"
            },
            {
                "input": "add_elements([115, 24, 6, 3856, 5, 1, 4, 12, 14], 9)",
                "output": "66"
            },
            {
                "input": "add_elements([4, 2, 2, 42, 57, 81, 86, 91, 94], 4)",
                "output": "50"
            },
            {
                "input": "add_elements([6, 26, 5, 91, 6, 6, 9, 4, 4], 1)",
                "output": "6"
            },
            {
                "input": "add_elements([3, -5, -6, 44, 58, 72, 90, 85, 102], 7)",
                "output": "256"
            },
            {
                "input": "add_elements([10, 19, 7, 91, 5, 8, 4, 7, 11], 8)",
                "output": "151"
            },
            {
                "input": "add_elements([2, -5, -3, 37, 59, 74, 87, 83, 97], 1)",
                "output": "2"
            },
            {
                "input": "add_elements([111, 118, 7, 3502, 6, 4], 4)",
                "output": "7"
            },
            {
                "input": "add_elements([5], 6)",
                "output": "5"
            },
            {
                "input": "add_elements([14, 25, 2, 87, 7, 3, 5, 3, 4], 1)",
                "output": "14"
            },
            {
                "input": "add_elements([3], 1)",
                "output": "3"
            },
            {
                "input": "add_elements([113, 23, 5, 3725, 1, 1, 2, 9, 6], 8)",
                "output": "41"
            },
            {
                "input": "add_elements([8, 26, 8, 93, 2, 2, 3, 11, 9], 1)",
                "output": "8"
            },
            {
                "input": "add_elements([106, 16, 4, 3953, 2, 2, 11, 3, 14], 7)",
                "output": "35"
            },
            {
                "input": "add_elements([109, 117, 7, 3709, 10, 3], 3)",
                "output": "7"
            },
            {
                "input": "add_elements([113, 121, 5, 3008, 8, 7], 6)",
                "output": "20"
            },
            {
                "input": "add_elements([8, 21, 1, 91, 5, 10, 9, 10, 6], 7)",
                "output": "145"
            },
            {
                "input": "add_elements([115, 17, 2, 4311, 1, 9, 5, 9, 14], 3)",
                "output": "19"
            },
            {
                "input": "add_elements([1], 6)",
                "output": "1"
            },
            {
                "input": "add_elements([114, 124, 1, 3460, 8, 3], 2)",
                "output": "0"
            },
            {
                "input": "add_elements([3, -5, -6, 37, 61, 74, 82, 87, 102], 4)",
                "output": "29"
            },
            {
                "input": "add_elements([2, -1, 2, 40, 57, 73, 91, 83, 97], 5)",
                "output": "100"
            },
            {
                "input": "add_elements([107, 17, 7, 3610, 4, 1, 10, 5, 12], 1)",
                "output": "0"
            },
            {
                "input": "add_elements([6, 3, -2, 39, 58, 77, 87, 89, 94], 6)",
                "output": "181"
            },
            {
                "input": "add_elements([3], 6)",
                "output": "3"
            },
            {
                "input": "add_elements([113, 126, 2, 4104, 10, 5], 2)",
                "output": "0"
            },
            {
                "input": "add_elements([11, 19, 8, 92, 9, 8, 3, 3, 9], 5)",
                "output": "139"
            },
            {
                "input": "add_elements([1, 3, -4, 37, 59, 75, 92, 92, 102], 2)",
                "output": "4"
            },
            {
                "input": "add_elements([11, 24, 1, 92, 1, 4, 8, 13, 12], 1)",
                "output": "11"
            },
            {
                "input": "add_elements([15, 19, 5, 91, 6, 2, 3, 4, 13], 9)",
                "output": "158"
            },
            {
                "input": "add_elements([107, 124, 8, 4426, 5, 9], 6)",
                "output": "22"
            },
            {
                "input": "add_elements([113, 20, 1, 3134, 4, 5, 10, 10, 14], 4)",
                "output": "21"
            },
            {
                "input": "add_elements([16, 22, 4, 91, 8, 7, 4, 11, 11], 2)",
                "output": "38"
            },
            {
                "input": "add_elements([111, 116, 5, 4847, 10, 5], 6)",
                "output": "20"
            },
            {
                "input": "add_elements([106, 117, 3, 3468, 10, 3], 6)",
                "output": "16"
            },
            {
                "input": "add_elements([9, 19, 2, 92, 8, 9, 8, 4, 10], 8)",
                "output": "151"
            },
            {
                "input": "add_elements([110, 16, 5, 4445, 7, 4, 6, 9, 12], 8)",
                "output": "47"
            },
            {
                "input": "add_elements([14, 26, 5, 88, 8, 7, 6, 6, 4], 4)",
                "output": "133"
            },
            {
                "input": "add_elements([6, 1, -1, 46, 60, 80, 92, 85, 100], 6)",
                "output": "192"
            },
            {
                "input": "add_elements([14, 20, 7, 93, 5, 7, 11, 11, 6], 6)",
                "output": "146"
            },
            {
                "input": "add_elements([3, -2, -8, 39, 56, 76, 84, 85, 101], 5)",
                "output": "88"
            },
            {
                "input": "add_elements([107, 118, 5, 4283, 10, 8], 4)",
                "output": "5"
            },
            {
                "input": "add_elements([106, 121, 3, 3648, 8, 3], 2)",
                "output": "0"
            },
            {
                "input": "add_elements([6], 5)",
                "output": "6"
            },
            {
                "input": "add_elements([111, 118, 3, 3448, 7, 8], 1)",
                "output": "0"
            },
            {
                "input": "add_elements([4], 2)",
                "output": "4"
            },
            {
                "input": "add_elements([10, 19, 5, 94, 4, 5, 9, 4, 6], 7)",
                "output": "146"
            },
            {
                "input": "add_elements([111, 23, 1, 3668, 1, 9, 4, 7, 6], 9)",
                "output": "51"
            },
            {
                "input": "add_elements([3, -7, -7, 38, 61, 80, 92, 86, 95], 2)",
                "output": "-4"
            },
            {
                "input": "add_elements([6, 1, -3, 44, 59, 74, 86, 84, 95], 1)",
                "output": "6"
            },
            {
                "input": "add_elements([2, -1, -4, 44, 60, 74, 91, 89, 101], 3)",
                "output": "-3"
            },
            {
                "input": "add_elements([1,-2,-3,41,57,76,87,88,99], 3)",
                "output": "-4"
            },
            {
                "input": "add_elements([116, 18, 5, 3825, 7, 4, 5, 3, 12], 8)",
                "output": "42"
            },
            {
                "input": "add_elements([15, 19, 1, 85, 5, 1, 10, 5, 12], 7)",
                "output": "136"
            },
            {
                "input": "add_elements([13, 18, 4, 92, 8, 2, 8, 6, 5], 5)",
                "output": "135"
            },
            {
                "input": "add_elements([10, 23, 2, 94, 5, 3, 11, 8, 8], 6)",
                "output": "137"
            },
            {
                "input": "add_elements([107, 22, 1, 3540, 4, 1, 5, 7, 14], 7)",
                "output": "33"
            },
            {
                "input": "add_elements([115, 122, 6, 4698, 10, 7], 5)",
                "output": "16"
            },
            {
                "input": "add_elements([5], 1)",
                "output": "5"
            },
            {
                "input": "add_elements([111, 21, 6, 3469, 8, 7, 8, 10, 13], 2)",
                "output": "21"
            },
            {
                "input": "add_elements([115, 18, 4, 3479, 9, 9, 11, 10, 5], 6)",
                "output": "40"
            },
            {
                "input": "add_elements([2, -1, -3, 37, 62, 77, 91, 89, 103], 7)",
                "output": "265"
            },
            {
                "input": "add_elements([110, 20, 3, 4098, 10, 6, 6, 11, 8], 5)",
                "output": "33"
            },
            {
                "input": "add_elements([3], 4)",
                "output": "3"
            },
            {
                "input": "add_elements([116, 19, 2, 3934, 3, 5, 6, 13, 14], 6)",
                "output": "29"
            },
            {
                "input": "add_elements([15, 19, 3, 94, 9, 11, 4, 11, 11], 9)",
                "output": "177"
            },
            {
                "input": "add_elements([110, 125, 4, 3428, 1, 4], 7)",
                "output": "9"
            },
            {
                "input": "add_elements([107, 120, 6, 4699, 7, 11], 4)",
                "output": "6"
            },
            {
                "input": "add_elements([5], 3)",
                "output": "5"
            },
            {
                "input": "add_elements([116, 122, 7, 3025, 1, 2], 5)",
                "output": "8"
            },
            {
                "input": "add_elements([6], 2)",
                "output": "6"
            },
            {
                "input": "add_elements([111, 26, 3, 3885, 5, 2, 2, 12, 13], 1)",
                "output": "0"
            },
            {
                "input": "add_elements([115, 126, 8, 3915, 4, 3], 3)",
                "output": "8"
            },
            {
                "input": "add_elements([113, 122, 2, 4948, 10, 3], 4)",
                "output": "2"
            },
            {
                "input": "add_elements([111,21,3,4000,5,6,7,8,9], 4)",
                "output": "24"
            },
            {
                "input": "add_elements([4, 1, -5, 40, 61, 78, 82, 87, 101], 7)",
                "output": "261"
            },
            {
                "input": "add_elements([1], 1)",
                "output": "1"
            },
            {
                "input": "add_elements([6, 19, 8, 95, 7, 3, 6, 10, 14], 9)",
                "output": "168"
            },
            {
                "input": "add_elements([16, 26, 4, 94, 5, 10, 5, 12, 5], 5)",
                "output": "145"
            },
            {
                "input": "add_elements([2], 1)",
                "output": "2"
            },
            {
                "input": "add_elements([115, 19, 2, 3182, 9, 3, 8, 7, 10], 6)",
                "output": "33"
            },
            {
                "input": "add_elements([106, 17, 3, 3544, 9, 1, 6, 3, 10], 7)",
                "output": "36"
            },
            {
                "input": "add_elements([114, 17, 2, 4324, 9, 9, 8, 7, 10], 4)",
                "output": "19"
            },
            {
                "input": "add_elements([107, 121, 4, 3034, 8, 2], 5)",
                "output": "12"
            },
            {
                "input": "add_elements([5, 1, -8, 41, 61, 73, 86, 93, 99], 1)",
                "output": "5"
            },
            {
                "input": "add_elements([116, 23, 3, 4041, 5, 7, 2, 12, 8], 8)",
                "output": "52"
            },
            {
                "input": "add_elements([114, 25, 5, 4395, 10, 6, 3, 9, 5], 9)",
                "output": "63"
            },
            {
                "input": "add_elements([113, 18, 2, 4442, 9, 9, 7, 8, 7], 9)",
                "output": "60"
            },
            {
                "input": "add_elements([116, 26, 8, 3200, 10, 9, 2, 10, 7], 2)",
                "output": "26"
            },
            {
                "input": "add_elements([3], 5)",
                "output": "3"
            },
            {
                "input": "add_elements([4, -1, 0, 45, 56, 74, 82, 83, 101], 7)",
                "output": "260"
            },
            {
                "input": "add_elements([1], 2)",
                "output": "1"
            },
            {
                "input": "add_elements([13, 18, 4, 85, 9, 1, 9, 8, 5], 7)",
                "output": "139"
            },
            {
                "input": "add_elements([109, 16, 3, 4057, 7, 2, 9, 4, 9], 3)",
                "output": "19"
            },
            {
                "input": "add_elements([5, -3, -8, 43, 56, 73, 91, 83, 97], 2)",
                "output": "2"
            },
            {
                "input": "add_elements([6, -3, 2, 45, 57, 76, 84, 90, 97], 3)",
                "output": "5"
            },
            {
                "input": "add_elements([6], 4)",
                "output": "6"
            },
            {
                "input": "add_elements([5, 0, -6, 40, 55, 72, 87, 92, 95], 7)",
                "output": "253"
            },
            {
                "input": "add_elements([1], 1)",
                "output": "1"
            },
            {
                "input": "add_elements([1, -3, -6, 43, 62, 76, 92, 89, 94], 6)",
                "output": "173"
            },
            {
                "input": "add_elements([15, 20, 8, 91, 6, 2, 6, 11, 10], 8)",
                "output": "159"
            },
            {
                "input": "add_elements([5], 4)",
                "output": "5"
            },
            {
                "input": "add_elements([11,21,3,90,5,6,7,8,9], 4)",
                "output": "125"
            },
            {
                "input": "add_elements([2, -3, -1, 42, 53, 74, 89, 83, 97], 5)",
                "output": "93"
            },
            {
                "input": "add_elements([5, 1, -8, 40, 58, 73, 84, 86, 96], 8)",
                "output": "339"
            },
            {
                "input": "add_elements([114, 117, 6, 3409, 7, 9], 2)",
                "output": "0"
            },
            {
                "input": "add_elements([2], 6)",
                "output": "2"
            },
            {
                "input": "add_elements([1, -6, -3, 38, 55, 73, 85, 86, 100], 7)",
                "output": "243"
            },
            {
                "input": "add_elements([4, 1, -8, 37, 55, 76, 83, 84, 99], 3)",
                "output": "-3"
            },
            {
                "input": "add_elements([6, -6, -6, 41, 56, 73, 83, 83, 94], 1)",
                "output": "6"
            },
            {
                "input": "add_elements([108, 125, 1, 4105, 6, 6], 5)",
                "output": "7"
            },
            {
                "input": "add_elements([15, 19, 6, 90, 6, 2, 7, 13, 10], 9)",
                "output": "168"
            },
            {
                "input": "add_elements([4], 3)",
                "output": "4"
            },
            {
                "input": "add_elements([107, 116, 1, 4894, 9, 7], 5)",
                "output": "10"
            }
        ]
    },
    {
        "problem_description": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
        "ground truth": "def get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
        "instances": [
            {
                "input": "get_odd_collatz(22)",
                "output": "[1, 5, 11, 13, 17]"
            },
            {
                "input": "get_odd_collatz(35)",
                "output": "[1, 5, 35, 53]"
            },
            {
                "input": "get_odd_collatz(36)",
                "output": "[1, 5, 7, 9, 11, 13, 17]"
            },
            {
                "input": "get_odd_collatz(18)",
                "output": "[1, 5, 7, 9, 11, 13, 17]"
            },
            {
                "input": "get_odd_collatz(16)",
                "output": "[1]"
            },
            {
                "input": "get_odd_collatz(60)",
                "output": "[1, 5, 15, 23, 35, 53]"
            },
            {
                "input": "get_odd_collatz(44)",
                "output": "[1, 5, 11, 13, 17]"
            },
            {
                "input": "get_odd_collatz(8)",
                "output": "[1]"
            },
            {
                "input": "get_odd_collatz(51)",
                "output": "[1, 5, 11, 13, 17, 29, 51, 77]"
            },
            {
                "input": "get_odd_collatz(12)",
                "output": "[1, 3, 5]"
            },
            {
                "input": "get_odd_collatz(19)",
                "output": "[1, 5, 11, 13, 17, 19, 29]"
            },
            {
                "input": "get_odd_collatz(24)",
                "output": "[1, 3, 5]"
            },
            {
                "input": "get_odd_collatz(69)",
                "output": "[1, 5, 13, 69]"
            },
            {
                "input": "get_odd_collatz(77)",
                "output": "[1, 5, 11, 13, 17, 29, 77]"
            },
            {
                "input": "get_odd_collatz(88)",
                "output": "[1, 5, 11, 13, 17]"
            },
            {
                "input": "get_odd_collatz(96)",
                "output": "[1, 3, 5]"
            },
            {
                "input": "get_odd_collatz(46)",
                "output": "[1, 5, 23, 35, 53]"
            },
            {
                "input": "get_odd_collatz(34)",
                "output": "[1, 5, 13, 17]"
            },
            {
                "input": "get_odd_collatz(79)",
                "output": "[1, 5, 11, 13, 17, 19, 29, 79, 101, 119, 179, 269]"
            },
            {
                "input": "get_odd_collatz(72)",
                "output": "[1, 5, 7, 9, 11, 13, 17]"
            },
            {
                "input": "get_odd_collatz(20)",
                "output": "[1, 5]"
            },
            {
                "input": "get_odd_collatz(93)",
                "output": "[1, 5, 35, 53, 93]"
            },
            {
                "input": "get_odd_collatz(15)",
                "output": "[1, 5, 15, 23, 35, 53]"
            },
            {
                "input": "get_odd_collatz(40)",
                "output": "[1, 5]"
            },
            {
                "input": "get_odd_collatz(1)",
                "output": "[1]"
            },
            {
                "input": "get_odd_collatz(5)",
                "output": "[1, 5]"
            },
            {
                "input": "get_odd_collatz(89)",
                "output": "[1, 5, 11, 13, 17, 19, 29, 67, 89, 101]"
            },
            {
                "input": "get_odd_collatz(3)",
                "output": "[1, 3, 5]"
            },
            {
                "input": "get_odd_collatz(49)",
                "output": "[1, 5, 7, 11, 13, 17, 37, 49]"
            },
            {
                "input": "get_odd_collatz(23)",
                "output": "[1, 5, 23, 35, 53]"
            },
            {
                "input": "get_odd_collatz(25)",
                "output": "[1, 5, 11, 13, 17, 19, 25, 29]"
            },
            {
                "input": "get_odd_collatz(52)",
                "output": "[1, 5, 13]"
            },
            {
                "input": "get_odd_collatz(21)",
                "output": "[1, 21]"
            },
            {
                "input": "get_odd_collatz(30)",
                "output": "[1, 5, 15, 23, 35, 53]"
            },
            {
                "input": "get_odd_collatz(1)",
                "output": "[1]"
            },
            {
                "input": "get_odd_collatz(66)",
                "output": "[1, 5, 11, 13, 17, 19, 25, 29, 33]"
            },
            {
                "input": "get_odd_collatz(28)",
                "output": "[1, 5, 7, 11, 13, 17]"
            },
            {
                "input": "get_odd_collatz(4)",
                "output": "[1]"
            },
            {
                "input": "get_odd_collatz(17)",
                "output": "[1, 5, 13, 17]"
            },
            {
                "input": "get_odd_collatz(57)",
                "output": "[1, 5, 7, 11, 13, 17, 37, 43, 49, 57, 65]"
            },
            {
                "input": "get_odd_collatz(53)",
                "output": "[1, 5, 53]"
            },
            {
                "input": "get_odd_collatz(70)",
                "output": "[1, 5, 35, 53]"
            },
            {
                "input": "get_odd_collatz(78)",
                "output": "[1, 5, 11, 13, 17, 19, 29, 39, 59, 67, 89, 101]"
            },
            {
                "input": "get_odd_collatz(87)",
                "output": "[1, 5, 7, 11, 13, 17, 37, 87, 131, 197]"
            },
            {
                "input": "get_odd_collatz(100)",
                "output": "[1, 5, 11, 13, 17, 19, 25, 29]"
            },
            {
                "input": "get_odd_collatz(37)",
                "output": "[1, 5, 7, 11, 13, 17, 37]"
            },
            {
                "input": "get_odd_collatz(67)",
                "output": "[1, 5, 11, 13, 17, 19, 29, 67, 101]"
            },
            {
                "input": "get_odd_collatz(61)",
                "output": "[1, 5, 23, 35, 53, 61]"
            },
            {
                "input": "get_odd_collatz(80)",
                "output": "[1, 5]"
            },
            {
                "input": "get_odd_collatz(33)",
                "output": "[1, 5, 11, 13, 17, 19, 25, 29, 33]"
            },
            {
                "input": "get_odd_collatz(10)",
                "output": "[1, 5]"
            },
            {
                "input": "get_odd_collatz(59)",
                "output": "[1, 5, 11, 13, 17, 19, 29, 59, 67, 89, 101]"
            },
            {
                "input": "get_odd_collatz(38)",
                "output": "[1, 5, 11, 13, 17, 19, 29]"
            },
            {
                "input": "get_odd_collatz(14)",
                "output": "[1, 5, 7, 11, 13, 17]"
            },
            {
                "input": "get_odd_collatz(32)",
                "output": "[1]"
            },
            {
                "input": "get_odd_collatz(68)",
                "output": "[1, 5, 13, 17]"
            },
            {
                "input": "get_odd_collatz(12)",
                "output": "[1, 3, 5]"
            },
            {
                "input": "get_odd_collatz(29)",
                "output": "[1, 5, 11, 13, 17, 29]"
            },
            {
                "input": "get_odd_collatz(84)",
                "output": "[1, 21]"
            },
            {
                "input": "get_odd_collatz(92)",
                "output": "[1, 5, 23, 35, 53]"
            },
            {
                "input": "get_odd_collatz(81)",
                "output": "[1, 5, 23, 35, 53, 61, 81]"
            },
            {
                "input": "get_odd_collatz(56)",
                "output": "[1, 5, 7, 11, 13, 17]"
            },
            {
                "input": "get_odd_collatz(43)",
                "output": "[1, 5, 7, 11, 13, 17, 37, 43, 49, 65]"
            },
            {
                "input": "get_odd_collatz(11)",
                "output": "[1, 5, 11, 13, 17]"
            },
            {
                "input": "get_odd_collatz(58)",
                "output": "[1, 5, 11, 13, 17, 29]"
            },
            {
                "input": "get_odd_collatz(75)",
                "output": "[1, 75, 85, 113]"
            }
        ]
    },
    {
        "problem_description": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
        "ground truth": "def valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
        "instances": [
            {
                "input": "valid_date(\"=8_2&-!3$~2/33\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"^1*!^?\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"=-*9486\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"/1:$/1*:6=!^5\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"^$?@=#/_^6\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"19-24-2294\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"19-32-6633\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"4%2_9:7@#:-4\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"aby\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"$#7\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"09-40-5143\")",
                "output": "False"
            },
            {
                "input": "valid_date('03-32-2011')",
                "output": "False"
            },
            {
                "input": "valid_date(\"05-3-4654\")",
                "output": "True"
            },
            {
                "input": "valid_date('')",
                "output": "False"
            },
            {
                "input": "valid_date(\"09-26-6048\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"1|=@:\")",
                "output": "False"
            },
            {
                "input": "valid_date('04122003')",
                "output": "False"
            },
            {
                "input": "valid_date(\"33&5$+??\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"19-19-1656\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"946216\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"596063116\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"15-2-6158\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"18-4-5532\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"#?71-/#9:%91%77\")",
                "output": "False"
            },
            {
                "input": "valid_date('21-31-2000')",
                "output": "False"
            },
            {
                "input": "valid_date(\"05-26-7803\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"1&!56&!?:08%^+8\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"2/$7:471/!0#\")",
                "output": "False"
            },
            {
                "input": "valid_date('06-06-2005')",
                "output": "True"
            },
            {
                "input": "valid_date(\"+81:37-8!8\")",
                "output": "False"
            },
            {
                "input": "valid_date('2003-04-12')",
                "output": "False"
            },
            {
                "input": "valid_date(\"2118829671\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"%_%5|7-041144$:\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"00-34-5915\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"2=26~-~0\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"!&5*~\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"!*^3%/*/|:^/!6\")",
                "output": "False"
            },
            {
                "input": "valid_date('01-01-2007')",
                "output": "True"
            },
            {
                "input": "valid_date(\"07-24-6153\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"09-26-7422\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"?74^~@9/39\")",
                "output": "False"
            },
            {
                "input": "valid_date('20030412')",
                "output": "False"
            },
            {
                "input": "valid_date(\"dvt\")",
                "output": "False"
            },
            {
                "input": "valid_date('03-11-2000')",
                "output": "True"
            },
            {
                "input": "valid_date(\"10-15-2951\")",
                "output": "True"
            },
            {
                "input": "valid_date('04-0-2040')",
                "output": "False"
            },
            {
                "input": "valid_date(\"/1|?@/#/|\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"||&!%6%2_$&_9\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"9~*&:@08@??1%=7\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"?_2~634-6\")",
                "output": "False"
            },
            {
                "input": "valid_date('04-2003')",
                "output": "False"
            },
            {
                "input": "valid_date(\"x\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"01-12-7681\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"05-14-1215\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"62@*%34#2\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"tb\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"1~@\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"36924\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"*5:444%=62#-9\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"496928724496\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"40/#70^\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"*7:+3*0#~0\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"!?%!29&4-20-=\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"?2-5%21$:\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"17-29-6002\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"03-27-2895\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"32|1@94\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"^/?$25\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"467279042980\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"787890\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"+04&%2\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"qu\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"76434488\")",
                "output": "False"
            },
            {
                "input": "valid_date(\":90:^=!*:+8+?\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"18-36-13\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"02-14-8921\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"08-19-2738\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"_-2%%=$+\")",
                "output": "False"
            },
            {
                "input": "valid_date('2003-04')",
                "output": "False"
            },
            {
                "input": "valid_date(\"81346880\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"11-36-6667\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"06-38-5638\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"%+5^74&^$?\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"142@6!4=/|@7\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"9:|=+$6$#*5\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"00-10-2109\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"$0:591=8:~:5/!\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"8~8+*/\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"713472149\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"!-5?|/\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"$~@6$~\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"65?:!\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"/*_#6$$:9!\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"#0~!!&_3$^\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"1^!?3+\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"03-15-957\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"#~+18=\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"16-12-4616\")",
                "output": "False"
            },
            {
                "input": "valid_date('15-01-2012')",
                "output": "False"
            },
            {
                "input": "valid_date(\"!?0|+1:|&=6?_2\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"02-3-4779\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"5+#$!@~02!~$4%7\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"#3:5?4+|3?=/5?3\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"01-36-1682\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"^-47?6_=%\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"/26~%9$\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"-6!@\")",
                "output": "False"
            },
            {
                "input": "valid_date('04-31-3000')",
                "output": "False"
            },
            {
                "input": "valid_date(\"622654210301\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"@=6\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"12-37-5174\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"04582\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"89728\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"xm\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"04-17-4753\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"152020823\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"_9=+@_-+\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"_&4=$#1-*7*8/_\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"10-4-1092\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"j\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"3!8:99443^:94\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"12-14-575\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"%:*7^|4\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"8#012%7\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"9739~4-_3510|3\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"?/3~=!\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"03-38-9986\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"07-38-1109\")",
                "output": "False"
            },
            {
                "input": "valid_date(\":8?@243|\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"907387\")",
                "output": "False"
            },
            {
                "input": "valid_date('04-12-2003')",
                "output": "True"
            },
            {
                "input": "valid_date(\"@86@2&*18-3!$4\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"00-10-1292\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"07-1-7237\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"/4__8#01+\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"6%-2!/1$=\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"3058229043\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"15-1-1527\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"09-37-3863\")",
                "output": "False"
            },
            {
                "input": "valid_date('06-04-2020')",
                "output": "True"
            },
            {
                "input": "valid_date(\"00-33-325\")",
                "output": "False"
            },
            {
                "input": "valid_date(\"07-2-5707\")",
                "output": "True"
            },
            {
                "input": "valid_date(\"17-13-2769\")",
                "output": "False"
            }
        ]
    },
    {
        "problem_description": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
        "ground truth": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
        "instances": [
            {
                "input": "split_words(\"pnpmdbvxycpm\")",
                "output": "8"
            },
            {
                "input": "split_words(\"rzy\")",
                "output": "2"
            },
            {
                "input": "split_words(\"Mv+pADUgje\")",
                "output": "3"
            },
            {
                "input": "split_words(\"nzo\")",
                "output": "2"
            },
            {
                "input": "split_words(\"NJSTW O!@YrDw|pVGZ*?\")",
                "output": "['NJSTW', 'O!@YrDw|pVGZ*?']"
            },
            {
                "input": "split_words(\"OfrwN\")",
                "output": "2"
            },
            {
                "input": "split_words(\"gS#RB,~cU-w:ZH_\")",
                "output": "['gS#RB', '~cU-w:ZH_']"
            },
            {
                "input": "split_words(\"f\")",
                "output": "1"
            },
            {
                "input": "split_words(\"omBjuAWlYq_N\")",
                "output": "2"
            },
            {
                "input": "split_words(\"kheNiYo\")",
                "output": "1"
            },
            {
                "input": "split_words(\"b\")",
                "output": "1"
            },
            {
                "input": "split_words(\"q\")",
                "output": "0"
            },
            {
                "input": "split_words(\"y!fm#C:hKGj \")",
                "output": "['y!fm#C:hKGj']"
            },
            {
                "input": "split_words(\"msvvbcgky\")",
                "output": "3"
            },
            {
                "input": "split_words(\"bdpyljovl\")",
                "output": "7"
            },
            {
                "input": "split_words(\"rKevoU\")",
                "output": "2"
            },
            {
                "input": "split_words(\"hbpsavk\")",
                "output": "4"
            },
            {
                "input": "split_words(\"=lHNHN+Y*~NUhK\")",
                "output": "2"
            },
            {
                "input": "split_words(\"dkoat\")",
                "output": "2"
            },
            {
                "input": "split_words(\"aaabb\")",
                "output": "2"
            },
            {
                "input": "split_words(\"jg*~+urNr-E@A!qKRY\")",
                "output": "3"
            },
            {
                "input": "split_words(\"QKG$HXnkw^ozxnWXEo\")",
                "output": "4"
            },
            {
                "input": "split_words(\"ckEaxwWfSiFqEQoeIw\")",
                "output": "2"
            },
            {
                "input": "split_words(\"dpBtfxTsi:~\")",
                "output": "5"
            },
            {
                "input": "split_words(\"&TduYUyhbeXh\")",
                "output": "4"
            },
            {
                "input": "split_words(\"ZpV&@OBba@QgtsF\")",
                "output": "3"
            },
            {
                "input": "split_words(\"aHVdlX|%fU=\")",
                "output": "3"
            },
            {
                "input": "split_words(\"r!QzUIkvlpSV@iw,Js&xvIT\")",
                "output": "['r!QzUIkvlpSV@iw', 'Js&xvIT']"
            },
            {
                "input": "split_words(\"zuve\")",
                "output": "2"
            },
            {
                "input": "split_words(\"W#bov/?Thz?W\")",
                "output": "4"
            },
            {
                "input": "split_words(\"aaaBb\")",
                "output": "1"
            },
            {
                "input": "split_words(\"e_^sxp/fqMTYI:|\")",
                "output": "3"
            },
            {
                "input": "split_words(\":=K+at:~we\")",
                "output": "1"
            },
            {
                "input": "split_words(\"oaIXYoFS\")",
                "output": "0"
            },
            {
                "input": "split_words(\"kvdmaav\")",
                "output": "3"
            },
            {
                "input": "split_words(\"zuh\")",
                "output": "2"
            },
            {
                "input": "split_words(\"fTtDWqiB~-\")",
                "output": "2"
            },
            {
                "input": "split_words(\"d|po*:jWq&hhnNIHqx&eY@?\")",
                "output": "7"
            },
            {
                "input": "split_words(\"UU-?rMWetRg&\")",
                "output": "2"
            },
            {
                "input": "split_words(\"anfcmzn\")",
                "output": "4"
            },
            {
                "input": "split_words(\"syoicmg\")",
                "output": "0"
            },
            {
                "input": "split_words(\"w\")",
                "output": "0"
            },
            {
                "input": "split_words(\"WnTPRMoeKCP eY-i\")",
                "output": "['WnTPRMoeKCP', 'eY-i']"
            },
            {
                "input": "split_words(\"%TSp@orNumXB\")",
                "output": "2"
            },
            {
                "input": "split_words(\"GbQdw*vMBTePLWnvV\")",
                "output": "5"
            },
            {
                "input": "split_words(\"$|yu?&U_hCaMM!&\")",
                "output": "1"
            },
            {
                "input": "split_words(\"dOTcSA\")",
                "output": "1"
            },
            {
                "input": "split_words(\"U?MQ#|tNC\")",
                "output": "1"
            },
            {
                "input": "split_words(\"abcdef\")",
                "output": "3"
            },
            {
                "input": "split_words(\"|sfihzOlhVcPN_eEh\")",
                "output": "6"
            },
            {
                "input": "split_words(\"bboRkIIkwEE\")",
                "output": "2"
            },
            {
                "input": "split_words(\"gFrJQl\")",
                "output": "2"
            },
            {
                "input": "split_words(\":jZdsTuwXB?\")",
                "output": "2"
            },
            {
                "input": "split_words(\"|U:s$UhWkK#ZSK\")",
                "output": "1"
            },
            {
                "input": "split_words(\"asivgkx\")",
                "output": "2"
            },
            {
                "input": "split_words(\"XQXesS%p:UbMalngB\")",
                "output": "4"
            },
            {
                "input": "split_words(\"RmWjn%JLYnFgOT/Lc\")",
                "output": "3"
            },
            {
                "input": "split_words(\"hpSGeTps\")",
                "output": "3"
            },
            {
                "input": "split_words(\"~/Ttj*k_=\")",
                "output": "2"
            },
            {
                "input": "split_words(\"$JY_UYz,!iq\")",
                "output": "['$JY_UYz', '!iq']"
            },
            {
                "input": "split_words(\"xnb\")",
                "output": "3"
            },
            {
                "input": "split_words(\"goMGiS_MVr\")",
                "output": "1"
            },
            {
                "input": "split_words(\"ykzlzecy\")",
                "output": "3"
            },
            {
                "input": "split_words(\"wo\")",
                "output": "0"
            },
            {
                "input": "split_words(\"k+@?:NANl&*Fre\")",
                "output": "2"
            },
            {
                "input": "split_words(\"!Nn^j_n%RCwU_m/s^nzrIT\")",
                "output": "6"
            },
            {
                "input": "split_words(\"LqkZ,zL,~NeZg:wOm_h\")",
                "output": "['LqkZ', 'zL', '~NeZg:wOm_h']"
            },
            {
                "input": "split_words(\"njls\")",
                "output": "3"
            },
            {
                "input": "split_words(\"hv\")",
                "output": "2"
            },
            {
                "input": "split_words(\"VkIPu=_zhMF C+!nfe-raB#?\")",
                "output": "['VkIPu=_zhMF', 'C+!nfe-raB#?']"
            },
            {
                "input": "split_words(\"mvfzgdb\")",
                "output": "5"
            },
            {
                "input": "split_words(\"oKRmE\")",
                "output": "0"
            },
            {
                "input": "split_words(\"aLmAGvwjl\")",
                "output": "3"
            },
            {
                "input": "split_words(\"p\")",
                "output": "1"
            },
            {
                "input": "split_words(\"uhxvybwbmh\")",
                "output": "6"
            },
            {
                "input": "split_words(\"al#PIP-QTpPLvox*\")",
                "output": "4"
            },
            {
                "input": "split_words(\"wunr\")",
                "output": "2"
            },
            {
                "input": "split_words(\"AWp!@PZMYbS^z&I\")",
                "output": "3"
            },
            {
                "input": "split_words(\"hmytaseac\")",
                "output": "2"
            },
            {
                "input": "split_words(\"r*&oaf-!aG*wgAFVp\")",
                "output": "3"
            },
            {
                "input": "split_words(\"irg\")",
                "output": "1"
            },
            {
                "input": "split_words(\"gq&xmYfWMBK#-NQYiNjAM*L\")",
                "output": "3"
            },
            {
                "input": "split_words(\"eqwsuz\")",
                "output": "1"
            },
            {
                "input": "split_words(\"Dgia~wiNNMRt-i\")",
                "output": "1"
            },
            {
                "input": "split_words(\"\")",
                "output": "0"
            },
            {
                "input": "split_words(\"fVglGtpJc\")",
                "output": "4"
            },
            {
                "input": "split_words(\"xp\")",
                "output": "2"
            },
            {
                "input": "split_words(\"nqovy\")",
                "output": "2"
            },
            {
                "input": "split_words(\"zJINZp\")",
                "output": "2"
            },
            {
                "input": "split_words(\"xCcvykbBAKs@gJi\")",
                "output": "3"
            },
            {
                "input": "split_words(\"pied\")",
                "output": "2"
            },
            {
                "input": "split_words(\",X*$Wump&HCJb%+As\")",
                "output": "['X*$Wump&HCJb%+As']"
            },
            {
                "input": "split_words(\"K^=nzDBNH J%JTsrnL\")",
                "output": "['K^=nzDBNH', 'J%JTsrnL']"
            },
            {
                "input": "split_words(\"aB+lU+OnYF$PZO@NwU\")",
                "output": "2"
            },
            {
                "input": "split_words(\"lNv\")",
                "output": "2"
            },
            {
                "input": "split_words(\"+/oUxjmn~y-+ZPkyN,\")",
                "output": "['+/oUxjmn~y-+ZPkyN']"
            },
            {
                "input": "split_words(\"eGDrXSfC\")",
                "output": "2"
            },
            {
                "input": "split_words(\"rcXPAxR\")",
                "output": "2"
            },
            {
                "input": "split_words(\"$nw/P%QRfarwyOi|Q\")",
                "output": "3"
            },
            {
                "input": "split_words(\"T/woQZAkIO|/EE\")",
                "output": "0"
            },
            {
                "input": "split_words(\"bkp\")",
                "output": "2"
            },
            {
                "input": "split_words(\"RvCBtA\")",
                "output": "2"
            },
            {
                "input": "split_words(\"NnEwAnlMVB=Wba|O?\")",
                "output": "4"
            },
            {
                "input": "split_words(\"rr\")",
                "output": "2"
            },
            {
                "input": "split_words(\"xngtyezta\")",
                "output": "5"
            },
            {
                "input": "split_words(\"i_scT:h~e\")",
                "output": "1"
            },
            {
                "input": "split_words(\"ufiksfwi\")",
                "output": "2"
            },
            {
                "input": "split_words(\"CX!@@rhr,/-H:HgT\")",
                "output": "['CX!@@rhr', '/-H:HgT']"
            },
            {
                "input": "split_words(\"rmatxyfcw\")",
                "output": "4"
            },
            {
                "input": "split_words(\"zzxs\")",
                "output": "3"
            },
            {
                "input": "split_words(\"sqgy!ymCjd t:rln-^bIVz\")",
                "output": "['sqgy!ymCjd', 't:rln-^bIVz']"
            },
            {
                "input": "split_words(\"apcyyq\")",
                "output": "1"
            },
            {
                "input": "split_words(\"_nUUBN-tbtugLg\")",
                "output": "4"
            },
            {
                "input": "split_words(\"plufdpelfsr\")",
                "output": "8"
            },
            {
                "input": "split_words(\"cxxxajg\")",
                "output": "4"
            },
            {
                "input": "split_words(\"hohbth\")",
                "output": "5"
            },
            {
                "input": "split_words(\"KwiQw~-r_\")",
                "output": "1"
            },
            {
                "input": "split_words(\"hM/hRRo&SWoS&mF~|\")",
                "output": "2"
            },
            {
                "input": "split_words(\"~rUBcwdGrVT^!h&IH*\")",
                "output": "4"
            },
            {
                "input": "split_words(\"tycdhmmyz\")",
                "output": "4"
            },
            {
                "input": "split_words(\"Ej?@*zT_b@kdOSBJqRkW\")",
                "output": "4"
            },
            {
                "input": "split_words(\"r -TnGH|hD%q%%_Z\")",
                "output": "['r', '-TnGH|hD%q%%_Z']"
            }
        ]
    },
    {
        "problem_description": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n",
        "ground truth": "def is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
        "instances": [
            {
                "input": "is_sorted([1, 2, 3, 4])",
                "output": "True"
            },
            {
                "input": "is_sorted([2, 2, 6, 8])",
                "output": "True"
            },
            {
                "input": "is_sorted([6, 2, 2, 3, 10, 4, 6])",
                "output": "False"
            },
            {
                "input": "is_sorted([4])",
                "output": "True"
            },
            {
                "input": "is_sorted([2, 4, 5, 7])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 3, 4, 5])",
                "output": "True"
            },
            {
                "input": "is_sorted([6, 2, 3, 5, 2, 7])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 5, 3, 4, 3])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 2, 2, 7, 8])",
                "output": "True"
            },
            {
                "input": "is_sorted([2, 5, 4, 1, 1, 8, 9])",
                "output": "False"
            },
            {
                "input": "is_sorted([2, 5, 2, 2, 2, 7])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 1, 2, 4, 5, 5])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 1, 1, 2, 5, 8])",
                "output": "False"
            },
            {
                "input": "is_sorted([2, 4, 6, 4, 3, 6, 4])",
                "output": "False"
            },
            {
                "input": "is_sorted([7])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 5, 5, 6, 6, 9])",
                "output": "True"
            },
            {
                "input": "is_sorted([2, 4, 5])",
                "output": "True"
            },
            {
                "input": "is_sorted([2, 5, 6, 8])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 3, 2, 4, 5, 6, 7])",
                "output": "False"
            },
            {
                "input": "is_sorted([6])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 2, 3, 4, 5])",
                "output": "True"
            },
            {
                "input": "is_sorted([3, 2, 2, 2, 3])",
                "output": "False"
            },
            {
                "input": "is_sorted([4, 5, 7, 8])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 2, 3, 3, 5, 7, 9])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 2, 3, 4, 5, 6])",
                "output": "True"
            },
            {
                "input": "is_sorted([3, 8, 4, 4, 10])",
                "output": "False"
            },
            {
                "input": "is_sorted([4, 3, 5, 6, 5, 3])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 5, 7, 4, 4, 2])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 1, 3, 5])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 2, 3, 3, 7, 9])",
                "output": "True"
            },
            {
                "input": "is_sorted([5, 3, 3, 3, 10])",
                "output": "False"
            },
            {
                "input": "is_sorted([3, 7, 7, 6, 6, 7])",
                "output": "False"
            },
            {
                "input": "is_sorted([3, 4, 6, 7, 7])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 5, 6, 7, 9, 10, 10])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 1, 1, 7, 3, 8])",
                "output": "False"
            },
            {
                "input": "is_sorted([8])",
                "output": "True"
            },
            {
                "input": "is_sorted([6, 3, 7, 3, 5, 6, 6])",
                "output": "False"
            },
            {
                "input": "is_sorted([5, 6, 3])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 2, 3, 5, 5, 8])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 8, 6, 7, 8])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 5, 5, 6, 9])",
                "output": "True"
            },
            {
                "input": "is_sorted([6, 7, 3, 4, 8, 6])",
                "output": "False"
            },
            {
                "input": "is_sorted([6, 1, 2, 3, 3, 3])",
                "output": "False"
            },
            {
                "input": "is_sorted([2, 3, 4, 4, 8, 10])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 4, 5, 5, 7, 8])",
                "output": "True"
            },
            {
                "input": "is_sorted([3, 3, 3, 3, 5, 6])",
                "output": "False"
            },
            {
                "input": "is_sorted([3, 3, 6, 9, 9])",
                "output": "True"
            },
            {
                "input": "is_sorted([2, 2, 2, 5, 8, 11])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 3, 5, 5, 7])",
                "output": "True"
            },
            {
                "input": "is_sorted([3, 4, 6, 7])",
                "output": "True"
            },
            {
                "input": "is_sorted([4, 3, 6, 6, 4, 1, 9])",
                "output": "False"
            },
            {
                "input": "is_sorted([1])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 2, 2, 3, 3, 4])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 1, 3, 5, 6, 6])",
                "output": "True"
            },
            {
                "input": "is_sorted([5, 4, 6, 7, 1, 5])",
                "output": "False"
            },
            {
                "input": "is_sorted([3, 4, 4, 4, 4, 7])",
                "output": "False"
            },
            {
                "input": "is_sorted([10])",
                "output": "True"
            },
            {
                "input": "is_sorted([3, 6, 3])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 4, 4, 4, 5])",
                "output": "False"
            },
            {
                "input": "is_sorted([2, 3, 3, 5])",
                "output": "True"
            },
            {
                "input": "is_sorted([5, 7, 4, 2, 2, 4])",
                "output": "False"
            },
            {
                "input": "is_sorted([3, 6, 3, 9, 10, 4, 10])",
                "output": "False"
            },
            {
                "input": "is_sorted([2, 4, 2, 9, 10])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 2, 2, 4, 4, 6, 8])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 3, 3, 4, 5])",
                "output": "True"
            },
            {
                "input": "is_sorted([2, 4, 8, 9])",
                "output": "True"
            },
            {
                "input": "is_sorted([3, 5, 5, 6, 7, 8, 10])",
                "output": "True"
            },
            {
                "input": "is_sorted([3, 1, 8, 4, 7, 4])",
                "output": "False"
            },
            {
                "input": "is_sorted([2, 6, 3, 9, 1])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 2, 3, 4, 5, 6, 7])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 3, 4, 4, 5, 5])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 2, 3, 3, 4, 5, 8])",
                "output": "True"
            },
            {
                "input": "is_sorted([3])",
                "output": "True"
            },
            {
                "input": "is_sorted([1])",
                "output": "True"
            },
            {
                "input": "is_sorted([3, 2, 6, 3, 6, 4])",
                "output": "False"
            },
            {
                "input": "is_sorted([3, 2, 1])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 1, 3, 6, 7, 8])",
                "output": "True"
            },
            {
                "input": "is_sorted([3, 1, 3, 2, 1])",
                "output": "False"
            },
            {
                "input": "is_sorted([2, 3, 6, 7, 7])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 2, 4, 4, 6, 7, 10])",
                "output": "True"
            },
            {
                "input": "is_sorted([2, 3, 3, 5, 5, 6, 7])",
                "output": "True"
            },
            {
                "input": "is_sorted([3, 7, 4, 8, 1, 4])",
                "output": "False"
            },
            {
                "input": "is_sorted([])",
                "output": "True"
            },
            {
                "input": "is_sorted([2, 6, 1, 4, 5, 4, 2])",
                "output": "False"
            },
            {
                "input": "is_sorted([4, 5, 8, 4, 2, 7])",
                "output": "False"
            },
            {
                "input": "is_sorted([2, 5, 4])",
                "output": "False"
            },
            {
                "input": "is_sorted([5, 7, 5, 7, 10, 6, 8])",
                "output": "False"
            },
            {
                "input": "is_sorted([2, 1, 1, 7, 8, 9, 3])",
                "output": "False"
            },
            {
                "input": "is_sorted([2, 2, 3, 3, 6, 7])",
                "output": "True"
            },
            {
                "input": "is_sorted([6, 1, 3, 6, 3, 7])",
                "output": "False"
            },
            {
                "input": "is_sorted([5, 5, 2, 3, 3, 4])",
                "output": "False"
            },
            {
                "input": "is_sorted([5])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 5, 6, 6, 7, 7])",
                "output": "True"
            },
            {
                "input": "is_sorted([3, 7, 5])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 6, 3])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 2, 3, 3, 3, 4])",
                "output": "False"
            },
            {
                "input": "is_sorted([3, 3, 5, 7, 1, 5])",
                "output": "False"
            },
            {
                "input": "is_sorted([2, 4, 4])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 1, 1, 3, 4])",
                "output": "False"
            },
            {
                "input": "is_sorted([3, 4, 4, 4, 6, 7, 8])",
                "output": "False"
            },
            {
                "input": "is_sorted([6, 4, 4])",
                "output": "False"
            },
            {
                "input": "is_sorted([3, 3, 4, 7, 8, 9])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 3, 2, 4, 5])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 2, 2, 2, 3, 4])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 2, 2, 2, 3, 4])",
                "output": "False"
            },
            {
                "input": "is_sorted([3, 3, 4, 6, 7, 8])",
                "output": "True"
            },
            {
                "input": "is_sorted([1, 4, 6, 1, 6, 7])",
                "output": "False"
            },
            {
                "input": "is_sorted([1, 4, 4, 5, 6, 6, 10])",
                "output": "True"
            },
            {
                "input": "is_sorted([8, 1, 2])",
                "output": "False"
            },
            {
                "input": "is_sorted([])",
                "output": "True"
            }
        ]
    },
    {
        "problem_description": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
        "ground truth": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
        "instances": [
            {
                "input": "intersection((-7, -6), (0, -3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((2, 1), (4, 6))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-12, 4), (-2, 4))",
                "output": "'NO'"
            },
            {
                "input": "intersection((1, 4), (2, 6))",
                "output": "'YES'"
            },
            {
                "input": "intersection((-6, 1), (4, 1))",
                "output": "'NO'"
            },
            {
                "input": "intersection((5, 1), (1, 9))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-3, -6), (-9, 8))",
                "output": "'NO'"
            },
            {
                "input": "intersection((2, 6), (4, 6))",
                "output": "'YES'"
            },
            {
                "input": "intersection((2, 1), (5, 4))",
                "output": "'NO'"
            },
            {
                "input": "intersection((6, 3), (3, 3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((0, -2), (-8, 7))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-6, -3), (-7, 8))",
                "output": "'YES'"
            },
            {
                "input": "intersection((0, 5), (3, 8))",
                "output": "'YES'"
            },
            {
                "input": "intersection((4, 1), (2, 5))",
                "output": "'NO'"
            },
            {
                "input": "intersection((2, 3), (4, 3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-6, 1), (-3, 2))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-16, 3), (-4, 2))",
                "output": "'NO'"
            },
            {
                "input": "intersection((5, 7), (3, 4))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-6, 4), (-7, 2))",
                "output": "'NO'"
            },
            {
                "input": "intersection((1, 1), (1, 9))",
                "output": "'NO'"
            },
            {
                "input": "intersection((4, 3), (3, 6))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-2, 1), (-9, 5))",
                "output": "'YES'"
            },
            {
                "input": "intersection((-4, -1), (0, -3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-5, 6), (4, 9))",
                "output": "'YES'"
            },
            {
                "input": "intersection((2, 2), (8, 8))",
                "output": "'NO'"
            },
            {
                "input": "intersection((1, 5), (7, 6))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-1, 6), (2, 5))",
                "output": "'YES'"
            },
            {
                "input": "intersection((5, 7), (4, 5))",
                "output": "'NO'"
            },
            {
                "input": "intersection((1, 1), (5, 3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((5, 6), (6, 4))",
                "output": "'NO'"
            },
            {
                "input": "intersection((3, 4), (5, 7))",
                "output": "'NO'"
            },
            {
                "input": "intersection((1, -7), (-2, 3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((2, 3), (8, 2))",
                "output": "'NO'"
            },
            {
                "input": "intersection((4, 5), (6, 3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-1, 2), (-8, 10))",
                "output": "'YES'"
            },
            {
                "input": "intersection((3, 6), (2, 6))",
                "output": "'YES'"
            },
            {
                "input": "intersection((4, 6), (4, 8))",
                "output": "'YES'"
            },
            {
                "input": "intersection((5, 7), (5, 1))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-15, 4), (-3, -1))",
                "output": "'YES'"
            },
            {
                "input": "intersection((3, 2), (1, 3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-3, 0), (-7, 2))",
                "output": "'YES'"
            },
            {
                "input": "intersection((-4, -4), (-2, 4))",
                "output": "'NO'"
            },
            {
                "input": "intersection((2, 4), (1, 5))",
                "output": "'YES'"
            },
            {
                "input": "intersection((4, 7), (4, 4))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-2, 1), (1, 1))",
                "output": "'NO'"
            },
            {
                "input": "intersection((5, 4), (8, 8))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-3, -3), (-2, 9))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-7, 5), (-6, 4))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-1, 0), (-5, 3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((6, 2), (7, 8))",
                "output": "'NO'"
            },
            {
                "input": "intersection((1, 2), (2, 10))",
                "output": "'NO'"
            },
            {
                "input": "intersection((4, 2), (2, 1))",
                "output": "'NO'"
            },
            {
                "input": "intersection((0, -1), (-2, -7))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-3, 2), (-5, -1))",
                "output": "'YES'"
            },
            {
                "input": "intersection((-15, 1), (2, 1))",
                "output": "'NO'"
            },
            {
                "input": "intersection((5, 7), (6, 3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((3, 1), (3, 9))",
                "output": "'NO'"
            },
            {
                "input": "intersection((1, 2), (4, 7))",
                "output": "'NO'"
            },
            {
                "input": "intersection((1, 5), (3, 3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-14, 6), (-1, -6))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-12, 2), (1, -6))",
                "output": "'NO'"
            },
            {
                "input": "intersection((4, 2), (4, 3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((0, 2), (-10, 10))",
                "output": "'YES'"
            },
            {
                "input": "intersection((6, 2), (3, 2))",
                "output": "'NO'"
            },
            {
                "input": "intersection((2, 3), (6, 1))",
                "output": "'NO'"
            },
            {
                "input": "intersection((5, 7), (5, 3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-12, 1), (-4, -5))",
                "output": "'NO'"
            },
            {
                "input": "intersection((6, 4), (3, 6))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-1, -1), (-2, -3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-16, 6), (-6, -4))",
                "output": "'YES'"
            },
            {
                "input": "intersection((-2, -1), (-4, 4))",
                "output": "'NO'"
            },
            {
                "input": "intersection((6, 7), (4, 2))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-2, 5), (5, 1))",
                "output": "'NO'"
            },
            {
                "input": "intersection((6, 3), (7, 4))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-7, 1), (-4, 2))",
                "output": "'YES'"
            },
            {
                "input": "intersection((-3, 5), (1, 4))",
                "output": "'YES'"
            },
            {
                "input": "intersection((2, 3), (-1, 4))",
                "output": "'NO'"
            },
            {
                "input": "intersection((3, 3), (-3, 2))",
                "output": "'NO'"
            },
            {
                "input": "intersection((2, -4), (-4, 1))",
                "output": "'NO'"
            },
            {
                "input": "intersection((2, 5), (0, 5))",
                "output": "'YES'"
            },
            {
                "input": "intersection((5, 4), (4, 7))",
                "output": "'NO'"
            },
            {
                "input": "intersection((0, 6), (-2, 2))",
                "output": "'YES'"
            },
            {
                "input": "intersection((3, 1), (4, 5))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-5, 2), (1, 4))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-6, 4), (0, 1))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-4, 3), (0, -3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-3, 4), (-1, 8))",
                "output": "'YES'"
            },
            {
                "input": "intersection((-9, 3), (4, -4))",
                "output": "'NO'"
            },
            {
                "input": "intersection((5, 3), (6, 2))",
                "output": "'NO'"
            },
            {
                "input": "intersection((5, 6), (6, 3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-1, 1), (-2, 3))",
                "output": "'YES'"
            },
            {
                "input": "intersection((5, 3), (7, 8))",
                "output": "'NO'"
            },
            {
                "input": "intersection((3, 6), (1, 2))",
                "output": "'NO'"
            },
            {
                "input": "intersection((1, 6), (0, 2))",
                "output": "'NO'"
            },
            {
                "input": "intersection((1, 6), (4, 1))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-6, 0), (-7, 0))",
                "output": "'NO'"
            },
            {
                "input": "intersection((5, 7), (2, 1))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-8, 4), (-3, -3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((3, 5), (8, 1))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-3, 5), (-5, 1))",
                "output": "'NO'"
            },
            {
                "input": "intersection((0, 2), (-8, 7))",
                "output": "'YES'"
            },
            {
                "input": "intersection((-3, -1), (-2, 5))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-9, 5), (-2, -3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((5, 5), (3, 3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-6, 7), (-2, 2))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-8, 2), (-4, 2))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-6, 3), (-6, 1))",
                "output": "'YES'"
            },
            {
                "input": "intersection((-4, 7), (1, 5))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-2, -7), (-5, -4))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-8, 2), (-3, -5))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-1, 6), (-9, 4))",
                "output": "'YES'"
            },
            {
                "input": "intersection((0, 1), (-2, -3))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-6, -2), (-7, -5))",
                "output": "'NO'"
            },
            {
                "input": "intersection((1, 7), (4, 1))",
                "output": "'NO'"
            },
            {
                "input": "intersection((6, 7), (2, 6))",
                "output": "'NO'"
            },
            {
                "input": "intersection((-5, 5), (3, 9))",
                "output": "'YES'"
            },
            {
                "input": "intersection((-2, 2), (-10, 8))",
                "output": "'NO'"
            },
            {
                "input": "intersection((1, 6), (8, 7))",
                "output": "'NO'"
            },
            {
                "input": "intersection((0, 5), (2, 2))",
                "output": "'NO'"
            }
        ]
    },
    {
        "problem_description": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
        "ground truth": "def prod_signs(arr):\n    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
        "instances": [
            {
                "input": "prod_signs([4, 3, 3, 2, 7, -5, 2])",
                "output": "-26"
            },
            {
                "input": "prod_signs([4, 7, 1, 3, 0, -6, 6])",
                "output": "0"
            },
            {
                "input": "prod_signs([3, 1, 6, 0])",
                "output": "0"
            },
            {
                "input": "prod_signs([3, 6, 4, 1, 5, -6, 2])",
                "output": "-27"
            },
            {
                "input": "prod_signs([7, 1, 4, 2, 0, 3, 6])",
                "output": "0"
            },
            {
                "input": "prod_signs([3, 5, 5, 5])",
                "output": "18"
            },
            {
                "input": "prod_signs([0, 5, 2, 1])",
                "output": "0"
            },
            {
                "input": "prod_signs([0, 4, 4, 4])",
                "output": "0"
            },
            {
                "input": "prod_signs([0, 1])",
                "output": "0"
            },
            {
                "input": "prod_signs([-1, 1, 1, 1])",
                "output": "-4"
            },
            {
                "input": "prod_signs([3, 4, -2, 5])",
                "output": "-14"
            },
            {
                "input": "prod_signs([6, 5, 5, -5])",
                "output": "-21"
            },
            {
                "input": "prod_signs([4, 3, 5, -4])",
                "output": "-16"
            },
            {
                "input": "prod_signs([4, 1])",
                "output": "5"
            },
            {
                "input": "prod_signs([-6, 2, 2, 4])",
                "output": "-14"
            },
            {
                "input": "prod_signs([1, 4, 2, 5])",
                "output": "12"
            },
            {
                "input": "prod_signs([-2, 1, 1, 3])",
                "output": "-7"
            },
            {
                "input": "prod_signs([3, 1, -3, 1])",
                "output": "-8"
            },
            {
                "input": "prod_signs([3, 5])",
                "output": "8"
            },
            {
                "input": "prod_signs([-6, 2, 1, 2])",
                "output": "-11"
            },
            {
                "input": "prod_signs([2, 4])",
                "output": "6"
            },
            {
                "input": "prod_signs([-4, 6, 6, 3])",
                "output": "-19"
            },
            {
                "input": "prod_signs([-5, 2, 3, 3])",
                "output": "-13"
            },
            {
                "input": "prod_signs([6, 7, 6, -1])",
                "output": "-20"
            },
            {
                "input": "prod_signs([1, 1, 1, 5, 4, -1, 5])",
                "output": "-18"
            },
            {
                "input": "prod_signs([-4, 2, 2, 3])",
                "output": "-11"
            },
            {
                "input": "prod_signs([5, 3, 2, -4])",
                "output": "-14"
            },
            {
                "input": "prod_signs([1, 1, 1, 2, 3, -1, 1])",
                "output": "-10"
            },
            {
                "input": "prod_signs([-2, 1, 4, 3])",
                "output": "-10"
            },
            {
                "input": "prod_signs([-1, 6, 1, 2])",
                "output": "-10"
            },
            {
                "input": "prod_signs([1, 2, 2, -4])",
                "output": "-9"
            },
            {
                "input": "prod_signs([5, 9, 6, 1, 0, -4, 13])",
                "output": "0"
            },
            {
                "input": "prod_signs([5, 2])",
                "output": "7"
            },
            {
                "input": "prod_signs([2, 6, 2, 2, 0, 4, 5])",
                "output": "0"
            },
            {
                "input": "prod_signs([3, 8, 5, 2, 4, -4, 10])",
                "output": "-36"
            },
            {
                "input": "prod_signs([7, 5, 3, 3, -4, -3, 8])",
                "output": "33"
            },
            {
                "input": "prod_signs([3, 1])",
                "output": "4"
            },
            {
                "input": "prod_signs([4, 6])",
                "output": "10"
            },
            {
                "input": "prod_signs([3, 1, 3, 5, -6, 3, 10])",
                "output": "-31"
            },
            {
                "input": "prod_signs([-5, 1, 4, 2])",
                "output": "-12"
            },
            {
                "input": "prod_signs([1, 5])",
                "output": "6"
            },
            {
                "input": "prod_signs([-4, 4, 2, 6])",
                "output": "-16"
            },
            {
                "input": "prod_signs([2, 4,1, 2, -1, -1, 9])",
                "output": "20"
            },
            {
                "input": "prod_signs([6, 4, 2, 3, 7, -1, 1])",
                "output": "-24"
            },
            {
                "input": "prod_signs([6, 6, 4, -4])",
                "output": "-20"
            },
            {
                "input": "prod_signs([2, 2, 4, 5])",
                "output": "13"
            },
            {
                "input": "prod_signs([1, 4, 6, -2])",
                "output": "-13"
            },
            {
                "input": "prod_signs([2, 4, 2, 1, 7, 1, 4])",
                "output": "21"
            },
            {
                "input": "prod_signs([2, 4, 3, 6, 7, -4, 2])",
                "output": "-28"
            },
            {
                "input": "prod_signs([7, 6, 1, 4, -5, 0, 5])",
                "output": "0"
            },
            {
                "input": "prod_signs([3, 3, 4, 3])",
                "output": "13"
            },
            {
                "input": "prod_signs([1, 4, 2, 3])",
                "output": "10"
            },
            {
                "input": "prod_signs([4, 5])",
                "output": "9"
            },
            {
                "input": "prod_signs([6, 5, 1, 2, 1, 1, 11])",
                "output": "27"
            },
            {
                "input": "prod_signs([2, 8, 2, 7, 3, 2, 11])",
                "output": "35"
            },
            {
                "input": "prod_signs([0, 1, 2, 3])",
                "output": "0"
            },
            {
                "input": "prod_signs([1, 5, 4, 5, 3, 4, 2])",
                "output": "24"
            },
            {
                "input": "prod_signs([5, 5, 6, 1, 7, 0, 3])",
                "output": "0"
            },
            {
                "input": "prod_signs([3, 2, -3, 1])",
                "output": "-9"
            },
            {
                "input": "prod_signs([4, 6, 1, 4])",
                "output": "15"
            },
            {
                "input": "prod_signs([-5, 5, 2, 5])",
                "output": "-17"
            },
            {
                "input": "prod_signs([4, 1, 2, 5, 5, -6, 5])",
                "output": "-28"
            },
            {
                "input": "prod_signs([0, 5, 4, 4])",
                "output": "0"
            },
            {
                "input": "prod_signs([1, 2, 2, 6])",
                "output": "11"
            },
            {
                "input": "prod_signs([6, 6, 3, 6, 0, 3, 8])",
                "output": "0"
            },
            {
                "input": "prod_signs([4, 1, 5, 5])",
                "output": "15"
            },
            {
                "input": "prod_signs([1, 3, 2, -7])",
                "output": "-13"
            },
            {
                "input": "prod_signs([1, 1])",
                "output": "2"
            },
            {
                "input": "prod_signs([4, 2, 1, 6])",
                "output": "13"
            },
            {
                "input": "prod_signs([-4, 2, 6, 3])",
                "output": "-15"
            },
            {
                "input": "prod_signs([0, 4, 4, 5])",
                "output": "0"
            },
            {
                "input": "prod_signs([5, 5, 5, 3, 5, -4, 4])",
                "output": "-31"
            },
            {
                "input": "prod_signs([5, 3, 5, 2, 6, 4, 2])",
                "output": "27"
            },
            {
                "input": "prod_signs([1, 2, 6, 3])",
                "output": "12"
            },
            {
                "input": "prod_signs([6, 7, 1, -9])",
                "output": "-23"
            },
            {
                "input": "prod_signs([6, 3, 2, -9])",
                "output": "-20"
            },
            {
                "input": "prod_signs([4, 1, -3, 4])",
                "output": "-12"
            },
            {
                "input": "prod_signs([3, 3, 5, -9])",
                "output": "-20"
            },
            {
                "input": "prod_signs([4, 6, 4, 4, 2, -5, 3])",
                "output": "-28"
            },
            {
                "input": "prod_signs([0, 1, 5, 3])",
                "output": "0"
            },
            {
                "input": "prod_signs([2, 2])",
                "output": "4"
            },
            {
                "input": "prod_signs([-6, 2, 6, 4])",
                "output": "-18"
            },
            {
                "input": "prod_signs([6, 2, 6, -7])",
                "output": "-21"
            },
            {
                "input": "prod_signs([3, 6, 1, 4, 7, -4, 1])",
                "output": "-26"
            },
            {
                "input": "prod_signs([-3, 4, 4, 4])",
                "output": "-15"
            },
            {
                "input": "prod_signs([4, 2, 3, 2])",
                "output": "11"
            },
            {
                "input": "prod_signs([-6, 6, 5, 3])",
                "output": "-20"
            },
            {
                "input": "prod_signs([6, 4, 7, -3])",
                "output": "-20"
            },
            {
                "input": "prod_signs([1, 7, 5, 5, 2, 0, 6])",
                "output": "0"
            },
            {
                "input": "prod_signs([5, 6, 1, 3, 5, -3, 3])",
                "output": "-26"
            },
            {
                "input": "prod_signs([3, 2])",
                "output": "5"
            },
            {
                "input": "prod_signs([5, 6])",
                "output": "11"
            },
            {
                "input": "prod_signs([-1, 1, -1, 1])",
                "output": "4"
            },
            {
                "input": "prod_signs([6, 9, 3, 2, 0, 0, 6])",
                "output": "0"
            },
            {
                "input": "prod_signs([-1, 1, 6, 1])",
                "output": "-9"
            },
            {
                "input": "prod_signs([-4, 5, 3, 5])",
                "output": "-17"
            },
            {
                "input": "prod_signs([1, 2, 5, 6])",
                "output": "14"
            },
            {
                "input": "prod_signs([2, 4, 3, 1, 6, -4, 1])",
                "output": "-21"
            },
            {
                "input": "prod_signs([4, 2, 5, -7])",
                "output": "-18"
            },
            {
                "input": "prod_signs([3, 1, 2, 5])",
                "output": "11"
            },
            {
                "input": "prod_signs([-4, 2, -3, 3])",
                "output": "12"
            },
            {
                "input": "prod_signs([-1, 6, 1, 4])",
                "output": "-12"
            },
            {
                "input": "prod_signs([-6, 6, -5, 2])",
                "output": "19"
            },
            {
                "input": "prod_signs([-2, 5, -6, 1])",
                "output": "14"
            },
            {
                "input": "prod_signs([3, 3, 2, 4])",
                "output": "12"
            },
            {
                "input": "prod_signs([5, 3, 4, 1, 1, 1, 9])",
                "output": "24"
            },
            {
                "input": "prod_signs([3, 5, 4, -5])",
                "output": "-17"
            },
            {
                "input": "prod_signs([7, 4, 3, 4, 1, -1, 12])",
                "output": "-32"
            }
        ]
    },
    {
        "problem_description": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
        "ground truth": "def minPath(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
        "instances": [
            {
                "input": "minPath([[3, 3, 13, 8], [10, 5, 14, 4], [7, 17, 15, 10], [11, 17, 6, 7]], 11)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1]"
            },
            {
                "input": "minPath([[8, 13, 11, 4], [10, 5, 13, 3], [4, 19, 17, 6], [12, 3, 6, 5]], 17)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1]"
            },
            {
                "input": "minPath([[6, 7], [2, 2]], 14)",
                "output": "[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]"
            },
            {
                "input": "minPath([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12)",
                "output": "[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]"
            },
            {
                "input": "minPath([[7, 2, 15, 15], [2, 7, 13, 3], [1, 16, 11, 13], [11, 14, 14, 5]], 3)",
                "output": "[1, 2, 1]"
            },
            {
                "input": "minPath([[1, 3], [3, 2]], 10)",
                "output": "[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]"
            },
            {
                "input": "minPath([[1, 1, 4, 3], [9, 6, 9, 13], [6, 15, 13, 12], [16, 12, 16, 20]], 9)",
                "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1]"
            },
            {
                "input": "minPath([[9, 8, 2, 2], [8, 13, 13, 8], [6, 3, 16, 9], [13, 17, 11, 3]], 8)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17]"
            },
            {
                "input": "minPath([[7, 12, 8, 3], [9, 3, 11, 15], [4, 6, 1, 7], [7, 11, 8, 11]], 4)",
                "output": "[1, 6, 1, 6]"
            },
            {
                "input": "minPath([[12, 3, 8, 3], [8, 15, 11, 5], [8, 5, 14, 7], [12, 13, 8, 4]], 7)",
                "output": "[1, 17, 1, 17, 1, 17, 1]"
            },
            {
                "input": "minPath([[9, 3, 11, 8], [9, 3, 14, 3], [4, 12, 11, 15], [5, 19, 12, 2]], 12)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17]"
            },
            {
                "input": "minPath([[2, 2, 1], [3, 6, 8], [6, 6, 13]], 7)",
                "output": "[1, 2, 1, 2, 1, 2, 1]"
            },
            {
                "input": "minPath([[3, 7, 4, 1], [2, 3, 9, 3], [14, 13, 14, 8], [9, 12, 14, 18]], 9)",
                "output": "[1, 3, 1, 3, 1, 3, 1, 3, 1]"
            },
            {
                "input": "minPath([[6, 2], [3, 5]], 13)",
                "output": "[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]"
            },
            {
                "input": "minPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)",
                "output": "[1, 10, 1, 10, 1, 10, 1]"
            },
            {
                "input": "minPath([[14, 10, 2, 5], [10, 17, 11, 6], [14, 2, 11, 4], [13, 11, 12, 4]], 14)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17]"
            },
            {
                "input": "minPath([[4, 3, 9], [5, 7, 7], [7, 10, 2]], 6)",
                "output": "[1, 10, 1, 10, 1, 10]"
            },
            {
                "input": "minPath([[7, 11, 2], [7, 2, 5], [10, 13, 6]], 11)",
                "output": "[1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1]"
            },
            {
                "input": "minPath([[4, 6, 8], [8, 8, 4], [10, 5, 6]], 1)",
                "output": "[1]"
            },
            {
                "input": "minPath([[15, 14, 14, 1], [7, 2, 17, 11], [9, 13, 16, 2], [9, 12, 11, 4]], 8)",
                "output": "[1, 11, 1, 11, 1, 11, 1, 11]"
            },
            {
                "input": "minPath([[6, 4], [3, 6]], 13)",
                "output": "[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]"
            },
            {
                "input": "minPath([[2, 7], [4, 4]], 10)",
                "output": "[1, 5, 1, 5, 1, 5, 1, 5, 1, 5]"
            },
            {
                "input": "minPath([[7, 7, 7], [9, 5, 6], [11, 7, 6]], 4)",
                "output": "[1, 10, 1, 10]"
            },
            {
                "input": "minPath([[1, 2], [1, 1]], 8)",
                "output": "[1, 1, 1, 1, 1, 1, 1, 1]"
            },
            {
                "input": "minPath([[1, 7, 2], [5, 3, 2], [2, 4, 6]], 1)",
                "output": "[1]"
            },
            {
                "input": "minPath([[13, 12, 5, 2], [13, 6, 15, 7], [2, 13, 10, 6], [15, 4, 3, 6]], 10)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17, 1, 17]"
            },
            {
                "input": "minPath([[7, 12, 4], [6, 4, 1], [11, 5, 4]], 7)",
                "output": "[1, 4, 1, 4, 1, 4, 1]"
            },
            {
                "input": "minPath([[3, 7], [7, 9]], 10)",
                "output": "[1, 5, 1, 5, 1, 5, 1, 5, 1, 5]"
            },
            {
                "input": "minPath([[5, 6, 5], [1, 1, 9], [7, 3, 5]], 2)",
                "output": "[1, 1]"
            },
            {
                "input": "minPath([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9)",
                "output": "[1, 6, 1, 6, 1, 6, 1, 6, 1]"
            },
            {
                "input": "minPath([[4, 2, 3], [2, 10, 4], [5, 2, 7]], 8)",
                "output": "[1, 10, 1, 10, 1, 10, 1, 10]"
            },
            {
                "input": "minPath([[5, 7], [2, 2]], 6)",
                "output": "[1, 5, 1, 5, 1, 5]"
            },
            {
                "input": "minPath([[3, 17, 14, 2], [7, 2, 17, 11], [10, 11, 2, 14], [7, 13, 15, 20]], 8)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17]"
            },
            {
                "input": "minPath([[2, 4, 9], [7, 9, 4], [3, 10, 6]], 13)",
                "output": "[1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1]"
            },
            {
                "input": "minPath([[2, 7], [4, 5]], 9)",
                "output": "[1, 5, 1, 5, 1, 5, 1, 5, 1]"
            },
            {
                "input": "minPath([[2, 4, 1], [2, 13, 10], [3, 11, 7]], 6)",
                "output": "[1, 4, 1, 4, 1, 4]"
            },
            {
                "input": "minPath([[4, 17, 12, 5], [2, 6, 9, 10], [1, 2, 6, 9], [7, 12, 13, 19]], 4)",
                "output": "[1, 2, 1, 2]"
            },
            {
                "input": "minPath([[1, 12, 6], [3, 5, 9], [5, 9, 4]], 9)",
                "output": "[1, 3, 1, 3, 1, 3, 1, 3, 1]"
            },
            {
                "input": "minPath([[8, 12, 9, 1], [3, 21, 19, 5], [10, 1, 11, 3], [13, 12, 13, 6]], 13)",
                "output": "[1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1]"
            },
            {
                "input": "minPath([[11, 3, 8, 5], [4, 20, 10, 5], [9, 3, 14, 5], [13, 10, 10, 3]], 12)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17]"
            },
            {
                "input": "minPath([[8, 16, 10, 4], [14, 6, 18, 1], [5, 19, 12, 1], [9, 4, 3, 5]], 12)",
                "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
            },
            {
                "input": "minPath([[3, 2], [4, 2]], 14)",
                "output": "[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]"
            },
            {
                "input": "minPath([[5, 1], [6, 8]], 8)",
                "output": "[1, 5, 1, 5, 1, 5, 1, 5]"
            },
            {
                "input": "minPath([[11, 16, 6, 1], [13, 8, 12, 11], [2, 18, 14, 1], [11, 5, 12, 4]], 7)",
                "output": "[1, 4, 1, 4, 1, 4, 1]"
            },
            {
                "input": "minPath([[10, 6, 14, 8], [1, 4, 9, 1], [8, 11, 13, 13], [10, 10, 7, 1]], 3)",
                "output": "[1, 7, 1]"
            },
            {
                "input": "minPath([[3, 7], [8, 1]], 15)",
                "output": "[1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1]"
            },
            {
                "input": "minPath([[1, 1, 3], [4, 4, 3], [2, 10, 11]], 3)",
                "output": "[1, 1, 1]"
            },
            {
                "input": "minPath([[8, 10, 9, 5], [9, 19, 19, 9], [7, 1, 11, 3], [9, 12, 13, 3]], 4)",
                "output": "[1, 7, 1, 7]"
            },
            {
                "input": "minPath([[16, 13, 11, 4], [5, 13, 9, 2], [13, 6, 11, 9], [14, 16, 5, 4]], 9)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17, 1]"
            },
            {
                "input": "minPath([[11, 12, 12, 6], [7, 12, 11, 1], [12, 2, 14, 11], [14, 15, 9, 5]], 9)",
                "output": "[1, 6, 1, 6, 1, 6, 1, 6, 1]"
            },
            {
                "input": "minPath([[2, 10, 2], [5, 2, 3], [8, 11, 4]], 3)",
                "output": "[1, 10, 1]"
            },
            {
                "input": "minPath([[11, 4, 11, 5], [8, 3, 12, 1], [4, 16, 7, 17], [9, 12, 13, 4]], 11)",
                "output": "[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]"
            },
            {
                "input": "minPath([[2, 2], [5, 7]], 14)",
                "output": "[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5]"
            },
            {
                "input": "minPath([[4, 9, 9, 5], [7, 5, 18, 11], [1, 9, 5, 17], [2, 11, 12, 18]], 6)",
                "output": "[1, 2, 1, 2, 1, 2]"
            },
            {
                "input": "minPath([[9, 5, 6, 3], [2, 15, 11, 1], [7, 4, 15, 1], [8, 16, 6, 4]], 11)",
                "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
            },
            {
                "input": "minPath([[4, 8, 4], [5, 2, 7], [5, 5, 7]], 4)",
                "output": "[1, 10, 1, 10]"
            },
            {
                "input": "minPath([[13, 16, 10, 3], [7, 6, 9, 17], [2, 11, 5, 15], [8, 8, 7, 19]], 4)",
                "output": "[1, 17, 1, 17]"
            },
            {
                "input": "minPath([[5, 5, 8], [6, 3, 11], [2, 12, 11]], 8)",
                "output": "[1, 10, 1, 10, 1, 10, 1, 10]"
            },
            {
                "input": "minPath([[8, 7, 1], [3, 2, 9], [4, 13, 6]], 2)",
                "output": "[1, 7]"
            },
            {
                "input": "minPath([[8, 3, 11, 7], [4, 12, 7, 1], [7, 20, 8, 15], [11, 18, 9, 6]], 9)",
                "output": "[1, 7, 1, 7, 1, 7, 1, 7, 1]"
            },
            {
                "input": "minPath([[5, 7, 5, 9], [7, 7, 3, 6], [5, 14, 10, 12], [17, 18, 14, 21]], 7)",
                "output": "[1, 17, 1, 17, 1, 17, 1]"
            },
            {
                "input": "minPath([[9, 6, 1], [1, 11, 14], [4, 8, 4]], 13)",
                "output": "[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1]"
            },
            {
                "input": "minPath([[11, 10, 9, 4], [5, 6, 13, 14], [4, 10, 4, 14], [3, 14, 14, 15]], 1)",
                "output": "[1]"
            },
            {
                "input": "minPath([[15, 17, 6, 2], [4, 6, 20, 10], [4, 15, 16, 9], [12, 13, 3, 4]], 12)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17]"
            },
            {
                "input": "minPath([[2, 8, 8], [3, 5, 5], [9, 10, 3]], 5)",
                "output": "[1, 10, 1, 10, 1]"
            },
            {
                "input": "minPath([[1, 6, 3], [7, 9, 10], [1, 4, 5]], 6)",
                "output": "[1, 4, 1, 4, 1, 4]"
            },
            {
                "input": "minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)",
                "output": "[1, 2, 1]"
            },
            {
                "input": "minPath([[3, 13, 8], [5, 5, 3], [3, 9, 2]], 2)",
                "output": "[1, 10]"
            },
            {
                "input": "minPath([[1, 4, 8], [1, 1, 5], [9, 7, 7]], 10)",
                "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
            },
            {
                "input": "minPath([[6, 1, 5, 1], [4, 5, 7, 8], [6, 12, 12, 8], [11, 9, 17, 14]], 1)",
                "output": "[1]"
            },
            {
                "input": "minPath([[1, 4, 9], [4, 6, 6], [3, 3, 5]], 8)",
                "output": "[1, 4, 1, 4, 1, 4, 1, 4]"
            },
            {
                "input": "minPath([[7, 10, 1], [8, 6, 9], [5, 13, 7]], 3)",
                "output": "[1, 9, 1]"
            },
            {
                "input": "minPath([[9, 5, 14, 14], [1, 6, 11, 5], [6, 21, 9, 20], [8, 17, 14, 7]], 7)",
                "output": "[1, 6, 1, 6, 1, 6, 1]"
            },
            {
                "input": "minPath([[6, 3, 6, 5], [3, 4, 10, 4], [8, 15, 7, 14], [10, 19, 10, 14]], 9)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17, 1]"
            },
            {
                "input": "minPath([[1, 12, 6], [6, 4, 4], [6, 5, 11]], 11)",
                "output": "[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1]"
            },
            {
                "input": "minPath([[4, 2, 4, 6], [10, 1, 7, 5], [9, 11, 7, 9], [8, 10, 10, 18]], 8)",
                "output": "[1, 2, 1, 2, 1, 2, 1, 2]"
            },
            {
                "input": "minPath([[16, 16, 5, 5], [13, 4, 13, 3], [4, 12, 9, 8], [8, 11, 3, 7]], 11)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1]"
            },
            {
                "input": "minPath([[3, 3, 5], [2, 1, 4], [1, 3, 8]], 10)",
                "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]"
            },
            {
                "input": "minPath([[6, 9, 2], [5, 4, 1], [11, 6, 3]], 5)",
                "output": "[1, 2, 1, 2, 1]"
            },
            {
                "input": "minPath([[8, 12, 12, 1], [2, 5, 13, 14], [6, 3, 2, 16], [2, 13, 11, 14]], 6)",
                "output": "[1, 12, 1, 12, 1, 12]"
            },
            {
                "input": "minPath([[5, 6, 4], [5, 3, 7], [5, 3, 8]], 11)",
                "output": "[1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1]"
            },
            {
                "input": "minPath([[10, 17, 8, 4], [2, 7, 17, 17], [3, 3, 1, 10], [1, 6, 7, 15]], 5)",
                "output": "[1, 3, 1, 3, 1]"
            },
            {
                "input": "minPath([[1, 7], [4, 7]], 12)",
                "output": "[1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4]"
            },
            {
                "input": "minPath([[6, 2], [8, 2]], 11)",
                "output": "[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]"
            },
            {
                "input": "minPath([[3, 6, 1], [6, 2, 8], [3, 11, 5]], 4)",
                "output": "[1, 6, 1, 6]"
            },
            {
                "input": "minPath([[2, 4, 12, 8], [9, 9, 7, 2], [1, 14, 16, 10], [11, 15, 8, 1]], 9)",
                "output": "[1, 8, 1, 8, 1, 8, 1, 8, 1]"
            },
            {
                "input": "minPath([[6, 6], [3, 4]], 5)",
                "output": "[1, 5, 1, 5, 1]"
            },
            {
                "input": "minPath([[10, 10, 12, 5], [4, 14, 15, 8], [9, 3, 18, 2], [16, 11, 10, 6]], 8)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17]"
            },
            {
                "input": "minPath([[8, 1, 8, 13], [5, 3, 8, 5], [4, 20, 6, 13], [7, 18, 11, 5]], 8)",
                "output": "[1, 3, 1, 3, 1, 3, 1, 3]"
            },
            {
                "input": "minPath([[11, 3, 9, 6], [8, 18, 13, 1], [10, 5, 15, 1], [15, 12, 11, 3]], 10)",
                "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
            },
            {
                "input": "minPath([[5, 6, 1], [3, 2, 6], [11, 7, 9]], 5)",
                "output": "[1, 6, 1, 6, 1]"
            },
            {
                "input": "minPath([[10, 9, 8], [6, 4, 4], [9, 12, 3]], 3)",
                "output": "[1, 10, 1]"
            },
            {
                "input": "minPath([[1, 2, 9], [8, 6, 11], [7, 8, 4]], 3)",
                "output": "[1, 2, 1]"
            },
            {
                "input": "minPath([[4, 7, 3, 2], [2, 1, 11, 13], [11, 7, 15, 11], [16, 15, 15, 17]], 3)",
                "output": "[1, 2, 1]"
            },
            {
                "input": "minPath([[13, 11, 15, 5], [14, 2, 18, 3], [7, 19, 13, 3], [9, 6, 2, 3]], 8)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17]"
            },
            {
                "input": "minPath([[4, 4], [7, 6]], 5)",
                "output": "[1, 5, 1, 5, 1]"
            },
            {
                "input": "minPath([[6, 4, 2], [2, 6, 6], [11, 10, 11]], 3)",
                "output": "[1, 10, 1]"
            },
            {
                "input": "minPath([[9, 9, 5, 4], [7, 8, 13, 18], [5, 9, 6, 14], [8, 15, 15, 17]], 6)",
                "output": "[1, 17, 1, 17, 1, 17]"
            },
            {
                "input": "minPath([[11, 10, 14, 1], [2, 1, 9, 10], [6, 7, 4, 13], [6, 14, 14, 11]], 7)",
                "output": "[1, 2, 1, 2, 1, 2, 1]"
            },
            {
                "input": "minPath([[5, 5, 3], [5, 13, 9], [2, 2, 8]], 4)",
                "output": "[1, 10, 1, 10]"
            },
            {
                "input": "minPath([[3, 6, 8], [7, 7, 9], [11, 12, 9]], 1)",
                "output": "[1]"
            },
            {
                "input": "minPath([[16, 12, 5, 7], [1, 18, 12, 4], [7, 4, 15, 11], [17, 16, 11, 4]], 10)",
                "output": "[1, 7, 1, 7, 1, 7, 1, 7, 1, 7]"
            },
            {
                "input": "minPath([[4, 2, 7], [7, 2, 10], [5, 4, 7]], 4)",
                "output": "[1, 10, 1, 10]"
            },
            {
                "input": "minPath([[4, 3], [3, 9]], 11)",
                "output": "[1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1]"
            },
            {
                "input": "minPath([[9, 3, 9, 12], [4, 10, 16, 6], [8, 15, 11, 17], [12, 10, 9, 7]], 7)",
                "output": "[1, 17, 1, 17, 1, 17, 1]"
            },
            {
                "input": "minPath([[3, 6], [3, 1]], 14)",
                "output": "[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]"
            },
            {
                "input": "minPath([[4, 1, 2], [8, 9, 4], [9, 4, 7]], 7)",
                "output": "[1, 2, 1, 2, 1, 2, 1]"
            },
            {
                "input": "minPath([[4, 7, 2], [5, 9, 11], [7, 6, 13]], 5)",
                "output": "[1, 10, 1, 10, 1]"
            },
            {
                "input": "minPath([[6, 2, 3], [6, 4, 3], [6, 5, 7]], 3)",
                "output": "[1, 10, 1]"
            },
            {
                "input": "minPath([[2, 3, 6], [6, 4, 11], [7, 13, 8]], 6)",
                "output": "[1, 10, 1, 10, 1, 10]"
            },
            {
                "input": "minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)",
                "output": "[1]"
            },
            {
                "input": "minPath([[7, 8, 13, 3], [14, 3, 13, 2], [3, 16, 19, 6], [15, 4, 3, 3]], 13)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1]"
            },
            {
                "input": "minPath([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8)",
                "output": "[1, 3, 1, 3, 1, 3, 1, 3]"
            },
            {
                "input": "minPath([[4, 9, 12, 8], [3, 5, 9, 3], [8, 11, 12, 20], [5, 16, 13, 7]], 4)",
                "output": "[1, 17, 1, 17]"
            },
            {
                "input": "minPath([[13, 16, 6, 5], [2, 4, 15, 19], [3, 5, 1, 9], [2, 5, 10, 14]], 7)",
                "output": "[1, 5, 1, 5, 1, 5, 1]"
            },
            {
                "input": "minPath([[6, 3, 7], [5, 6, 4], [5, 8, 7]], 3)",
                "output": "[1, 10, 1]"
            },
            {
                "input": "minPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)",
                "output": "[1, 7, 1, 7, 1]"
            },
            {
                "input": "minPath([[1, 2], [3, 4]], 10)",
                "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]"
            },
            {
                "input": "minPath([[6, 4], [7, 3]], 8)",
                "output": "[1, 5, 1, 5, 1, 5, 1, 5]"
            },
            {
                "input": "minPath([[5, 3, 6], [1, 9, 4], [3, 7, 3]], 10)",
                "output": "[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]"
            },
            {
                "input": "minPath([[5, 3], [5, 2]], 7)",
                "output": "[1, 5, 1, 5, 1, 5, 1]"
            },
            {
                "input": "minPath([[8, 12, 2], [6, 3, 1], [4, 9, 2]], 1)",
                "output": "[1]"
            },
            {
                "input": "minPath([[8, 14, 7, 3], [9, 6, 12, 14], [3, 4, 4, 8], [5, 7, 8, 20]], 10)",
                "output": "[1, 17, 1, 17, 1, 17, 1, 17, 1, 17]"
            },
            {
                "input": "minPath([[3, 7, 8, 8], [3, 8, 7, 6], [5, 6, 11, 7], [17, 12, 18, 17]], 4)",
                "output": "[1, 17, 1, 17]"
            },
            {
                "input": "minPath([[7, 8, 7, 4], [12, 6, 11, 10], [10, 12, 18, 8], [9, 12, 9, 1]], 16)",
                "output": "[1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8]"
            },
            {
                "input": "minPath([[3, 1, 2, 3], [9, 5, 11, 12], [10, 6, 10, 14], [11, 11, 18, 18]], 4)",
                "output": "[1, 2, 1, 2]"
            },
            {
                "input": "minPath([[7, 17, 6, 6], [8, 4, 11, 1], [7, 13, 13, 3], [15, 6, 9, 6]], 13)",
                "output": "[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]"
            },
            {
                "input": "minPath([[7, 9, 4], [5, 2, 4], [6, 11, 7]], 10)",
                "output": "[1, 10, 1, 10, 1, 10, 1, 10, 1, 10]"
            },
            {
                "input": "minPath([[1, 6], [8, 6]], 8)",
                "output": "[1, 6, 1, 6, 1, 6, 1, 6]"
            },
            {
                "input": "minPath([[1, 3, 4, 9], [9, 6, 10, 13], [6, 8, 15, 10], [8, 15, 19, 11]], 3)",
                "output": "[1, 3, 1]"
            },
            {
                "input": "minPath([[5, 3, 4], [6, 13, 11], [5, 11, 8]], 7)",
                "output": "[1, 10, 1, 10, 1, 10, 1]"
            },
            {
                "input": "minPath([[3, 6, 2, 8], [9, 1, 6, 8], [5, 7, 14, 7], [10, 19, 16, 21]], 3)",
                "output": "[1, 6, 1]"
            },
            {
                "input": "minPath([[13, 10, 14, 3], [4, 3, 20, 8], [7, 20, 14, 1], [9, 4, 12, 3]], 13)",
                "output": "[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1]"
            },
            {
                "input": "minPath([[1, 8], [3, 5]], 14)",
                "output": "[1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3]"
            },
            {
                "input": "minPath([[5, 5, 15, 11], [9, 2, 9, 5], [5, 18, 9, 15], [13, 19, 5, 7]], 3)",
                "output": "[1, 17, 1]"
            },
            {
                "input": "minPath([[3, 2, 1], [7, 6, 7], [3, 6, 9]], 7)",
                "output": "[1, 2, 1, 2, 1, 2, 1]"
            },
            {
                "input": "minPath([[5, 6], [1, 3]], 10)",
                "output": "[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]"
            },
            {
                "input": "minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4)",
                "output": "[1, 2, 1, 2]"
            },
            {
                "input": "minPath([[2, 4, 5, 3], [1, 10, 3, 4], [11, 12, 15, 17], [9, 17, 17, 19]], 5)",
                "output": "[1, 2, 1, 2, 1]"
            },
            {
                "input": "minPath([[5, 4], [1, 2]], 14)",
                "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]"
            },
            {
                "input": "minPath([[1, 6, 8], [3, 4, 5], [4, 10, 13]], 5)",
                "output": "[1, 3, 1, 3, 1]"
            },
            {
                "input": "minPath([[9, 13, 3], [8, 6, 10], [4, 6, 6]], 5)",
                "output": "[1, 10, 1, 10, 1]"
            }
        ]
    },
    {
        "problem_description": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
        "ground truth": "def tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
        "instances": [
            {
                "input": "tri(7)",
                "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]"
            },
            {
                "input": "tri(14)",
                "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0]"
            },
            {
                "input": "tri(10)",
                "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0]"
            },
            {
                "input": "tri(9)",
                "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]"
            },
            {
                "input": "tri(4)",
                "output": "[1, 3, 2.0, 8.0, 3.0]"
            },
            {
                "input": "tri(11)",
                "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0]"
            },
            {
                "input": "tri(5)",
                "output": "[1, 3, 2.0, 8.0, 3.0, 15.0]"
            },
            {
                "input": "tri(0)",
                "output": "[1]"
            },
            {
                "input": "tri(1)",
                "output": "[1, 3]"
            },
            {
                "input": "tri(8)",
                "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]"
            },
            {
                "input": "tri(12)",
                "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0]"
            },
            {
                "input": "tri(13)",
                "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0]"
            },
            {
                "input": "tri(3)",
                "output": "[1, 3, 2.0, 8.0]"
            },
            {
                "input": "tri(6)",
                "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]"
            },
            {
                "input": "tri(2)",
                "output": "[1, 3, 2.0]"
            }
        ]
    },
    {
        "problem_description": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
        "ground truth": "def digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
        "instances": [
            {
                "input": "digits(5576828)",
                "output": "175"
            },
            {
                "input": "digits(122)",
                "output": "1"
            },
            {
                "input": "digits(5575856)",
                "output": "4375"
            },
            {
                "input": "digits(7)",
                "output": "7"
            },
            {
                "input": "digits(123)",
                "output": "3"
            },
            {
                "input": "digits(58)",
                "output": "5"
            },
            {
                "input": "digits(98743)",
                "output": "189"
            },
            {
                "input": "digits(2222)",
                "output": "0"
            },
            {
                "input": "digits(99499)",
                "output": "6561"
            },
            {
                "input": "digits(5576251)",
                "output": "875"
            },
            {
                "input": "digits(99476)",
                "output": "567"
            },
            {
                "input": "digits(54)",
                "output": "5"
            },
            {
                "input": "digits(98537)",
                "output": "945"
            },
            {
                "input": "digits(4995)",
                "output": "405"
            },
            {
                "input": "digits(1494)",
                "output": "9"
            },
            {
                "input": "digits(5575549)",
                "output": "39375"
            },
            {
                "input": "digits(5867)",
                "output": "35"
            },
            {
                "input": "digits(1414)",
                "output": "1"
            },
            {
                "input": "digits(99493)",
                "output": "2187"
            },
            {
                "input": "digits(5577451)",
                "output": "6125"
            },
            {
                "input": "digits(5515)",
                "output": "125"
            },
            {
                "input": "digits(5576864)",
                "output": "175"
            },
            {
                "input": "digits(4282)",
                "output": "0"
            },
            {
                "input": "digits(50)",
                "output": "5"
            },
            {
                "input": "digits(4115)",
                "output": "5"
            },
            {
                "input": "digits(99378)",
                "output": "1701"
            },
            {
                "input": "digits(4783)",
                "output": "21"
            },
            {
                "input": "digits(98656)",
                "output": "45"
            },
            {
                "input": "digits(2646)",
                "output": "0"
            },
            {
                "input": "digits(2255)",
                "output": "25"
            },
            {
                "input": "digits(4822)",
                "output": "0"
            },
            {
                "input": "digits(98995)",
                "output": "3645"
            },
            {
                "input": "digits(5576806)",
                "output": "175"
            },
            {
                "input": "digits(56)",
                "output": "5"
            },
            {
                "input": "digits(115)",
                "output": "5"
            },
            {
                "input": "digits(99366)",
                "output": "243"
            },
            {
                "input": "digits(117)",
                "output": "7"
            },
            {
                "input": "digits(5014)",
                "output": "5"
            },
            {
                "input": "digits(5576669)",
                "output": "1575"
            },
            {
                "input": "digits(5576832)",
                "output": "525"
            },
            {
                "input": "digits(10)",
                "output": "1"
            },
            {
                "input": "digits(120)",
                "output": "1"
            },
            {
                "input": "digits(5576554)",
                "output": "4375"
            },
            {
                "input": "digits(98952)",
                "output": "405"
            },
            {
                "input": "digits(99681)",
                "output": "81"
            },
            {
                "input": "digits(5575999)",
                "output": "637875"
            },
            {
                "input": "digits(4703)",
                "output": "21"
            },
            {
                "input": "digits(2687)",
                "output": "7"
            },
            {
                "input": "digits(5960)",
                "output": "45"
            },
            {
                "input": "digits(125)",
                "output": "5"
            },
            {
                "input": "digits(2779)",
                "output": "441"
            },
            {
                "input": "digits(9)",
                "output": "9"
            },
            {
                "input": "digits(5732)",
                "output": "105"
            },
            {
                "input": "digits(57)",
                "output": "35"
            },
            {
                "input": "digits(5519)",
                "output": "225"
            },
            {
                "input": "digits(5575618)",
                "output": "875"
            },
            {
                "input": "digits(2992)",
                "output": "81"
            },
            {
                "input": "digits(97733)",
                "output": "3969"
            },
            {
                "input": "digits(49)",
                "output": "9"
            },
            {
                "input": "digits(55)",
                "output": "25"
            },
            {
                "input": "digits(5139)",
                "output": "135"
            },
            {
                "input": "digits(99250)",
                "output": "405"
            },
            {
                "input": "digits(52)",
                "output": "5"
            },
            {
                "input": "digits(2468)",
                "output": "0"
            },
            {
                "input": "digits(124)",
                "output": "1"
            },
            {
                "input": "digits(1950)",
                "output": "45"
            },
            {
                "input": "digits(5577171)",
                "output": "8575"
            },
            {
                "input": "digits(3)",
                "output": "3"
            },
            {
                "input": "digits(4212)",
                "output": "1"
            },
            {
                "input": "digits(53)",
                "output": "15"
            },
            {
                "input": "digits(3019)",
                "output": "27"
            },
            {
                "input": "digits(98765)",
                "output": "315"
            },
            {
                "input": "digits(5054)",
                "output": "25"
            },
            {
                "input": "digits(118)",
                "output": "1"
            },
            {
                "input": "digits(5576507)",
                "output": "6125"
            },
            {
                "input": "digits(121)",
                "output": "1"
            },
            {
                "input": "digits(98819)",
                "output": "81"
            },
            {
                "input": "digits(120)",
                "output": "1"
            },
            {
                "input": "digits(59)",
                "output": "45"
            },
            {
                "input": "digits(5575868)",
                "output": "875"
            },
            {
                "input": "digits(5577115)",
                "output": "6125"
            },
            {
                "input": "digits(2654)",
                "output": "5"
            },
            {
                "input": "digits(5)",
                "output": "5"
            },
            {
                "input": "digits(4)",
                "output": "0"
            },
            {
                "input": "digits(3097)",
                "output": "189"
            },
            {
                "input": "digits(1583)",
                "output": "15"
            },
            {
                "input": "digits(5576821)",
                "output": "175"
            },
            {
                "input": "digits(3059)",
                "output": "135"
            },
            {
                "input": "digits(2195)",
                "output": "45"
            },
            {
                "input": "digits(2621)",
                "output": "1"
            },
            {
                "input": "digits(99055)",
                "output": "2025"
            },
            {
                "input": "digits(3194)",
                "output": "27"
            },
            {
                "input": "digits(3256)",
                "output": "15"
            },
            {
                "input": "digits(5631)",
                "output": "15"
            },
            {
                "input": "digits(5576876)",
                "output": "1225"
            },
            {
                "input": "digits(98196)",
                "output": "81"
            },
            {
                "input": "digits(6)",
                "output": "0"
            },
            {
                "input": "digits(99109)",
                "output": "729"
            },
            {
                "input": "digits(4223)",
                "output": "3"
            },
            {
                "input": "digits(99643)",
                "output": "243"
            },
            {
                "input": "digits(5120)",
                "output": "5"
            }
        ]
    },
    {
        "problem_description": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n",
        "ground truth": "def is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
        "instances": [
            {
                "input": "is_nested('')",
                "output": "False"
            },
            {
                "input": "is_nested(\"]][][[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"]]]][[[[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[]][][[]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"][]]\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[[[][]]][\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"][]][\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[[[[[[[[][]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[][][[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[[[[][\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"][[]]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[]]][[[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"][[][]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[[]][[\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[]]]][\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"][][]][[[\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[[]][][]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"]]][[]][[\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"][[]][[[[\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[][[[]\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[]]][[]][\")",
                "output": "True"
            },
            {
                "input": "is_nested('[]]]]]]][[[[[]')",
                "output": "False"
            },
            {
                "input": "is_nested(\"]]]\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"]]][[][[[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"]]]][][]]]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"]][]][]]][\")",
                "output": "True"
            },
            {
                "input": "is_nested('[[]][[')",
                "output": "True"
            },
            {
                "input": "is_nested(\"[]]]][[]\")",
                "output": "False"
            },
            {
                "input": "is_nested('[][]')",
                "output": "False"
            },
            {
                "input": "is_nested(\"]]]]]][[[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"]]]]][][]][[[]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[]]]][[]]][][]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"][]][][\")",
                "output": "False"
            },
            {
                "input": "is_nested(']]]]]]]]')",
                "output": "False"
            },
            {
                "input": "is_nested(\"]]][][[[[][]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[[[[[][][[\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"][[[]]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"]]]]]\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[[[[][[[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"ljv\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"adx\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"][[[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"][[[]\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[[[]]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[]]][[[[[]\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"][]]]]\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"][]][]\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"][]][[[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[]][[[[]]\")",
                "output": "True"
            },
            {
                "input": "is_nested('[[[[]]]]')",
                "output": "True"
            },
            {
                "input": "is_nested(\"]][]][[][\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"][][[][]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"c\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[[][]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"]]]][]\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"]][]]]]\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"][[]]][][]][\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[][][[[[[]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"][[]\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"b\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[][]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"][[[]][\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"]][[]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"]][[[][][[[\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[][]][]][\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"][][[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[][[]\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"][[][][[\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"][]]]][[]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[]][\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"]]][]]]]][[[][[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"][][][]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[[]]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"][[][[]\")",
                "output": "True"
            },
            {
                "input": "is_nested(('[]'))",
                "output": "False"
            },
            {
                "input": "is_nested(\"gv\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"][[][[[[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[[[[]]][[[[]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"ol\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"]][[[[][][]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"]][[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[][[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[[[[]]][[[[[\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"]][\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[[[[[[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"]][][]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"]]][[]][][]][[][]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"]]][\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[][[][]]]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[]][][][]\")",
                "output": "True"
            },
            {
                "input": "is_nested('[][][[]]')",
                "output": "True"
            },
            {
                "input": "is_nested('[[]')",
                "output": "False"
            },
            {
                "input": "is_nested(\"[]][]\")",
                "output": "False"
            },
            {
                "input": "is_nested('[]]')",
                "output": "False"
            },
            {
                "input": "is_nested(\"]][[]]]][[][\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[[[]][][][]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"]]][[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[][[][[][\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[]][[]]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[][]][[[]][[[][\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"][[\")",
                "output": "False"
            },
            {
                "input": "is_nested('[[[[[[[[')",
                "output": "False"
            },
            {
                "input": "is_nested(\"]]]]]][]\")",
                "output": "False"
            },
            {
                "input": "is_nested('[]]]]]]]]]]')",
                "output": "False"
            },
            {
                "input": "is_nested(\"][]]][][]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[][[[]][]]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"]]]][[]][\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"][[]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[]][[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"h\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[][[][][\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[]]]]\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[[][]]]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"][][][]]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"uh\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"][]]][[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"uz\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[[][][]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[[[]][][[\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"[][][[[[[][\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"][]]]]]]]\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"[]]]]][[]\")",
                "output": "False"
            },
            {
                "input": "is_nested('[[]]')",
                "output": "True"
            },
            {
                "input": "is_nested(\"]][][][]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"]][[[[\")",
                "output": "False"
            },
            {
                "input": "is_nested(\"][[[[]]\")",
                "output": "True"
            },
            {
                "input": "is_nested(\"][]]][][[][]\")",
                "output": "True"
            }
        ]
    },
    {
        "problem_description": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n",
        "ground truth": "def sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
        "instances": [
            {
                "input": "sum_squares([1, 1, 2])",
                "output": "6"
            },
            {
                "input": "sum_squares([10570, 10770])",
                "output": "227717800"
            },
            {
                "input": "sum_squares([5])",
                "output": "25"
            },
            {
                "input": "sum_squares([-1.4,17.9,18.9,19.9])",
                "output": "1086"
            },
            {
                "input": "sum_squares([3, 2, 1, 2])",
                "output": "18"
            },
            {
                "input": "sum_squares([0.29, 1.85, 7.406])",
                "output": "69"
            },
            {
                "input": "sum_squares([10100, 9662])",
                "output": "195364244"
            },
            {
                "input": "sum_squares([-1, 1, 4])",
                "output": "18"
            },
            {
                "input": "sum_squares([2])",
                "output": "4"
            },
            {
                "input": "sum_squares([97, 2, 16, 5])",
                "output": "9694"
            },
            {
                "input": "sum_squares([-1, 3, 4])",
                "output": "26"
            },
            {
                "input": "sum_squares([-0.161, 4.708, 2.846])",
                "output": "34"
            },
            {
                "input": "sum_squares([-0.824, 2, 5])",
                "output": "29"
            },
            {
                "input": "sum_squares([3.808, 1, 2])",
                "output": "21"
            },
            {
                "input": "sum_squares([1, 8, 1, 2])",
                "output": "70"
            },
            {
                "input": "sum_squares([-3])",
                "output": "9"
            },
            {
                "input": "sum_squares([1.13, 4, 1])",
                "output": "21"
            },
            {
                "input": "sum_squares([4.716, 3.326, 9.135])",
                "output": "141"
            },
            {
                "input": "sum_squares([1, 6, 2])",
                "output": "41"
            },
            {
                "input": "sum_squares([-1, 4, 4])",
                "output": "33"
            },
            {
                "input": "sum_squares([1, 1, 1])",
                "output": "3"
            },
            {
                "input": "sum_squares([2.973, 6, 3])",
                "output": "54"
            },
            {
                "input": "sum_squares([2, 1, 8])",
                "output": "69"
            },
            {
                "input": "sum_squares([1.0,2,3])",
                "output": "14"
            },
            {
                "input": "sum_squares([-5.714, 22.497, 14.173, 22.134])",
                "output": "1308"
            },
            {
                "input": "sum_squares([5.997, 6, 3])",
                "output": "81"
            },
            {
                "input": "sum_squares([1, 3, 10, 4])",
                "output": "126"
            },
            {
                "input": "sum_squares([3.246, 6, 3])",
                "output": "61"
            },
            {
                "input": "sum_squares([2.169, 7, 1])",
                "output": "59"
            },
            {
                "input": "sum_squares([-5.071, 19.003, 21.797, 14.901])",
                "output": "1134"
            },
            {
                "input": "sum_squares([103, 4, 15, 3])",
                "output": "10859"
            },
            {
                "input": "sum_squares([1, 3, 5, 3])",
                "output": "44"
            },
            {
                "input": "sum_squares([1, 3, 4, 7])",
                "output": "75"
            },
            {
                "input": "sum_squares([3.534, 3, 6])",
                "output": "61"
            },
            {
                "input": "sum_squares([10000,10000])",
                "output": "200000000"
            },
            {
                "input": "sum_squares([-2.286, 12.406, 13.124, 15.17])",
                "output": "625"
            },
            {
                "input": "sum_squares([1])",
                "output": "1"
            },
            {
                "input": "sum_squares([0, 5, 2])",
                "output": "29"
            },
            {
                "input": "sum_squares([-5.899, 4.772, 3.238])",
                "output": "66"
            },
            {
                "input": "sum_squares([5, 1, 5, 12])",
                "output": "195"
            },
            {
                "input": "sum_squares([2.819, 3.053, 3])",
                "output": "34"
            },
            {
                "input": "sum_squares([3.706, 1, 8])",
                "output": "81"
            },
            {
                "input": "sum_squares([-1.063, 2, 5])",
                "output": "30"
            },
            {
                "input": "sum_squares([-2.854, 12.651, 18.252, 22.792])",
                "output": "1063"
            },
            {
                "input": "sum_squares([95, 6, 15, 7])",
                "output": "9335"
            },
            {
                "input": "sum_squares([6, 8, 10, 5])",
                "output": "225"
            },
            {
                "input": "sum_squares([0.156, 2.708, 1.964])",
                "output": "14"
            },
            {
                "input": "sum_squares([10530, 10750])",
                "output": "226443400"
            },
            {
                "input": "sum_squares([-5, 1, 2])",
                "output": "30"
            },
            {
                "input": "sum_squares([-2, 6, 4])",
                "output": "56"
            },
            {
                "input": "sum_squares([102, 1, 16, 3])",
                "output": "10670"
            },
            {
                "input": "sum_squares([-4.222, 3.751, 10.595])",
                "output": "153"
            },
            {
                "input": "sum_squares([2.427, 2.41, 1])",
                "output": "19"
            },
            {
                "input": "sum_squares([0.069, 2, 4])",
                "output": "21"
            },
            {
                "input": "sum_squares([1.457, 7, 8])",
                "output": "117"
            },
            {
                "input": "sum_squares([-3.736, 7.572, 3.736])",
                "output": "89"
            },
            {
                "input": "sum_squares([3])",
                "output": "9"
            },
            {
                "input": "sum_squares([2.414, 6, 7])",
                "output": "94"
            },
            {
                "input": "sum_squares([3.327, 2, 7])",
                "output": "69"
            },
            {
                "input": "sum_squares([98, 5, 20, 1])",
                "output": "10030"
            },
            {
                "input": "sum_squares([-4.293, 4, 2])",
                "output": "36"
            },
            {
                "input": "sum_squares([-1.049, 21.79, 17.42, 24.654])",
                "output": "1434"
            },
            {
                "input": "sum_squares([1,3,5,7])",
                "output": "84"
            },
            {
                "input": "sum_squares([1.4,4.2,0])",
                "output": "29"
            },
            {
                "input": "sum_squares([100,1,15,2])",
                "output": "10230"
            },
            {
                "input": "sum_squares([3, 7, 2])",
                "output": "62"
            },
            {
                "input": "sum_squares([4.321, 6.246, 2.174])",
                "output": "83"
            },
            {
                "input": "sum_squares([-1])",
                "output": "1"
            },
            {
                "input": "sum_squares([1.02, 4, 3])",
                "output": "29"
            },
            {
                "input": "sum_squares([9165, 10377])",
                "output": "191679354"
            },
            {
                "input": "sum_squares([10899, 9187])",
                "output": "203189170"
            },
            {
                "input": "sum_squares([-1.25, 6, 4])",
                "output": "53"
            },
            {
                "input": "sum_squares([2, 2, 4])",
                "output": "24"
            },
            {
                "input": "sum_squares([-4.95, 2, 5])",
                "output": "45"
            },
            {
                "input": "sum_squares([2.501, 1.394, 5])",
                "output": "38"
            },
            {
                "input": "sum_squares([4, 1, 7, 5])",
                "output": "91"
            },
            {
                "input": "sum_squares([5, 6, 3])",
                "output": "70"
            },
            {
                "input": "sum_squares([5, 5, 8])",
                "output": "114"
            },
            {
                "input": "sum_squares([9751, 10057])",
                "output": "196225250"
            },
            {
                "input": "sum_squares([1.05, 6.88, 5])",
                "output": "78"
            },
            {
                "input": "sum_squares([-4.626, 9.385, 6.866])",
                "output": "165"
            },
            {
                "input": "sum_squares([6.717, 7.781, 2])",
                "output": "117"
            },
            {
                "input": "sum_squares([4.313, 5.557, 2])",
                "output": "65"
            },
            {
                "input": "sum_squares([5.855, 4.571, 3])",
                "output": "70"
            },
            {
                "input": "sum_squares([9434, 10144])",
                "output": "191901092"
            },
            {
                "input": "sum_squares([102, 4, 14, 2])",
                "output": "10620"
            },
            {
                "input": "sum_squares([2.372, 22.016, 15.346, 18.542])",
                "output": "1155"
            },
            {
                "input": "sum_squares([98, 4, 18, 5])",
                "output": "9969"
            },
            {
                "input": "sum_squares([5.028, 2.27, 5])",
                "output": "70"
            },
            {
                "input": "sum_squares([-1,1,0])",
                "output": "2"
            },
            {
                "input": "sum_squares([1, 3, 4, 10])",
                "output": "126"
            },
            {
                "input": "sum_squares([99, 2, 18, 1])",
                "output": "10130"
            },
            {
                "input": "sum_squares([98, 5, 11, 6])",
                "output": "9786"
            },
            {
                "input": "sum_squares([-1])",
                "output": "1"
            },
            {
                "input": "sum_squares([-2.192, 6.531, 7.947])",
                "output": "117"
            },
            {
                "input": "sum_squares([4, 3, 4])",
                "output": "41"
            },
            {
                "input": "sum_squares([0])",
                "output": "0"
            },
            {
                "input": "sum_squares([4])",
                "output": "16"
            },
            {
                "input": "sum_squares([-1.008, 20.367, 17.503, 15.597])",
                "output": "1022"
            },
            {
                "input": "sum_squares([2.178, 2.152, 5])",
                "output": "43"
            },
            {
                "input": "sum_squares([2.872, 3, 5])",
                "output": "43"
            },
            {
                "input": "sum_squares([-1.4,4.6,6.3])",
                "output": "75"
            },
            {
                "input": "sum_squares([4, 3, 3])",
                "output": "34"
            },
            {
                "input": "sum_squares([9574, 10213])",
                "output": "195966845"
            },
            {
                "input": "sum_squares([97, 1, 10, 3])",
                "output": "9519"
            },
            {
                "input": "sum_squares([-2.4,1,1])",
                "output": "6"
            },
            {
                "input": "sum_squares([-3, 6, 5])",
                "output": "70"
            },
            {
                "input": "sum_squares([-1.466, 20.894, 13.499, 18.436])",
                "output": "999"
            },
            {
                "input": "sum_squares([-5])",
                "output": "25"
            },
            {
                "input": "sum_squares([-2])",
                "output": "4"
            },
            {
                "input": "sum_squares([9277, 9545])",
                "output": "177169754"
            },
            {
                "input": "sum_squares([3.57, 14.883, 23.709, 15.874])",
                "output": "1073"
            },
            {
                "input": "sum_squares([2, 1, 10, 7])",
                "output": "154"
            },
            {
                "input": "sum_squares([-6, 5, 1])",
                "output": "62"
            },
            {
                "input": "sum_squares([1,2,3])",
                "output": "14"
            },
            {
                "input": "sum_squares([-3, 4, 3])",
                "output": "34"
            },
            {
                "input": "sum_squares([1.413, 6, 5])",
                "output": "65"
            },
            {
                "input": "sum_squares([0.018, 14.66, 13.014, 15.188])",
                "output": "678"
            },
            {
                "input": "sum_squares([2.01, 6.193, 1])",
                "output": "59"
            },
            {
                "input": "sum_squares([9472, 10900])",
                "output": "208528784"
            }
        ]
    },
    {
        "problem_description": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n",
        "ground truth": "def check_if_last_char_is_a_letter(txt):\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
        "instances": [
            {
                "input": "check_if_last_char_is_a_letter(\"MINKNHyQXjAsWBUisE\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"ocLursbxHZ dL\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"qqefzbzzskqqc\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"ZPoNzXdigZ\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"EtacRnVlXjTwP\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"zhsqjuucwlfrk\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"ugjevxw x\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"V\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"sm\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"gxlev\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"tzhnsddx\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"Z Z\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"E\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"wgymztk \")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"uyxohyw w\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"vl\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"vclpghngvb fm\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"Pumpkin pie 1\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"eeeee\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"aeikqu\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"jgxielroew fr i\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"reuuw\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"I I\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"gmkzyzq\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"Sl42QA5NU\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"okz\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"gnjjq\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"gqvow\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"N N\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"xyITwFd PJCihQ\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"h hxkixyjalb\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"ycbihdu\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"swm\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"rlnpc\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"ziy\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"rmgwowjgogkl v\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"cygjyebnztqqf\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"S S\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"oz2NZNzFFrjV\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"hlywrkczii\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"yHvvPn6E  gnWl\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"vrvnucaigurvzfi\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"lcowzv tlmmbz k\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"xyhxquubibt\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"MmcPNDZggEkzPuw\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"zyneryxm\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"ggoxbwuagae\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"fzfbr\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"h3F5gkLi8gUPskIK\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"t  bfgakod\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"ypggzkgeiofhapw\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"jumhxk\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"RwHkpkFdd\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"TBZWphoYT jHncGdbE\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\" qwzduxia\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"meNICdgPjavi\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"J J\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"xdswbkjo\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"kcforfkqxw\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"VvxZYkkesE\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"oardedkxp\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"ddhbwm\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"btsPADWGt\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"apple pie\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"ybgesnuj b\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"vrqcmjkaey y\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"tVF ogIlrx\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"Pumpkin pie \")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"eqtgt\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"zlvh\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"A\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"zwfwmlij w\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"obrainbxbavwgbh n\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"V V\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"nnncfGftbYDEhnjY\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"ycyjlluh wet\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"apple\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"onljsdvhfqoj\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"j\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"Z6oxaGqpFnUp\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"apple pi e\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"hpjy\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"4Pn7oVnJN3cnhocGQ5\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"royv\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"tndhrdo d\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"J4nbcFY7pN11Dh\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"pngv\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"ujzenjmemkxpo p\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"eeeee e \")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"tqmuft\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"ztqfd ptii  \")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"eFKpmJKEnSxuJOYd\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"ita\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"vbu\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"gqh\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"e acin g  \")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"coqeqx\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"y\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"igqjtp irtb\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"nhmjoivdi\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"8 e5HJ17rErk\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"szbbwhbkiunz\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"o\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"f\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"nky\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"nwdk\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"VqqRDdbPXFl\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"pczmh\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"kqzcpqd\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"dlpzjmckdt\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"elamqcarez\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"iyiboej\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"ggiblyzgoa\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"uxuonfira\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"tqlserzwaabvlh\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"ppsttwqztpx\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"fN6Sel7c6kPHSH6inZ\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"wj\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"rbbvx\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"l6Np geHEs\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"M M\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"E E\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"jbrvtastnkkn\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"kldxco\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"dma\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"U U\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"vaydkcvogjoijl\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"dpmudl\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"keatrbvt\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"k  elw\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"i\")",
                "output": "True"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"llsyqzmbfforar\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"L0JKz3DXQuqx\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"jskamxw\")",
                "output": "False"
            },
            {
                "input": "check_if_last_char_is_a_letter(\"jf\")",
                "output": "False"
            }
        ]
    },
    {
        "problem_description": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n",
        "ground truth": "def can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
        "instances": [
            {
                "input": "can_arrange([5, 7, 5, 1, 10, 6, 11, 11, 6])",
                "output": "8"
            },
            {
                "input": "can_arrange([4, 5, 2, 4, 5])",
                "output": "2"
            },
            {
                "input": "can_arrange([2, 4, 6, 7, 2, 6, 9, 10, 5])",
                "output": "8"
            },
            {
                "input": "can_arrange([2, 7, 7, 6, 3])",
                "output": "4"
            },
            {
                "input": "can_arrange([4, 2, 2, 7, 3])",
                "output": "4"
            },
            {
                "input": "can_arrange([1,2,4,3,5])",
                "output": "3"
            },
            {
                "input": "can_arrange([2, 3, 1, 4])",
                "output": "2"
            },
            {
                "input": "can_arrange([4, 3, 4, 3, 6, 8, 6, 14, 5])",
                "output": "8"
            },
            {
                "input": "can_arrange([5, 7, 7, 9])",
                "output": "-1"
            },
            {
                "input": "can_arrange([7, 4, 1, 11, 3])",
                "output": "4"
            },
            {
                "input": "can_arrange([2, 6, 7, 1])",
                "output": "3"
            },
            {
                "input": "can_arrange([3, 1, 4, 3])",
                "output": "3"
            },
            {
                "input": "can_arrange([7, 11, 4, 9, 6])",
                "output": "4"
            },
            {
                "input": "can_arrange([6, 5, 5, 4, 1])",
                "output": "4"
            },
            {
                "input": "can_arrange([2, 5, 3, 2, 5])",
                "output": "3"
            },
            {
                "input": "can_arrange([3, 7, 2, 2, 9, 11, 10, 5, 14])",
                "output": "7"
            },
            {
                "input": "can_arrange([5, 3, 1, 2])",
                "output": "2"
            },
            {
                "input": "can_arrange([4, 1, 6, 4, 9, 6, 10, 7, 11])",
                "output": "7"
            },
            {
                "input": "can_arrange([4, 9, 5, 5, 7])",
                "output": "2"
            },
            {
                "input": "can_arrange([])",
                "output": "-1"
            },
            {
                "input": "can_arrange([4, 6, 6, 1, 2])",
                "output": "3"
            },
            {
                "input": "can_arrange([1, 6, 1, 3, 7, 8, 5, 5, 5])",
                "output": "6"
            },
            {
                "input": "can_arrange([2, 3, 9, 2])",
                "output": "3"
            },
            {
                "input": "can_arrange([5, 11, 4, 9, 5])",
                "output": "4"
            },
            {
                "input": "can_arrange([6, 1, 2, 6])",
                "output": "1"
            },
            {
                "input": "can_arrange([3, 11, 2, 5, 7])",
                "output": "2"
            },
            {
                "input": "can_arrange([1, 3, 7, 5])",
                "output": "3"
            },
            {
                "input": "can_arrange([3, 4, 2, 5, 2])",
                "output": "4"
            },
            {
                "input": "can_arrange([7, 9, 6, 4, 8])",
                "output": "3"
            },
            {
                "input": "can_arrange([5, 7, 3, 9, 1, 8, 8, 4, 12])",
                "output": "7"
            },
            {
                "input": "can_arrange([4, 4, 4, 5, 6])",
                "output": "-1"
            },
            {
                "input": "can_arrange([4, 4, 3, 2])",
                "output": "3"
            },
            {
                "input": "can_arrange([4, 5, 7, 8, 4])",
                "output": "4"
            },
            {
                "input": "can_arrange([1, 5, 7, 3, 1, 12, 5, 14, 6])",
                "output": "8"
            },
            {
                "input": "can_arrange([4, 5, 2, 8, 9])",
                "output": "2"
            },
            {
                "input": "can_arrange([5, 6, 9, 5])",
                "output": "3"
            },
            {
                "input": "can_arrange([4, 5, 3, 4, 5, 4, 7, 7, 14])",
                "output": "5"
            },
            {
                "input": "can_arrange([9, 6, 3, 5, 6])",
                "output": "2"
            },
            {
                "input": "can_arrange([1, 3, 9, 9])",
                "output": "-1"
            },
            {
                "input": "can_arrange([6, 4, 5, 1, 3, 11, 8, 5, 12])",
                "output": "7"
            },
            {
                "input": "can_arrange([1, 4, 9, 9])",
                "output": "-1"
            },
            {
                "input": "can_arrange([9, 8, 3, 7, 3])",
                "output": "4"
            },
            {
                "input": "can_arrange([5, 7, 1, 6, 6])",
                "output": "2"
            },
            {
                "input": "can_arrange([1,2,4,5])",
                "output": "-1"
            },
            {
                "input": "can_arrange([3, 6, 3, 8, 10, 8, 9, 4, 5])",
                "output": "7"
            },
            {
                "input": "can_arrange([1, 4, 7, 4, 7])",
                "output": "3"
            },
            {
                "input": "can_arrange([6, 4, 6, 7, 4])",
                "output": "4"
            },
            {
                "input": "can_arrange([1, 5, 9, 8, 3])",
                "output": "4"
            },
            {
                "input": "can_arrange([4, 2, 6, 2, 7])",
                "output": "3"
            },
            {
                "input": "can_arrange([1, 5, 9, 5])",
                "output": "3"
            },
            {
                "input": "can_arrange([5, 2, 4, 4, 1])",
                "output": "4"
            },
            {
                "input": "can_arrange([1, 1, 3, 10])",
                "output": "-1"
            },
            {
                "input": "can_arrange([5, 12, 5, 5, 8])",
                "output": "2"
            },
            {
                "input": "can_arrange([4, 12, 7, 3, 6])",
                "output": "3"
            },
            {
                "input": "can_arrange([5, 5, 8, 1, 8])",
                "output": "3"
            },
            {
                "input": "can_arrange([5, 5, 2, 8, 4])",
                "output": "4"
            },
            {
                "input": "can_arrange([4, 1, 3, 6])",
                "output": "1"
            },
            {
                "input": "can_arrange([4, 3, 2, 10, 7, 7, 3, 12, 13])",
                "output": "6"
            },
            {
                "input": "can_arrange([5, 7, 6, 9, 5])",
                "output": "4"
            },
            {
                "input": "can_arrange([7, 10, 5, 4, 4])",
                "output": "3"
            },
            {
                "input": "can_arrange([4, 1, 2, 1, 3, 4, 10, 4, 10])",
                "output": "7"
            },
            {
                "input": "can_arrange([3, 7, 7, 3, 4])",
                "output": "3"
            },
            {
                "input": "can_arrange([3, 7, 2, 7, 11, 6, 11, 12, 14])",
                "output": "5"
            },
            {
                "input": "can_arrange([5, 2, 8, 6, 2])",
                "output": "4"
            },
            {
                "input": "can_arrange([3, 7, 7, 2])",
                "output": "3"
            },
            {
                "input": "can_arrange([4, 7, 6, 5])",
                "output": "3"
            },
            {
                "input": "can_arrange([5, 7, 7, 5, 3])",
                "output": "4"
            },
            {
                "input": "can_arrange([2, 4, 1, 10, 10, 7, 3, 10, 11])",
                "output": "6"
            },
            {
                "input": "can_arrange([3, 3, 5, 12, 6])",
                "output": "4"
            },
            {
                "input": "can_arrange([2, 3, 4, 1])",
                "output": "3"
            },
            {
                "input": "can_arrange([1, 7, 8, 4, 3])",
                "output": "4"
            },
            {
                "input": "can_arrange([3, 5, 6, 8, 9])",
                "output": "-1"
            },
            {
                "input": "can_arrange([3, 2, 5, 9, 6, 10, 10, 9, 9])",
                "output": "7"
            },
            {
                "input": "can_arrange([1,4,2,5,6,7,8,9,10])",
                "output": "2"
            },
            {
                "input": "can_arrange([3, 9, 2, 5, 1, 12, 5, 4, 5])",
                "output": "7"
            },
            {
                "input": "can_arrange([1, 4, 9, 4])",
                "output": "3"
            },
            {
                "input": "can_arrange([])",
                "output": "-1"
            },
            {
                "input": "can_arrange([3, 7, 5, 6, 4])",
                "output": "4"
            },
            {
                "input": "can_arrange([2, 3, 5, 2, 4])",
                "output": "3"
            },
            {
                "input": "can_arrange([3, 7, 2, 9])",
                "output": "2"
            },
            {
                "input": "can_arrange([2, 5, 5, 3, 3])",
                "output": "3"
            },
            {
                "input": "can_arrange([3, 1, 4, 6, 4])",
                "output": "4"
            },
            {
                "input": "can_arrange([8, 4, 9, 9, 3])",
                "output": "4"
            },
            {
                "input": "can_arrange([2, 6, 2, 2, 6])",
                "output": "2"
            },
            {
                "input": "can_arrange([5, 12, 4, 6, 1])",
                "output": "4"
            },
            {
                "input": "can_arrange([6, 11, 5, 8, 3])",
                "output": "4"
            },
            {
                "input": "can_arrange([2, 5, 3, 3, 3, 8, 12, 8, 14])",
                "output": "7"
            },
            {
                "input": "can_arrange([2, 4, 1, 9])",
                "output": "2"
            },
            {
                "input": "can_arrange([9, 12, 2, 2, 5])",
                "output": "2"
            },
            {
                "input": "can_arrange([4, 5, 5, 9])",
                "output": "-1"
            },
            {
                "input": "can_arrange([6, 8, 5, 6, 10, 3, 10, 5, 11])",
                "output": "7"
            },
            {
                "input": "can_arrange([2, 8, 5, 2, 10, 9, 6, 7, 5])",
                "output": "8"
            },
            {
                "input": "can_arrange([5, 4, 5, 3, 7, 8, 5, 14, 12])",
                "output": "8"
            },
            {
                "input": "can_arrange([4, 4, 2, 8, 3, 11, 6, 8, 5])",
                "output": "8"
            },
            {
                "input": "can_arrange([2, 4, 7, 3, 8, 6, 13, 8, 11])",
                "output": "7"
            },
            {
                "input": "can_arrange([3, 6, 4, 6])",
                "output": "2"
            },
            {
                "input": "can_arrange([3, 7, 6, 6, 4])",
                "output": "4"
            },
            {
                "input": "can_arrange([2, 9, 2, 8, 7, 2, 5, 6, 13])",
                "output": "5"
            },
            {
                "input": "can_arrange([1, 5, 4, 7, 10, 2, 7, 14, 6])",
                "output": "8"
            },
            {
                "input": "can_arrange([3, 5, 2, 3])",
                "output": "2"
            },
            {
                "input": "can_arrange([3, 1, 4, 1, 3])",
                "output": "3"
            },
            {
                "input": "can_arrange([4, 6, 2, 6])",
                "output": "2"
            },
            {
                "input": "can_arrange([5, 1, 2, 5, 2])",
                "output": "4"
            },
            {
                "input": "can_arrange([1, 4, 8, 7, 4])",
                "output": "4"
            },
            {
                "input": "can_arrange([2, 4, 5, 7, 7])",
                "output": "-1"
            }
        ]
    },
    {
        "problem_description": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
        "ground truth": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
        "instances": [
            {
                "input": "largest_smallest_integers([-1, -5, -9, -10])",
                "output": "(-1, None)"
            },
            {
                "input": "largest_smallest_integers([-4, -9, -8, 2, -100, 2])",
                "output": "(-4, 2)"
            },
            {
                "input": "largest_smallest_integers([-6, 1, -8, -3, 5])",
                "output": "(-3, 1)"
            },
            {
                "input": "largest_smallest_integers([5, 6, 3, 7, 9, 1, -6])",
                "output": "(-6, 1)"
            },
            {
                "input": "largest_smallest_integers([-4, -8, -7, -3, 5])",
                "output": "(-3, 5)"
            },
            {
                "input": "largest_smallest_integers([-11, -7, -1, -3, 6])",
                "output": "(-1, 6)"
            },
            {
                "input": "largest_smallest_integers([-1, -9, -1, -6, -100, 2])",
                "output": "(-1, 2)"
            },
            {
                "input": "largest_smallest_integers([4, -7, -4, -10, 1])",
                "output": "(-4, 1)"
            },
            {
                "input": "largest_smallest_integers([4, 4, 2, 5, 4, 10])",
                "output": "(None, 2)"
            },
            {
                "input": "largest_smallest_integers([7, 7, 7, 1, 5, 7, 5, -10])",
                "output": "(-10, 1)"
            },
            {
                "input": "largest_smallest_integers([-4, -8, 0, -8, 1])",
                "output": "(-4, 1)"
            },
            {
                "input": "largest_smallest_integers([-1, -3, -5, -6, 0])",
                "output": "(-1, None)"
            },
            {
                "input": "largest_smallest_integers([1, 3, 5, 4, 1, 10])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([1, 6, 1, 9, 5, 4, 0])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([-6, -6, -6, -2, 2])",
                "output": "(-2, 2)"
            },
            {
                "input": "largest_smallest_integers([3, 4, 1, 9, 5, 7, -12])",
                "output": "(-12, 1)"
            },
            {
                "input": "largest_smallest_integers([-1, 1, -10, -6, 1])",
                "output": "(-1, 1)"
            },
            {
                "input": "largest_smallest_integers([2, 8, 13, 2, 11, 6, 10, -10])",
                "output": "(-10, 2)"
            },
            {
                "input": "largest_smallest_integers([5, 7, 3, 7, 7, 3, -1])",
                "output": "(-1, 3)"
            },
            {
                "input": "largest_smallest_integers([5, 3, 12, 7, 10, 6, 10, -12])",
                "output": "(-12, 3)"
            },
            {
                "input": "largest_smallest_integers([1, -3, -3, -3, 1])",
                "output": "(-3, 1)"
            },
            {
                "input": "largest_smallest_integers([-2, -4, 0, -5, -103, 1])",
                "output": "(-2, 1)"
            },
            {
                "input": "largest_smallest_integers([4, 4, 5, 5, 5, 6])",
                "output": "(None, 4)"
            },
            {
                "input": "largest_smallest_integers([1, 7, 4, 3, 5, 5, 0])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([1, 7, 1, 5, 3, 12, 2])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([0])",
                "output": "(None, None)"
            },
            {
                "input": "largest_smallest_integers([-4, -1, -6, -3])",
                "output": "(-1, None)"
            },
            {
                "input": "largest_smallest_integers([-7, -3, 1, 0, 5])",
                "output": "(-3, 1)"
            },
            {
                "input": "largest_smallest_integers([7, 3, 8, 4, 9, 2, 5, -9])",
                "output": "(-9, 2)"
            },
            {
                "input": "largest_smallest_integers([1, 8, 1, 9, 3, 1, 3])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([4, 5, 6, 5, 8, 7, 1, -9])",
                "output": "(-9, 1)"
            },
            {
                "input": "largest_smallest_integers([9, 6, 4, 3, 7, 4, 4, -9])",
                "output": "(-9, 3)"
            },
            {
                "input": "largest_smallest_integers([-4, -3, -1, -4, -102, 4])",
                "output": "(-1, 4)"
            },
            {
                "input": "largest_smallest_integers([2, 1, 4, 9, 11, 7, 6, -7])",
                "output": "(-7, 1)"
            },
            {
                "input": "largest_smallest_integers([-1, 2, -5, -2])",
                "output": "(-1, 2)"
            },
            {
                "input": "largest_smallest_integers([3, 6, 2, 6, 10, 9])",
                "output": "(None, 2)"
            },
            {
                "input": "largest_smallest_integers([-1, -7, -1, 1, -104, 1])",
                "output": "(-1, 1)"
            },
            {
                "input": "largest_smallest_integers([-6, -8, -7, -11, 5])",
                "output": "(-6, 5)"
            },
            {
                "input": "largest_smallest_integers([6, 2, 3, 5, 5, 8, -2])",
                "output": "(-2, 2)"
            },
            {
                "input": "largest_smallest_integers([2, 3, 5, 9, 5, 9, 3])",
                "output": "(None, 2)"
            },
            {
                "input": "largest_smallest_integers([4, 9, 1, 5, 5, 9])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([5, 3, 5, 1, 13, 4, 5, -4])",
                "output": "(-4, 1)"
            },
            {
                "input": "largest_smallest_integers([6, 1, 2, 3, 6, 2, 3])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([3, 3, 6, 1, 4, 8, -2])",
                "output": "(-2, 1)"
            },
            {
                "input": "largest_smallest_integers([2, 4, 4, 5, 10, 12, 5])",
                "output": "(None, 2)"
            },
            {
                "input": "largest_smallest_integers([3])",
                "output": "(None, 3)"
            },
            {
                "input": "largest_smallest_integers([5, 7, 12, 9, 11, 6, 6, -4])",
                "output": "(-4, 5)"
            },
            {
                "input": "largest_smallest_integers([-1, -3, -8, 2, -97, 3])",
                "output": "(-1, 2)"
            },
            {
                "input": "largest_smallest_integers([-4, -6, 1, -8, 1])",
                "output": "(-4, 1)"
            },
            {
                "input": "largest_smallest_integers([-8, -8, -3, -2, 5])",
                "output": "(-2, 5)"
            },
            {
                "input": "largest_smallest_integers([-6, -1, -10, -11])",
                "output": "(-1, None)"
            },
            {
                "input": "largest_smallest_integers([-7, -6, 0, -8, 1])",
                "output": "(-6, 1)"
            },
            {
                "input": "largest_smallest_integers([-1, -7, -10, -1, 1])",
                "output": "(-1, 1)"
            },
            {
                "input": "largest_smallest_integers([1, 0, -8, -5])",
                "output": "(-5, 1)"
            },
            {
                "input": "largest_smallest_integers([3, 1, 4, 6, 3, 6])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([-5, -5, 1, 2, -95, 6])",
                "output": "(-5, 1)"
            },
            {
                "input": "largest_smallest_integers([-6, -4, -4, -3, 1])",
                "output": "(-3, 1)"
            },
            {
                "input": "largest_smallest_integers([-3, 1, -9, -8, 2])",
                "output": "(-3, 1)"
            },
            {
                "input": "largest_smallest_integers([1, -7, -4, -11, 1])",
                "output": "(-4, 1)"
            },
            {
                "input": "largest_smallest_integers([9, 7, 1, 2, 5, 11, -3])",
                "output": "(-3, 1)"
            },
            {
                "input": "largest_smallest_integers([6, 7, 5, 7, 2, 11, 4])",
                "output": "(None, 2)"
            },
            {
                "input": "largest_smallest_integers([7, 9, 1, 8, 10, 6, 3])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([0, -8, -7, -8])",
                "output": "(-7, None)"
            },
            {
                "input": "largest_smallest_integers([-9, -2, -7, -6, 4])",
                "output": "(-2, 4)"
            },
            {
                "input": "largest_smallest_integers([6, 9, 1, 4, 5, 11])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([8, 4, 3, 8, 6, 1, 10, -8])",
                "output": "(-8, 1)"
            },
            {
                "input": "largest_smallest_integers([1, 1, 1, 8, 4, 11])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([2, 4, 1, 3, 5, 7, 0])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([-1, -7, -3, -3, 4])",
                "output": "(-1, 4)"
            },
            {
                "input": "largest_smallest_integers([8, 1, 11, 9, 12, 7, 5, -11])",
                "output": "(-11, 1)"
            },
            {
                "input": "largest_smallest_integers([5, 3, 1, 8, 7, 9, 0])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([4, 5, 3, 6, 2, 7, -7])",
                "output": "(-7, 2)"
            },
            {
                "input": "largest_smallest_integers([1])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([2, 9, 5, 3, 9, 4, 2])",
                "output": "(None, 2)"
            },
            {
                "input": "largest_smallest_integers([8, 2, 3, 11, 6, 5, -11])",
                "output": "(-11, 2)"
            },
            {
                "input": "largest_smallest_integers([-3, -8, -7, 0, 1])",
                "output": "(-3, 1)"
            },
            {
                "input": "largest_smallest_integers([7, 4, 2, 7, 7, 5, 2])",
                "output": "(None, 2)"
            },
            {
                "input": "largest_smallest_integers([2, 9, 3, 2, 3, 3])",
                "output": "(None, 2)"
            },
            {
                "input": "largest_smallest_integers([9, 6, 5, 6, 3, 2, -11])",
                "output": "(-11, 2)"
            },
            {
                "input": "largest_smallest_integers([1, 5, 8, 10, 1, 2, -3])",
                "output": "(-3, 1)"
            },
            {
                "input": "largest_smallest_integers([-7, -4, -5, -6, 5])",
                "output": "(-4, 5)"
            },
            {
                "input": "largest_smallest_integers([9, 2, 4, 1, 6, 5, -4])",
                "output": "(-4, 1)"
            },
            {
                "input": "largest_smallest_integers([5, 9, 6, 4, 3, 7])",
                "output": "(None, 3)"
            },
            {
                "input": "largest_smallest_integers([5])",
                "output": "(None, 5)"
            },
            {
                "input": "largest_smallest_integers([2, 4, 1, 3, 5, 7])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([4, 2, 5, 5, 9, 5, 2])",
                "output": "(None, 2)"
            },
            {
                "input": "largest_smallest_integers([-6, -8, 1, 0, -103, 5])",
                "output": "(-6, 1)"
            },
            {
                "input": "largest_smallest_integers([-2, -7, -4, -3, -102, 6])",
                "output": "(-2, 6)"
            },
            {
                "input": "largest_smallest_integers([2, 2, 6, 8, 14, 7, 8, -13])",
                "output": "(-13, 2)"
            },
            {
                "input": "largest_smallest_integers([-7, -8, -7, -3, 3])",
                "output": "(-3, 3)"
            },
            {
                "input": "largest_smallest_integers([-6, -1, -3, -1, 1])",
                "output": "(-1, 1)"
            },
            {
                "input": "largest_smallest_integers([5, 2, 5, 1, 10, 7, 5])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([5, 7, 4, 3, 3, 11, 2])",
                "output": "(None, 2)"
            },
            {
                "input": "largest_smallest_integers([3, 4, 5, 6, 1, 9, -2])",
                "output": "(-2, 1)"
            },
            {
                "input": "largest_smallest_integers([-3, -4, -3, -3, 5])",
                "output": "(-3, 5)"
            },
            {
                "input": "largest_smallest_integers([4])",
                "output": "(None, 4)"
            },
            {
                "input": "largest_smallest_integers([3, -6, -3, -9])",
                "output": "(-3, 3)"
            },
            {
                "input": "largest_smallest_integers([3, 4, 2, 7, 5, 3, 4])",
                "output": "(None, 2)"
            },
            {
                "input": "largest_smallest_integers([5, 5, 3, 3, 3, 4])",
                "output": "(None, 3)"
            },
            {
                "input": "largest_smallest_integers([])",
                "output": "(None, None)"
            },
            {
                "input": "largest_smallest_integers([-6, 0, -2, -4])",
                "output": "(-2, None)"
            },
            {
                "input": "largest_smallest_integers([-9, -4, -3, -8, 4])",
                "output": "(-3, 4)"
            },
            {
                "input": "largest_smallest_integers([4, 7, 8, 9, 4, 5, -4])",
                "output": "(-4, 4)"
            },
            {
                "input": "largest_smallest_integers([1, 3, 2, 4, 5, 6, -2])",
                "output": "(-2, 1)"
            },
            {
                "input": "largest_smallest_integers([6, 3, 1, 6, 8, 4, 4])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([2, 8, 6, 7, 1, 10, -8])",
                "output": "(-8, 1)"
            },
            {
                "input": "largest_smallest_integers([-2, -4, -10, -2])",
                "output": "(-2, None)"
            },
            {
                "input": "largest_smallest_integers([-3, -5, -4, -11])",
                "output": "(-3, None)"
            },
            {
                "input": "largest_smallest_integers([-3, -1, -5, -3, -102, 3])",
                "output": "(-1, 3)"
            },
            {
                "input": "largest_smallest_integers([2, 2, -1, -4])",
                "output": "(-1, 2)"
            },
            {
                "input": "largest_smallest_integers([-10, -5, -8, 2, -100, 5])",
                "output": "(-5, 2)"
            },
            {
                "input": "largest_smallest_integers([3, 8, 2, 5, 9, 1, 2])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([-1, -3, -5, -6])",
                "output": "(-1, None)"
            },
            {
                "input": "largest_smallest_integers([2])",
                "output": "(None, 2)"
            },
            {
                "input": "largest_smallest_integers([7, 1, 4, 5, 9, 8, 3])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([5, 3, 6, 9, 4, 7, -5])",
                "output": "(-5, 3)"
            },
            {
                "input": "largest_smallest_integers([7, 2, 4, 1, 4, 11, -6])",
                "output": "(-6, 1)"
            },
            {
                "input": "largest_smallest_integers([11, 6, 7, 3, 6, 6, 5, -14])",
                "output": "(-14, 3)"
            },
            {
                "input": "largest_smallest_integers([9, 8, 8, 1, 3, 3, -8])",
                "output": "(-8, 1)"
            },
            {
                "input": "largest_smallest_integers([1, 6, 2, 5, 7, 3])",
                "output": "(None, 1)"
            },
            {
                "input": "largest_smallest_integers([2, 5, 6, 1, 7, 2, -7])",
                "output": "(-7, 1)"
            },
            {
                "input": "largest_smallest_integers([-3, 0, -2, -1, -102, 6])",
                "output": "(-1, 6)"
            },
            {
                "input": "largest_smallest_integers([1, -1, -10, -8])",
                "output": "(-1, 1)"
            }
        ]
    },
    {
        "problem_description": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n",
        "ground truth": "def compare_one(a, b):\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
        "instances": [
            {
                "input": "compare_one(5, 1)",
                "output": "5"
            },
            {
                "input": "compare_one('1', '2')",
                "output": "'2'"
            },
            {
                "input": "compare_one('8', 4)",
                "output": "'8'"
            },
            {
                "input": "compare_one('37458', '6')",
                "output": "'37458'"
            },
            {
                "input": "compare_one(5, 7.461)",
                "output": "7.461"
            },
            {
                "input": "compare_one(1, 7.985)",
                "output": "7.985"
            },
            {
                "input": "compare_one('150552153', '6')",
                "output": "'150552153'"
            },
            {
                "input": "compare_one(5, 7)",
                "output": "7"
            },
            {
                "input": "compare_one('2', 4)",
                "output": "4"
            },
            {
                "input": "compare_one(8, 4)",
                "output": "8"
            },
            {
                "input": "compare_one('0', 1)",
                "output": "1"
            },
            {
                "input": "compare_one(6, '059,0733')",
                "output": "'059,0733'"
            },
            {
                "input": "compare_one('5', 6)",
                "output": "6"
            },
            {
                "input": "compare_one('6722575', '7')",
                "output": "'6722575'"
            },
            {
                "input": "compare_one(1, 6)",
                "output": "6"
            },
            {
                "input": "compare_one(2, 3)",
                "output": "3"
            },
            {
                "input": "compare_one('8', 1)",
                "output": "'8'"
            },
            {
                "input": "compare_one(3, 7)",
                "output": "7"
            },
            {
                "input": "compare_one(3, 4.593)",
                "output": "4.593"
            },
            {
                "input": "compare_one(3, 8)",
                "output": "8"
            },
            {
                "input": "compare_one(5, 6)",
                "output": "6"
            },
            {
                "input": "compare_one(6, 4)",
                "output": "6"
            },
            {
                "input": "compare_one(4, 4.036)",
                "output": "4.036"
            },
            {
                "input": "compare_one('83324232', '1')",
                "output": "'83324232'"
            },
            {
                "input": "compare_one(1, '7570790')",
                "output": "'7570790'"
            },
            {
                "input": "compare_one('21545,', '4')",
                "output": "'21545,'"
            },
            {
                "input": "compare_one(6, '470231')",
                "output": "'470231'"
            },
            {
                "input": "compare_one(4, '505')",
                "output": "'505'"
            },
            {
                "input": "compare_one(3, '0683')",
                "output": "'0683'"
            },
            {
                "input": "compare_one(4, '9813')",
                "output": "'9813'"
            },
            {
                "input": "compare_one(3, 2)",
                "output": "3"
            },
            {
                "input": "compare_one(1, '725125')",
                "output": "'725125'"
            },
            {
                "input": "compare_one(8, 7)",
                "output": "8"
            },
            {
                "input": "compare_one('6494015', '1')",
                "output": "'6494015'"
            },
            {
                "input": "compare_one(3, 5)",
                "output": "5"
            },
            {
                "input": "compare_one(5, 2.401)",
                "output": "5"
            },
            {
                "input": "compare_one('2', 6)",
                "output": "6"
            },
            {
                "input": "compare_one('4', '3')",
                "output": "'4'"
            },
            {
                "input": "compare_one(4, 7)",
                "output": "7"
            },
            {
                "input": "compare_one(2, '132,')",
                "output": "'132,'"
            },
            {
                "input": "compare_one(4, '146')",
                "output": "'146'"
            },
            {
                "input": "compare_one('7', '2')",
                "output": "'7'"
            },
            {
                "input": "compare_one('5,5716', '6')",
                "output": "'6'"
            },
            {
                "input": "compare_one('2185', '4')",
                "output": "'2185'"
            },
            {
                "input": "compare_one('6', '9')",
                "output": "'9'"
            },
            {
                "input": "compare_one('725430201', '1')",
                "output": "'725430201'"
            },
            {
                "input": "compare_one(5, '56,9232')",
                "output": "'56,9232'"
            },
            {
                "input": "compare_one(5, 6.789)",
                "output": "6.789"
            },
            {
                "input": "compare_one(6, 1.246)",
                "output": "6"
            },
            {
                "input": "compare_one(5, 9)",
                "output": "9"
            },
            {
                "input": "compare_one(1, 1.169)",
                "output": "1.169"
            },
            {
                "input": "compare_one(5, 2)",
                "output": "5"
            },
            {
                "input": "compare_one(2, '7605')",
                "output": "'7605'"
            },
            {
                "input": "compare_one('4', 1)",
                "output": "'4'"
            },
            {
                "input": "compare_one('2', '7')",
                "output": "'7'"
            },
            {
                "input": "compare_one('8', '1')",
                "output": "'8'"
            },
            {
                "input": "compare_one(7, 1)",
                "output": "7"
            },
            {
                "input": "compare_one('480', '7')",
                "output": "'480'"
            },
            {
                "input": "compare_one('5', '2')",
                "output": "'5'"
            },
            {
                "input": "compare_one(2, '1352')",
                "output": "'1352'"
            },
            {
                "input": "compare_one(4, 2.135)",
                "output": "4"
            },
            {
                "input": "compare_one(5, 3)",
                "output": "5"
            },
            {
                "input": "compare_one('9', '1')",
                "output": "'9'"
            },
            {
                "input": "compare_one(1, 2.5)",
                "output": "2.5"
            },
            {
                "input": "compare_one(5, '27,181553')",
                "output": "'27,181553'"
            },
            {
                "input": "compare_one('790', '8')",
                "output": "'790'"
            },
            {
                "input": "compare_one('6', 3)",
                "output": "'6'"
            },
            {
                "input": "compare_one(6, 5)",
                "output": "6"
            },
            {
                "input": "compare_one(5, 10)",
                "output": "10"
            },
            {
                "input": "compare_one(4, 5)",
                "output": "5"
            },
            {
                "input": "compare_one(4, 3)",
                "output": "4"
            },
            {
                "input": "compare_one('8', 6)",
                "output": "'8'"
            },
            {
                "input": "compare_one('4240', '7')",
                "output": "'4240'"
            },
            {
                "input": "compare_one(2, 1.438)",
                "output": "2"
            },
            {
                "input": "compare_one(2, 4)",
                "output": "4"
            },
            {
                "input": "compare_one('56732513', '5')",
                "output": "'56732513'"
            },
            {
                "input": "compare_one('0', 6)",
                "output": "6"
            },
            {
                "input": "compare_one('7', '5')",
                "output": "'7'"
            },
            {
                "input": "compare_one('61247915', '2')",
                "output": "'61247915'"
            },
            {
                "input": "compare_one(4, 7.4)",
                "output": "7.4"
            },
            {
                "input": "compare_one('2', 1)",
                "output": "'2'"
            },
            {
                "input": "compare_one(4, 6.082)",
                "output": "6.082"
            },
            {
                "input": "compare_one(6, '3,16033')",
                "output": "6"
            },
            {
                "input": "compare_one(1, 4.013)",
                "output": "4.013"
            },
            {
                "input": "compare_one(4, '2004,1')",
                "output": "'2004,1'"
            },
            {
                "input": "compare_one(4, 9)",
                "output": "9"
            },
            {
                "input": "compare_one(3, 4)",
                "output": "4"
            },
            {
                "input": "compare_one(1, 5.98)",
                "output": "5.98"
            },
            {
                "input": "compare_one(3, 11)",
                "output": "11"
            },
            {
                "input": "compare_one('9230004', '8')",
                "output": "'9230004'"
            },
            {
                "input": "compare_one(6, 3)",
                "output": "6"
            },
            {
                "input": "compare_one(4, 6)",
                "output": "6"
            },
            {
                "input": "compare_one(3, 3.091)",
                "output": "3.091"
            },
            {
                "input": "compare_one('1', '7')",
                "output": "'7'"
            },
            {
                "input": "compare_one(1, 2)",
                "output": "2"
            },
            {
                "input": "compare_one(4, 8)",
                "output": "8"
            },
            {
                "input": "compare_one(10, 2)",
                "output": "10"
            },
            {
                "input": "compare_one('4', 2)",
                "output": "'4'"
            },
            {
                "input": "compare_one('7', '4')",
                "output": "'7'"
            }
        ]
    },
    {
        "problem_description": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n",
        "ground truth": "def is_equal_to_sum_even(n):\n    return n%2 == 0 and n >= 8\n",
        "instances": [
            {
                "input": "is_equal_to_sum_even(7636)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(5369)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(3671)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(1635)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(5983)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(13)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(9739)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(8924)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(8004)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(8883)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(3922)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(890)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(4212)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(512)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(4852)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(9594)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(5321)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(9234)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(3769)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(2758)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(8330)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(7672)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(118)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(8475)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(2086)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(16)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(319)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(568)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(1467)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(1208)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(9340)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(12)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(3370)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(9829)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(6938)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(1738)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(4963)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(2361)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(2520)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(6074)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(9839)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(2652)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(8)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(2952)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(2487)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(572)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(293)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(605)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(4833)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(6190)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(6455)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(355)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(6751)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(6877)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(947)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(4569)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(1834)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(9668)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(8105)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(8079)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(8851)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(5048)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(6302)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(9483)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(6745)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(1496)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(5283)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(3136)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(8172)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(2873)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(7789)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(9451)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(5584)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(6518)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(5036)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(6)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(2094)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(1746)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(8090)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(9933)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(6636)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(1731)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(6023)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(10)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(2720)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(3875)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(7885)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(87)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(8705)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(206)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(337)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(8550)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(7373)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(1010)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(4390)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(3182)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(2365)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(11)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(5335)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(1608)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(2063)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(5668)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(4830)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(9185)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(654)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(6647)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(6772)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(7666)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(2583)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(6383)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(6459)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(7487)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(8814)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(8670)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(3820)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(5592)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(2890)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(3111)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(9510)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(6802)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(8510)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(2985)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(3538)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(9600)",
                "output": "True"
            },
            {
                "input": "is_equal_to_sum_even(3099)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(4)",
                "output": "False"
            },
            {
                "input": "is_equal_to_sum_even(8163)",
                "output": "False"
            }
        ]
    },
    {
        "problem_description": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
        "ground truth": "def special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
        "instances": [
            {
                "input": "special_factorial(1)",
                "output": "1"
            },
            {
                "input": "special_factorial(8)",
                "output": "5056584744960000"
            },
            {
                "input": "special_factorial(12)",
                "output": "127313963299399416749559771247411200000000000"
            },
            {
                "input": "special_factorial(4)",
                "output": "288"
            },
            {
                "input": "special_factorial(11)",
                "output": "265790267296391946810949632000000000"
            },
            {
                "input": "special_factorial(5)",
                "output": "34560"
            },
            {
                "input": "special_factorial(2)",
                "output": "2"
            },
            {
                "input": "special_factorial(6)",
                "output": "24883200"
            },
            {
                "input": "special_factorial(9)",
                "output": "1834933472251084800000"
            },
            {
                "input": "special_factorial(10)",
                "output": "6658606584104736522240000000"
            },
            {
                "input": "special_factorial(7)",
                "output": "125411328000"
            },
            {
                "input": "special_factorial(3)",
                "output": "12"
            }
        ]
    },
    {
        "problem_description": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
        "ground truth": "def fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
        "instances": [
            {
                "input": "fix_spaces(\"WcIJIkVqIuTy\")",
                "output": "'WcIJIkVqIuTy'"
            },
            {
                "input": "fix_spaces(\"zIWnI ZT qkPQGUt IWaReADRqGj qt\")",
                "output": "'zIWnI_ZT_qkPQGUt_IWaReADRqGj_qt'"
            },
            {
                "input": "fix_spaces(\"qVh w zm RiAz s PhWGCeyIYML\")",
                "output": "'qVh_w_zm_RiAz_s_PhWGCeyIYML'"
            },
            {
                "input": "fix_spaces(\"WQaojTbrKEjIxu\")",
                "output": "'WQaojTbrKEjIxu'"
            },
            {
                "input": "fix_spaces(\"mR t VWhN\")",
                "output": "'mR_t_VWhN'"
            },
            {
                "input": "fix_spaces(\"P HhjA\")",
                "output": "'P_HhjA'"
            },
            {
                "input": "fix_spaces(\" HlWByHxPC SJfWg\")",
                "output": "'_HlWByHxPC_SJfWg'"
            },
            {
                "input": "fix_spaces(\"qvLUqajSLFlJvxi DihtmSpggA QL\")",
                "output": "'qvLUqajSLFlJvxi_DihtmSpggA_QL'"
            },
            {
                "input": "fix_spaces(\"DLEMmv HNUx\")",
                "output": "'DLEMmv_HNUx'"
            },
            {
                "input": "fix_spaces(\"KvPFFG DKS K\")",
                "output": "'KvPFFG_DKS_K'"
            },
            {
                "input": "fix_spaces(\"uhfatkgA\")",
                "output": "'uhfatkgA'"
            },
            {
                "input": "fix_spaces(\"NjL AiGVzsLVW\")",
                "output": "'NjL_AiGVzsLVW'"
            },
            {
                "input": "fix_spaces(\"wgC  PGde TIhSTUCt ZrbtxPU\")",
                "output": "'wgC__PGde_TIhSTUCt_ZrbtxPU'"
            },
            {
                "input": "fix_spaces(\" hNrjmnT\")",
                "output": "'_hNrjmnT'"
            },
            {
                "input": "fix_spaces(\"wr 4LHnnbC mmyOyNk2\")",
                "output": "'wr_4LHnnbC_mmyOyNk2'"
            },
            {
                "input": "fix_spaces(\"RJcVkMFMyxQi\")",
                "output": "'RJcVkMFMyxQi'"
            },
            {
                "input": "fix_spaces(\"ChYHX q K\")",
                "output": "'ChYHX_q_K'"
            },
            {
                "input": "fix_spaces(\"Pqq\")",
                "output": "'Pqq'"
            },
            {
                "input": "fix_spaces(\"omKia Ds b\")",
                "output": "'omKia_Ds_b'"
            },
            {
                "input": "fix_spaces(\"DdQPEN\")",
                "output": "'DdQPEN'"
            },
            {
                "input": "fix_spaces(\"  X kMm mnlmqHa\")",
                "output": "'__X_kMm_mnlmqHa'"
            },
            {
                "input": "fix_spaces(\"oA56m o vry8fF E\")",
                "output": "'oA56m_o_vry8fF_E'"
            },
            {
                "input": "fix_spaces(\"juJj\")",
                "output": "'juJj'"
            },
            {
                "input": "fix_spaces(\"lfzgnYOWZP HeUYnmXviC  q u  \")",
                "output": "'lfzgnYOWZP_HeUYnmXviC__q_u_'"
            },
            {
                "input": "fix_spaces(\"sWs\")",
                "output": "'sWs'"
            },
            {
                "input": "fix_spaces(\" k GXdAvE  Dn\")",
                "output": "'_k_GXdAvE__Dn'"
            },
            {
                "input": "fix_spaces(\"GaWyVZOS L  Vzzp Ppy  ZgK HbA\")",
                "output": "'GaWyVZOS_L__Vzzp_Ppy__ZgK_HbA'"
            },
            {
                "input": "fix_spaces(\"p jHLnQ BJauZNVSUwvCFh mcEw\")",
                "output": "'p_jHLnQ_BJauZNVSUwvCFh_mcEw'"
            },
            {
                "input": "fix_spaces(\"bgzrizRZMLul WO\")",
                "output": "'bgzrizRZMLul_WO'"
            },
            {
                "input": "fix_spaces(\"YSPlkBqcNOIzI  Gxs fQEBDDm   p\")",
                "output": "'YSPlkBqcNOIzI__Gxs_fQEBDDm-p'"
            },
            {
                "input": "fix_spaces(\"UmwisBcJrND  \")",
                "output": "'UmwisBcJrND_'"
            },
            {
                "input": "fix_spaces(\"tBjbLSsExMkdPs\")",
                "output": "'tBjbLSsExMkdPs'"
            },
            {
                "input": "fix_spaces(\"hxUH rBGHCUKd BxK\")",
                "output": "'hxUH_rBGHCUKd_BxK'"
            },
            {
                "input": "fix_spaces(\"xPWFEb  Ds\")",
                "output": "'xPWFEb__Ds'"
            },
            {
                "input": "fix_spaces(\"tjDYCHG V\")",
                "output": "'tjDYCHG_V'"
            },
            {
                "input": "fix_spaces(\"6 Qi8F29fd0cusDXbco1B\")",
                "output": "'6_Qi8F29fd0cusDXbco1B'"
            },
            {
                "input": "fix_spaces(\"efSC ja0qnM ZRf\")",
                "output": "'efSC_ja0qnM_ZRf'"
            },
            {
                "input": "fix_spaces(\"H  TOi  \")",
                "output": "'H__TOi_'"
            },
            {
                "input": "fix_spaces(\"kr gucwxhnoz\")",
                "output": "'kr_gucwxhnoz'"
            },
            {
                "input": "fix_spaces(\"hMS MDFRVC LjX p\")",
                "output": "'hMS_MDFRVC_LjX_p'"
            },
            {
                "input": "fix_spaces(\"HSjqtRnWF\")",
                "output": "'HSjqtRnWF'"
            },
            {
                "input": "fix_spaces(\"DYBZQSXWP\")",
                "output": "'DYBZQSXWP'"
            },
            {
                "input": "fix_spaces(\"XL3zCHleZjf8 z fBra 2\")",
                "output": "'XL3zCHleZjf8_z_fBra_2'"
            },
            {
                "input": "fix_spaces(\"xoqb VFXUhbvu\")",
                "output": "'xoqb_VFXUhbvu'"
            },
            {
                "input": "fix_spaces(\"pooMg E 9QYWyjooC4YrR\")",
                "output": "'pooMg_E_9QYWyjooC4YrR'"
            },
            {
                "input": "fix_spaces(\"fWH qE MT  EfztB CCnwceQb\")",
                "output": "'fWH_qE_MT__EfztB_CCnwceQb'"
            },
            {
                "input": "fix_spaces(\"bBp  L IkxCuj\")",
                "output": "'bBp__L_IkxCuj'"
            },
            {
                "input": "fix_spaces(\"IZUqpZhoHYqeW HDHQ5NC\")",
                "output": "'IZUqpZhoHYqeW_HDHQ5NC'"
            },
            {
                "input": "fix_spaces(\"c8 PtkRMrGTuO PgY\")",
                "output": "'c8_PtkRMrGTuO_PgY'"
            },
            {
                "input": "fix_spaces(\"jS cxsGCWIjTmp R g  MqCzly \")",
                "output": "'jS_cxsGCWIjTmp_R_g__MqCzly_'"
            },
            {
                "input": "fix_spaces(\"obSHyRNW K\")",
                "output": "'obSHyRNW_K'"
            },
            {
                "input": "fix_spaces(\"OXLry xvh\")",
                "output": "'OXLry_xvh'"
            },
            {
                "input": "fix_spaces(\"aiCpCl \")",
                "output": "'aiCpCl_'"
            },
            {
                "input": "fix_spaces(\"rAQ  Xm\")",
                "output": "'rAQ__Xm'"
            },
            {
                "input": "fix_spaces(\"yGOxnEp wDjcEEWJOXWZdduncc\")",
                "output": "'yGOxnEp_wDjcEEWJOXWZdduncc'"
            },
            {
                "input": "fix_spaces(\"qWvJIpCwkJAC D\")",
                "output": "'qWvJIpCwkJAC_D'"
            },
            {
                "input": "fix_spaces(\" y zaGe  vla l XdzqSyQdPLLg\")",
                "output": "'_y_zaGe__vla_l_XdzqSyQdPLLg'"
            },
            {
                "input": "fix_spaces(\"TAuzNclZIjhA\")",
                "output": "'TAuzNclZIjhA'"
            },
            {
                "input": "fix_spaces(\"cakZwxIKzRr\")",
                "output": "'cakZwxIKzRr'"
            },
            {
                "input": "fix_spaces(\"fvNwUQK iXFVvd xF\")",
                "output": "'fvNwUQK_iXFVvd_xF'"
            },
            {
                "input": "fix_spaces(\"g5Os0N59EWK4O9SPhH\")",
                "output": "'g5Os0N59EWK4O9SPhH'"
            },
            {
                "input": "fix_spaces(\"m  7H uwEkuQ AsUJ2aE\")",
                "output": "'m__7H_uwEkuQ_AsUJ2aE'"
            },
            {
                "input": "fix_spaces(\"ZFwIEQNtR\")",
                "output": "'ZFwIEQNtR'"
            },
            {
                "input": "fix_spaces(\" n GGbKFbBumRIUx Q SFjH B\")",
                "output": "'_n_GGbKFbBumRIUx_Q_SFjH_B'"
            },
            {
                "input": "fix_spaces(\"IUaSHLXIWSpJSl fSZHMEluTSNml x \")",
                "output": "'IUaSHLXIWSpJSl_fSZHMEluTSNml_x_'"
            },
            {
                "input": "fix_spaces(\"W8rOXLe qHiAd 1e\")",
                "output": "'W8rOXLe_qHiAd_1e'"
            },
            {
                "input": "fix_spaces(\"N3j2DEcS 8ZBJ GElo\")",
                "output": "'N3j2DEcS_8ZBJ_GElo'"
            },
            {
                "input": "fix_spaces(\"GSsLIYNG\")",
                "output": "'GSsLIYNG'"
            },
            {
                "input": "fix_spaces(\"nNYBvpXg QGtbCs\")",
                "output": "'nNYBvpXg_QGtbCs'"
            },
            {
                "input": "fix_spaces(\"SgcoeYWildqH\")",
                "output": "'SgcoeYWildqH'"
            },
            {
                "input": "fix_spaces(\"KZLm zj V\")",
                "output": "'KZLm_zj_V'"
            },
            {
                "input": "fix_spaces(\"sRewqfQk VHqKAhEUby b XhSOxF\")",
                "output": "'sRewqfQk_VHqKAhEUby_b_XhSOxF'"
            },
            {
                "input": "fix_spaces(\"LgsGYeLKpcGPxWdWWmYiwJk G\")",
                "output": "'LgsGYeLKpcGPxWdWWmYiwJk_G'"
            },
            {
                "input": "fix_spaces(\"nsvNbyVkTqppn\")",
                "output": "'nsvNbyVkTqppn'"
            },
            {
                "input": "fix_spaces(\"s BqawCWXTPFuq\")",
                "output": "'s_BqawCWXTPFuq'"
            },
            {
                "input": "fix_spaces(\"DOg Vo n7KyT3JoV\")",
                "output": "'DOg_Vo_n7KyT3JoV'"
            },
            {
                "input": "fix_spaces(\"bxkuPhTvbyl  CYNfNCXZxwuOuaoKZZFs\")",
                "output": "'bxkuPhTvbyl__CYNfNCXZxwuOuaoKZZFs'"
            },
            {
                "input": "fix_spaces(\"LSvTJTWXIY6xd\")",
                "output": "'LSvTJTWXIY6xd'"
            },
            {
                "input": "fix_spaces(\"pEeOqcw\")",
                "output": "'pEeOqcw'"
            },
            {
                "input": "fix_spaces(\"XXXhd gvveQpx\")",
                "output": "'XXXhd_gvveQpx'"
            },
            {
                "input": "fix_spaces(\"LG PRlPytPxIp\")",
                "output": "'LG_PRlPytPxIp'"
            },
            {
                "input": "fix_spaces(\"ffEm\")",
                "output": "'ffEm'"
            },
            {
                "input": "fix_spaces(\"nP1 tfQl6xSaO o jdR\")",
                "output": "'nP1_tfQl6xSaO_o_jdR'"
            },
            {
                "input": "fix_spaces(\"LKSlDrzITZYhZrJW  YxpWROBfcp\")",
                "output": "'LKSlDrzITZYhZrJW__YxpWROBfcp'"
            },
            {
                "input": "fix_spaces(\"dTIDkOm \")",
                "output": "'dTIDkOm_'"
            },
            {
                "input": "fix_spaces(\"KADlzEo uSIfcAEx EcybDfB\")",
                "output": "'KADlzEo_uSIfcAEx_EcybDfB'"
            },
            {
                "input": "fix_spaces(\"RDkyZASqhvaHN\")",
                "output": "'RDkyZASqhvaHN'"
            },
            {
                "input": "fix_spaces(\"KVke  LXJF\")",
                "output": "'KVke__LXJF'"
            },
            {
                "input": "fix_spaces(\"RcM\")",
                "output": "'RcM'"
            },
            {
                "input": "fix_spaces(\"c4NsVcWOuv9 I7NWmf\")",
                "output": "'c4NsVcWOuv9_I7NWmf'"
            },
            {
                "input": "fix_spaces(\"tDl\")",
                "output": "'tDl'"
            },
            {
                "input": "fix_spaces(\"v5Ec0Im4 zEw\")",
                "output": "'v5Ec0Im4_zEw'"
            },
            {
                "input": "fix_spaces(\"wyKYiiMDK\")",
                "output": "'wyKYiiMDK'"
            },
            {
                "input": "fix_spaces(\"ro7QFhNH NIFU3r8\")",
                "output": "'ro7QFhNH_NIFU3r8'"
            },
            {
                "input": "fix_spaces(\"EcNnlfJxiovXtWBSzlRhRbnUKxpKjHP\")",
                "output": "'EcNnlfJxiovXtWBSzlRhRbnUKxpKjHP'"
            },
            {
                "input": "fix_spaces(\"DhZX wS0A 8 aRbr7\")",
                "output": "'DhZX_wS0A_8_aRbr7'"
            },
            {
                "input": "fix_spaces(\"WE v Dn\")",
                "output": "'WE_v_Dn'"
            },
            {
                "input": "fix_spaces(\"uo3B0 gh 0b8oi\")",
                "output": "'uo3B0_gh_0b8oi'"
            },
            {
                "input": "fix_spaces(\"8ko7aW0  HWHDih\")",
                "output": "'8ko7aW0__HWHDih'"
            },
            {
                "input": "fix_spaces(\"lyjgnrJJ \")",
                "output": "'lyjgnrJJ_'"
            },
            {
                "input": "fix_spaces(\"dQkgzwp WPy\")",
                "output": "'dQkgzwp_WPy'"
            },
            {
                "input": "fix_spaces(\"SSubQcHrtIhhkcEr\")",
                "output": "'SSubQcHrtIhhkcEr'"
            },
            {
                "input": "fix_spaces(\"soVp hReG\")",
                "output": "'soVp_hReG'"
            },
            {
                "input": "fix_spaces(\"znaZRzT\")",
                "output": "'znaZRzT'"
            },
            {
                "input": "fix_spaces(\"FPd Ry\")",
                "output": "'FPd_Ry'"
            },
            {
                "input": "fix_spaces(\"LsQXjcCmJvpbRvF\")",
                "output": "'LsQXjcCmJvpbRvF'"
            },
            {
                "input": "fix_spaces(\"TMGVP9m  N CHor  \")",
                "output": "'TMGVP9m__N_CHor_'"
            },
            {
                "input": "fix_spaces(\"dbAfQgom \")",
                "output": "'dbAfQgom_'"
            },
            {
                "input": "fix_spaces(\" Zh CENyelFfzphBIUN JhPibcsu\")",
                "output": "'_Zh_CENyelFfzphBIUN_JhPibcsu'"
            },
            {
                "input": "fix_spaces(\"wfjZyDWmoOkq\")",
                "output": "'wfjZyDWmoOkq'"
            },
            {
                "input": "fix_spaces(\"CxwPCoxwy\")",
                "output": "'CxwPCoxwy'"
            },
            {
                "input": "fix_spaces(\"TimB h C  aDVBM\")",
                "output": "'TimB_h_C__aDVBM'"
            },
            {
                "input": "fix_spaces(\"GWeAlrikrt\")",
                "output": "'GWeAlrikrt'"
            },
            {
                "input": "fix_spaces(\"MLqiYNDnirbdZPE  fNh DwRKg v\")",
                "output": "'MLqiYNDnirbdZPE__fNh_DwRKg_v'"
            },
            {
                "input": "fix_spaces(\"gqkoUqTmUpPwRXbTonDIONEBh\")",
                "output": "'gqkoUqTmUpPwRXbTonDIONEBh'"
            },
            {
                "input": "fix_spaces(\"zx renBYt\")",
                "output": "'zx_renBYt'"
            },
            {
                "input": "fix_spaces(\"rsXd HjOLw\")",
                "output": "'rsXd_HjOLw'"
            },
            {
                "input": "fix_spaces(\"jP ZMGh wL\")",
                "output": "'jP_ZMGh_wL'"
            },
            {
                "input": "fix_spaces(\"kSccTcTibg Vg PASHng MRp znUHkIIQ\")",
                "output": "'kSccTcTibg_Vg_PASHng_MRp_znUHkIIQ'"
            },
            {
                "input": "fix_spaces(\"riAXMK0R dwwvuRuz0j0T\")",
                "output": "'riAXMK0R_dwwvuRuz0j0T'"
            },
            {
                "input": "fix_spaces(\" R \")",
                "output": "'_R_'"
            },
            {
                "input": "fix_spaces(\"rArrfeyPwoO\")",
                "output": "'rArrfeyPwoO'"
            },
            {
                "input": "fix_spaces(\"RrcD fuBdffFGBipShndUHBIxqo\")",
                "output": "'RrcD_fuBdffFGBipShndUHBIxqo'"
            },
            {
                "input": "fix_spaces(\"wSF\")",
                "output": "'wSF'"
            },
            {
                "input": "fix_spaces(\"euMbAQMiO WROXqYZ\")",
                "output": "'euMbAQMiO_WROXqYZ'"
            }
        ]
    },
    {
        "problem_description": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
        "ground truth": "def file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
        "instances": [
            {
                "input": "file_name_check(\"svIkpyQe7pYHiedh.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"pps:pq00f&=-e@p4oe^u1so3^8.exe\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"PfqMHW.txt\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"gnz+zb@^cy+|gqi*h?l=s.txt\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"+lq_?kE-o!gd|&X.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"l.igcr.exe\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"UIlYE5DRb2SV.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"h*ujtt.~j*/l%|*i$e.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check('all.exe.txt')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"pteiqqcwqbu.w.j.txt\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"6cqsqta.txt\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"*b0#ln!9vf#%oa|17ie/$-.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"i.yshapqayncaj.exe\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check('s1sdf3.asd')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"rvwndksjhoo.txt\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"t+yx?e%/sk?*vecv/t.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"sIR6wneLqFNKwY.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"uw26lmhi4y0af.txt\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"^-O?gGH.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"Ww~vDBe_.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"m8frtq@xt:#z:.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"qtf&js*:$a.vk+e.txt\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check('this_is_12valid.6exe4.txt')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"T|x@:8vC6.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check('#this2_i4s_5valid.ten')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"wSvddcj3BdEgxA18Ne.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"i66yaotkz.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"0g4zwy.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"|ypo/e+~=yxqk@l:=n-|_w/.exe\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\".pszd.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"qp|%#&xu|y~$jx.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"oe~$&$@g~u&@@z:xj!lm@!.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"_:a:46!8yq_#06bxji8rf!2nt1!lsc.exe\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"#gk_nfFgjJg:.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"9KWOUbCL3Q0QR1p.txt\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"qnt.txt\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"c+91:8=_*&=z#s&3h7#/.exe\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"lzi-@=?!c@%s&p$si.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"+52?m&^_!c-q0r?pe.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"@Fmt~B-_BW.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"0i7q0uqdv.txt\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"annATke..ej.cVxK6vuE.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"tiscsoskzlipxld.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"^m^p:n|?#h@*ci*^=k--v.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"cf612q:n?o1m8b0!+v43-wh.exe\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check('this_is_valid.txtexe')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"ktqDzjP.og69Y3=.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"1$q&45N3=lRzm.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check('no_one#knows.dll')",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"o2+fqga~_h.@k1d0:o$_$.0.txt\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"s&c1x*o/er*4$^rpw1uzbcb.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check('final132')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"*w_brros!kq@iaoq.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"OMEihb9WMxRG82MZLPx.txt\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check('/this_is_valid.dll')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"sdsojhwcc.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"vnlxospuliq.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"kbpmh.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"l$!dvdd+dg!/:fz$_^.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\":11j%:n5/$jp^ruab|.exe\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"vmuccyt.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"n-+g?&+g=x~s&~.-&fk%.exe\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"botehqmlxp.olr.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"laj@e.luof@!n.exe\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check('I563_No.exe')",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"~nfkmjqc_$cor%/?ykj%%x%^o9^.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"j*90pb:3mwpch1%e$fc.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check('@this1_is6_valid.exe')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"zpbyutvvgq0mpoaxu.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"LMao0wz.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"IrXV.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check('?aREYA.exe')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"e$r=krxi#o=yevwd**z.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"$:ZRFZ04!1-n.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"hpuf2oz.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"qqsy..egxjde.txt\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"E1Lnmck&QIbVV01.txt\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"AwtZe!.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check('His12FILE94.exe')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"s+b.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"y=rdUuG1Okf=F.txt\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"oopglo.tf.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check('Is3youfault.txt')",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\".$_1vhnquh6s=!6r_!~j1~.exe\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check('s.')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"ssgbu.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"6kk^:!&tl0zk&hrz*y~mu3.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"r5q-#nhxw3:4b9d5z*xai.txt\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check('final..txt')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"&z|i!-+@&l~#g%|%who.txt\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"jYQ!%7Oadf=HxM.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"xj82uvv3djfudzwer.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"icXCNbcPz.txt\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"eOky5qsos.kg.txt\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"zmz1h1ZW5.txt\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"dzs.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check('1I563_Yes3.exe')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"i%$mq/p!_w&@eu@c/gvxajql.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"nzigdcskiz.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"$ca@u.s@@-yx#a/.exe\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check('this_is_valid.wow')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"bPw.jjsT1YCelZBQO.exe\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"fEev.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"+BN=.exe\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"^/je*z?-@ylp^ai.s.txt\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"dfedi.txt\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"VQtimZLsgjDfOBejmciF.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check('_Y.txt')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"0Y=Mm+Oe~.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check('I563_Yes3.txtt')",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"vgjgf.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check('K.dll')",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"p90hm2.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"@_HqUwn.taP9n@IeU.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"yvfznekitgek.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"iEVAdcwQQCoiO0jM.txt\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\".tt.txt\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\":#lg=cp&ur#+d5d^li-b8.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check('MY16FILE3.exe')",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"example.txt\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"izanbyqrv3b.dll\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"on&z+t~=su$k.txt\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"17E9anu32jG:EP~54.exe\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"ncStUyBIegxXn6HC.exe\")",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"1example.dll\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check(\"~%/-qvn&_:g|rcs&g-ky#.txt\")",
                "output": "'No'"
            },
            {
                "input": "file_name_check('.txt')",
                "output": "'No'"
            },
            {
                "input": "file_name_check('this_is_valid.txt')",
                "output": "'Yes'"
            },
            {
                "input": "file_name_check(\"hl3tarbv4uwywwr.exe\")",
                "output": "'Yes'"
            }
        ]
    },
    {
        "problem_description": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
        "ground truth": "def sum_squares(lst):\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
        "instances": [
            {
                "input": "sum_squares([4, 6, 5])",
                "output": "27"
            },
            {
                "input": "sum_squares([-5, -8, 6, -6, -6])",
                "output": "-157"
            },
            {
                "input": "sum_squares([2, -2, 1, 4, -10])",
                "output": "-981"
            },
            {
                "input": "sum_squares([5, 7, 13])",
                "output": "45"
            },
            {
                "input": "sum_squares([1, 4, 1, 6, 3, 3, 4, 5, 4])",
                "output": "157"
            },
            {
                "input": "sum_squares([-60, -95, 1, 5, -3])",
                "output": "3504"
            },
            {
                "input": "sum_squares([-17, -13, -6, 33, 37, 23, -25, 26, -38, 25, -2, 16, -31, 38, 39])",
                "output": "-509"
            },
            {
                "input": "sum_squares([-60, -104, 4, 3, 3])",
                "output": "3536"
            },
            {
                "input": "sum_squares([-5, -5, -3, -5, 4, 3, 3, 3, -1])",
                "output": "120"
            },
            {
                "input": "sum_squares([-2, 1, 2, 5, 4, 3, 2, 2, -4])",
                "output": "41"
            },
            {
                "input": "sum_squares([3, 0, 19, 0, -14, 16, -3, 19, -10, -16, -3, 15, -9, 2, 16, 12, 12, 12, 5, 15])",
                "output": "-1381"
            },
            {
                "input": "sum_squares([3])",
                "output": "9"
            },
            {
                "input": "sum_squares([2, 1, 4, 5, 3, 3, 5, 2, 1])",
                "output": "92"
            },
            {
                "input": "sum_squares([3, 3, 7])",
                "output": "19"
            },
            {
                "input": "sum_squares([4, 0, 4, 4, -7])",
                "output": "-307"
            },
            {
                "input": "sum_squares([-1, 5, 3, 4, 1, 3, 2, 2, 1])",
                "output": "36"
            },
            {
                "input": "sum_squares([-4, 5, 3, 3, 1, 4, 1, 5, -5])",
                "output": "-81"
            },
            {
                "input": "sum_squares([1, 1, 5])",
                "output": "7"
            },
            {
                "input": "sum_squares([4, -5, 22, 4, -14, 10, -4, 16, -12, -16, -2, 15, -17, 6, 17, 15, 14, 16, 3, 7])",
                "output": "-799"
            },
            {
                "input": "sum_squares([-15, -8, -6, 37, 34, 31, -22, 27, -42, 16, -3, 16, -27, 30, 35])",
                "output": "-31599"
            },
            {
                "input": "sum_squares([1, -1, 22, -5, -13, 12, -2, 17, -14, -11, -3, 13, -18, 11, 15, 9, 17, 15, 2, 12])",
                "output": "645"
            },
            {
                "input": "sum_squares([3, 4, 6])",
                "output": "19"
            },
            {
                "input": "sum_squares([4, 1, 5])",
                "output": "22"
            },
            {
                "input": "sum_squares([-56, -97, 4, 5, -7])",
                "output": "2725"
            },
            {
                "input": "sum_squares([-1, 1, -1, -1, -3, 3, 1, -5, -1])",
                "output": "-27"
            },
            {
                "input": "sum_squares([3, 4, 2])",
                "output": "15"
            },
            {
                "input": "sum_squares([-58, -98, 6, 2, 3])",
                "output": "3303"
            },
            {
                "input": "sum_squares([1,4,9])",
                "output": "14"
            },
            {
                "input": "sum_squares([3, 4, 3, 4, 3, 4, 1, 2, 4])",
                "output": "130"
            },
            {
                "input": "sum_squares([4])",
                "output": "16"
            },
            {
                "input": "sum_squares([0, -6, 14, 4, -16, 14, 4, 11, -13, -9, -5, 15, -18, 10, 18, 7, 13, 14, 9, 9])",
                "output": "-3435"
            },
            {
                "input": "sum_squares([2])",
                "output": "4"
            },
            {
                "input": "sum_squares([-18, -14, 0, 34, 33, 25, -21, 22, -39, 21, -5, 11, -28, 33, 34])",
                "output": "-20130"
            },
            {
                "input": "sum_squares([-11, -6, -7, 41, 36, 23, -18, 29, -39, 23, -5, 9, -31, 36, 36])",
                "output": "-8932"
            },
            {
                "input": "sum_squares([-4, -5, 2, 2, -2, -3, -5, -2, -5])",
                "output": "-96"
            },
            {
                "input": "sum_squares([2, 0, 22, 0, -15, 15, -2, 13, -12, -14, -5, 13, -10, 2, 16, 11, 18, 15, 5, 8])",
                "output": "1278"
            },
            {
                "input": "sum_squares([5])",
                "output": "25"
            },
            {
                "input": "sum_squares([3, -8, 6, -1, -10])",
                "output": "-992"
            },
            {
                "input": "sum_squares([2, 1, 6])",
                "output": "11"
            },
            {
                "input": "sum_squares([4, 5, 4, 4, 4, 1, 2, 3, 3])",
                "output": "140"
            },
            {
                "input": "sum_squares([1, 0, -2, 3, -6, -2, -3, 4, 4])",
                "output": "-133"
            },
            {
                "input": "sum_squares([-1,-1,-1,-1,-1,-1,-1,-1,-1])",
                "output": "-3"
            },
            {
                "input": "sum_squares([-1, -5, 7, -3, -6])",
                "output": "-204"
            },
            {
                "input": "sum_squares([-17, -6, -1, 36, 37, 28, -16, 27, -43, 15, -6, 11, -29, 38, 39])",
                "output": "-25817"
            },
            {
                "input": "sum_squares([5, 6, 4, 4, 4, 6, 6, 3, 2])",
                "output": "168"
            },
            {
                "input": "sum_squares([3, 5, 10])",
                "output": "24"
            },
            {
                "input": "sum_squares([-6, 2, 5, 4, 2, 1, 3, 5, -5])",
                "output": "-43"
            },
            {
                "input": "sum_squares([-56, -96, 1, 5, 0])",
                "output": "3066"
            },
            {
                "input": "sum_squares([3, 3, -4, 2, -2, -6, -2, -1, 3])",
                "output": "28"
            },
            {
                "input": "sum_squares([-3, -9, 2, -5, -4])",
                "output": "-37"
            },
            {
                "input": "sum_squares([4, -3, 7, -3, -9])",
                "output": "-700"
            },
            {
                "input": "sum_squares([-3, -5, 3, -6, -6])",
                "output": "-173"
            },
            {
                "input": "sum_squares([2, 4, 6, 2, 1, 1, 1, 3, 4])",
                "output": "88"
            },
            {
                "input": "sum_squares([1, 4, 5, 5, 3, 2, 5, 3, 4])",
                "output": "156"
            },
            {
                "input": "sum_squares([-11, -6, -4, 37, 32, 25, -23, 28, -35, 20, -3, 17, -22, 31, 40])",
                "output": "-7076"
            },
            {
                "input": "sum_squares([6, 3, 4, 3, 4, 3, 2, 1, 1])",
                "output": "125"
            },
            {
                "input": "sum_squares([6, 7, 1])",
                "output": "44"
            },
            {
                "input": "sum_squares([-4, -10, 6, -4, -7])",
                "output": "-315"
            },
            {
                "input": "sum_squares([2, 3, -1, 1, 0, -5, 3, 4, 1])",
                "output": "16"
            },
            {
                "input": "sum_squares([0, -7, 4, -3, -1])",
                "output": "5"
            },
            {
                "input": "sum_squares([3, 6, 6, 2, 3, 1, 3, 3, 2])",
                "output": "73"
            },
            {
                "input": "sum_squares([2, -2, 14, -6, -19, 13, -5, 12, -11, -13, -3, 11, -19, 1, 14, 9, 16, 18, 9, 5])",
                "output": "-3254"
            },
            {
                "input": "sum_squares([-51, -102, 5, 1, -5])",
                "output": "2380"
            },
            {
                "input": "sum_squares([-19, -8, 2, 33, 37, 31, -24, 29, -39, 22, -8, 17, -23, 34, 35])",
                "output": "-5495"
            },
            {
                "input": "sum_squares([-16, -4, -7, 31, 33, 23, -23, 25, -38, 21, -8, 15, -25, 32, 39])",
                "output": "-16008"
            },
            {
                "input": "sum_squares([4, 1, 13])",
                "output": "30"
            },
            {
                "input": "sum_squares([-17, -10, 3, 36, 37, 23, -17, 27, -36, 22, 0, 8, -21, 33, 39])",
                "output": "6919"
            },
            {
                "input": "sum_squares([5, 9, 10])",
                "output": "44"
            },
            {
                "input": "sum_squares([-5, 1, 13, 4, -19, 9, 0, 19, -16, -10, -7, 16, -14, 8, 15, 12, 11, 18, 1, 6])",
                "output": "-9044"
            },
            {
                "input": "sum_squares([-4, 2, 3, 2, 2, 4, 3, 5, 2])",
                "output": "59"
            },
            {
                "input": "sum_squares([3, -1, 18, -1, -12, 11, 2, 17, -13, -9, -4, 19, -10, 8, 13, 9, 11, 16, 1, 9])",
                "output": "-2211"
            },
            {
                "input": "sum_squares([-54, -104, 5, 2, -5])",
                "output": "2696"
            },
            {
                "input": "sum_squares([1,1,1,1,1,1,1,1,1])",
                "output": "9"
            },
            {
                "input": "sum_squares([-5, 5, 1, 3, 4, 4, 5, 3, 0])",
                "output": "136"
            },
            {
                "input": "sum_squares([0])",
                "output": "0"
            },
            {
                "input": "sum_squares([6, 1, 1])",
                "output": "38"
            },
            {
                "input": "sum_squares([-4, 0, 3, 0, -2])",
                "output": "11"
            },
            {
                "input": "sum_squares([-53, -94, 3, 2, -1])",
                "output": "2721"
            },
            {
                "input": "sum_squares([-12, -4, -2, 33, 37, 23, -20, 26, -39, 24, -6, 17, -24, 35, 37])",
                "output": "-5755"
            },
            {
                "input": "sum_squares([1, 4, 1, -2, -4, 3, -1, -6, -6])",
                "output": "-272"
            },
            {
                "input": "sum_squares([5, 2, 5])",
                "output": "32"
            },
            {
                "input": "sum_squares([-2, 5, 1, 4, 2, 1, 5, 2, 4])",
                "output": "126"
            },
            {
                "input": "sum_squares([4, 6, 4, 5, 6, 1, 4, 3, 6])",
                "output": "503"
            },
            {
                "input": "sum_squares([4, 3, 5])",
                "output": "24"
            },
            {
                "input": "sum_squares([-21, -6, -5, 40, 34, 21, -25, 23, -44, 16, -8, 13, -27, 33, 37])",
                "output": "-42121"
            },
            {
                "input": "sum_squares([2, 3, 3])",
                "output": "10"
            },
            {
                "input": "sum_squares([-3, 2, 1, 2, 3, 5, 3, 2, -2])",
                "output": "51"
            },
            {
                "input": "sum_squares([5, 2, 1])",
                "output": "28"
            },
            {
                "input": "sum_squares([3, 5, 5])",
                "output": "19"
            },
            {
                "input": "sum_squares([1, 3, 2])",
                "output": "6"
            },
            {
                "input": "sum_squares([-58, -103, 5, 3, 0])",
                "output": "3275"
            },
            {
                "input": "sum_squares([2, 1, 1, 2, 5, 3, 2, 2, 3])",
                "output": "171"
            },
            {
                "input": "sum_squares([0, 0, 14, 3, -11, 8, -3, 11, -10, -13, -5, 18, -18, 7, 10, 9, 15, 20, 5, 8])",
                "output": "1752"
            },
            {
                "input": "sum_squares([1,2,3])",
                "output": "6"
            },
            {
                "input": "sum_squares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])",
                "output": "-14196"
            },
            {
                "input": "sum_squares([3, -7, 15, -2, -10, 18, 1, 18, -14, -10, 0, 19, -12, 1, 18, 9, 17, 13, 7, 9])",
                "output": "1661"
            },
            {
                "input": "sum_squares([-1,-5,2,-1,-5])",
                "output": "-126"
            },
            {
                "input": "sum_squares([4, 4, 5, 5, 2, 6, 1, 5, 1])",
                "output": "71"
            },
            {
                "input": "sum_squares([5, 3, 9])",
                "output": "37"
            },
            {
                "input": "sum_squares([-20, -9, -7, 38, 38, 28, -17, 23, -40, 17, -7, 7, -22, 34, 36])",
                "output": "-6117"
            },
            {
                "input": "sum_squares([4, 4, 1, 5, 6, 3, 5, 6, 4])",
                "output": "360"
            },
            {
                "input": "sum_squares([-1, -6, -5, -3, -3, 4, -3, -6, -1])",
                "output": "-22"
            },
            {
                "input": "sum_squares([-3, -6, 0, 1, -2, 3, 4, 1, -4])",
                "output": "-48"
            },
            {
                "input": "sum_squares([3, 9, 13])",
                "output": "31"
            },
            {
                "input": "sum_squares([-1, 4, 4, 5, 2, 1, 3, 4, 3])",
                "output": "83"
            },
            {
                "input": "sum_squares([-1, -5, 21, 2, -10, 9, -5, 12, -13, -7, -7, 14, -17, 2, 10, 10, 14, 16, 8, 11])",
                "output": "162"
            },
            {
                "input": "sum_squares([1, -4, -3, -5, 1, 3, -2, -1, -6])",
                "output": "-190"
            },
            {
                "input": "sum_squares([5, 7, 14])",
                "output": "46"
            },
            {
                "input": "sum_squares([-6, -2, 15, 1, -15, 15, 2, 15, -10, -12, -8, 16, -9, 2, 18, 15, 14, 11, 4, 5])",
                "output": "-1037"
            },
            {
                "input": "sum_squares([5, 6, 8])",
                "output": "39"
            },
            {
                "input": "sum_squares([-52, -101, 6, 1, -7])",
                "output": "2267"
            },
            {
                "input": "sum_squares([-5, 0, 7, -2, 0])",
                "output": "36"
            },
            {
                "input": "sum_squares([-5, 4, -2, 4, 0, 2, 4, -1, 0])",
                "output": "60"
            },
            {
                "input": "sum_squares([1, 3, 2, 1, 4, 2, 1, 6, 1])",
                "output": "81"
            },
            {
                "input": "sum_squares([-59, -96, 3, 4, 1])",
                "output": "3405"
            },
            {
                "input": "sum_squares([-1,0,0,0,0,0,0,0,-1])",
                "output": "0"
            },
            {
                "input": "sum_squares([])",
                "output": "0"
            },
            {
                "input": "sum_squares([4, 3, 6, 5, 1, 4, 1, 4, 1])",
                "output": "61"
            },
            {
                "input": "sum_squares([-56,-99,1,0,-2])",
                "output": "3030"
            },
            {
                "input": "sum_squares([-55, -98, 3, 4, -6])",
                "output": "2730"
            },
            {
                "input": "sum_squares([0, 1, -1, 0, -6, -1, 4, 3, -1])",
                "output": "-199"
            }
        ]
    },
    {
        "problem_description": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
        "ground truth": "def words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
        "instances": [
            {
                "input": "words_in_sentence(\"afq  gdxrz mkpslkltjpj a iny wskuxu\")",
                "output": "'afq gdxrz mkpslkltjpj iny'"
            },
            {
                "input": "words_in_sentence(\"gah  RogZ\")",
                "output": "'gah'"
            },
            {
                "input": "words_in_sentence(\"cjvvf\")",
                "output": "'cjvvf'"
            },
            {
                "input": "words_in_sentence(\" hfcrgrombeqinu w\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"ikmsuyqiaap zlnlogfzpa\")",
                "output": "'ikmsuyqiaap'"
            },
            {
                "input": "words_in_sentence(\"cz aya nwie vdjhobtirgkjilzjbg\")",
                "output": "'cz aya'"
            },
            {
                "input": "words_in_sentence(\"ebaelvct lyqwict xs\")",
                "output": "'lyqwict xs'"
            },
            {
                "input": "words_in_sentence(\"xpgj\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"hbok orfd\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"mRkf  TUpaZJb\")",
                "output": "'TUpaZJb'"
            },
            {
                "input": "words_in_sentence(\"FqAUlv fJlRNB  FNX\")",
                "output": "'FNX'"
            },
            {
                "input": "words_in_sentence(\"bm  ojecs zhesy\")",
                "output": "'bm ojecs zhesy'"
            },
            {
                "input": "words_in_sentence(\"Ha rMHRuLRiY\")",
                "output": "'Ha'"
            },
            {
                "input": "words_in_sentence(\"ffco ic\")",
                "output": "'ic'"
            },
            {
                "input": "words_in_sentence(\" seohs g \")",
                "output": "'seohs'"
            },
            {
                "input": "words_in_sentence(\"r a jbnbkhsuidhi mvovyq\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"t o \")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"xdXqM xRQLGpW\")",
                "output": "'xdXqM xRQLGpW'"
            },
            {
                "input": "words_in_sentence(\"yv  ksjzj\")",
                "output": "'yv ksjzj'"
            },
            {
                "input": "words_in_sentence(\"DKktElZUSPQ sRFO\")",
                "output": "'DKktElZUSPQ'"
            },
            {
                "input": "words_in_sentence(\"mltE NaSAMAg cA\")",
                "output": "'NaSAMAg cA'"
            },
            {
                "input": "words_in_sentence(\"s   u zfp\")",
                "output": "'zfp'"
            },
            {
                "input": "words_in_sentence(\"xkixju d\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"wezxe\")",
                "output": "'wezxe'"
            },
            {
                "input": "words_in_sentence(\"nVBsIIsRZmHXtC\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"E  RZi kGDDovBr\")",
                "output": "'RZi'"
            },
            {
                "input": "words_in_sentence(\"knhdfseyib\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"dnuyQmZcsHRmVApL\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"xazrkmp  dquylyujw nwrhah vkb a\")",
                "output": "'xazrkmp vkb'"
            },
            {
                "input": "words_in_sentence(\"tkbba fjcvajmrbemj maloq yw \")",
                "output": "'tkbba maloq yw'"
            },
            {
                "input": "words_in_sentence(\"o stvgznn\")",
                "output": "'stvgznn'"
            },
            {
                "input": "words_in_sentence(\"dt khhccmffxcswrvolyl\")",
                "output": "'dt'"
            },
            {
                "input": "words_in_sentence(\"brvoc \")",
                "output": "'brvoc'"
            },
            {
                "input": "words_in_sentence(\"d okkyjdcoshkf y bbz\")",
                "output": "'bbz'"
            },
            {
                "input": "words_in_sentence(\" hguqx\")",
                "output": "'hguqx'"
            },
            {
                "input": "words_in_sentence(\"fdes jlxltwmprsqlpodvia wizcxu\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"iwwquyz zzdnjsmnketxnwy\")",
                "output": "'iwwquyz'"
            },
            {
                "input": "words_in_sentence(\"zithec\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"rYBHJL w tGmS I jI qO\")",
                "output": "'jI qO'"
            },
            {
                "input": "words_in_sentence(\"myetpwnx edadxdfarmtkjlqh spe nkl\")",
                "output": "'spe nkl'"
            },
            {
                "input": "words_in_sentence(\"incpzw mqtfh uodaf\")",
                "output": "'mqtfh uodaf'"
            },
            {
                "input": "words_in_sentence(\" UCNaOVPk  \")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"BXaBjGjrspbJSH\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"tlfrmmlasog vi  rfgzuns kwsbkiwxnrjv\")",
                "output": "'tlfrmmlasog vi rfgzuns'"
            },
            {
                "input": "words_in_sentence(\"avfbsbr ne slo dbq ek xkoagjn\")",
                "output": "'avfbsbr ne slo dbq ek xkoagjn'"
            },
            {
                "input": "words_in_sentence(\"bbnnyywlly\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\" WwQmPKXAxTU\")",
                "output": "'WwQmPKXAxTU'"
            },
            {
                "input": "words_in_sentence(\"piibojh ls vb pkobjcocis n \")",
                "output": "'piibojh ls vb'"
            },
            {
                "input": "words_in_sentence(\"XJm  tRQsV\")",
                "output": "'XJm tRQsV'"
            },
            {
                "input": "words_in_sentence(\" ntadoa skxzevo  tb\")",
                "output": "'skxzevo tb'"
            },
            {
                "input": "words_in_sentence(\"okgifwkqqmd\")",
                "output": "'okgifwkqqmd'"
            },
            {
                "input": "words_in_sentence(\"p nylyzve\")",
                "output": "'nylyzve'"
            },
            {
                "input": "words_in_sentence(\"xRlNnTl KrtMh\")",
                "output": "'xRlNnTl KrtMh'"
            },
            {
                "input": "words_in_sentence(\"faMrT aJwycF\")",
                "output": "'faMrT'"
            },
            {
                "input": "words_in_sentence(\"etGrdLBtgA HOcCOmfbF\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"mWRhyWtGiZxlpJ hq  s\")",
                "output": "'hq'"
            },
            {
                "input": "words_in_sentence(\"Q TjyIWLZniqEv\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"ynytu ewvd\")",
                "output": "'ynytu'"
            },
            {
                "input": "words_in_sentence(\"zhw  cogagm\")",
                "output": "'zhw'"
            },
            {
                "input": "words_in_sentence(\"wedvhfpbyclmdyezpttascfknyva\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\" ml n \")",
                "output": "'ml'"
            },
            {
                "input": "words_in_sentence(\"  ykcuqiir\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"AvcgNCWZQl R\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"tmU TNrqNAsyFLOh lhw\")",
                "output": "'tmU lhw'"
            },
            {
                "input": "words_in_sentence(\"rckasnz qivvh \")",
                "output": "'rckasnz qivvh'"
            },
            {
                "input": "words_in_sentence(\"ew  tk ehaf\")",
                "output": "'ew tk'"
            },
            {
                "input": "words_in_sentence(\"vlwnbi cctdgtpqv  umztaw\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"x  Hqz TzvATYBZVC\")",
                "output": "'Hqz'"
            },
            {
                "input": "words_in_sentence(\"nCGlejWzIq j \")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"s rokrwtn qzvbrgbf\")",
                "output": "'rokrwtn'"
            },
            {
                "input": "words_in_sentence(\" ddyyl wvs\")",
                "output": "'ddyyl wvs'"
            },
            {
                "input": "words_in_sentence(\"qsv\")",
                "output": "'qsv'"
            },
            {
                "input": "words_in_sentence(\"yppcp gf\")",
                "output": "'yppcp gf'"
            },
            {
                "input": "words_in_sentence(\"v  kdua\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"jbfoy vhqq wcp rdzaqj u qidqjmr yxd\")",
                "output": "'jbfoy wcp qidqjmr yxd'"
            },
            {
                "input": "words_in_sentence(\"jpr zlnfpdpztvswentdnno \")",
                "output": "'jpr zlnfpdpztvswentdnno'"
            },
            {
                "input": "words_in_sentence(\"orasjxzf z xa sh   dca mprwjrhecfe\")",
                "output": "'xa sh dca mprwjrhecfe'"
            },
            {
                "input": "words_in_sentence(\"gayaypivvxwu ndpxq\")",
                "output": "'ndpxq'"
            },
            {
                "input": "words_in_sentence(\"mmhb\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"fmg jj\")",
                "output": "'fmg jj'"
            },
            {
                "input": "words_in_sentence(\"ojeej\")",
                "output": "'ojeej'"
            },
            {
                "input": "words_in_sentence(\"wltiidisdshqdgqzdupmmosyom \")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"j tnnfiwtwl nm ejbpxkryhutg awfjuc\")",
                "output": "'nm'"
            },
            {
                "input": "words_in_sentence(\"TC vrUAV uwpnLUJ\")",
                "output": "'TC vrUAV uwpnLUJ'"
            },
            {
                "input": "words_in_sentence(\"nohzjc j  klcdzuzjlviru   nhnzsk u \")",
                "output": "'klcdzuzjlviru'"
            },
            {
                "input": "words_in_sentence(\"KGjXAWbLKE zcFZ\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"mZvJuobQiGMkjpOnRu\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"lblfvpuzhqkbh b\")",
                "output": "'lblfvpuzhqkbh'"
            },
            {
                "input": "words_in_sentence(\"nwu xiau\")",
                "output": "'nwu'"
            },
            {
                "input": "words_in_sentence(\"xjh ykag itkurnakb\")",
                "output": "'xjh'"
            },
            {
                "input": "words_in_sentence(\"rggmlp\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"oOdKuIewhlQaNHST  \")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"xqLpFjaPyDLhim xO\")",
                "output": "'xO'"
            },
            {
                "input": "words_in_sentence(\"bwx    iweqxvuzcncrozfvjh cldf la\")",
                "output": "'bwx la'"
            },
            {
                "input": "words_in_sentence(\"dtsipy\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"b  f rixpypk kmjdkvqqz annxke\")",
                "output": "'rixpypk'"
            },
            {
                "input": "words_in_sentence(\" s zrue\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"USEFFD  KcHmTkt\")",
                "output": "'KcHmTkt'"
            },
            {
                "input": "words_in_sentence(\"fnbtnmyfd i\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"cy cad\")",
                "output": "'cy cad'"
            },
            {
                "input": "words_in_sentence(\"kaqe\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"tcljn\")",
                "output": "'tcljn'"
            },
            {
                "input": "words_in_sentence(\"enjd\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"udstoapumz \")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"pwlvnqxjghh yoxemx cwqu prie qsy\")",
                "output": "'pwlvnqxjghh qsy'"
            },
            {
                "input": "words_in_sentence(\" LUEjadzWVKN\")",
                "output": "'LUEjadzWVKN'"
            },
            {
                "input": "words_in_sentence(\"nxx pl i   ysehgkfo\")",
                "output": "'nxx pl'"
            },
            {
                "input": "words_in_sentence(\"onLNjvJKB kyGm\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"onski\")",
                "output": "'onski'"
            },
            {
                "input": "words_in_sentence(\"jpzep fqa\")",
                "output": "'jpzep fqa'"
            },
            {
                "input": "words_in_sentence(\"JIxQBVuMwvx v \")",
                "output": "'JIxQBVuMwvx'"
            },
            {
                "input": "words_in_sentence(\" mboxy\")",
                "output": "'mboxy'"
            },
            {
                "input": "words_in_sentence(\" dgs \")",
                "output": "'dgs'"
            },
            {
                "input": "words_in_sentence(\" ktbteo\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"qlqs gf bm\")",
                "output": "'gf bm'"
            },
            {
                "input": "words_in_sentence(\"ustp hasgmwe\")",
                "output": "'hasgmwe'"
            },
            {
                "input": "words_in_sentence(\"g dbsva ells\")",
                "output": "'dbsva'"
            },
            {
                "input": "words_in_sentence(\"fjhv ecryy\")",
                "output": "'ecryy'"
            },
            {
                "input": "words_in_sentence(\"tx e qlcglux\")",
                "output": "'tx qlcglux'"
            },
            {
                "input": "words_in_sentence(\"OynMpE IeViwO\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"lnum\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"go  jV ShvUEMiE\")",
                "output": "'go jV'"
            },
            {
                "input": "words_in_sentence(\"hbjnyqftmbgsh\")",
                "output": "'hbjnyqftmbgsh'"
            },
            {
                "input": "words_in_sentence(\"KXDZBIBxWS\")",
                "output": "''"
            },
            {
                "input": "words_in_sentence(\"ysqkfqoj  lletkxjo xdf\")",
                "output": "'xdf'"
            },
            {
                "input": "words_in_sentence(\"mnt xartsstuxgdwglhu vyr\")",
                "output": "'mnt vyr'"
            }
        ]
    },
    {
        "problem_description": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n",
        "ground truth": "def simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
        "instances": [
            {
                "input": "simplify('544/8', '302/3')",
                "output": "False"
            },
            {
                "input": "simplify('822/2', '228/2')",
                "output": "True"
            },
            {
                "input": "simplify('654/10', '819/2')",
                "output": "False"
            },
            {
                "input": "simplify('649/10', '575/9')",
                "output": "False"
            },
            {
                "input": "simplify('672/4', '313/4')",
                "output": "True"
            },
            {
                "input": "simplify('527/9', '12/10')",
                "output": "False"
            },
            {
                "input": "simplify('539/3', '30/3')",
                "output": "False"
            },
            {
                "input": "simplify('71/2', '243/4')",
                "output": "False"
            },
            {
                "input": "simplify('784/6', '756/7')",
                "output": "True"
            },
            {
                "input": "simplify('645/10', '426/10')",
                "output": "False"
            },
            {
                "input": "simplify('154/10', '911/4')",
                "output": "False"
            },
            {
                "input": "simplify('562/9', '39/10')",
                "output": "False"
            },
            {
                "input": "simplify('821/1', '778/4')",
                "output": "False"
            },
            {
                "input": "simplify('737/9', '21/6')",
                "output": "False"
            },
            {
                "input": "simplify('120/2', '508/8')",
                "output": "True"
            },
            {
                "input": "simplify('118/7', '979/2')",
                "output": "False"
            },
            {
                "input": "simplify('539/8', '738/8')",
                "output": "False"
            },
            {
                "input": "simplify('281/8', '869/6')",
                "output": "False"
            },
            {
                "input": "simplify('926/3', '493/3')",
                "output": "False"
            },
            {
                "input": "simplify('882/1', '804/6')",
                "output": "True"
            },
            {
                "input": "simplify('483/3', '753/2')",
                "output": "False"
            },
            {
                "input": "simplify('676/8', '147/9')",
                "output": "False"
            },
            {
                "input": "simplify('434/9', '995/3')",
                "output": "False"
            },
            {
                "input": "simplify('456/3', '948/7')",
                "output": "False"
            },
            {
                "input": "simplify('307/2', '244/4')",
                "output": "False"
            },
            {
                "input": "simplify('277/9', '136/4')",
                "output": "False"
            },
            {
                "input": "simplify('488/9', '680/2')",
                "output": "False"
            },
            {
                "input": "simplify('295/9', '167/4')",
                "output": "False"
            },
            {
                "input": "simplify('1000/2', '693/9')",
                "output": "True"
            },
            {
                "input": "simplify('994/10', '447/9')",
                "output": "False"
            },
            {
                "input": "simplify('717/9', '683/10')",
                "output": "False"
            },
            {
                "input": "simplify('927/3', '488/5')",
                "output": "False"
            },
            {
                "input": "simplify('248/7', '197/5')",
                "output": "False"
            },
            {
                "input": "simplify('407/3', '387/1')",
                "output": "True"
            },
            {
                "input": "simplify('141/8', '896/6')",
                "output": "True"
            },
            {
                "input": "simplify('749/10', '943/1')",
                "output": "False"
            },
            {
                "input": "simplify('87/8', '635/9')",
                "output": "False"
            },
            {
                "input": "simplify('997/5', '546/9')",
                "output": "False"
            },
            {
                "input": "simplify('483/5', '39/2')",
                "output": "False"
            },
            {
                "input": "simplify('782/6', '824/5')",
                "output": "False"
            },
            {
                "input": "simplify('439/8', '584/7')",
                "output": "False"
            },
            {
                "input": "simplify('239/7', '30/6')",
                "output": "False"
            },
            {
                "input": "simplify('688/1', '227/6')",
                "output": "False"
            },
            {
                "input": "simplify('346/8', '69/10')",
                "output": "False"
            },
            {
                "input": "simplify('740/2', '295/8')",
                "output": "False"
            },
            {
                "input": "simplify('974/5', '871/5')",
                "output": "False"
            },
            {
                "input": "simplify('190/9', '850/5')",
                "output": "False"
            },
            {
                "input": "simplify('645/5', '557/10')",
                "output": "False"
            },
            {
                "input": "simplify('359/7', '668/10')",
                "output": "False"
            },
            {
                "input": "simplify('68/2', '491/5')",
                "output": "False"
            },
            {
                "input": "simplify('387/3', '474/9')",
                "output": "True"
            },
            {
                "input": "simplify('869/7', '731/5')",
                "output": "False"
            },
            {
                "input": "simplify('740/5', '932/7')",
                "output": "False"
            },
            {
                "input": "simplify('375/10', '255/6')",
                "output": "False"
            },
            {
                "input": "simplify('532/9', '353/4')",
                "output": "False"
            },
            {
                "input": "simplify('472/8', '768/4')",
                "output": "True"
            },
            {
                "input": "simplify('665/6', '877/7')",
                "output": "False"
            },
            {
                "input": "simplify('148/3', '587/8')",
                "output": "False"
            },
            {
                "input": "simplify('791/9', '52/1')",
                "output": "False"
            },
            {
                "input": "simplify('909/4', '154/4')",
                "output": "False"
            },
            {
                "input": "simplify('770/10', '214/3')",
                "output": "False"
            },
            {
                "input": "simplify('384/3', '969/2')",
                "output": "True"
            },
            {
                "input": "simplify('325/1', '782/4')",
                "output": "False"
            },
            {
                "input": "simplify('803/6', '38/7')",
                "output": "False"
            },
            {
                "input": "simplify('50/8', '572/5')",
                "output": "True"
            },
            {
                "input": "simplify('933/1', '852/8')",
                "output": "False"
            },
            {
                "input": "simplify('213/4', '974/8')",
                "output": "False"
            },
            {
                "input": "simplify('597/2', '79/3')",
                "output": "False"
            },
            {
                "input": "simplify('258/6', '455/4')",
                "output": "False"
            },
            {
                "input": "simplify('72/7', '863/9')",
                "output": "False"
            },
            {
                "input": "simplify('133/6', '760/2')",
                "output": "False"
            },
            {
                "input": "simplify('598/2', '681/10')",
                "output": "False"
            },
            {
                "input": "simplify('828/1', '844/1')",
                "output": "True"
            },
            {
                "input": "simplify('436/5', '911/9')",
                "output": "False"
            },
            {
                "input": "simplify('93/9', '337/10')",
                "output": "False"
            },
            {
                "input": "simplify('489/4', '71/6')",
                "output": "False"
            },
            {
                "input": "simplify('632/7', '874/3')",
                "output": "False"
            },
            {
                "input": "simplify('606/4', '98/6')",
                "output": "False"
            },
            {
                "input": "simplify('665/4', '308/2')",
                "output": "False"
            },
            {
                "input": "simplify('4/10', '651/7')",
                "output": "False"
            },
            {
                "input": "simplify('204/9', '139/4')",
                "output": "False"
            },
            {
                "input": "simplify('827/9', '360/5')",
                "output": "True"
            },
            {
                "input": "simplify('561/6', '333/5')",
                "output": "False"
            },
            {
                "input": "simplify('588/9', '345/7')",
                "output": "True"
            },
            {
                "input": "simplify('188/3', '736/3')",
                "output": "False"
            },
            {
                "input": "simplify('702/2', '739/7')",
                "output": "False"
            },
            {
                "input": "simplify('250/9', '307/3')",
                "output": "False"
            },
            {
                "input": "simplify('673/2', '76/6')",
                "output": "False"
            },
            {
                "input": "simplify('925/5', '513/8')",
                "output": "False"
            },
            {
                "input": "simplify('534/9', '319/3')",
                "output": "False"
            },
            {
                "input": "simplify('987/4', '273/4')",
                "output": "False"
            },
            {
                "input": "simplify('792/8', '310/7')",
                "output": "False"
            },
            {
                "input": "simplify('24/2', '61/2')",
                "output": "True"
            },
            {
                "input": "simplify('486/8', '960/9')",
                "output": "True"
            },
            {
                "input": "simplify('648/8', '107/3')",
                "output": "True"
            },
            {
                "input": "simplify('691/8', '819/8')",
                "output": "False"
            },
            {
                "input": "simplify('173/8', '723/9')",
                "output": "False"
            },
            {
                "input": "simplify('726/1', '616/10')",
                "output": "False"
            },
            {
                "input": "simplify('112/3', '388/10')",
                "output": "False"
            },
            {
                "input": "simplify('359/3', '457/8')",
                "output": "False"
            },
            {
                "input": "simplify('52/9', '669/3')",
                "output": "False"
            },
            {
                "input": "simplify('865/9', '529/2')",
                "output": "False"
            },
            {
                "input": "simplify('870/4', '140/9')",
                "output": "False"
            },
            {
                "input": "simplify('948/4', '43/4')",
                "output": "False"
            },
            {
                "input": "simplify('398/6', '443/4')",
                "output": "False"
            },
            {
                "input": "simplify('706/10', '573/4')",
                "output": "False"
            },
            {
                "input": "simplify('943/5', '868/4')",
                "output": "False"
            },
            {
                "input": "simplify('522/9', '306/9')",
                "output": "True"
            },
            {
                "input": "simplify('502/5', '889/6')",
                "output": "False"
            },
            {
                "input": "simplify('21/8', '930/10')",
                "output": "False"
            },
            {
                "input": "simplify('234/7', '89/3')",
                "output": "False"
            },
            {
                "input": "simplify('788/3', '905/7')",
                "output": "False"
            },
            {
                "input": "simplify('263/7', '695/7')",
                "output": "False"
            },
            {
                "input": "simplify('942/8', '116/10')",
                "output": "False"
            },
            {
                "input": "simplify('310/9', '742/8')",
                "output": "False"
            },
            {
                "input": "simplify('353/10', '302/7')",
                "output": "False"
            },
            {
                "input": "simplify('190/9', '368/2')",
                "output": "False"
            }
        ]
    },
    {
        "problem_description": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
        "ground truth": "def order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
        "instances": [
            {
                "input": "order_by_points([4, -14, -31, 38, 53, -101, 6, -5])",
                "output": "[-5, -31, -101, -14, 4, 6, 53, 38]"
            },
            {
                "input": "order_by_points([5, 4, 6, 7, 9, 6, 8, 13, 9, 12, 6])",
                "output": "[12, 4, 13, 5, 6, 6, 6, 7, 8, 9, 9]"
            },
            {
                "input": "order_by_points([618, 426, 462, 141, 6, 427, 424, 52, 4, 38, 4187, 6, 61, 3, 44])",
                "output": "[3, 4, 141, 6, 6, 52, 61, 44, 424, 38, 426, 462, 427, 618, 4187]"
            },
            {
                "input": "order_by_points([2, 2, 8, -76, -25, 25, 8])",
                "output": "[-76, 2, 2, -25, 25, 8, 8]"
            },
            {
                "input": "order_by_points([1828, 421, 465, 146, 4, 428, 426, 54, 5, 35, 4217, 3, 51, 3, 47])",
                "output": "[3, 3, 4, 5, 51, 421, 35, 54, 146, 47, 426, 428, 4217, 465, 1828]"
            },
            {
                "input": "order_by_points([3, 8, 6, -79, -25, 24, 3])",
                "output": "[-79, 3, -25, 3, 6, 24, 8]"
            },
            {
                "input": "order_by_points([2, 5, 4, -79, -25, 20, 8])",
                "output": "[2, -79, 20, -25, 4, 5, 8]"
            },
            {
                "input": "order_by_points([2, 15, -5, -10, -10])",
                "output": "[-5, -10, -10, 2, 15]"
            },
            {
                "input": "order_by_points([5, 10, -1, -12, -15])",
                "output": "[-1, 10, -12, -15, 5]"
            },
            {
                "input": "order_by_points([4, 3, 7, 1, 3, 9, 4, 13, 13, 13, 11])",
                "output": "[1, 11, 3, 3, 4, 4, 13, 13, 13, 7, 9]"
            },
            {
                "input": "order_by_points([6, 14, -4, -16, -10])",
                "output": "[-4, -10, 14, -16, 6]"
            },
            {
                "input": "order_by_points([3, 8, -2, -12, -13])",
                "output": "[-2, -12, -13, 3, 8]"
            },
            {
                "input": "order_by_points([5, 3, 7, 7, 3, 7, 8, 12, 10, 12, 13])",
                "output": "[10, 3, 3, 12, 12, 13, 5, 7, 7, 7, 8]"
            },
            {
                "input": "order_by_points([969, 425, 463, 144, 4, 425, 421, 52, 5, 42, 3430, 1, 52, 4, 45])",
                "output": "[1, 4, 4, 5, 42, 421, 52, 52, 144, 45, 3430, 425, 425, 463, 969]"
            },
            {
                "input": "order_by_points([6, 6, 2, 9, 3, 1, 6, 4, 6, 12, 13])",
                "output": "[1, 2, 3, 12, 4, 13, 6, 6, 6, 6, 9]"
            },
            {
                "input": "order_by_points([4, 2, 8, 8, 7, 7, 6, 7, 10, 12, 13])",
                "output": "[10, 2, 12, 4, 13, 6, 7, 7, 7, 8, 8]"
            },
            {
                "input": "order_by_points([931, 426, 462, 145, 1, 418, 423, 51, 1, 37, 3466, 5, 51, 1, 46])",
                "output": "[1, 1, 1, 5, 51, 51, 423, 145, 37, 46, 426, 462, 931, 418, 3466]"
            },
            {
                "input": "order_by_points([1,2,3,4,5,6,7,8,9,10,11])",
                "output": "[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]"
            },
            {
                "input": "order_by_points([5, -9, -31, 41, 55, -100, 2, -4])",
                "output": "[-9, -4, -31, -100, 2, 5, 41, 55]"
            },
            {
                "input": "order_by_points([3, -14, -28, 47, 56, -93, 2, -3])",
                "output": "[-93, -3, 2, 3, -14, -28, 47, 56]"
            },
            {
                "input": "order_by_points([1636, 420, 466, 143, 3, 422, 420, 55, 9, 36, 3686, 2, 58, 5, 50])",
                "output": "[2, 3, 5, 50, 420, 420, 143, 422, 9, 36, 55, 58, 1636, 466, 3686]"
            },
            {
                "input": "order_by_points([5, 9, -6, -11, -16])",
                "output": "[-6, -11, 5, -16, 9]"
            },
            {
                "input": "order_by_points([1, -8, -35, 46, 53, -99, 7, -3])",
                "output": "[-8, -3, -99, 1, -35, 7, 53, 46]"
            },
            {
                "input": "order_by_points([2, 6, -2, -15, -17])",
                "output": "[-2, 2, -15, 6, -17]"
            },
            {
                "input": "order_by_points([1, -11, -32, 43, 54, -98, 2, -3])",
                "output": "[-3, -32, -98, -11, 1, 2, 43, 54]"
            },
            {
                "input": "order_by_points([5, -6, -27, 48, 52, -102, 4, 2])",
                "output": "[-6, -102, 2, 4, 5, -27, 52, 48]"
            },
            {
                "input": "order_by_points([2, -7, -32, 43, 58, -93, 2, 1])",
                "output": "[-7, -93, -32, 1, 2, 2, 43, 58]"
            },
            {
                "input": "order_by_points([1, 2, 5, 8, 6, 11, 7, 6, 14, 8, 15])",
                "output": "[1, 2, 11, 5, 14, 6, 6, 15, 7, 8, 8]"
            },
            {
                "input": "order_by_points([2, -16, -34, 39, 49, -97, 4, -5])",
                "output": "[-5, -97, -34, 2, 4, -16, 39, 49]"
            },
            {
                "input": "order_by_points([4, 8, -2, -8, -12])",
                "output": "[-8, -2, -12, 4, 8]"
            },
            {
                "input": "order_by_points([780, 423, 466, 143, 3, 423, 426, 51, 3, 40, 3016, 5, 56, 4, 42])",
                "output": "[3, 3, 40, 4, 5, 51, 42, 143, 423, 423, 3016, 56, 426, 780, 466]"
            },
            {
                "input": "order_by_points([3, -9, -33, 43, 58, -103, 2, -1])",
                "output": "[-9, -1, -33, -103, 2, 3, 43, 58]"
            },
            {
                "input": "order_by_points([3, 2, 5, 9, 2, 8, 2, 7, 8, 11, 10])",
                "output": "[10, 2, 2, 2, 11, 3, 5, 7, 8, 8, 9]"
            },
            {
                "input": "order_by_points([5, 1, 11, -74, -18, 24, 5])",
                "output": "[-74, 1, 11, 5, 5, 24, -18]"
            },
            {
                "input": "order_by_points([3, 2, 3, 7, 4, 8, 3, 5, 4, 6, 8])",
                "output": "[2, 3, 3, 3, 4, 4, 5, 6, 7, 8, 8]"
            },
            {
                "input": "order_by_points([1094, 425, 465, 149, 5, 427, 428, 52, 3, 35, 3403, 8, 61, 2, 44])",
                "output": "[2, 3, 5, 52, 61, 35, 8, 44, 3403, 425, 427, 1094, 149, 428, 465]"
            },
            {
                "input": "order_by_points([2, 7, 4, -73, -17, 21, 5])",
                "output": "[-73, 2, 21, 4, 5, -17, 7]"
            },
            {
                "input": "order_by_points([3, 9, 2, -9, -13])",
                "output": "[-9, 2, -13, 3, 9]"
            },
            {
                "input": "order_by_points([1, -12, -27, 42, 59, -97, 1, 1])",
                "output": "[-97, 1, -12, 1, 1, -27, 42, 59]"
            },
            {
                "input": "order_by_points([658, 424, 468, 147, 7, 418, 424, 55, 10, 42, 4364, 5, 52, 4, 46])",
                "output": "[10, 4, 5, 42, 7, 52, 424, 424, 55, 46, 147, 418, 4364, 468, 658]"
            },
            {
                "input": "order_by_points([2, -8, -36, 46, 51, -93, 7, -3])",
                "output": "[-8, -93, -3, 2, -36, 51, 7, 46]"
            },
            {
                "input": "order_by_points([4, 14, -3, -13, -14])",
                "output": "[-3, -13, -14, 4, 14]"
            },
            {
                "input": "order_by_points([2, -11, -31, 38, 58, -95, 4, 2])",
                "output": "[-95, -31, -11, 2, 2, 4, 38, 58]"
            },
            {
                "input": "order_by_points([1, 11, -1, -11, -12])",
                "output": "[-1, -11, 1, -12, 11]"
            },
            {
                "input": "order_by_points([2, -6, -30, 46, 54, -101, 6, -3])",
                "output": "[-6, -30, -3, -101, 2, 6, 54, 46]"
            },
            {
                "input": "order_by_points([3, 9, 11, -80, -20, 23, 3])",
                "output": "[-80, -20, 11, 3, 3, 23, 9]"
            },
            {
                "input": "order_by_points([4, 7, 7, 2, 7, 4, 10, 12, 5, 6, 8])",
                "output": "[10, 2, 12, 4, 4, 5, 6, 7, 7, 7, 8]"
            },
            {
                "input": "order_by_points([5, 6, 2, -77, -16, 20, 7])",
                "output": "[-77, 2, 20, 5, -16, 6, 7]"
            },
            {
                "input": "order_by_points([4, -10, -27, 48, 54, -96, 3, 0])",
                "output": "[-96, -10, 0, 3, 4, -27, 54, 48]"
            },
            {
                "input": "order_by_points([5, 8, 10, -73, -25, 26, 3])",
                "output": "[-73, 10, -25, 3, 5, 8, 26]"
            },
            {
                "input": "order_by_points([6, 8, 3, -14, -11])",
                "output": "[-11, 3, -14, 6, 8]"
            },
            {
                "input": "order_by_points([5, -12, -34, 44, 56, -98, 7, 1])",
                "output": "[-98, -12, -34, 1, 5, 7, 44, 56]"
            },
            {
                "input": "order_by_points([839, 428, 468, 149, 3, 420, 420, 48, 1, 42, 3653, 4, 59, 1, 47])",
                "output": "[1, 1, 3, 4, 420, 420, 42, 47, 48, 428, 149, 59, 3653, 468, 839]"
            },
            {
                "input": "order_by_points([1669, 420, 458, 144, 1, 424, 426, 48, 10, 33, 3158, 4, 61, 3, 51])",
                "output": "[1, 10, 3, 4, 420, 33, 51, 61, 144, 424, 426, 48, 458, 3158, 1669]"
            },
            {
                "input": "order_by_points([5, -10, -28, 43, 49, -101, 7, -8])",
                "output": "[-8, -10, -101, 5, -28, 43, 7, 49]"
            },
            {
                "input": "order_by_points([1754, 426, 467, 144, 7, 422, 423, 58, 10, 36, 3353, 4, 52, 3, 49])",
                "output": "[10, 3, 4, 7, 52, 422, 144, 423, 36, 426, 58, 49, 3353, 1754, 467]"
            },
            {
                "input": "order_by_points([3, 2, 8, -72, -23, 27, 6])",
                "output": "[-72, -23, 2, 3, 6, 8, 27]"
            },
            {
                "input": "order_by_points([3, 8, 10, -79, -25, 20, 2])",
                "output": "[10, -79, 20, 2, 3, -25, 8]"
            },
            {
                "input": "order_by_points([2, 6, 4, 8, 6, 7, 10, 12, 5, 8, 15])",
                "output": "[10, 2, 12, 4, 5, 6, 6, 15, 7, 8, 8]"
            },
            {
                "input": "order_by_points([2, -14, -33, 48, 57, -102, 2, 0])",
                "output": "[-33, 0, -102, 2, 2, -14, 48, 57]"
            },
            {
                "input": "order_by_points([1845, 426, 461, 145, 4, 423, 418, 49, 4, 34, 4040, 1, 59, 5, 48])",
                "output": "[1, 4, 4, 5, 34, 4040, 423, 145, 461, 426, 48, 418, 49, 59, 1845]"
            },
            {
                "input": "order_by_points([6, 6, 7, 3, 6, 5, 6, 4, 9, 15, 14])",
                "output": "[3, 4, 5, 14, 6, 6, 6, 6, 15, 7, 9]"
            },
            {
                "input": "order_by_points([2, 13, -1, -13, -14])",
                "output": "[-1, 2, -13, -14, 13]"
            },
            {
                "input": "order_by_points([2, 10, 6, -81, -23, 24, 2])",
                "output": "[-81, 10, -23, 2, 2, 6, 24]"
            },
            {
                "input": "order_by_points([1, 8, 3, -76, -16, 20, 9])",
                "output": "[-76, 1, 20, 3, -16, 8, 9]"
            },
            {
                "input": "order_by_points([1, 1, 2, -73, -20, 18, 4])",
                "output": "[-73, -20, 1, 1, 2, 4, 18]"
            },
            {
                "input": "order_by_points([1, 6, 7, 2, 9, 4, 7, 3, 7, 15, 6])",
                "output": "[1, 2, 3, 4, 6, 15, 6, 7, 7, 7, 9]"
            },
            {
                "input": "order_by_points([6, 6, 4, 2, 6, 2, 9, 12, 8, 7, 7])",
                "output": "[2, 2, 12, 4, 6, 6, 6, 7, 7, 8, 9]"
            },
            {
                "input": "order_by_points([3, 6, 4, -15, -17])",
                "output": "[3, 4, -15, 6, -17]"
            },
            {
                "input": "order_by_points([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46])",
                "output": "[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]"
            },
            {
                "input": "order_by_points([1837, 418, 465, 142, 7, 422, 424, 52, 8, 32, 2774, 5, 61, 3, 47])",
                "output": "[3, 32, 5, 142, 7, 52, 61, 422, 8, 424, 47, 418, 465, 1837, 2774]"
            },
            {
                "input": "order_by_points([2, 5, 7, 3, 6, 8, 10, 5, 10, 12, 15])",
                "output": "[10, 10, 2, 3, 12, 5, 5, 6, 15, 7, 8]"
            },
            {
                "input": "order_by_points([1489, 428, 463, 140, 3, 424, 422, 57, 8, 37, 3107, 1, 53, 3, 46])",
                "output": "[1, 3, 3, 140, 422, 8, 53, 424, 37, 46, 3107, 57, 463, 428, 1489]"
            },
            {
                "input": "order_by_points([714, 427, 460, 145, 6, 423, 422, 53, 2, 37, 2753, 3, 53, 2, 45])",
                "output": "[2, 2, 3, 6, 422, 53, 53, 423, 45, 460, 145, 37, 714, 427, 2753]"
            },
            {
                "input": "order_by_points([2, 6, 7, -78, -21, 21, 8])",
                "output": "[-21, -78, 2, 21, 6, 7, 8]"
            },
            {
                "input": "order_by_points([5, -16, -37, 40, 52, -96, 1, -7])",
                "output": "[-7, -96, 1, -37, 40, 5, -16, 52]"
            },
            {
                "input": "order_by_points([4, 11, 3, -16, -13])",
                "output": "[11, -13, 3, 4, -16]"
            },
            {
                "input": "order_by_points([1740, 425, 462, 143, 5, 426, 420, 54, 9, 37, 3101, 4, 51, 5, 42])",
                "output": "[4, 5, 3101, 5, 420, 51, 42, 143, 54, 9, 37, 425, 1740, 462, 426]"
            },
            {
                "input": "order_by_points([2, 6, -3, -15, -10])",
                "output": "[-3, -10, 2, -15, 6]"
            },
            {
                "input": "order_by_points([3, 3, 4, 7, 3, 2, 3, 12, 11, 9, 6])",
                "output": "[2, 11, 3, 3, 3, 3, 12, 4, 6, 7, 9]"
            },
            {
                "input": "order_by_points([1, 12, 1, -6, -17])",
                "output": "[-6, 1, 1, 12, -17]"
            },
            {
                "input": "order_by_points([3, 10, 10, -74, -20, 20, 9])",
                "output": "[-74, -20, 10, 10, 20, 3, 9]"
            },
            {
                "input": "order_by_points([1, 6, 1, -12, -9])",
                "output": "[-9, 1, 1, -12, 6]"
            },
            {
                "input": "order_by_points([5, 14, -3, -6, -9])",
                "output": "[-9, -6, -3, 5, 14]"
            },
            {
                "input": "order_by_points([6, 7, 2, 8, 6, 8, 6, 12, 14, 6, 15])",
                "output": "[2, 12, 14, 6, 6, 6, 6, 15, 7, 8, 8]"
            },
            {
                "input": "order_by_points([204, 425, 464, 147, 4, 425, 419, 57, 9, 35, 4375, 4, 52, 5, 43])",
                "output": "[4, 4, 5, 204, 52, 43, 35, 9, 425, 425, 147, 57, 464, 419, 4375]"
            },
            {
                "input": "order_by_points([2, 16, -2, -12, -13])",
                "output": "[-2, -12, 2, -13, 16]"
            },
            {
                "input": "order_by_points([382, 428, 466, 150, 2, 421, 428, 49, 10, 33, 2403, 8, 55, 2, 50])",
                "output": "[10, 2, 2, 50, 150, 33, 421, 8, 2403, 55, 382, 49, 428, 428, 466]"
            },
            {
                "input": "order_by_points([2, -9, -35, 38, 49, -101, 3, -7])",
                "output": "[-9, -7, -101, 2, -35, 3, 38, 49]"
            },
            {
                "input": "order_by_points([4, -8, -37, 42, 52, -99, 6, 1])",
                "output": "[-8, -99, 1, 4, -37, 42, 6, 52]"
            },
            {
                "input": "order_by_points([3, 1, 9, -73, -20, 18, 4])",
                "output": "[-73, -20, 1, 3, 4, 9, 18]"
            },
            {
                "input": "order_by_points([2, -11, -30, 47, 53, -101, 2, -4])",
                "output": "[-4, -30, -11, -101, 2, 2, 53, 47]"
            },
            {
                "input": "order_by_points([1, 2, 6, -76, -20, 21, 2])",
                "output": "[-20, -76, 1, 2, 2, 21, 6]"
            },
            {
                "input": "order_by_points([2, 1, 2, -73, -24, 23, 3])",
                "output": "[-73, 1, 2, 2, -24, 3, 23]"
            },
            {
                "input": "order_by_points([1, 5, 1, -73, -17, 20, 4])",
                "output": "[-73, 1, 1, 20, 4, 5, -17]"
            },
            {
                "input": "order_by_points([2, 2, 6, 6, 4, 1, 11, 8, 11, 15, 16])",
                "output": "[1, 2, 2, 11, 11, 4, 6, 6, 15, 16, 8]"
            },
            {
                "input": "order_by_points([2, 9, 0, -8, -16])",
                "output": "[-8, 0, 2, -16, 9]"
            },
            {
                "input": "order_by_points([1829, 420, 464, 144, 6, 423, 422, 57, 2, 39, 4009, 8, 59, 2, 45])",
                "output": "[2, 2, 420, 6, 422, 8, 144, 423, 45, 57, 39, 4009, 464, 59, 1829]"
            },
            {
                "input": "order_by_points([3, 3, 3, 3, 3, 2, 7, 12, 12, 8, 7])",
                "output": "[2, 3, 3, 3, 3, 3, 12, 12, 7, 7, 8]"
            },
            {
                "input": "order_by_points([4, 3, 9, -80, -24, 22, 6])",
                "output": "[-80, -24, 3, 4, 22, 6, 9]"
            },
            {
                "input": "order_by_points([205, 426, 468, 143, 2, 423, 422, 57, 10, 33, 3442, 1, 56, 3, 44])",
                "output": "[10, 1, 2, 3, 33, 205, 143, 422, 44, 423, 56, 426, 57, 3442, 468]"
            },
            {
                "input": "order_by_points([2, 5, 7, 6, 10, 8, 7, 10, 10, 12, 10])",
                "output": "[10, 10, 10, 10, 2, 12, 5, 6, 7, 7, 8]"
            },
            {
                "input": "order_by_points([2, 9, -3, -7, -17])",
                "output": "[-7, -3, 2, -17, 9]"
            },
            {
                "input": "order_by_points([])",
                "output": "[]"
            },
            {
                "input": "order_by_points([3, 2, 1, 3, 5, 5, 12, 9, 8, 10, 8])",
                "output": "[1, 10, 2, 3, 3, 12, 5, 5, 8, 8, 9]"
            }
        ]
    },
    {
        "problem_description": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
        "ground truth": "def specialFilter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
        "instances": [
            {
                "input": "specialFilter([74, -7, -29, 80, 22, 18])",
                "output": "0"
            },
            {
                "input": "specialFilter([4])",
                "output": "0"
            },
            {
                "input": "specialFilter([1, 1, 5, -5])",
                "output": "0"
            },
            {
                "input": "specialFilter([34, -2, -2, 44, 18, 105])",
                "output": "1"
            },
            {
                "input": "specialFilter([41, -12, 98, 128, 121, 104])",
                "output": "1"
            },
            {
                "input": "specialFilter([1, -7, 2, -10])",
                "output": "0"
            },
            {
                "input": "specialFilter([66, -6, -30, 73, 16, 21])",
                "output": "1"
            },
            {
                "input": "specialFilter([28, 2, 0, 49, 26, 107])",
                "output": "1"
            },
            {
                "input": "specialFilter([14, -74, 18, -20])",
                "output": "0"
            },
            {
                "input": "specialFilter([74, 1, -31, 79, 16, 17])",
                "output": "2"
            },
            {
                "input": "specialFilter([43, -7, 94, 120, 122, 114])",
                "output": "0"
            },
            {
                "input": "specialFilter([12, -78, 18, -19])",
                "output": "0"
            },
            {
                "input": "specialFilter([3, 2, 6, -6])",
                "output": "0"
            },
            {
                "input": "specialFilter([76, 1, -31, 70, 17, 18])",
                "output": "1"
            },
            {
                "input": "specialFilter([5, -2, 1, -5])",
                "output": "0"
            },
            {
                "input": "specialFilter([47, -9, 90, 130, 121, 109])",
                "output": "2"
            },
            {
                "input": "specialFilter([40, -12, 94, 130, 117, 110])",
                "output": "1"
            },
            {
                "input": "specialFilter([16, -74, 18, -13])",
                "output": "0"
            },
            {
                "input": "specialFilter([68, -1, -28, 73, 24, 15])",
                "output": "2"
            },
            {
                "input": "specialFilter([43, -12, 93, 125, 121, 109])",
                "output": "4"
            },
            {
                "input": "specialFilter([33, -2, -3, 45, 21, 109])",
                "output": "2"
            },
            {
                "input": "specialFilter([1, -5, 5, -5])",
                "output": "0"
            },
            {
                "input": "specialFilter([70, -3, -34, 78, 21, 21])",
                "output": "0"
            },
            {
                "input": "specialFilter([7, -4, 3, -2])",
                "output": "0"
            },
            {
                "input": "specialFilter([67, -5, -32, 74, 24, 19])",
                "output": "1"
            },
            {
                "input": "specialFilter([4, 2, 3, -6])",
                "output": "0"
            },
            {
                "input": "specialFilter([38, -6, 2, 43, 21, 105])",
                "output": "1"
            },
            {
                "input": "specialFilter([33, -2, -7, 40, 21, 105])",
                "output": "2"
            },
            {
                "input": "specialFilter([39, -11, 91, 125, 117, 107])",
                "output": "5"
            },
            {
                "input": "specialFilter([10, 2, 2, -5])",
                "output": "0"
            },
            {
                "input": "specialFilter([33, 1, -3, 41, 21, 107])",
                "output": "2"
            },
            {
                "input": "specialFilter([28, -3, -5, 41, 19, 110])",
                "output": "1"
            },
            {
                "input": "specialFilter([74, 0, -35, 74, 19, 16])",
                "output": "1"
            },
            {
                "input": "specialFilter([1, -7, 1, -9])",
                "output": "0"
            },
            {
                "input": "specialFilter([8, -2, 3, -1])",
                "output": "0"
            },
            {
                "input": "specialFilter([5])",
                "output": "0"
            },
            {
                "input": "specialFilter([31, 1, 1, 50, 26, 114])",
                "output": "1"
            },
            {
                "input": "specialFilter([6, -4, 1, -10])",
                "output": "0"
            },
            {
                "input": "specialFilter([66, 3, -33, 78, 18, 21])",
                "output": "0"
            },
            {
                "input": "specialFilter([72, 1, -30, 80, 21, 24])",
                "output": "0"
            },
            {
                "input": "specialFilter([5, 3, 1, -7])",
                "output": "0"
            },
            {
                "input": "specialFilter([6])",
                "output": "0"
            },
            {
                "input": "specialFilter([43, -12, 96, 128, 120, 104])",
                "output": "0"
            },
            {
                "input": "specialFilter([71, -5, -36, 75, 21, 23])",
                "output": "2"
            },
            {
                "input": "specialFilter([47, -17, 95, 124, 122, 113])",
                "output": "2"
            },
            {
                "input": "specialFilter([17, -71, 11, -14])",
                "output": "2"
            },
            {
                "input": "specialFilter([30, -4, -8, 42, 23, 112])",
                "output": "0"
            },
            {
                "input": "specialFilter([70, 2, -34, 78, 25, 23])",
                "output": "0"
            },
            {
                "input": "specialFilter([19, -74, 19, -12])",
                "output": "2"
            },
            {
                "input": "specialFilter([11, -78, 9, -19])",
                "output": "1"
            },
            {
                "input": "specialFilter([73, 2, -31, 70, 25, 18])",
                "output": "1"
            },
            {
                "input": "specialFilter([41, -8, 96, 130, 118, 109])",
                "output": "1"
            },
            {
                "input": "specialFilter([2])",
                "output": "0"
            },
            {
                "input": "specialFilter([35, -3, -4, 45, 16, 104])",
                "output": "1"
            },
            {
                "input": "specialFilter([20, -78, 16, -20])",
                "output": "0"
            },
            {
                "input": "specialFilter([])",
                "output": "0"
            },
            {
                "input": "specialFilter([15, -73, 17, -15])",
                "output": "2"
            },
            {
                "input": "specialFilter([31, -2, 0, 48, 26, 112])",
                "output": "1"
            },
            {
                "input": "specialFilter([11, -70, 16, -15])",
                "output": "1"
            },
            {
                "input": "specialFilter([4, 1, 6, -2])",
                "output": "0"
            },
            {
                "input": "specialFilter([36, -6, 2, 49, 22, 111])",
                "output": "1"
            },
            {
                "input": "specialFilter([12, -73, 19, -10])",
                "output": "1"
            },
            {
                "input": "specialFilter([12, -73, 14, -15])",
                "output": "0"
            },
            {
                "input": "specialFilter([46, -12, 92, 122, 123, 108])",
                "output": "1"
            },
            {
                "input": "specialFilter([47, -9, 97, 128, 118, 111])",
                "output": "2"
            },
            {
                "input": "specialFilter([38, -3, 0, 49, 24, 110])",
                "output": "0"
            },
            {
                "input": "specialFilter([35, 1, 1, 49, 16, 114])",
                "output": "1"
            },
            {
                "input": "specialFilter([73, 2, -32, 71, 18, 19])",
                "output": "3"
            },
            {
                "input": "specialFilter([18, -73, 11, -11])",
                "output": "1"
            },
            {
                "input": "specialFilter([3])",
                "output": "0"
            },
            {
                "input": "specialFilter([69, -5, -33, 80, 16, 17])",
                "output": "1"
            },
            {
                "input": "specialFilter([10, -5, 6, -5])",
                "output": "0"
            },
            {
                "input": "specialFilter([15, -73, 14, -15])",
                "output": "1"
            },
            {
                "input": "specialFilter([13, -71, 10, -20])",
                "output": "1"
            },
            {
                "input": "specialFilter([39, -15, 91, 120, 121, 107])",
                "output": "4"
            },
            {
                "input": "specialFilter([12, -73, 13, -15])",
                "output": "1"
            },
            {
                "input": "specialFilter([39, -11, 96, 126, 125, 111])",
                "output": "3"
            },
            {
                "input": "specialFilter([37, 3, 1, 45, 22, 113])",
                "output": "2"
            },
            {
                "input": "specialFilter([1, 0, 6, -7])",
                "output": "0"
            },
            {
                "input": "specialFilter([31, 1, -3, 41, 16, 110])",
                "output": "1"
            },
            {
                "input": "specialFilter([8, -2, 4, -7])",
                "output": "0"
            },
            {
                "input": "specialFilter([75, 1, -36, 70, 21, 21])",
                "output": "1"
            },
            {
                "input": "specialFilter([40, -10, 88, 126, 117, 112])",
                "output": "1"
            },
            {
                "input": "specialFilter([18, -71, 10, -15])",
                "output": "0"
            },
            {
                "input": "specialFilter([32, 2, -1, 45, 16, 107])",
                "output": "1"
            },
            {
                "input": "specialFilter([46, -7, 89, 129, 121, 109])",
                "output": "3"
            },
            {
                "input": "specialFilter([48, -12, 97, 129, 117, 107])",
                "output": "4"
            },
            {
                "input": "specialFilter([73, 1, -28, 75, 22, 14])",
                "output": "2"
            },
            {
                "input": "specialFilter([1])",
                "output": "0"
            },
            {
                "input": "specialFilter([66, 2, -29, 71, 19, 15])",
                "output": "3"
            },
            {
                "input": "specialFilter([13, -70, 16, -15])",
                "output": "1"
            },
            {
                "input": "specialFilter([16, -72, 9, -20])",
                "output": "0"
            },
            {
                "input": "specialFilter([7, -5, 3, -2])",
                "output": "0"
            },
            {
                "input": "specialFilter([3, -7, 5, -5])",
                "output": "0"
            },
            {
                "input": "specialFilter([31, -7, -4, 48, 20, 108])",
                "output": "1"
            },
            {
                "input": "specialFilter([48, -15, 88, 128, 122, 112])",
                "output": "0"
            },
            {
                "input": "specialFilter([45, -7, 91, 125, 122, 106])",
                "output": "2"
            },
            {
                "input": "specialFilter([44, -7, 97, 126, 116, 106])",
                "output": "1"
            },
            {
                "input": "specialFilter([15, -75, 14, -17])",
                "output": "1"
            },
            {
                "input": "specialFilter([32, 3, -6, 45, 16, 108])",
                "output": "0"
            },
            {
                "input": "specialFilter([3, -2, 4, -3])",
                "output": "0"
            }
        ]
    },
    {
        "problem_description": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
        "ground truth": "def get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
        "instances": [
            {
                "input": "get_max_triples(150)",
                "output": "181300"
            },
            {
                "input": "get_max_triples(64)",
                "output": "13671"
            },
            {
                "input": "get_max_triples(102)",
                "output": "56100"
            },
            {
                "input": "get_max_triples(169)",
                "output": "261856"
            },
            {
                "input": "get_max_triples(16)",
                "output": "175"
            },
            {
                "input": "get_max_triples(93)",
                "output": "42315"
            },
            {
                "input": "get_max_triples(84)",
                "output": "30996"
            },
            {
                "input": "get_max_triples(97)",
                "output": "48640"
            },
            {
                "input": "get_max_triples(46)",
                "output": "4950"
            },
            {
                "input": "get_max_triples(200)",
                "output": "431211"
            },
            {
                "input": "get_max_triples(79)",
                "output": "26026"
            },
            {
                "input": "get_max_triples(136)",
                "output": "135675"
            },
            {
                "input": "get_max_triples(50)",
                "output": "6136"
            },
            {
                "input": "get_max_triples(42)",
                "output": "3640"
            },
            {
                "input": "get_max_triples(34)",
                "output": "1936"
            },
            {
                "input": "get_max_triples(114)",
                "output": "78736"
            },
            {
                "input": "get_max_triples(167)",
                "output": "249535"
            },
            {
                "input": "get_max_triples(164)",
                "output": "236169"
            },
            {
                "input": "get_max_triples(176)",
                "output": "292639"
            },
            {
                "input": "get_max_triples(135)",
                "output": "131670"
            },
            {
                "input": "get_max_triples(60)",
                "output": "11020"
            },
            {
                "input": "get_max_triples(192)",
                "output": "383040"
            },
            {
                "input": "get_max_triples(91)",
                "output": "40050"
            },
            {
                "input": "get_max_triples(186)",
                "output": "347944"
            },
            {
                "input": "get_max_triples(100)",
                "output": "53361"
            },
            {
                "input": "get_max_triples(63)",
                "output": "12810"
            },
            {
                "input": "get_max_triples(155)",
                "output": "198951"
            },
            {
                "input": "get_max_triples(43)",
                "output": "4018"
            },
            {
                "input": "get_max_triples(30)",
                "output": "1260"
            },
            {
                "input": "get_max_triples(62)",
                "output": "11990"
            },
            {
                "input": "get_max_triples(54)",
                "output": "7956"
            },
            {
                "input": "get_max_triples(142)",
                "output": "154630"
            },
            {
                "input": "get_max_triples(12)",
                "output": "60"
            },
            {
                "input": "get_max_triples(158)",
                "output": "210886"
            },
            {
                "input": "get_max_triples(10)",
                "output": "36"
            },
            {
                "input": "get_max_triples(168)",
                "output": "255640"
            },
            {
                "input": "get_max_triples(47)",
                "output": "5055"
            },
            {
                "input": "get_max_triples(39)",
                "output": "2886"
            },
            {
                "input": "get_max_triples(13)",
                "output": "88"
            },
            {
                "input": "get_max_triples(38)",
                "output": "2586"
            },
            {
                "input": "get_max_triples(9)",
                "output": "21"
            },
            {
                "input": "get_max_triples(82)",
                "output": "29160"
            },
            {
                "input": "get_max_triples(173)",
                "output": "277761"
            },
            {
                "input": "get_max_triples(106)",
                "output": "63700"
            },
            {
                "input": "get_max_triples(196)",
                "output": "409825"
            },
            {
                "input": "get_max_triples(80)",
                "output": "26351"
            },
            {
                "input": "get_max_triples(29)",
                "output": "1089"
            },
            {
                "input": "get_max_triples(185)",
                "output": "340441"
            },
            {
                "input": "get_max_triples(127)",
                "output": "110250"
            },
            {
                "input": "get_max_triples(40)",
                "output": "3211"
            },
            {
                "input": "get_max_triples(74)",
                "output": "20724"
            },
            {
                "input": "get_max_triples(187)",
                "output": "355570"
            },
            {
                "input": "get_max_triples(130)",
                "output": "118336"
            },
            {
                "input": "get_max_triples(76)",
                "output": "23125"
            },
            {
                "input": "get_max_triples(48)",
                "output": "5520"
            },
            {
                "input": "get_max_triples(195)",
                "output": "401440"
            },
            {
                "input": "get_max_triples(124)",
                "output": "102541"
            },
            {
                "input": "get_max_triples(58)",
                "output": "10108"
            },
            {
                "input": "get_max_triples(5)",
                "output": "1"
            },
            {
                "input": "get_max_triples(134)",
                "output": "127754"
            },
            {
                "input": "get_max_triples(190)",
                "output": "373086"
            },
            {
                "input": "get_max_triples(191)",
                "output": "375039"
            },
            {
                "input": "get_max_triples(189)",
                "output": "365211"
            },
            {
                "input": "get_max_triples(108)",
                "output": "66780"
            },
            {
                "input": "get_max_triples(15)",
                "output": "130"
            },
            {
                "input": "get_max_triples(21)",
                "output": "399"
            },
            {
                "input": "get_max_triples(149)",
                "output": "176449"
            },
            {
                "input": "get_max_triples(153)",
                "output": "192525"
            },
            {
                "input": "get_max_triples(148)",
                "output": "175273"
            },
            {
                "input": "get_max_triples(36)",
                "output": "2244"
            },
            {
                "input": "get_max_triples(112)",
                "output": "75295"
            },
            {
                "input": "get_max_triples(181)",
                "output": "322200"
            },
            {
                "input": "get_max_triples(171)",
                "output": "269724"
            },
            {
                "input": "get_max_triples(2)",
                "output": "0"
            },
            {
                "input": "get_max_triples(17)",
                "output": "185"
            },
            {
                "input": "get_max_triples(26)",
                "output": "764"
            },
            {
                "input": "get_max_triples(6)",
                "output": "4"
            },
            {
                "input": "get_max_triples(137)",
                "output": "136665"
            },
            {
                "input": "get_max_triples(27)",
                "output": "900"
            },
            {
                "input": "get_max_triples(51)",
                "output": "6664"
            },
            {
                "input": "get_max_triples(18)",
                "output": "240"
            },
            {
                "input": "get_max_triples(129)",
                "output": "114681"
            },
            {
                "input": "get_max_triples(107)",
                "output": "64295"
            },
            {
                "input": "get_max_triples(166)",
                "output": "248050"
            },
            {
                "input": "get_max_triples(188)",
                "output": "357461"
            },
            {
                "input": "get_max_triples(96)",
                "output": "46624"
            },
            {
                "input": "get_max_triples(19)",
                "output": "306"
            },
            {
                "input": "get_max_triples(71)",
                "output": "18239"
            },
            {
                "input": "get_max_triples(67)",
                "output": "15730"
            },
            {
                "input": "get_max_triples(178)",
                "output": "306328"
            },
            {
                "input": "get_max_triples(98)",
                "output": "49136"
            },
            {
                "input": "get_max_triples(41)",
                "output": "3289"
            },
            {
                "input": "get_max_triples(177)",
                "output": "299425"
            },
            {
                "input": "get_max_triples(61)",
                "output": "11800"
            },
            {
                "input": "get_max_triples(53)",
                "output": "7361"
            },
            {
                "input": "get_max_triples(126)",
                "output": "106764"
            },
            {
                "input": "get_max_triples(75)",
                "output": "21900"
            },
            {
                "input": "get_max_triples(109)",
                "output": "69336"
            }
        ]
    },
    {
        "problem_description": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
        "ground truth": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
        "instances": [
            {
                "input": "bf('Saturn', 'Earth')",
                "output": "('Mars', 'Jupiter')"
            },
            {
                "input": "bf('Saturn', 'Jupiter')",
                "output": "()"
            },
            {
                "input": "bf('Earth', 'Venus')",
                "output": "()"
            },
            {
                "input": "bf('proqRzxn', 'cLxtIMtgR')",
                "output": "()"
            },
            {
                "input": "bf('HCGq', 'yVCoay')",
                "output": "()"
            },
            {
                "input": "bf('lyfEeBXn', 'uzRssTA')",
                "output": "()"
            },
            {
                "input": "bf('Earth', 'Neptune')",
                "output": "('Mars', 'Jupiter', 'Saturn', 'Uranus')"
            },
            {
                "input": "bf('JKjmqhz', 'vlVlQIlPkV')",
                "output": "()"
            },
            {
                "input": "bf('Mercury', 'Jupiter')",
                "output": "('Venus', 'Earth', 'Mars')"
            },
            {
                "input": "bf('KHB', 'OoZXdElWw')",
                "output": "()"
            },
            {
                "input": "bf('tnrxRqi', 'AWplLV')",
                "output": "()"
            },
            {
                "input": "bf('hayLKiu', 'PNqJKHp')",
                "output": "()"
            },
            {
                "input": "bf('RucLkBzqBlnI', 'xstFZL')",
                "output": "()"
            },
            {
                "input": "bf('Uranus', 'Venus')",
                "output": "('Earth', 'Mars', 'Jupiter', 'Saturn')"
            },
            {
                "input": "bf('Venus', 'Saturn')",
                "output": "('Earth', 'Mars', 'Jupiter')"
            },
            {
                "input": "bf('Jupiter', 'Earth')",
                "output": "('Mars',)"
            },
            {
                "input": "bf('Uranus', 'Uranus')",
                "output": "()"
            },
            {
                "input": "bf('Neptune', 'Saturn')",
                "output": "('Uranus',)"
            },
            {
                "input": "bf('IvccNilTV', 'PzX')",
                "output": "()"
            },
            {
                "input": "bf(\"Earth\", \"Earth\")",
                "output": "()"
            },
            {
                "input": "bf('CvjBqYn', 'JphCPo')",
                "output": "()"
            },
            {
                "input": "bf('DHKmwLimf', 'hejG')",
                "output": "()"
            },
            {
                "input": "bf('UWohXWxaLKC', 'wxWzdfKzvTwn')",
                "output": "()"
            },
            {
                "input": "bf('uSALSr', 'hpkswMWd')",
                "output": "()"
            },
            {
                "input": "bf('gyUn', 'vMujG')",
                "output": "()"
            },
            {
                "input": "bf('NLnoeB', 'caeAE')",
                "output": "()"
            },
            {
                "input": "bf('cmy', 'MPBqlP')",
                "output": "()"
            },
            {
                "input": "bf('Neptune', 'Jupiter')",
                "output": "('Saturn', 'Uranus')"
            },
            {
                "input": "bf('tmaUgxPoC', 'YmJrbcSj')",
                "output": "()"
            },
            {
                "input": "bf('VLDLDEO', 'Kemt')",
                "output": "()"
            },
            {
                "input": "bf('Earth', 'Saturn')",
                "output": "('Mars', 'Jupiter')"
            },
            {
                "input": "bf('Mars', 'Mars')",
                "output": "()"
            },
            {
                "input": "bf(\"Jupiter\", \"Makemake\")",
                "output": "()"
            },
            {
                "input": "bf('Mars', 'Neptune')",
                "output": "('Jupiter', 'Saturn', 'Uranus')"
            },
            {
                "input": "bf('lXjRDOc', 'fXKFCManbjQ')",
                "output": "()"
            },
            {
                "input": "bf('Jupiter', 'Saturn')",
                "output": "()"
            },
            {
                "input": "bf('sKlHVKBU', 'Nxb')",
                "output": "()"
            },
            {
                "input": "bf('pHPJQTV', 'dWIDiZP')",
                "output": "()"
            },
            {
                "input": "bf('Saturn', 'Uranus')",
                "output": "()"
            },
            {
                "input": "bf('Earth', 'Earth')",
                "output": "()"
            },
            {
                "input": "bf('GJTKYgzMd', 'gWi')",
                "output": "()"
            },
            {
                "input": "bf('Jupiter', 'Neptune')",
                "output": "('Saturn', 'Uranus')"
            },
            {
                "input": "bf('fifVrBwCb', 'WwPWORetZ')",
                "output": "()"
            },
            {
                "input": "bf('Saturn', 'Mercury')",
                "output": "('Venus', 'Earth', 'Mars', 'Jupiter')"
            },
            {
                "input": "bf('NLDe', 'rzLkDX')",
                "output": "()"
            },
            {
                "input": "bf('wdEgmW', 'dEgw')",
                "output": "()"
            },
            {
                "input": "bf('buNtf', 'scfbWIUY')",
                "output": "()"
            },
            {
                "input": "bf('Uranus', 'Mercury')",
                "output": "('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')"
            },
            {
                "input": "bf(\"Mars\", \"Earth\")",
                "output": "()"
            },
            {
                "input": "bf('Uranus', 'Earth')",
                "output": "('Mars', 'Jupiter', 'Saturn')"
            },
            {
                "input": "bf('Neptune', 'Mars')",
                "output": "('Jupiter', 'Saturn', 'Uranus')"
            },
            {
                "input": "bf('Jupiter', 'Uranus')",
                "output": "('Saturn',)"
            },
            {
                "input": "bf('Uranus', 'Neptune')",
                "output": "()"
            },
            {
                "input": "bf('Venus', 'Earth')",
                "output": "()"
            },
            {
                "input": "bf('ffrUoKQx', 'SNZLGhr')",
                "output": "()"
            },
            {
                "input": "bf('Earth', 'Mars')",
                "output": "()"
            },
            {
                "input": "bf('smEXloM', 'jZBLGc')",
                "output": "()"
            },
            {
                "input": "bf('UEmf', 'orUuN')",
                "output": "()"
            },
            {
                "input": "bf('JTFhqMWoE', 'vshaCvtG')",
                "output": "()"
            },
            {
                "input": "bf('XSuDrOCZ', 'rIuxDaB')",
                "output": "()"
            },
            {
                "input": "bf('xgGOVPmL', 'QcnfLMd')",
                "output": "()"
            },
            {
                "input": "bf('zYEZNC', 'yuHunvTb')",
                "output": "()"
            },
            {
                "input": "bf('Jupiter', 'Mars')",
                "output": "()"
            },
            {
                "input": "bf('Mercury', 'Mars')",
                "output": "('Venus', 'Earth')"
            },
            {
                "input": "bf('Uranus', 'Mars')",
                "output": "('Jupiter', 'Saturn')"
            },
            {
                "input": "bf('qDuD', 'wdbCsSfpyJ')",
                "output": "()"
            },
            {
                "input": "bf('Mercury', 'Earth')",
                "output": "('Venus',)"
            },
            {
                "input": "bf('Mercury', 'Neptune')",
                "output": "('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')"
            },
            {
                "input": "bf('NnRASam', 'kLreZ')",
                "output": "()"
            },
            {
                "input": "bf('eAuZ', 'CDjFvr')",
                "output": "()"
            },
            {
                "input": "bf('Mercury', 'Uranus')",
                "output": "('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')"
            },
            {
                "input": "bf('ufKZhFD', 'yyASc')",
                "output": "()"
            },
            {
                "input": "bf('FoICpuSx', 'DLeFV')",
                "output": "()"
            },
            {
                "input": "bf('MbdIWyQKKQv', 'ErIHtYqB')",
                "output": "()"
            },
            {
                "input": "bf('Neptune', 'Neptune')",
                "output": "()"
            },
            {
                "input": "bf('Mars', 'Mercury')",
                "output": "('Venus', 'Earth')"
            },
            {
                "input": "bf('Venus', 'Mars')",
                "output": "('Earth',)"
            },
            {
                "input": "bf('KQcimuFmov', 'dxFbURLcq')",
                "output": "()"
            },
            {
                "input": "bf('tHQBLXkkh', 'XiMEyBQ')",
                "output": "()"
            },
            {
                "input": "bf('GzPVDzR', 'zGQ')",
                "output": "()"
            },
            {
                "input": "bf('WxA', 'JRQl')",
                "output": "()"
            },
            {
                "input": "bf('Uranus', 'Saturn')",
                "output": "()"
            },
            {
                "input": "bf('Mercury', 'Mercury')",
                "output": "()"
            },
            {
                "input": "bf('Mars', 'Uranus')",
                "output": "('Jupiter', 'Saturn')"
            },
            {
                "input": "bf('hSLEjoINv', 'YYAhwA')",
                "output": "()"
            },
            {
                "input": "bf('xJrSGV', 'zdwOxdVzN')",
                "output": "()"
            },
            {
                "input": "bf('uKpmBiu', 'wLhUekd')",
                "output": "()"
            },
            {
                "input": "bf('mKeLE', 'wUFkoci')",
                "output": "()"
            },
            {
                "input": "bf('Venus', 'Neptune')",
                "output": "('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')"
            },
            {
                "input": "bf('DbZtRXht', 'IFhEw')",
                "output": "()"
            },
            {
                "input": "bf('Venus', 'Mercury')",
                "output": "()"
            },
            {
                "input": "bf('Earth', 'Jupiter')",
                "output": "('Mars',)"
            },
            {
                "input": "bf('JpxsgCfeGpVA', 'HUujAsabnZ')",
                "output": "()"
            },
            {
                "input": "bf('jxc', 'QmQxf')",
                "output": "()"
            },
            {
                "input": "bf('grjW', 'UOtjR')",
                "output": "()"
            },
            {
                "input": "bf('BmIfOHfuO', 'wRdUevYZI')",
                "output": "()"
            },
            {
                "input": "bf('DmfS', 'jlIbIoY')",
                "output": "()"
            },
            {
                "input": "bf('wBIcna', 'iQRGuAv')",
                "output": "()"
            }
        ]
    },
    {
        "problem_description": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n",
        "ground truth": "def sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
        "instances": [
            {
                "input": "sorted_list_sum(['irmrfqffety', 'TXYO', 'yarx', 'o'])",
                "output": "['TXYO', 'yarx']"
            },
            {
                "input": "sorted_list_sum(['hrhr', 's', 'efyajpfr'])",
                "output": "['hrhr', 'efyajpfr']"
            },
            {
                "input": "sorted_list_sum(['eqsgqwww', 'ttflnfbu', 'gsdjzv', 'pifc'])",
                "output": "['pifc', 'gsdjzv', 'eqsgqwww', 'ttflnfbu']"
            },
            {
                "input": "sorted_list_sum(['juqaehy', 'eheobjx', 'qbxc', 'ximw'])",
                "output": "['qbxc', 'ximw']"
            },
            {
                "input": "sorted_list_sum(['f', 'k', 'q', 'q'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['AQWCDV', 'usbp', 'nmsau'])",
                "output": "['usbp', 'AQWCDV']"
            },
            {
                "input": "sorted_list_sum(['btr', 'GKKR', 'nue', 'x'])",
                "output": "['GKKR']"
            },
            {
                "input": "sorted_list_sum(['ebwm', 'y', 'pnzotmy'])",
                "output": "['ebwm']"
            },
            {
                "input": "sorted_list_sum(['h', 'kugihl', 'pvyzsh', 'c'])",
                "output": "['kugihl', 'pvyzsh']"
            },
            {
                "input": "sorted_list_sum(['r', 'o', 'n', 'm', 's', 'c'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['b', 'qgpq', 'tpqegmwj', 'e'])",
                "output": "['qgpq', 'tpqegmwj']"
            },
            {
                "input": "sorted_list_sum(['ekxlt', 'o', 'tdeu'])",
                "output": "['tdeu']"
            },
            {
                "input": "sorted_list_sum(['k', 'jydfagyx', 'fxovtjzr', 'q'])",
                "output": "['fxovtjzr', 'jydfagyx']"
            },
            {
                "input": "sorted_list_sum(['QYMOZ', 'uixbpt', 'hqgiu'])",
                "output": "['uixbpt']"
            },
            {
                "input": "sorted_list_sum(['s', 'h', 'n', 'v', 'e', 'j'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['x', 'i', 'e', 'x'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['y', 'q', 'l', 'v'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['YIV', 'rcz', 'bpadif'])",
                "output": "['bpadif']"
            },
            {
                "input": "sorted_list_sum(['recwm', 'yeck', 'oqq', 'phyphd'])",
                "output": "['yeck', 'phyphd']"
            },
            {
                "input": "sorted_list_sum(['sicstb', 'm', 'pzlzr'])",
                "output": "['sicstb']"
            },
            {
                "input": "sorted_list_sum(['usj', 'GIOJ', 'huwhiofpm', 'z'])",
                "output": "['GIOJ']"
            },
            {
                "input": "sorted_list_sum(['ucm', 'l', 'yveil'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['r', 'y', 'f', 's', 'c', 'd'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['edos', 'ELAX', 'babcjwlc', 'j'])",
                "output": "['ELAX', 'edos', 'babcjwlc']"
            },
            {
                "input": "sorted_list_sum(['GZRA', 'xarpin', 'efnq'])",
                "output": "['GZRA', 'efnq', 'xarpin']"
            },
            {
                "input": "sorted_list_sum(['xuc', 'z', 'xqid'])",
                "output": "['xqid']"
            },
            {
                "input": "sorted_list_sum(['EAS', 'dmd', 'hmhomw'])",
                "output": "['hmhomw']"
            },
            {
                "input": "sorted_list_sum(['kpbalcfbr', 'xiqozc', 'gckv', 'zfif'])",
                "output": "['gckv', 'zfif', 'xiqozc']"
            },
            {
                "input": "sorted_list_sum(['vpmbycpeghbq', 'FJNDFH', 'rphx', 'p'])",
                "output": "['rphx', 'FJNDFH', 'vpmbycpeghbq']"
            },
            {
                "input": "sorted_list_sum(['k', 'k', 'v', 'b'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['k', 'y', 'x', 'r'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['OTZVLC', 'qmbu', 'tzfllx'])",
                "output": "['qmbu', 'OTZVLC', 'tzfllx']"
            },
            {
                "input": "sorted_list_sum(['UKFCW', 'tusesk', 'pbci'])",
                "output": "['pbci', 'tusesk']"
            },
            {
                "input": "sorted_list_sum(['iooz', 'ynxjvyin', 'rlt', 'tmlj'])",
                "output": "['iooz', 'tmlj', 'ynxjvyin']"
            },
            {
                "input": "sorted_list_sum(['qjwgympb', 'nhffndu', 'hdk', 'dzstfj'])",
                "output": "['dzstfj', 'qjwgympb']"
            },
            {
                "input": "sorted_list_sum(['bxyypq', 'wxxrhtl', 'viufyc', 'ikokkf'])",
                "output": "['bxyypq', 'ikokkf', 'viufyc']"
            },
            {
                "input": "sorted_list_sum(['q', 'xrjkdncyy', 'yduhelics', 'x'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['y', 'u', 'n', 'o', 'v', 'n'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['w', 'a', 'o', 't'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['i', 'p', 't', 'e', 'o', 'e'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['pzifo', 'w', 'axbjjdkxp'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['p', 'w', 'c', 'z', 'z', 'w'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum([\"d\", \"b\", \"c\", \"a\"])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['ONSBIH', 'hxf', 'fzzcfd'])",
                "output": "['ONSBIH', 'fzzcfd']"
            },
            {
                "input": "sorted_list_sum(['PBEQI', 'sbkq', 'heblbq'])",
                "output": "['sbkq', 'heblbq']"
            },
            {
                "input": "sorted_list_sum(['tzl', 'o', 'slwk'])",
                "output": "['slwk']"
            },
            {
                "input": "sorted_list_sum(['FUOXV', 'qctut', 'svdeaj'])",
                "output": "['svdeaj']"
            },
            {
                "input": "sorted_list_sum(['y', 'g', 'g', 'n'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['t', 'fogstld', 'mjpwpgxl', 'x'])",
                "output": "['mjpwpgxl']"
            },
            {
                "input": "sorted_list_sum(['w', 'viox', 'adfohsvy', 'k'])",
                "output": "['viox', 'adfohsvy']"
            },
            {
                "input": "sorted_list_sum([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['QCJ', 'affdn', 'hww'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['p', 'u', 'h', 'm'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['OCNZ', 'msehtj', 'yorhll'])",
                "output": "['OCNZ', 'msehtj', 'yorhll']"
            },
            {
                "input": "sorted_list_sum(['gvjy', 'p', 'fuwizq'])",
                "output": "['gvjy', 'fuwizq']"
            },
            {
                "input": "sorted_list_sum(['yld', 'y', 'plufbbact'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['regohj', 'x', 'irqawkr'])",
                "output": "['regohj']"
            },
            {
                "input": "sorted_list_sum(['r', 'g', 'u', 'h', 'm', 't'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['f', 'uyprdzr', 'ktv', 'q'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['z', 'w', 'e', 'y'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['uexpcjhhqugm', 'FJCFLF', 'vegmlf', 'a'])",
                "output": "['FJCFLF', 'vegmlf', 'uexpcjhhqugm']"
            },
            {
                "input": "sorted_list_sum(['fxxnym', 'YNVUK', 'sniixyr', 'u'])",
                "output": "['fxxnym']"
            },
            {
                "input": "sorted_list_sum(['q', 'm', 'w', 'e'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['g', 'hmwftriyk', 'hciog', 'd'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['xglff', 'lmahsr', 'hqbmy', 'ceykyf'])",
                "output": "['ceykyf', 'lmahsr']"
            },
            {
                "input": "sorted_list_sum(['j', 'ncrylsgoq', 'thhjcjyhj', 'n'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['x', 'zgchziq', 'sysdvz', 'a'])",
                "output": "['sysdvz']"
            },
            {
                "input": "sorted_list_sum(['p', 'm', 'b', 'j', 'e', 'u'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['ewbj', 'svvkcit', 'mjiwit', 'rpaxk'])",
                "output": "['ewbj', 'mjiwit']"
            },
            {
                "input": "sorted_list_sum(['mslllfrcp', 'XQUNEP', 'kugjguofd', 'd'])",
                "output": "['XQUNEP']"
            },
            {
                "input": "sorted_list_sum(['llwuubhcb', 'TDJAL', 'kqsokna', 'm'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['iuoyc', 'ullwfdp', 'pvkuk', 'cofc'])",
                "output": "['cofc']"
            },
            {
                "input": "sorted_list_sum(['lsxvhg', 'VIXMZX', 'vyng', 'n'])",
                "output": "['vyng', 'VIXMZX', 'lsxvhg']"
            },
            {
                "input": "sorted_list_sum(['p', 'dizvipnth', 'dvgiu', 'r'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['m', 'q', 'f', 'z'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['a', 'v', 'm', 'w'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['u', 'f', 'o', 'f', 'q', 'y'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['l', 'j', 'q', 'i', 'w', 'a'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['y', 'dfcz', 'akkxahu', 't'])",
                "output": "['dfcz']"
            },
            {
                "input": "sorted_list_sum(['m', 'bjptqzaty', 'inkkhfl', 's'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['MIF', 'swoat', 'jqf'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['jrfmz', 'g', 'tomvxr'])",
                "output": "['tomvxr']"
            },
            {
                "input": "sorted_list_sum(['t', 'k', 'g', 'p', 'r', 't'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['muo', 'j', 'ckygjpxwg'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['xnf', 'v', 'pjjsyo'])",
                "output": "['pjjsyo']"
            },
            {
                "input": "sorted_list_sum(['INSLDO', 'mubcsj', 'oxfw'])",
                "output": "['oxfw', 'INSLDO', 'mubcsj']"
            },
            {
                "input": "sorted_list_sum(['jhsxxlwgy', 'NBF', 'aefmf', 'c'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['wwh', 'h', 'hnqzaekx'])",
                "output": "['hnqzaekx']"
            },
            {
                "input": "sorted_list_sum(['fgjgsq', 'm', 'msri'])",
                "output": "['msri', 'fgjgsq']"
            },
            {
                "input": "sorted_list_sum(['o', 'm', 'w', 'u'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['zxnubdtseq', 'QSLH', 'oywewn', 'b'])",
                "output": "['QSLH', 'oywewn', 'zxnubdtseq']"
            },
            {
                "input": "sorted_list_sum(['x', 'o', 'g', 'h'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['pgenbrrjx', 'vanvcx', 'nlv', 'wtxxxh'])",
                "output": "['vanvcx', 'wtxxxh']"
            },
            {
                "input": "sorted_list_sum(['v', 'y', 'o', 'q', 'g', 'u'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['boalfyu', 'PTGHMN', 'pwgh', 't'])",
                "output": "['pwgh', 'PTGHMN']"
            },
            {
                "input": "sorted_list_sum(['l', 'iwkqccom', 'jsxm', 'g'])",
                "output": "['jsxm', 'iwkqccom']"
            },
            {
                "input": "sorted_list_sum(['a', 'c', 'e', 'x'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['iiqufxt', 'bfjyqmjp', 'zzo', 'gevhmv'])",
                "output": "['gevhmv', 'bfjyqmjp']"
            },
            {
                "input": "sorted_list_sum(['DEJ', 'onmqey', 'ramziu'])",
                "output": "['onmqey', 'ramziu']"
            },
            {
                "input": "sorted_list_sum(['a', 'ugmgcxr', 'tnweggy', 'a'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['g', 'u', 'u', 'q'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['u', 'vhdpoppi', 'myg', 'v'])",
                "output": "['vhdpoppi']"
            },
            {
                "input": "sorted_list_sum(['b', 'lne', 'wacbgrdx', 'e'])",
                "output": "['wacbgrdx']"
            },
            {
                "input": "sorted_list_sum(['rxjv', 'JTH', 'gypzzns', 'g'])",
                "output": "['rxjv']"
            },
            {
                "input": "sorted_list_sum(['r', 'y', 'b', 'o', 'k', 'b'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['e', 'ixpnz', 'wgzpg', 'z'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['qpy', 'gco', 'jmyh', 'uwxr'])",
                "output": "['jmyh', 'uwxr']"
            },
            {
                "input": "sorted_list_sum(['n', 'x', 'h', 'l', 'g', 'x'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['HUHFA', 'pwp', 'atzqku'])",
                "output": "['atzqku']"
            },
            {
                "input": "sorted_list_sum(['e', 'p', 'w', 't', 'm', 'y'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['tnvnoddoc', 'lsqqu', 'soxlba', 'axjfi'])",
                "output": "['soxlba']"
            },
            {
                "input": "sorted_list_sum(['m', 'v', 'g', 'g', 'y', 'd'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['mjt', 'GDRQVY', 'uxtapid', 'h'])",
                "output": "['GDRQVY']"
            },
            {
                "input": "sorted_list_sum(['vdiny', 'qybrhvm', 'ctdvqb', 'noy'])",
                "output": "['ctdvqb']"
            },
            {
                "input": "sorted_list_sum(['IUDPWX', 'yrvry', 'mcwkp'])",
                "output": "['IUDPWX']"
            },
            {
                "input": "sorted_list_sum(['p', 'd', 'y', 'f', 'q', 'b'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['hjjpyxkf', 'HNCS', 'lxdufgfs', 'g'])",
                "output": "['HNCS', 'hjjpyxkf', 'lxdufgfs']"
            },
            {
                "input": "sorted_list_sum(['GAD', 'hnpq', 'hjuj'])",
                "output": "['hjuj', 'hnpq']"
            },
            {
                "input": "sorted_list_sum(['muu', 'EDEF', 'gkivpgs', 'f'])",
                "output": "['EDEF']"
            },
            {
                "input": "sorted_list_sum(['wlqokjf', 'nbpsqnzh', 'tjrk', 'hexydi'])",
                "output": "['tjrk', 'hexydi', 'nbpsqnzh']"
            },
            {
                "input": "sorted_list_sum(['cskx', 'eisx', 'rprb', 'tcdu'])",
                "output": "['cskx', 'eisx', 'rprb', 'tcdu']"
            },
            {
                "input": "sorted_list_sum(['xstu', 'a', 'lqcsrpz'])",
                "output": "['xstu']"
            },
            {
                "input": "sorted_list_sum(['j', 'j', 'h', 'o'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['mqbwrjooe', 'XTSZ', 'tazrjipd', 'b'])",
                "output": "['XTSZ', 'tazrjipd']"
            },
            {
                "input": "sorted_list_sum(['elk', 'itmt', 'ndqoy', 'wmuteq'])",
                "output": "['itmt', 'wmuteq']"
            },
            {
                "input": "sorted_list_sum(['bcbuca', 'm', 'cbbhjpl'])",
                "output": "['bcbuca']"
            },
            {
                "input": "sorted_list_sum(['n', 'i', 'n', 'q', 'c', 'l'])",
                "output": "[]"
            },
            {
                "input": "sorted_list_sum(['q', 'k', 'z', 'l'])",
                "output": "[]"
            }
        ]
    },
    {
        "problem_description": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
        "ground truth": "def x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
        "instances": [
            {
                "input": "x_or_y(20, 5, 6)",
                "output": "6"
            },
            {
                "input": "x_or_y(4, 4, 4)",
                "output": "4"
            },
            {
                "input": "x_or_y(1, 2, 0)",
                "output": "0"
            },
            {
                "input": "x_or_y(6, 7, 4)",
                "output": "4"
            },
            {
                "input": "x_or_y(8, 35, 5150)",
                "output": "5150"
            },
            {
                "input": "x_or_y(3, 1, 4)",
                "output": "1"
            },
            {
                "input": "x_or_y(6981, -2, 13)",
                "output": "13"
            },
            {
                "input": "x_or_y(2712, 1697, 583)",
                "output": "583"
            },
            {
                "input": "x_or_y(87, 51, 130)",
                "output": "130"
            },
            {
                "input": "x_or_y(3609, 1245, 583)",
                "output": "583"
            },
            {
                "input": "x_or_y(2, 6, 3)",
                "output": "6"
            },
            {
                "input": "x_or_y(1936, 6, 53)",
                "output": "53"
            },
            {
                "input": "x_or_y(3, 38, 586)",
                "output": "38"
            },
            {
                "input": "x_or_y(5, 32, 5380)",
                "output": "32"
            },
            {
                "input": "x_or_y(4, 7, 1)",
                "output": "1"
            },
            {
                "input": "x_or_y(9, 30, 315)",
                "output": "315"
            },
            {
                "input": "x_or_y(2115, 6, 57)",
                "output": "57"
            },
            {
                "input": "x_or_y(6, 2, 3)",
                "output": "3"
            },
            {
                "input": "x_or_y(88, 56, 125)",
                "output": "125"
            },
            {
                "input": "x_or_y(2, 2, 0)",
                "output": "2"
            },
            {
                "input": "x_or_y(3577, 1382, 583)",
                "output": "583"
            },
            {
                "input": "x_or_y(94, 59, 132)",
                "output": "132"
            },
            {
                "input": "x_or_y(91, 59, 127)",
                "output": "127"
            },
            {
                "input": "x_or_y(91, 56, 129)",
                "output": "129"
            },
            {
                "input": "x_or_y(1605, 5, 48)",
                "output": "48"
            },
            {
                "input": "x_or_y(2, 4, 2)",
                "output": "4"
            },
            {
                "input": "x_or_y(1, 7, 4)",
                "output": "4"
            },
            {
                "input": "x_or_y(9, 36, 8)",
                "output": "8"
            },
            {
                "input": "x_or_y(2094, 7, 54)",
                "output": "54"
            },
            {
                "input": "x_or_y(3, 5, 5)",
                "output": "5"
            },
            {
                "input": "x_or_y(13, 7, 7)",
                "output": "7"
            },
            {
                "input": "x_or_y(19, 8, 3)",
                "output": "8"
            },
            {
                "input": "x_or_y(7727, -4, 16)",
                "output": "-4"
            },
            {
                "input": "x_or_y(1, 35, 574)",
                "output": "574"
            },
            {
                "input": "x_or_y(8, 35, 5383)",
                "output": "5383"
            },
            {
                "input": "x_or_y(8561, 3, 9)",
                "output": "9"
            },
            {
                "input": "x_or_y(9, 36, 7)",
                "output": "7"
            },
            {
                "input": "x_or_y(88, 60, 127)",
                "output": "127"
            },
            {
                "input": "x_or_y(8402, -3, 10)",
                "output": "10"
            },
            {
                "input": "x_or_y(5, 34, 4936)",
                "output": "34"
            },
            {
                "input": "x_or_y(6, 4, 5)",
                "output": "5"
            },
            {
                "input": "x_or_y(15, 8, 5)",
                "output": "5"
            },
            {
                "input": "x_or_y(6, 35, 1233)",
                "output": "1233"
            },
            {
                "input": "x_or_y(5, 28, 6163)",
                "output": "28"
            },
            {
                "input": "x_or_y(9, 36, 12)",
                "output": "12"
            },
            {
                "input": "x_or_y(6942, 2, 14)",
                "output": "14"
            },
            {
                "input": "x_or_y(3068, 961, 580)",
                "output": "580"
            },
            {
                "input": "x_or_y(9, 34, 9)",
                "output": "9"
            },
            {
                "input": "x_or_y(8, 33, 5730)",
                "output": "5730"
            },
            {
                "input": "x_or_y(96, 54, 128)",
                "output": "128"
            },
            {
                "input": "x_or_y(11, 32, 1982)",
                "output": "32"
            },
            {
                "input": "x_or_y(1, 35, 5018)",
                "output": "5018"
            },
            {
                "input": "x_or_y(4196, 479, 582)",
                "output": "582"
            },
            {
                "input": "x_or_y(4, 6, 4)",
                "output": "4"
            },
            {
                "input": "x_or_y(2, 33, 7)",
                "output": "33"
            },
            {
                "input": "x_or_y(7192, 0, 8)",
                "output": "8"
            },
            {
                "input": "x_or_y(5, 3, 3)",
                "output": "3"
            },
            {
                "input": "x_or_y(4027, 435, 578)",
                "output": "435"
            },
            {
                "input": "x_or_y(7401, -3, 8)",
                "output": "8"
            },
            {
                "input": "x_or_y(8032, 1, 8)",
                "output": "8"
            },
            {
                "input": "x_or_y(2, 3, 2)",
                "output": "3"
            },
            {
                "input": "x_or_y(4372, 724, 579)",
                "output": "579"
            },
            {
                "input": "x_or_y(4410, 431, 587)",
                "output": "587"
            },
            {
                "input": "x_or_y(3003, 1679, 588)",
                "output": "588"
            },
            {
                "input": "x_or_y(7, 33, 446)",
                "output": "33"
            },
            {
                "input": "x_or_y(15, 6, 2)",
                "output": "2"
            },
            {
                "input": "x_or_y(17, 7, 7)",
                "output": "7"
            },
            {
                "input": "x_or_y(10, 35, 12)",
                "output": "12"
            },
            {
                "input": "x_or_y(9, 34, 1851)",
                "output": "1851"
            },
            {
                "input": "x_or_y(878, 3, 51)",
                "output": "51"
            },
            {
                "input": "x_or_y(7, 34, 12)",
                "output": "34"
            },
            {
                "input": "x_or_y(17, 3, 7)",
                "output": "3"
            },
            {
                "input": "x_or_y(1, 6, 5)",
                "output": "5"
            },
            {
                "input": "x_or_y(2, 30, 780)",
                "output": "30"
            },
            {
                "input": "x_or_y(2103, 2, 47)",
                "output": "47"
            },
            {
                "input": "x_or_y(3337, 759, 585)",
                "output": "585"
            },
            {
                "input": "x_or_y(2, 30, 5677)",
                "output": "30"
            },
            {
                "input": "x_or_y(6, 32, 5433)",
                "output": "5433"
            },
            {
                "input": "x_or_y(4, 3, 5)",
                "output": "5"
            },
            {
                "input": "x_or_y(90, 59, 130)",
                "output": "130"
            },
            {
                "input": "x_or_y(15, 12, 5)",
                "output": "5"
            },
            {
                "input": "x_or_y(11, 3, 7)",
                "output": "3"
            },
            {
                "input": "x_or_y(3706, 658, 579)",
                "output": "579"
            },
            {
                "input": "x_or_y(8676, 0, 12)",
                "output": "12"
            },
            {
                "input": "x_or_y(2, 31, 1449)",
                "output": "31"
            },
            {
                "input": "x_or_y(3, 1, 3)",
                "output": "1"
            },
            {
                "input": "x_or_y(17, 11, 9)",
                "output": "11"
            },
            {
                "input": "x_or_y(7919, -1, 12)",
                "output": "-1"
            },
            {
                "input": "x_or_y(3, 33, 5212)",
                "output": "33"
            },
            {
                "input": "x_or_y(2, 4, 1)",
                "output": "4"
            },
            {
                "input": "x_or_y(5, 1, 1)",
                "output": "1"
            },
            {
                "input": "x_or_y(13, 5, 6)",
                "output": "5"
            },
            {
                "input": "x_or_y(858, 8, 56)",
                "output": "56"
            },
            {
                "input": "x_or_y(4, 7, 3)",
                "output": "3"
            },
            {
                "input": "x_or_y(1, 37, 1396)",
                "output": "1396"
            },
            {
                "input": "x_or_y(90, 51, 134)",
                "output": "134"
            },
            {
                "input": "x_or_y(88, 56, 130)",
                "output": "130"
            },
            {
                "input": "x_or_y(8237, -3, 10)",
                "output": "-3"
            },
            {
                "input": "x_or_y(7, 36, 423)",
                "output": "36"
            },
            {
                "input": "x_or_y(702, 1, 55)",
                "output": "55"
            },
            {
                "input": "x_or_y(743, 7, 54)",
                "output": "7"
            },
            {
                "input": "x_or_y(3560, 1543, 584)",
                "output": "584"
            },
            {
                "input": "x_or_y(3, 33, 9)",
                "output": "33"
            },
            {
                "input": "x_or_y(4, 32, 11)",
                "output": "11"
            },
            {
                "input": "x_or_y(6929, -3, 15)",
                "output": "15"
            },
            {
                "input": "x_or_y(8, 32, 4792)",
                "output": "4792"
            },
            {
                "input": "x_or_y(20, 5, 3)",
                "output": "3"
            },
            {
                "input": "x_or_y(3, 30, 4585)",
                "output": "30"
            },
            {
                "input": "x_or_y(3639, 1196, 583)",
                "output": "583"
            },
            {
                "input": "x_or_y(95, 53, 126)",
                "output": "126"
            },
            {
                "input": "x_or_y(1527, 6, 50)",
                "output": "50"
            },
            {
                "input": "x_or_y(20, 8, 10)",
                "output": "10"
            },
            {
                "input": "x_or_y(8682, 0, 10)",
                "output": "10"
            },
            {
                "input": "x_or_y(5, 34, 14)",
                "output": "34"
            },
            {
                "input": "x_or_y(1259, 3, 52)",
                "output": "3"
            },
            {
                "input": "x_or_y(88, 52, 132)",
                "output": "132"
            },
            {
                "input": "x_or_y(11, 33, 8)",
                "output": "33"
            },
            {
                "input": "x_or_y(1848, 8, 51)",
                "output": "51"
            },
            {
                "input": "x_or_y(3, 32, 4854)",
                "output": "32"
            },
            {
                "input": "x_or_y(3, 34, 1328)",
                "output": "34"
            },
            {
                "input": "x_or_y(11, 9, 8)",
                "output": "9"
            },
            {
                "input": "x_or_y(89, 59, 124)",
                "output": "59"
            },
            {
                "input": "x_or_y(7, 1, 3)",
                "output": "1"
            },
            {
                "input": "x_or_y(933, 1, 55)",
                "output": "55"
            },
            {
                "input": "x_or_y(6, 29, 12)",
                "output": "12"
            },
            {
                "input": "x_or_y(8, 32, 4783)",
                "output": "4783"
            },
            {
                "input": "x_or_y(4, 39, 16)",
                "output": "16"
            },
            {
                "input": "x_or_y(431, 5, 53)",
                "output": "5"
            },
            {
                "input": "x_or_y(8842, -4, 17)",
                "output": "17"
            },
            {
                "input": "x_or_y(89, 59, 134)",
                "output": "59"
            },
            {
                "input": "x_or_y(5, 1, 3)",
                "output": "1"
            },
            {
                "input": "x_or_y(4, 5, 4)",
                "output": "4"
            },
            {
                "input": "x_or_y(4384, 1808, 580)",
                "output": "580"
            },
            {
                "input": "x_or_y(6, 2, 5)",
                "output": "5"
            },
            {
                "input": "x_or_y(11, 35, 8)",
                "output": "35"
            },
            {
                "input": "x_or_y(8, 37, 781)",
                "output": "781"
            }
        ]
    },
    {
        "problem_description": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
        "ground truth": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
        "instances": [
            {
                "input": "double_the_difference([2.978, 2, 5])",
                "output": "25"
            },
            {
                "input": "double_the_difference([5.659, 5.72, 2.59])",
                "output": "0"
            },
            {
                "input": "double_the_difference([4.341, 4.528, 1.906])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-10, -20, -30])",
                "output": "0"
            },
            {
                "input": "double_the_difference([2, 1, 9])",
                "output": "82"
            },
            {
                "input": "double_the_difference([-8, -24, -27])",
                "output": "0"
            },
            {
                "input": "double_the_difference([1.62, 2.226, 2.234])",
                "output": "0"
            },
            {
                "input": "double_the_difference([1.777, 3, 3])",
                "output": "18"
            },
            {
                "input": "double_the_difference([2.608, 6, 7])",
                "output": "49"
            },
            {
                "input": "double_the_difference([2.746, 2.314, 4.262])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-6, -18, -25])",
                "output": "0"
            },
            {
                "input": "double_the_difference([3.552, 4.834, 4.285])",
                "output": "0"
            },
            {
                "input": "double_the_difference([3.486, 1.151, 1.076])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-6, -22, -31])",
                "output": "0"
            },
            {
                "input": "double_the_difference([5.116, 3.781, 3.771])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-11, -21, -26])",
                "output": "0"
            },
            {
                "input": "double_the_difference([])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-1, -2, 8])",
                "output": "0"
            },
            {
                "input": "double_the_difference([2.853, 5, 1])",
                "output": "26"
            },
            {
                "input": "double_the_difference([-9, -15, -31])",
                "output": "0"
            },
            {
                "input": "double_the_difference([])",
                "output": "0"
            },
            {
                "input": "double_the_difference([2, -1, 9])",
                "output": "81"
            },
            {
                "input": "double_the_difference([8, 4])",
                "output": "0"
            },
            {
                "input": "double_the_difference([3, 3, 4])",
                "output": "18"
            },
            {
                "input": "double_the_difference([1.314, 8, 8])",
                "output": "0"
            },
            {
                "input": "double_the_difference([4.251, 1.83, 4.155])",
                "output": "0"
            },
            {
                "input": "double_the_difference([2, 5])",
                "output": "25"
            },
            {
                "input": "double_the_difference([-13, -19, -33])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-1, 3, 6])",
                "output": "9"
            },
            {
                "input": "double_the_difference([-1, -3, 8])",
                "output": "0"
            },
            {
                "input": "double_the_difference([5.803, 8, 4])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-14, -25, -31])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-5, -16, -27])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-3, 2, 6])",
                "output": "0"
            },
            {
                "input": "double_the_difference([1.734, 8, 9])",
                "output": "81"
            },
            {
                "input": "double_the_difference([-3, -5, 3])",
                "output": "9"
            },
            {
                "input": "double_the_difference([-13, -17, -35])",
                "output": "0"
            },
            {
                "input": "double_the_difference([3.091, 4.937, 4.685])",
                "output": "0"
            },
            {
                "input": "double_the_difference([2.92, 5, 5])",
                "output": "50"
            },
            {
                "input": "double_the_difference([4.856, 3.784, 3.223])",
                "output": "0"
            },
            {
                "input": "double_the_difference([5.622, 1.327, 3.166])",
                "output": "0"
            },
            {
                "input": "double_the_difference([1, 9])",
                "output": "82"
            },
            {
                "input": "double_the_difference([1, -6, 7])",
                "output": "50"
            },
            {
                "input": "double_the_difference([8, 2])",
                "output": "0"
            },
            {
                "input": "double_the_difference([3.002, 3, 8])",
                "output": "9"
            },
            {
                "input": "double_the_difference([1.982, 4.132, 4.139])",
                "output": "0"
            },
            {
                "input": "double_the_difference([9, 1])",
                "output": "82"
            },
            {
                "input": "double_the_difference([-8, -20, -30])",
                "output": "0"
            },
            {
                "input": "double_the_difference([2.136, 8, 1])",
                "output": "1"
            },
            {
                "input": "double_the_difference([4, -4, 11])",
                "output": "121"
            },
            {
                "input": "double_the_difference([4.575, 7, 2])",
                "output": "49"
            },
            {
                "input": "double_the_difference([-6, -4, 13])",
                "output": "169"
            },
            {
                "input": "double_the_difference([4, -6, 7])",
                "output": "49"
            },
            {
                "input": "double_the_difference([9, 7])",
                "output": "130"
            },
            {
                "input": "double_the_difference([7, 3])",
                "output": "58"
            },
            {
                "input": "double_the_difference([2, 3, 4])",
                "output": "9"
            },
            {
                "input": "double_the_difference([1.898, 1.028, 5.285])",
                "output": "0"
            },
            {
                "input": "double_the_difference([5.104, 4.104, 5.848])",
                "output": "0"
            },
            {
                "input": "double_the_difference([2.532, 8, 9])",
                "output": "81"
            },
            {
                "input": "double_the_difference([2.337, 7, 7])",
                "output": "98"
            },
            {
                "input": "double_the_difference([4, -1, 9])",
                "output": "81"
            },
            {
                "input": "double_the_difference([-3, -2, 7])",
                "output": "49"
            },
            {
                "input": "double_the_difference([-14, -18, -26])",
                "output": "0"
            },
            {
                "input": "double_the_difference([3.618, 3.501, 3.619])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-1, 2, 8])",
                "output": "0"
            },
            {
                "input": "double_the_difference([4, 8])",
                "output": "0"
            },
            {
                "input": "double_the_difference([2.641, 1, 4])",
                "output": "1"
            },
            {
                "input": "double_the_difference([3.484, 5.185, 5.807])",
                "output": "0"
            },
            {
                "input": "double_the_difference([4, 1])",
                "output": "1"
            },
            {
                "input": "double_the_difference([2.598, 1.052, 1.239])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-13, -19, -29])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-14, -22, -25])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-12, -19, -26])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-8, -19, -27])",
                "output": "0"
            },
            {
                "input": "double_the_difference([2.845, 4, 4])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-5, -5, 10])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-4, -5, 4])",
                "output": "0"
            },
            {
                "input": "double_the_difference([2.803, 6, 4])",
                "output": "0"
            },
            {
                "input": "double_the_difference([0.1, 0.2, 0.3])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-13, -16, -32])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-10, -15, -34])",
                "output": "0"
            },
            {
                "input": "double_the_difference([-2, 0, 3])",
                "output": "9"
            },
            {
                "input": "double_the_difference([-13, -23, -35])",
                "output": "0"
            },
            {
                "input": "double_the_difference([4.059, 1, 1])",
                "output": "2"
            },
            {
                "input": "double_the_difference([2.327, 3, 7])",
                "output": "58"
            },
            {
                "input": "double_the_difference([8, 5])",
                "output": "25"
            },
            {
                "input": "double_the_difference([5, 5])",
                "output": "50"
            },
            {
                "input": "double_the_difference([3, 2])",
                "output": "9"
            },
            {
                "input": "double_the_difference([6, 3])",
                "output": "9"
            },
            {
                "input": "double_the_difference([3.343, 1.859, 1.119])",
                "output": "0"
            },
            {
                "input": "double_the_difference([4, 3])",
                "output": "9"
            },
            {
                "input": "double_the_difference([5, 4])",
                "output": "25"
            },
            {
                "input": "double_the_difference([9, 6])",
                "output": "81"
            },
            {
                "input": "double_the_difference([0.2, 3, 5])",
                "output": "34"
            }
        ]
    },
    {
        "problem_description": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n",
        "ground truth": "def compare(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]\n",
        "instances": [
            {
                "input": "compare([2, 4, 8, 10], [1, 4, 5, 2])",
                "output": "[1, 0, 3, 8]"
            },
            {
                "input": "compare([2, 5, 6, 2], [-4, 5, 7, 3])",
                "output": "[6, 0, 1, 1]"
            },
            {
                "input": "compare([4, 5, 2, 7, 7, 6], [1, 3, 6, 8, 2, -5])",
                "output": "[3, 2, 4, 1, 5, 11]"
            },
            {
                "input": "compare([2, 6, 3, 8, 4, 3], [5, 1, 6, 2, 7, -5])",
                "output": "[3, 5, 3, 6, 3, 8]"
            },
            {
                "input": "compare([2, 3, 6, 8, 9, 4], [3, 5, 8, 1, 5, 3])",
                "output": "[1, 2, 2, 7, 4, 1]"
            },
            {
                "input": "compare([5, 1, 5], [3, 2, 0])",
                "output": "[2, 1, 5]"
            },
            {
                "input": "compare([4, 3, 1, 4, 2, 4], [2, 3, 4, 5, 3, 2])",
                "output": "[2, 0, 3, 1, 1, 2]"
            },
            {
                "input": "compare([6, 7, 7, 9, 9, 4], [1, 7, 4, 9, 6, -3])",
                "output": "[5, 0, 3, 0, 3, 7]"
            },
            {
                "input": "compare([6, 5, 2, 9, 4, 1], [5, 4, 3, 8, 7, -3])",
                "output": "[1, 1, 1, 1, 3, 4]"
            },
            {
                "input": "compare([6, 4, 8, 7], [3, 3, 8, 9])",
                "output": "[3, 1, 0, 2]"
            },
            {
                "input": "compare([1, 3, 5, 2, 3, 4], [3, 2, 4, 3, 2, 2])",
                "output": "[2, 1, 1, 1, 1, 2]"
            },
            {
                "input": "compare([4, 5, 1, 1, 5, 3], [5, 4, 7, 2, 2, -3])",
                "output": "[1, 1, 6, 1, 3, 6]"
            },
            {
                "input": "compare([6, 2, 2], [-3, -1, 2])",
                "output": "[9, 3, 0]"
            },
            {
                "input": "compare([6, 1, 4, 3], [0, 5, 5, 3])",
                "output": "[6, 4, 1, 0]"
            },
            {
                "input": "compare([2, 1, 4, 2, 1, 1], [3, 4, 1, 4, 1, 1])",
                "output": "[1, 3, 3, 2, 0, 0]"
            },
            {
                "input": "compare([6, 6, 8, 9], [-5, 6, 8, 7])",
                "output": "[11, 0, 0, 2]"
            },
            {
                "input": "compare([2, 2, 4, 5, 2, 3], [5, 2, 2, 3, 4, 3])",
                "output": "[3, 0, 2, 2, 2, 0]"
            },
            {
                "input": "compare([3, 4, 3, 3, 4, 3], [5, 4, 1, 4, 3, 1])",
                "output": "[2, 0, 2, 1, 1, 2]"
            },
            {
                "input": "compare([4, 6, 7, 5, 5, 2], [2, 7, 2, 5, 2, -5])",
                "output": "[2, 1, 5, 0, 3, 7]"
            },
            {
                "input": "compare([5, 2, 5, 2, 1, 5], [4, 5, 1, 3, 1, 2])",
                "output": "[1, 3, 4, 1, 0, 3]"
            },
            {
                "input": "compare([6, 2, 2, 3], [-2, 5, 1, 7])",
                "output": "[8, 3, 1, 4]"
            },
            {
                "input": "compare([5, 5, 8, 7], [-3, 6, 3, 8])",
                "output": "[8, 1, 5, 1]"
            },
            {
                "input": "compare([6, 2, 1, 1, 9, 5], [5, 7, 5, 7, 2, -6])",
                "output": "[1, 5, 4, 6, 7, 11]"
            },
            {
                "input": "compare([6, 4, 3, 3, 2, 4], [4, 7, 6, 2, 4, 3])",
                "output": "[2, 3, 3, 1, 2, 1]"
            },
            {
                "input": "compare([1, 2, 1, 10], [-5, 4, 3, 6])",
                "output": "[6, 2, 2, 4]"
            },
            {
                "input": "compare([3, 6, 7, 10], [-3, 4, 5, 7])",
                "output": "[6, 2, 2, 3]"
            },
            {
                "input": "compare([6, 7, 6, 3], [-2, 3, 4, 6])",
                "output": "[8, 4, 2, 3]"
            },
            {
                "input": "compare([1, 2, 4, 2, 1, 4], [5, 4, 5, 4, 1, 2])",
                "output": "[4, 2, 1, 2, 0, 2]"
            },
            {
                "input": "compare([5, 7, 5, 5, 5, 4], [2, 4, 4, 5, 3, -3])",
                "output": "[3, 3, 1, 0, 2, 7]"
            },
            {
                "input": "compare([4, 6, 3, 1], [3, 5, 8, 6])",
                "output": "[1, 1, 5, 5]"
            },
            {
                "input": "compare([4, 1, 2, 5, 2, 5], [3, 1, 1, 1, 5, 4])",
                "output": "[1, 0, 1, 4, 3, 1]"
            },
            {
                "input": "compare([1, 4, 5, 2, 2, 3], [3, 5, 4, 2, 1, 5])",
                "output": "[2, 1, 1, 0, 1, 2]"
            },
            {
                "input": "compare([6, 1, 2, 7], [-4, 2, 5, 2])",
                "output": "[10, 1, 3, 5]"
            },
            {
                "input": "compare([5, 7, 3], [-6, 0, -2])",
                "output": "[11, 7, 5]"
            },
            {
                "input": "compare([1, 4, 1, 1, 1, 5], [4, 2, 1, 1, 5, 5])",
                "output": "[3, 2, 0, 0, 4, 0]"
            },
            {
                "input": "compare([5, 1, 3, 1], [-3, 5, 4, 2])",
                "output": "[8, 4, 1, 1]"
            },
            {
                "input": "compare([1, 2, 3], [-1, -7, 0])",
                "output": "[2, 9, 3]"
            },
            {
                "input": "compare([5, 5, 4, 3, 4, 5], [5, 5, 5, 2, 5, 4])",
                "output": "[0, 0, 1, 1, 1, 1]"
            },
            {
                "input": "compare([3, 1, 7], [-1, -2, -1])",
                "output": "[4, 3, 8]"
            },
            {
                "input": "compare([2, 3, 3, 5, 5, 4], [5, 6, 1, 3, 7, 2])",
                "output": "[3, 3, 2, 2, 2, 2]"
            },
            {
                "input": "compare([1, 5, 5], [0, 3, 0])",
                "output": "[1, 2, 5]"
            },
            {
                "input": "compare([1, 6, 6], [4, -1, 0])",
                "output": "[3, 7, 6]"
            },
            {
                "input": "compare([1, 2, 5, 2, 4, 4], [3, 2, 1, 2, 4, 1])",
                "output": "[2, 0, 4, 0, 0, 3]"
            },
            {
                "input": "compare([2, 4, 8, 2, 3, 6], [6, 7, 1, 7, 2, 3])",
                "output": "[4, 3, 7, 5, 1, 3]"
            },
            {
                "input": "compare([4, 7, 7, 6], [-1, 5, 5, 9])",
                "output": "[5, 2, 2, 3]"
            },
            {
                "input": "compare([3, 2, 1], [2, -2, -1])",
                "output": "[1, 4, 2]"
            },
            {
                "input": "compare([3, 2, 1, 5, 2, 4], [2, 5, 4, 2, 3, 1])",
                "output": "[1, 3, 3, 3, 1, 3]"
            },
            {
                "input": "compare([4, 4, 4, 4, 1, 5], [2, 1, 5, 7, 6, 2])",
                "output": "[2, 3, 1, 3, 5, 3]"
            },
            {
                "input": "compare([2, 6, 5, 6], [4, 2, 5, 5])",
                "output": "[2, 4, 0, 1]"
            },
            {
                "input": "compare([3, 1, 4, 1, 5, 3], [3, 1, 4, 4, 2, 5])",
                "output": "[0, 0, 0, 3, 3, 2]"
            },
            {
                "input": "compare([6, 7, 4], [1, 0, -2])",
                "output": "[5, 7, 6]"
            },
            {
                "input": "compare([6, 7, 6], [4, -3, 1])",
                "output": "[2, 10, 5]"
            },
            {
                "input": "compare([5, 4, 2, 5, 10, 4], [3, 6, 8, 9, 6, 3])",
                "output": "[2, 2, 6, 4, 4, 1]"
            },
            {
                "input": "compare([6, 5, 8, 3, 1, 1], [3, 5, 3, 4, 4, -6])",
                "output": "[3, 0, 5, 1, 3, 7]"
            },
            {
                "input": "compare([6, 7, 2], [-6, -2, -1])",
                "output": "[12, 9, 3]"
            },
            {
                "input": "compare([1, 7, 2, 8], [-3, 4, 7, 7])",
                "output": "[4, 3, 5, 1]"
            },
            {
                "input": "compare([4, 4, 3, 1, 3, 1], [1, 6, 3, 9, 1, -4])",
                "output": "[3, 2, 0, 8, 2, 5]"
            },
            {
                "input": "compare([3, 7, 1], [-6, 1, 1])",
                "output": "[9, 6, 0]"
            },
            {
                "input": "compare([2, 7, 2], [1, 3, 2])",
                "output": "[1, 4, 0]"
            },
            {
                "input": "compare([2, 6, 8], [3, -2, -5])",
                "output": "[1, 8, 13]"
            },
            {
                "input": "compare([2, 5, 7], [0, -2, -4])",
                "output": "[2, 7, 11]"
            },
            {
                "input": "compare([5, 3, 8, 2], [-2, 4, 6, 3])",
                "output": "[7, 1, 2, 1]"
            },
            {
                "input": "compare([3, 4, 2, 9, 10, 4], [5, 7, 7, 5, 1, 3])",
                "output": "[2, 3, 5, 4, 9, 1]"
            },
            {
                "input": "compare([3, 3, 8], [4, 1, -8])",
                "output": "[1, 2, 16]"
            },
            {
                "input": "compare([3, 7, 4, 10], [3, 3, 7, 4])",
                "output": "[0, 4, 3, 6]"
            },
            {
                "input": "compare([5, 3, 3, 8], [-4, 4, 3, 7])",
                "output": "[9, 1, 0, 1]"
            },
            {
                "input": "compare([2, 4, 1], [3, 2, 2])",
                "output": "[1, 2, 1]"
            },
            {
                "input": "compare([6, 3, 5, 9, 6, 1], [6, 1, 6, 4, 4, -5])",
                "output": "[0, 2, 1, 5, 2, 6]"
            },
            {
                "input": "compare([4, 1, 5, 2, 3, 3], [5, 4, 3, 5, 3, 2])",
                "output": "[1, 3, 2, 3, 0, 1]"
            },
            {
                "input": "compare([3, 4, 2, 9, 4, 1], [2, 4, 5, 2, 7, 3])",
                "output": "[1, 0, 3, 7, 3, 2]"
            },
            {
                "input": "compare([1, 6, 4], [-3, -7, -6])",
                "output": "[4, 13, 10]"
            },
            {
                "input": "compare([5, 2, 8], [3, 2, 0])",
                "output": "[2, 0, 8]"
            },
            {
                "input": "compare([5, 3, 2, 2], [4, 1, 8, 5])",
                "output": "[1, 2, 6, 3]"
            },
            {
                "input": "compare([1, 3, 2, 1, 5, 5], [5, 4, 1, 2, 2, 5])",
                "output": "[4, 1, 1, 1, 3, 0]"
            },
            {
                "input": "compare([6, 5, 7], [0, -3, -5])",
                "output": "[6, 8, 12]"
            },
            {
                "input": "compare([2, 1, 1], [0, -5, 2])",
                "output": "[2, 6, 1]"
            },
            {
                "input": "compare([1, 4, 6, 3, 10, 1], [6, 6, 6, 9, 5, 3])",
                "output": "[5, 2, 0, 6, 5, 2]"
            },
            {
                "input": "compare([4, 1, 2, 1], [0, 5, 6, 2])",
                "output": "[4, 4, 4, 1]"
            },
            {
                "input": "compare([2, 4, 1, 2, 5, 2], [2, 1, 3, 5, 5, 3])",
                "output": "[0, 3, 2, 3, 0, 1]"
            },
            {
                "input": "compare([1, 4, 4, 3, 1, 4], [2, 5, 5, 2, 2, 3])",
                "output": "[1, 1, 1, 1, 1, 1]"
            },
            {
                "input": "compare([1, 2, 7, 3], [0, 5, 3, 1])",
                "output": "[1, 3, 4, 2]"
            },
            {
                "input": "compare([3, 2, 8, 7, 5, 2], [2, 4, 8, 7, 3, 2])",
                "output": "[1, 2, 0, 0, 2, 0]"
            },
            {
                "input": "compare([1, 4, 3], [-5, 1, 2])",
                "output": "[6, 3, 1]"
            },
            {
                "input": "compare([5, 5, 1, 4, 4, 1], [2, 1, 3, 3, 1, 1])",
                "output": "[3, 4, 2, 1, 3, 0]"
            },
            {
                "input": "compare([1, 5, 7], [-6, 3, -7])",
                "output": "[7, 2, 14]"
            },
            {
                "input": "compare([3, 3, 8, 4], [-3, 7, 3, 1])",
                "output": "[6, 4, 5, 3]"
            },
            {
                "input": "compare([2, 5, 5, 6, 6, 2], [5, 2, 2, 3, 5, -5])",
                "output": "[3, 3, 3, 3, 1, 7]"
            },
            {
                "input": "compare([1, 4, 3], [-3, 3, -6])",
                "output": "[4, 1, 9]"
            },
            {
                "input": "compare([1, 1, 8], [-3, -6, 0])",
                "output": "[4, 7, 8]"
            },
            {
                "input": "compare([3, 4, 3, 3, 1, 1], [3, 3, 5, 4, 3, 4])",
                "output": "[0, 1, 2, 1, 2, 3]"
            },
            {
                "input": "compare([5, 2, 2, 8], [4, 2, 2, 6])",
                "output": "[1, 0, 0, 2]"
            },
            {
                "input": "compare([2, 1, 6, 8], [-4, 3, 6, 1])",
                "output": "[6, 2, 0, 7]"
            },
            {
                "input": "compare([1, 1, 2, 3, 5, 2], [4, 2, 5, 4, 4, 4])",
                "output": "[3, 1, 3, 1, 1, 2]"
            },
            {
                "input": "compare([1, 3, 2, 9, 2, 4], [6, 2, 4, 3, 7, 1])",
                "output": "[5, 1, 2, 6, 5, 3]"
            },
            {
                "input": "compare([3, 1, 5, 3, 9, 5], [6, 7, 4, 8, 4, -6])",
                "output": "[3, 6, 1, 5, 5, 11]"
            },
            {
                "input": "compare([3, 2, 7, 3], [3, 1, 2, 4])",
                "output": "[0, 1, 5, 1]"
            },
            {
                "input": "compare([2, 5, 2, 4], [-5, 7, 4, 6])",
                "output": "[7, 2, 2, 2]"
            },
            {
                "input": "compare([3, 3, 4, 2, 1, 2], [1, 4, 2, 3, 3, 4])",
                "output": "[2, 1, 2, 1, 2, 2]"
            },
            {
                "input": "compare([6, 6, 7, 7, 1, 2], [1, 2, 1, 9, 4, 2])",
                "output": "[5, 4, 6, 2, 3, 0]"
            },
            {
                "input": "compare([3, 5, 1, 5, 2, 3], [5, 2, 3, 3, 5, -7])",
                "output": "[2, 3, 2, 2, 3, 10]"
            },
            {
                "input": "compare([1, 6, 6, 1, 4, 5], [6, 1, 5, 3, 6, 2])",
                "output": "[5, 5, 1, 2, 2, 3]"
            },
            {
                "input": "compare([1, 3, 4, 4, 1, 1], [4, 2, 4, 3, 1, 2])",
                "output": "[3, 1, 0, 1, 0, 1]"
            },
            {
                "input": "compare([6, 5, 4, 3, 5, 3], [5, 6, 7, 5, 1, 3])",
                "output": "[1, 1, 3, 2, 4, 0]"
            },
            {
                "input": "compare([2, 3, 3, 4], [-2, 2, 4, 6])",
                "output": "[4, 1, 1, 2]"
            },
            {
                "input": "compare([3, 2, 4, 3, 3, 1], [1, 3, 5, 4, 2, 2])",
                "output": "[2, 1, 1, 1, 1, 1]"
            },
            {
                "input": "compare([6, 1, 6, 7, 9, 4], [4, 7, 7, 9, 5, 3])",
                "output": "[2, 6, 1, 2, 4, 1]"
            },
            {
                "input": "compare([2, 4, 5, 1], [-5, 2, 6, 5])",
                "output": "[7, 2, 1, 4]"
            },
            {
                "input": "compare([5, 5, 2, 4, 1, 1], [5, 3, 4, 5, 1, 2])",
                "output": "[0, 2, 2, 1, 0, 1]"
            },
            {
                "input": "compare([3, 1, 4, 7], [-6, 4, 5, 7])",
                "output": "[9, 3, 1, 0]"
            },
            {
                "input": "compare([1, 3, 1, 2, 9, 2], [5, 2, 1, 9, 7, -7])",
                "output": "[4, 1, 0, 7, 2, 9]"
            },
            {
                "input": "compare([1, 3, 2, 2, 3, 5], [3, 4, 2, 4, 6, -5])",
                "output": "[2, 1, 0, 2, 3, 10]"
            },
            {
                "input": "compare([2, 5, 4], [1, -5, -3])",
                "output": "[1, 10, 7]"
            },
            {
                "input": "compare([4, 7, 6, 3, 7, 2], [4, 3, 7, 8, 7, -3])",
                "output": "[0, 4, 1, 5, 0, 5]"
            },
            {
                "input": "compare([5, 1, 4, 4, 2, 3], [3, 1, 3, 3, 2, 4])",
                "output": "[2, 0, 1, 1, 0, 1]"
            },
            {
                "input": "compare([3, 3, 3], [3, -6, 2])",
                "output": "[0, 9, 1]"
            },
            {
                "input": "compare([1, 2, 2, 1, 5, 3], [4, 5, 1, 2, 1, 2])",
                "output": "[3, 3, 1, 1, 4, 1]"
            },
            {
                "input": "compare([5, 7, 8], [2, -3, 0])",
                "output": "[3, 10, 8]"
            },
            {
                "input": "compare([2, 5, 2, 7], [2, 5, 7, 1])",
                "output": "[0, 0, 5, 6]"
            },
            {
                "input": "compare([4, 2, 6], [-3, -2, 2])",
                "output": "[7, 4, 4]"
            },
            {
                "input": "compare([3, 4, 2, 3, 3, 3], [2, 4, 1, 5, 3, 1])",
                "output": "[1, 0, 1, 2, 0, 2]"
            },
            {
                "input": "compare([5, 4, 3, 2, 2, 4], [3, 1, 3, 1, 5, 4])",
                "output": "[2, 3, 0, 1, 3, 0]"
            },
            {
                "input": "compare([3, 1, 6, 2], [-4, 7, 8, 2])",
                "output": "[7, 6, 2, 0]"
            },
            {
                "input": "compare([4, 4, 6], [-5, -3, 1])",
                "output": "[9, 7, 5]"
            },
            {
                "input": "compare([1, 2, 4], [-4, 3, 2])",
                "output": "[5, 1, 2]"
            },
            {
                "input": "compare([1, 5, 2, 3, 5, 2], [4, 3, 4, 1, 1, 1])",
                "output": "[3, 2, 2, 2, 4, 1]"
            },
            {
                "input": "compare([5, 1, 6], [1, -3, -7])",
                "output": "[4, 4, 13]"
            },
            {
                "input": "compare([1, 1, 3, 1, 3, 1], [5, 3, 1, 3, 2, 3])",
                "output": "[4, 2, 2, 2, 1, 2]"
            },
            {
                "input": "compare([2, 3, 3, 5, 2, 1], [4, 2, 1, 4, 1, 4])",
                "output": "[2, 1, 2, 1, 1, 3]"
            }
        ]
    },
    {
        "problem_description": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
        "ground truth": "def Strongest_Extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
        "instances": [
            {
                "input": "Strongest_Extension('AfF9TF1H', ['prdor', 'XUaeAzcjnK', 'ALXFDlofAxGjKUb', 'hqks289'])",
                "output": "'AfF9TF1H.ALXFDlofAxGjKUb'"
            },
            {
                "input": "Strongest_Extension('&ZW/G|X:|', ['MzcytjzNb', '97843433', '6806520048', '~#!_:'])",
                "output": "'&ZW/G|X:|.97843433'"
            },
            {
                "input": "Strongest_Extension('Z#PZOXUAEP^J', ['TSHgFXt', '851647972', '508208216', '|?&=+$~'])",
                "output": "'Z#PZOXUAEP^J.TSHgFXt'"
            },
            {
                "input": "Strongest_Extension('TZcZFZg', ['XEt', 'WgdbsBD', 'llfclvmk', 'FhAAIFHSe'])",
                "output": "'TZcZFZg.FhAAIFHSe'"
            },
            {
                "input": "Strongest_Extension('L', ['QWj', 'KMYFP', 'rzK8b', 'UPmaPsYi'])",
                "output": "'L.KMYFP'"
            },
            {
                "input": "Strongest_Extension('A', ['vuYA', 'GAKX', 'GJvy', 'MYRSsI'])",
                "output": "'A.GAKX'"
            },
            {
                "input": "Strongest_Extension('DCQAPVI|$X&', ['p', 'gZU', 'saccbp', 'AfX', 'Y@|DWsgMRSuT', 'PWpmYgeEi2kWIEy'])",
                "output": "'DCQAPVI|$X&.Y@|DWsgMRSuT'"
            },
            {
                "input": "Strongest_Extension('viErbq', ['JWrN', 'tTavzc', 'iNwdfdGMxbPJ', 'bDoxhjrG', '-$|-==-'])",
                "output": "'viErbq.JWrN'"
            },
            {
                "input": "Strongest_Extension('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])",
                "output": "'Boku123.YEs.WeCaNe'"
            },
            {
                "input": "Strongest_Extension('K', ['Ta', 'TAR', 't234An', 'cosSo'])",
                "output": "'K.TAR'"
            },
            {
                "input": "Strongest_Extension('XMVP', ['hspdpnlma', 'DbxHarTYs', 'YwLIJYlKUG', 'jildgj'])",
                "output": "'XMVP.YwLIJYlKUG'"
            },
            {
                "input": "Strongest_Extension('xmHxmtgtKoW', ['ozBIeRLg', 'IFmNl5877mAu7H', 'btofzd', 'YjQoPf', '?+!%^'])",
                "output": "'xmHxmtgtKoW.IFmNl5877mAu7H'"
            },
            {
                "input": "Strongest_Extension('igdKai', ['8786', 'vLO'])",
                "output": "'igdKai.vLO'"
            },
            {
                "input": "Strongest_Extension('Sp', ['671235', 'Bb'])",
                "output": "'Sp.671235'"
            },
            {
                "input": "Strongest_Extension('fyRuJp', ['eNSuR', 'BbIQYs2avy', 'SfWYLSz', 'Ruk', '%~~'])",
                "output": "'fyRuJp.SfWYLSz'"
            },
            {
                "input": "Strongest_Extension('X', ['nCT', 'GOTAPLZV', 'apRGBs', 'RqFUcRmF'])",
                "output": "'X.GOTAPLZV'"
            },
            {
                "input": "Strongest_Extension('H', ['ZQP', 'QDOMYQKCC', 'B49H', 'dcRUmtc'])",
                "output": "'H.QDOMYQKCC'"
            },
            {
                "input": "Strongest_Extension('RrhQI', ['eSvYKfU', 'cQMJaodRd', 'bOgsqkAQ7'])",
                "output": "'RrhQI.eSvYKfU'"
            },
            {
                "input": "Strongest_Extension('JHWofsNy', ['ehbrlCsSN', 'kSVCTqtQp', 'aTx', 'rFgQAZSHX'])",
                "output": "'JHWofsNy.rFgQAZSHX'"
            },
            {
                "input": "Strongest_Extension('Meu', ['toQQF', 'l2gCXipxz30c7k', 'xRzDR', 'EQPUyl', '=-|-'])",
                "output": "'Meu.EQPUyl'"
            },
            {
                "input": "Strongest_Extension('/', ['BSCWB', '09569'])",
                "output": "'/.BSCWB'"
            },
            {
                "input": "Strongest_Extension('N9WkDnmi', ['nyjntr', 'SEYwjYZZ', 'KrfhKHxm', '449g0qajup'])",
                "output": "'N9WkDnmi.SEYwjYZZ'"
            },
            {
                "input": "Strongest_Extension('VEjG', ['sZfG', 'tNg', 'oLaPQY'])",
                "output": "'VEjG.oLaPQY'"
            },
            {
                "input": "Strongest_Extension('lGwjPbfmh', ['jIRdWJh', 'qI41fmRkHKq', 'XIcX', 'befSC', '!_|/?=^'])",
                "output": "'lGwjPbfmh.XIcX'"
            },
            {
                "input": "Strongest_Extension('mss', ['EtCrQpzcv', 'CfcO', 'Nwb3WD'])",
                "output": "'mss.Nwb3WD'"
            },
            {
                "input": "Strongest_Extension('eLSw', ['53942091616', 'FkLrI'])",
                "output": "'eLSw.FkLrI'"
            },
            {
                "input": "Strongest_Extension('ouSK', ['TiJQbs', 'jkNjDc', 'MpWWtB'])",
                "output": "'ouSK.MpWWtB'"
            },
            {
                "input": "Strongest_Extension('XRX', ['src', 'yXPN', 'imvidTW', 'iu9psm0abqt9'])",
                "output": "'XRX.yXPN'"
            },
            {
                "input": "Strongest_Extension('8UwSphCKq3', ['dnqsrmbrm', 'SQu', 'TDUhncgiR', 'r7bc5few58h'])",
                "output": "'8UwSphCKq3.SQu'"
            },
            {
                "input": "Strongest_Extension('B', ['lbsuTh', 'KEIAA', 'nH0f7v6BYcaT', 'eweeCaOW'])",
                "output": "'B.KEIAA'"
            },
            {
                "input": "Strongest_Extension('U+:MZK^NJ/:~', ['RNvvDjNRX', '709417', '01040495562', '?_@+&|*&'])",
                "output": "'U+:MZK^NJ/:~.RNvvDjNRX'"
            },
            {
                "input": "Strongest_Extension('QeYQXTYgBCFE', ['OsopD', 'lFbt', 'NMYuiQhR', 'EGYJFi'])",
                "output": "'QeYQXTYgBCFE.EGYJFi'"
            },
            {
                "input": "Strongest_Extension('pdULvHPDu', ['vogq', 'wOQhfFUdGqM', 'jLLovMAmwHKE', 'tbzdc0p26365qk'])",
                "output": "'pdULvHPDu.jLLovMAmwHKE'"
            },
            {
                "input": "Strongest_Extension('TGLD=L|SNN', ['p', 'iBfhnRX', 'oapkqdj', '6FDDW2eCE', 'd*tfxubFyMU', 'jEfn66UI5SCgB5gnBN'])",
                "output": "'TGLD=L|SNN.6FDDW2eCE'"
            },
            {
                "input": "Strongest_Extension('WaRlzPhsXbv', ['EbckOlW', 'BxA', 'SWF0Tq5eGIml'])",
                "output": "'WaRlzPhsXbv.SWF0Tq5eGIml'"
            },
            {
                "input": "Strongest_Extension('DPv', ['olat', 'HsPfZURJttx', 'htRintWxgf', '3hnd43nybsy3'])",
                "output": "'DPv.HsPfZURJttx'"
            },
            {
                "input": "Strongest_Extension('^', ['xtyW', '27975'])",
                "output": "'^.27975'"
            },
            {
                "input": "Strongest_Extension('dGIt', ['9252631368', 'yKNteG'])",
                "output": "'dGIt.9252631368'"
            },
            {
                "input": "Strongest_Extension('/', ['TeHZ', '257190708'])",
                "output": "'/.TeHZ'"
            },
            {
                "input": "Strongest_Extension('|', ['pnMgUW', '201271'])",
                "output": "'|.pnMgUW'"
            },
            {
                "input": "Strongest_Extension('YFebwCkvIuAZMSS', ['ngdcFFk', 'rKpI', 'dBuNBaoyj', 'KDOhWCW'])",
                "output": "'YFebwCkvIuAZMSS.KDOhWCW'"
            },
            {
                "input": "Strongest_Extension('sMDiyLSYyOY', ['WTrp', 'HpSgHjJj', 'ii5Xthj9AZ4nmOp'])",
                "output": "'sMDiyLSYyOY.WTrp'"
            },
            {
                "input": "Strongest_Extension('~', ['MxeOK', '920'])",
                "output": "'~.MxeOK'"
            },
            {
                "input": "Strongest_Extension('*LO_|%+N:YAG?', ['w', 'Ffh', 'dsgvgmlewhzt', 'VSZrqHJf', 'Y!%n?~^Zj#_', 'uz3991C3cG6tzk'])",
                "output": "'*LO_|%+N:YAG?.VSZrqHJf'"
            },
            {
                "input": "Strongest_Extension('OR@UM*/EG|X!HHQ', ['j', 'TXzd', 'xmbttwav', 'z5FelN', '#Z@wM', 'vJed7fLec7dDIawBCL'])",
                "output": "'OR@UM*/EG|X!HHQ.#Z@wM'"
            },
            {
                "input": "Strongest_Extension('heVSAH', ['OvBQ', 'AxyemmrMn', 'jlzoRgzSG', 'ZieZZ'])",
                "output": "'heVSAH.OvBQ'"
            },
            {
                "input": "Strongest_Extension('VO8lTbdbk', ['zzi', 'ImvLBRYrKsg', 'VBAGXnw', 'arcx6l2aw'])",
                "output": "'VO8lTbdbk.VBAGXnw'"
            },
            {
                "input": "Strongest_Extension('S^/GDWQ*EF?BNN', ['h', 'CbIPR', 'jlfyp', '51JvjNr3', 'GkI$nu+e&y', 'sBE03hrRogxoZ9R'])",
                "output": "'S^/GDWQ*EF?BNN.CbIPR'"
            },
            {
                "input": "Strongest_Extension('vqnhvJjNGgvmUBm', ['HzOTtDeU', 'uxwSVKq', 'ZAxl', 'FDBvmYVWD'])",
                "output": "'vqnhvJjNGgvmUBm.FDBvmYVWD'"
            },
            {
                "input": "Strongest_Extension('|LLV#Y|X', ['FCweayvL', '0555', '999801294', '$/_^|~_+'])",
                "output": "'|LLV#Y|X.0555'"
            },
            {
                "input": "Strongest_Extension(':', ['GIFNES', '81425591'])",
                "output": "':.GIFNES'"
            },
            {
                "input": "Strongest_Extension('MlLK', ['7080561', 'QpCRf'])",
                "output": "'MlLK.QpCRf'"
            },
            {
                "input": "Strongest_Extension('Fhe', ['90478119', 'WjVUK'])",
                "output": "'Fhe.WjVUK'"
            },
            {
                "input": "Strongest_Extension('D', ['AepvR', 'LQELHOF', 'sN8OHrsyY', 'xAqfD'])",
                "output": "'D.LQELHOF'"
            },
            {
                "input": "Strongest_Extension('TJtgRNIaQa', ['guiPFqN', 'bhuiJ', 'YCSy', 'czPP'])",
                "output": "'TJtgRNIaQa.YCSy'"
            },
            {
                "input": "Strongest_Extension('G', ['xoldMl', 'SQTDTH', 'vl83ZVlB', 'ldmnmCSDC'])",
                "output": "'G.SQTDTH'"
            },
            {
                "input": "Strongest_Extension('IX*N_YZBWQ', ['r', 'UxgN', 'spcymxm', 'XuC3YFX', 'CHtr', 'XnRPRj6Vsk'])",
                "output": "'IX*N_YZBWQ.XuC3YFX'"
            },
            {
                "input": "Strongest_Extension('LPcqtO', ['apXjjDgR', 'jXYoRUZaL', '9Fg7Xmgr'])",
                "output": "'LPcqtO.jXYoRUZaL'"
            },
            {
                "input": "Strongest_Extension('Q-?:+W', ['c', 'VCVO', 'tslzwrigeho', 'hYTSHBzR', 'k|KNuGxX__q', 'K6dpelxte50A'])",
                "output": "'Q-?:+W.VCVO'"
            },
            {
                "input": "Strongest_Extension('#*Z', ['ePllhoInE', '74746', '8280', '*+!#-&^!/'])",
                "output": "'#*Z.74746'"
            },
            {
                "input": "Strongest_Extension('+', ['vrmNGT', '91155'])",
                "output": "'+.vrmNGT'"
            },
            {
                "input": "Strongest_Extension('AWf', ['841205799303', 'pcw'])",
                "output": "'AWf.841205799303'"
            },
            {
                "input": "Strongest_Extension('PajcBWKjXE', ['WIaxk', 'Yaa6Cqwpbzb', 'igdcIRMj', 'xqJ', '?/%'])",
                "output": "'PajcBWKjXE.?/%'"
            },
            {
                "input": "Strongest_Extension('ATmEEI5Tomo', ['ndbd', 'ekQlELD', 'kYU.OvtJ', 'rpunxydb3enyd9'])",
                "output": "'ATmEEI5Tomo.ekQlELD'"
            },
            {
                "input": "Strongest_Extension('ddm', ['114', 'hPqY'])",
                "output": "'ddm.114'"
            },
            {
                "input": "Strongest_Extension('rrPJByTtTPfEv', ['vlq', 'efS', 'CjZTQodtx', 'HeHHM'])",
                "output": "'rrPJByTtTPfEv.HeHHM'"
            },
            {
                "input": "Strongest_Extension('sbpbSczSAYfr', ['jhiJCxgCR', 'fWw', 'fqAcX2dicmV5'])",
                "output": "'sbpbSczSAYfr.jhiJCxgCR'"
            },
            {
                "input": "Strongest_Extension('TR%*&$^IKJQN', ['QhcVVx', '3991261', '229452505686', '==:~%'])",
                "output": "'TR%*&$^IKJQN.QhcVVx'"
            },
            {
                "input": "Strongest_Extension('T', ['Fypiwl', 'RYKNQINBD', 'DYDfQJ', 'poEzygy'])",
                "output": "'T.RYKNQINBD'"
            },
            {
                "input": "Strongest_Extension('HhPZeBTx', ['XSu', 'EVIOuqwCS', 'iAhnRuxd4hQHCKP'])",
                "output": "'HhPZeBTx.EVIOuqwCS'"
            },
            {
                "input": "Strongest_Extension('H&TFWS', ['IpH', '0046', '7226404', '~$-^'])",
                "output": "'H&TFWS.IpH'"
            },
            {
                "input": "Strongest_Extension('KW=', ['KTpzELfI', '64104', '675413268270', '&:|'])",
                "output": "'KW=.KTpzELfI'"
            },
            {
                "input": "Strongest_Extension('KCa8nLGyfXj', ['akcavtoz', 'dGcRdJvy', 'zqKBBNsa.VtlrD', 'gi6u9nb'])",
                "output": "'KCa8nLGyfXj.zqKBBNsa.VtlrD'"
            },
            {
                "input": "Strongest_Extension('eQArLhgVYOs', ['jWlSDky', 'gELbOGX584z', 'EBXfgmPhdv', 'cXGef', '&|/%=?:|/'])",
                "output": "'eQArLhgVYOs.gELbOGX584z'"
            },
            {
                "input": "Strongest_Extension('vvza', ['kvm', 'kiXXSwM', 'RbjZMK', '26lg9wng'])",
                "output": "'vvza.RbjZMK'"
            },
            {
                "input": "Strongest_Extension('BlBRDhtAl', ['tvMzrfQR', 'nIfa3F2W2N9gPr', 'ytXuwcohgNw', 'jlXwaU', '@!/@#&@'])",
                "output": "'BlBRDhtAl.nIfa3F2W2N9gPr'"
            },
            {
                "input": "Strongest_Extension('vsJeaDaIkEg', ['PqUxkrh', 'uwAS1C', 'vYkAoQ', 'qcSN', '?%%/'])",
                "output": "'vsJeaDaIkEg.uwAS1C'"
            },
            {
                "input": "Strongest_Extension('Q', ['rxeGlo', 'GGWDE', 'fULTz6p54l5', 'Fago'])",
                "output": "'Q.GGWDE'"
            },
            {
                "input": "Strongest_Extension('eOqPIViIzusFYP', ['RjuxuP', 'JSJ', 'CqAkiF', 'YbvqMQX'])",
                "output": "'eOqPIViIzusFYP.JSJ'"
            },
            {
                "input": "Strongest_Extension('kUroWx', ['1546026', 'mruE'])",
                "output": "'kUroWx.1546026'"
            },
            {
                "input": "Strongest_Extension('@PWACU', ['s', 'eqtaob', 'pfwor', 'bhm5B2', '&$Vm!kou', 'Ar4sHMXfITAmK'])",
                "output": "'@PWACU.Ar4sHMXfITAmK'"
            },
            {
                "input": "Strongest_Extension(':JA_MUEY', ['WyGfiME', '84841922', '891', '+%$?:__$'])",
                "output": "':JA_MUEY.WyGfiME'"
            },
            {
                "input": "Strongest_Extension('bsclnM', ['GwyoOWMu', 'uJZRvP', 'iNRxSMq', 'MjAUmFWpV'])",
                "output": "'bsclnM.MjAUmFWpV'"
            },
            {
                "input": "Strongest_Extension('~', ['YlNBp', '505167986'])",
                "output": "'~.YlNBp'"
            },
            {
                "input": "Strongest_Extension('FpVbL', ['85379', 'CxADbI'])",
                "output": "'FpVbL.CxADbI'"
            },
            {
                "input": "Strongest_Extension('#UOLLUUH', ['Wtib', '07545', '7698', '--!!'])",
                "output": "'#UOLLUUH.07545'"
            },
            {
                "input": "Strongest_Extension('ORVNl', ['805539624', 'zpewje'])",
                "output": "'ORVNl.805539624'"
            },
            {
                "input": "Strongest_Extension('DvtFEPScf', ['xktzl', 'eAqteapdJev', 'mhjRcBEdRLcCjzY', 'h7f7b74'])",
                "output": "'DvtFEPScf.mhjRcBEdRLcCjzY'"
            },
            {
                "input": "Strongest_Extension('DILWLY', ['92527', 'rSjVk'])",
                "output": "'DILWLY.92527'"
            },
            {
                "input": "Strongest_Extension('FKmkaw', ['gaB', 'EVpUuQsBo', 'Zqc06UtH'])",
                "output": "'FKmkaw.EVpUuQsBo'"
            },
            {
                "input": "Strongest_Extension('CRCmZptHgJw', ['twhwpqh', 'ZOHeYFXoX', 'qJ.RHCbvYqQJ', 'i7i3v0q311nrnvu'])",
                "output": "'CRCmZptHgJw.ZOHeYFXoX'"
            },
            {
                "input": "Strongest_Extension('?', ['YPMsSD', '8670851'])",
                "output": "'?.YPMsSD'"
            },
            {
                "input": "Strongest_Extension('dbeKQKwUtAo', ['wdvRmSn', 'cqbY', 'BfN8pBB79dR'])",
                "output": "'dbeKQKwUtAo.BfN8pBB79dR'"
            },
            {
                "input": "Strongest_Extension('PAWZjZc', ['bjsA', 'uNMjNEonB4WY4Dq', 'PkqtYalVTS', 'QSL', '-?*&?'])",
                "output": "'PAWZjZc.uNMjNEonB4WY4Dq'"
            },
            {
                "input": "Strongest_Extension('__HAHA', ['Tab', '123', '781345', '-_-'])",
                "output": "'__HAHA.123'"
            },
            {
                "input": "Strongest_Extension('urNxXmhlB', ['EsLScJT', 'SWiAxrrF', 'hdrbK', 'vOWPLjnme'])",
                "output": "'urNxXmhlB.EsLScJT'"
            },
            {
                "input": "Strongest_Extension('FRI~', ['AGwZ', '8873885', '6947', '~@$'])",
                "output": "'FRI~.AGwZ'"
            },
            {
                "input": "Strongest_Extension('*C?TOCCYMF#', ['UhI', '81376772', '9424178697', '+~^/-+*#'])",
                "output": "'*C?TOCCYMF#.UhI'"
            },
            {
                "input": "Strongest_Extension('ZoVbnWCKigQ', ['ZzjLvmEok', 'A5zPLS1WHR', 'rdwdzNCz', 'hYPzS', '=/=%'])",
                "output": "'ZoVbnWCKigQ.A5zPLS1WHR'"
            },
            {
                "input": "Strongest_Extension('NrcS', ['50553162', 'lVgIv'])",
                "output": "'NrcS.50553162'"
            },
            {
                "input": "Strongest_Extension('@_YLVZJD*$', ['x', 'VBIuLXA', 'kmygj', 'UriEwos', 'kYzKivJ/Do', 'wmZR5B7rlNPb'])",
                "output": "'@_YLVZJD*$.VBIuLXA'"
            },
            {
                "input": "Strongest_Extension('@', ['Atbytp', '117694605'])",
                "output": "'@.117694605'"
            },
            {
                "input": "Strongest_Extension('#TKW=*&XGJ*PZQ^', ['j', 'hnQVJX', 'tzlmmjy', 'hNSTVM', 'a_umjZASWWg/', 'ADBiqyM3f'])",
                "output": "'#TKW=*&XGJ*PZQ^.hNSTVM'"
            },
            {
                "input": "Strongest_Extension('*+F_BQJP', ['GvS', '618674', '81358', '%|**&/%%~'])",
                "output": "'*+F_BQJP.GvS'"
            },
            {
                "input": "Strongest_Extension('PDr', ['viSzRy', 'i1PDVdEvEKXeJD', 'nddvMSrp', 'FfLLgXiJ', '=&~|'])",
                "output": "'PDr.i1PDVdEvEKXeJD'"
            },
            {
                "input": "Strongest_Extension('SP?HD|_ABHPQ', ['s', 'Jmq', 'cgc', 'k8D', 'tCdQj', '9NfaReAkABQcGapX'])",
                "output": "'SP?HD|_ABHPQ.9NfaReAkABQcGapX'"
            },
            {
                "input": "Strongest_Extension('M', ['RBt', 'COQJPLPJJ', '6qmKiUJJS', 'vZQOOz'])",
                "output": "'M.COQJPLPJJ'"
            },
            {
                "input": "Strongest_Extension('FWDRduVSzmNfK', ['DnafTbHwZ', 'PcNbbtOHL', 'bqeESK', 'pfsmfTbw'])",
                "output": "'FWDRduVSzmNfK.PcNbbtOHL'"
            },
            {
                "input": "Strongest_Extension('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'])",
                "output": "'YameRore.okIWILL123'"
            },
            {
                "input": "Strongest_Extension('Q', ['TWZQs', 'EUYNBP', 'lhoGTKzuxvy', 'JEwbEdFu'])",
                "output": "'Q.EUYNBP'"
            },
            {
                "input": "Strongest_Extension('gILLaMmv', ['hQIUELQ', 'qIlJMwv', 'oua', 'ijIwPp'])",
                "output": "'gILLaMmv.hQIUELQ'"
            },
            {
                "input": "Strongest_Extension('UwT', ['KHfynGaX', 'tiQPePAt', 'JQOWxKagVH2CP'])",
                "output": "'UwT.JQOWxKagVH2CP'"
            },
            {
                "input": "Strongest_Extension('_', ['rpx', '066421382'])",
                "output": "'_.066421382'"
            },
            {
                "input": "Strongest_Extension('vRIaFFihciSB', ['noPLYIvDm', 'Pctzd', '3HxoEE7U'])",
                "output": "'vRIaFFihciSB.3HxoEE7U'"
            },
            {
                "input": "Strongest_Extension('csufsy', ['YfkhnbFQ', 'mScEbB52s1k', 'MCVmIlH', 'IQcmKZMLy', '_=_*|'])",
                "output": "'csufsy.MCVmIlH'"
            },
            {
                "input": "Strongest_Extension('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'])",
                "output": "'__YESIMHERE.NuLl__'"
            },
            {
                "input": "Strongest_Extension('Y/|AV#|MYZ', ['WyoGqXVR', '708570', '25024575', '@/@|-@|@+'])",
                "output": "'Y/|AV#|MYZ.WyoGqXVR'"
            },
            {
                "input": "Strongest_Extension('$SK%?Q?W', ['d', 'hSMUdFLh', 'hfc', 'FSSQw', 'kfu?lA%XAW', '1tjz5NmKeb'])",
                "output": "'$SK%?Q?W.FSSQw'"
            },
            {
                "input": "Strongest_Extension('Q', ['qLOaj', 'OPQPFUZQE', 'AVNgLwkA7Dx', 'kMzlTh'])",
                "output": "'Q.OPQPFUZQE'"
            },
            {
                "input": "Strongest_Extension('!', ['QtAcA', '403478456'])",
                "output": "'!.QtAcA'"
            },
            {
                "input": "Strongest_Extension('lwKQ', ['02327846646', 'eaQKO'])",
                "output": "'lwKQ.eaQKO'"
            },
            {
                "input": "Strongest_Extension('BGE!IART_+=^U', ['b', 'BtuL', 'chfhbbr', 'va98odY64', '%xLD&RXy#n/', 'makkFgnJSmjKzMhIO'])",
                "output": "'BGE!IART_+=^U.%xLD&RXy#n/'"
            },
            {
                "input": "Strongest_Extension('_', ['Bb', '91245'])",
                "output": "'_.Bb'"
            },
            {
                "input": "Strongest_Extension('T?W+E:', ['w', 'HOzGtHHnX', 'wtu', 'M7KE', '&udG', 'mMS9yg95vFTSmmYS6'])",
                "output": "'T?W+E:.HOzGtHHnX'"
            },
            {
                "input": "Strongest_Extension('Msoh', ['33703253', 'lph'])",
                "output": "'Msoh.33703253'"
            },
            {
                "input": "Strongest_Extension('FatGbwc1GGz', ['horetduxv', 'HGjwJTsqyyA', 'dYqlL.wWatfH', 'jd68pk2l1muptc4'])",
                "output": "'FatGbwc1GGz.HGjwJTsqyyA'"
            },
            {
                "input": "Strongest_Extension('kBupApJhoed', ['HBLe', 'hMwILqoi', 'Q0kxrsSC6Hj'])",
                "output": "'kBupApJhoed.HBLe'"
            },
            {
                "input": "Strongest_Extension('cIAj', ['mfog', 'wezaMTICtlakm', 'LdNY', 'JucoEDJf', '#//_|@'])",
                "output": "'cIAj.LdNY'"
            },
            {
                "input": "Strongest_Extension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])",
                "output": "'Watashi.eIGHt8OKe'"
            },
            {
                "input": "Strongest_Extension('igKRdwEMym', ['JThSfRu', 'oJyyK', 'pvydN', 'snG'])",
                "output": "'igKRdwEMym.JThSfRu'"
            },
            {
                "input": "Strongest_Extension('?', ['KdaTuj', '85543'])",
                "output": "'?.85543'"
            },
            {
                "input": "Strongest_Extension('M', ['gZvPL', 'XEAW', '9lGL', 'DBLtogHD'])",
                "output": "'M.XEAW'"
            },
            {
                "input": "Strongest_Extension('D', ['BoEus', 'ERM', 'oHQ8nw', 'WCfkVA'])",
                "output": "'D.ERM'"
            },
            {
                "input": "Strongest_Extension('#', ['EfRONu', '215'])",
                "output": "'#.EfRONu'"
            }
        ]
    },
    {
        "problem_description": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
        "ground truth": "def cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
        "instances": [
            {
                "input": "cycpattern_check('cdotyg', 'pkztdszbv')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('utdeggjmwq', 'kuohw')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('uihevce', 'i')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('yemkrxrol', 'ujsgzrpoz')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('fscep', 'smzflog')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('speh', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('qvaf', 'a')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('uwj', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('wpspuoxzlfg', 'zskxv')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('nvtcb', 'wpcw')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('pzfltnmdv', 'z')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('gdanqtehkman', 'd')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('ikefkmoa', 'ulbtr')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('mhuedkr', 'azukwsx')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('kijxeiefll', 'onty')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('pkevxvtko', 'opkevxv')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('ivlocszsv', 'zsviv')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('swqoexhsby', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('kwxztfkco', 'okwxztf')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('thxmdw', 'md')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('hdd', 'iwarxbpv')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('dzuakxphc', 'eiyxoi')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('rzfgprhc', 'ovw')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('kjs', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('stpdotkrn', 'myyi')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('xiqrez', 'mxo')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('mswt', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('smbhw', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('qctnlrz', 'rzq')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('wwp', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('efjyv', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('uhj', 'kiis')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('hzim', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('nyasoi', 'y')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('otet', 'fxq')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('ixddsxgkk', 'lyjkdi')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('mtpimss', 'zgbybzmjx')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('gocosorphe', 'o')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('mmokbj', 'k')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('bysxmw', 'hjgoq')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('owmnkolrb', 'mzpi')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('ysypr', 'y')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('wouvr', 'srxkwhxp')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('eerbgryz', 'xuwnkt')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('gnqqedypxcvm', 'dsmymg')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('fhhtufjm', 'h')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('kfzvwjgla', 'w')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('gska', 'dzfx')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('yjciwqpa', 'p')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('lmokmz', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('iyeftdjiot', 'vjykf')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('degqdvtpv', 'cpty')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('cbiofnpxp', 'npxp')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('ckpg', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('cwemasn', 'hmbqd')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('fhlkdjjv', 'h')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('sptocbu', 't')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('ywtsaspv', 'spvy')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('etmojix', 'ix')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('kuaqmgei', 'pmbnsjxf')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('hntzyxm', 'xm')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('ffqbsib', 'xizzfg')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('ipq', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('pvyhk', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('yvgtp', 'rnr')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('kwjq', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('lwyzj', 'j')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('apj', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('dtdpcmym', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('odh', 'lnkdlkzf')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('xuodej', 'pzd')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('ijpfr', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('olu', 'ljhv')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('xnlzyfvkj', 'y')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('mkhwrdq', 'dqmk')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('aeblifuvq', 'fu')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('ejdlz', 'hvzlpk')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('ldqy', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('rrvih', 'awwjuad')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('bysv', 's')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('dirav', 'xje')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('gkrplyo', 'yo')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('vkpfjsrdj', 'mvbxs')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('msqtf', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('swfzkdt', 'wbfwmysg')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('bbhdgzok', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('qvotaf', 'dbtwlrpc')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('miuckhm', 'u')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('pbjzx', 'imhhhann')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('wlmereo', 'eo')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('olqdcyhcfskz', 'vtzeosybd')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('dmln', 'tvglh')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('qsbestm', 'mqsb')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('joptnm', 'nm')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('daa', 'nbsmd')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('mvylvzy', 'fbaz')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('xbzjr', 'usoqjpxf')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('xkr', 'zxrospj')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('ztfkiw', 'olmfon')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('xrvifoo', 'iskxmwpcj')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('bvs', 'gpn')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('banrgdcy', 'srtpzyeje')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('zrrswz', 'wz')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('gcsuapog', 'a')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('avyont', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('qoeigpgbv', 'vqoeigpg')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('airx', 'zvzguuim')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('pjyhnno', 'acy')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('nsjbhmah', 'ips')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('hqa', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('dzsrlkkv', 'xpcf')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('qnhfrfy', 'opispht')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('clfjew', '')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('thovadcj', 'vad')",
                "output": "True"
            },
            {
                "input": "cycpattern_check('hvi', 'sncya')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('ohfsdcdrb', 'dssy')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('popi', 'grftit')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('lojuycqdt', 'bthnnlt')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('zdpjz', 'chk')",
                "output": "False"
            },
            {
                "input": "cycpattern_check('bpmycgia', 'giab')",
                "output": "False"
            }
        ]
    },
    {
        "problem_description": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
        "ground truth": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
        "instances": [
            {
                "input": "even_odd_count(-82)",
                "output": "(2, 0)"
            },
            {
                "input": "even_odd_count(8)",
                "output": "(1, 0)"
            },
            {
                "input": "even_odd_count(-345819)",
                "output": "(2, 4)"
            },
            {
                "input": "even_odd_count(-81)",
                "output": "(1, 1)"
            },
            {
                "input": "even_odd_count(346787)",
                "output": "(3, 3)"
            },
            {
                "input": "even_odd_count(-345817)",
                "output": "(2, 4)"
            },
            {
                "input": "even_odd_count(-76)",
                "output": "(1, 1)"
            },
            {
                "input": "even_odd_count(-45344)",
                "output": "(3, 2)"
            },
            {
                "input": "even_odd_count(3444)",
                "output": "(3, 1)"
            },
            {
                "input": "even_odd_count(345794)",
                "output": "(2, 4)"
            },
            {
                "input": "even_odd_count(-75)",
                "output": "(0, 2)"
            },
            {
                "input": "even_odd_count(-78)",
                "output": "(1, 1)"
            },
            {
                "input": "even_odd_count(0)",
                "output": "(1, 0)"
            },
            {
                "input": "even_odd_count(10)",
                "output": "(1, 1)"
            },
            {
                "input": "even_odd_count(9)",
                "output": "(0, 1)"
            },
            {
                "input": "even_odd_count(-345823)",
                "output": "(3, 3)"
            },
            {
                "input": "even_odd_count(3452)",
                "output": "(2, 2)"
            },
            {
                "input": "even_odd_count(12)",
                "output": "(1, 1)"
            },
            {
                "input": "even_odd_count(-7)",
                "output": "(0, 1)"
            },
            {
                "input": "even_odd_count(-80)",
                "output": "(2, 0)"
            },
            {
                "input": "even_odd_count(-83)",
                "output": "(1, 1)"
            },
            {
                "input": "even_odd_count(5)",
                "output": "(0, 1)"
            },
            {
                "input": "even_odd_count(346175)",
                "output": "(2, 4)"
            },
            {
                "input": "even_odd_count(345220)",
                "output": "(4, 2)"
            },
            {
                "input": "even_odd_count(4)",
                "output": "(1, 0)"
            },
            {
                "input": "even_odd_count(345265)",
                "output": "(3, 3)"
            },
            {
                "input": "even_odd_count(-5)",
                "output": "(0, 1)"
            },
            {
                "input": "even_odd_count(3949)",
                "output": "(1, 3)"
            },
            {
                "input": "even_odd_count(-77)",
                "output": "(0, 2)"
            },
            {
                "input": "even_odd_count(346081)",
                "output": "(4, 2)"
            },
            {
                "input": "even_odd_count(-345821)",
                "output": "(3, 3)"
            },
            {
                "input": "even_odd_count(345501)",
                "output": "(2, 4)"
            },
            {
                "input": "even_odd_count(3015)",
                "output": "(1, 3)"
            },
            {
                "input": "even_odd_count(345577)",
                "output": "(1, 5)"
            },
            {
                "input": "even_odd_count(-45348)",
                "output": "(3, 2)"
            },
            {
                "input": "even_odd_count(345858)",
                "output": "(3, 3)"
            },
            {
                "input": "even_odd_count(-74)",
                "output": "(1, 1)"
            },
            {
                "input": "even_odd_count(346614)",
                "output": "(4, 2)"
            },
            {
                "input": "even_odd_count(345360)",
                "output": "(3, 3)"
            },
            {
                "input": "even_odd_count(-4)",
                "output": "(1, 0)"
            },
            {
                "input": "even_odd_count(-3)",
                "output": "(0, 1)"
            },
            {
                "input": "even_odd_count(-345824)",
                "output": "(4, 2)"
            },
            {
                "input": "even_odd_count(-345816)",
                "output": "(3, 3)"
            },
            {
                "input": "even_odd_count(346547)",
                "output": "(3, 3)"
            },
            {
                "input": "even_odd_count(-45345)",
                "output": "(2, 3)"
            },
            {
                "input": "even_odd_count(3724)",
                "output": "(2, 2)"
            },
            {
                "input": "even_odd_count(3981)",
                "output": "(1, 3)"
            },
            {
                "input": "even_odd_count(-45352)",
                "output": "(2, 3)"
            },
            {
                "input": "even_odd_count(3)",
                "output": "(0, 1)"
            },
            {
                "input": "even_odd_count(7)",
                "output": "(0, 1)"
            },
            {
                "input": "even_odd_count(-45349)",
                "output": "(2, 3)"
            },
            {
                "input": "even_odd_count(-345818)",
                "output": "(3, 3)"
            },
            {
                "input": "even_odd_count(346658)",
                "output": "(4, 2)"
            },
            {
                "input": "even_odd_count(-6)",
                "output": "(1, 0)"
            },
            {
                "input": "even_odd_count(-345825)",
                "output": "(3, 3)"
            },
            {
                "input": "even_odd_count(3347)",
                "output": "(1, 3)"
            },
            {
                "input": "even_odd_count(-73)",
                "output": "(0, 2)"
            },
            {
                "input": "even_odd_count(347145)",
                "output": "(2, 4)"
            },
            {
                "input": "even_odd_count(3987)",
                "output": "(1, 3)"
            },
            {
                "input": "even_odd_count(4207)",
                "output": "(3, 1)"
            },
            {
                "input": "even_odd_count(2450)",
                "output": "(3, 1)"
            },
            {
                "input": "even_odd_count(2708)",
                "output": "(3, 1)"
            },
            {
                "input": "even_odd_count(346211)",
                "output": "(3, 3)"
            },
            {
                "input": "even_odd_count(-45347)",
                "output": "(2, 3)"
            },
            {
                "input": "even_odd_count(-345820)",
                "output": "(4, 2)"
            },
            {
                "input": "even_odd_count(2650)",
                "output": "(3, 1)"
            },
            {
                "input": "even_odd_count(-1)",
                "output": "(0, 1)"
            },
            {
                "input": "even_odd_count(345308)",
                "output": "(3, 3)"
            },
            {
                "input": "even_odd_count(-45346)",
                "output": "(3, 2)"
            },
            {
                "input": "even_odd_count(-45351)",
                "output": "(1, 4)"
            },
            {
                "input": "even_odd_count(2810)",
                "output": "(3, 1)"
            },
            {
                "input": "even_odd_count(-345822)",
                "output": "(4, 2)"
            },
            {
                "input": "even_odd_count(1)",
                "output": "(0, 1)"
            },
            {
                "input": "even_odd_count(-45343)",
                "output": "(2, 3)"
            },
            {
                "input": "even_odd_count(-2)",
                "output": "(1, 0)"
            },
            {
                "input": "even_odd_count(-79)",
                "output": "(0, 2)"
            },
            {
                "input": "even_odd_count(2)",
                "output": "(1, 0)"
            },
            {
                "input": "even_odd_count(3171)",
                "output": "(0, 4)"
            }
        ]
    },
    {
        "problem_description": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
        "ground truth": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
        "instances": [
            {
                "input": "int_to_mini_roman(667)",
                "output": "'dclxvii'"
            },
            {
                "input": "int_to_mini_roman(798)",
                "output": "'dccxcviii'"
            },
            {
                "input": "int_to_mini_roman(897)",
                "output": "'dcccxcvii'"
            },
            {
                "input": "int_to_mini_roman(152)",
                "output": "'clii'"
            },
            {
                "input": "int_to_mini_roman(875)",
                "output": "'dccclxxv'"
            },
            {
                "input": "int_to_mini_roman(718)",
                "output": "'dccxviii'"
            },
            {
                "input": "int_to_mini_roman(641)",
                "output": "'dcxli'"
            },
            {
                "input": "int_to_mini_roman(918)",
                "output": "'cmxviii'"
            },
            {
                "input": "int_to_mini_roman(751)",
                "output": "'dccli'"
            },
            {
                "input": "int_to_mini_roman(7)",
                "output": "'vii'"
            },
            {
                "input": "int_to_mini_roman(894)",
                "output": "'dcccxciv'"
            },
            {
                "input": "int_to_mini_roman(55)",
                "output": "'lv'"
            },
            {
                "input": "int_to_mini_roman(623)",
                "output": "'dcxxiii'"
            },
            {
                "input": "int_to_mini_roman(997)",
                "output": "'cmxcvii'"
            },
            {
                "input": "int_to_mini_roman(422)",
                "output": "'cdxxii'"
            },
            {
                "input": "int_to_mini_roman(392)",
                "output": "'cccxcii'"
            },
            {
                "input": "int_to_mini_roman(900)",
                "output": "'cm'"
            },
            {
                "input": "int_to_mini_roman(162)",
                "output": "'clxii'"
            },
            {
                "input": "int_to_mini_roman(893)",
                "output": "'dcccxciii'"
            },
            {
                "input": "int_to_mini_roman(455)",
                "output": "'cdlv'"
            },
            {
                "input": "int_to_mini_roman(315)",
                "output": "'cccxv'"
            },
            {
                "input": "int_to_mini_roman(209)",
                "output": "'ccix'"
            },
            {
                "input": "int_to_mini_roman(825)",
                "output": "'dcccxxv'"
            },
            {
                "input": "int_to_mini_roman(543)",
                "output": "'dxliii'"
            },
            {
                "input": "int_to_mini_roman(218)",
                "output": "'ccxviii'"
            },
            {
                "input": "int_to_mini_roman(262)",
                "output": "'cclxii'"
            },
            {
                "input": "int_to_mini_roman(887)",
                "output": "'dccclxxxvii'"
            },
            {
                "input": "int_to_mini_roman(563)",
                "output": "'dlxiii'"
            },
            {
                "input": "int_to_mini_roman(320)",
                "output": "'cccxx'"
            },
            {
                "input": "int_to_mini_roman(556)",
                "output": "'dlvi'"
            },
            {
                "input": "int_to_mini_roman(291)",
                "output": "'ccxci'"
            },
            {
                "input": "int_to_mini_roman(40)",
                "output": "'xl'"
            },
            {
                "input": "int_to_mini_roman(526)",
                "output": "'dxxvi'"
            },
            {
                "input": "int_to_mini_roman(520)",
                "output": "'dxx'"
            },
            {
                "input": "int_to_mini_roman(820)",
                "output": "'dcccxx'"
            },
            {
                "input": "int_to_mini_roman(470)",
                "output": "'cdlxx'"
            },
            {
                "input": "int_to_mini_roman(512)",
                "output": "'dxii'"
            },
            {
                "input": "int_to_mini_roman(555)",
                "output": "'dlv'"
            },
            {
                "input": "int_to_mini_roman(663)",
                "output": "'dclxiii'"
            },
            {
                "input": "int_to_mini_roman(92)",
                "output": "'xcii'"
            },
            {
                "input": "int_to_mini_roman(990)",
                "output": "'cmxc'"
            },
            {
                "input": "int_to_mini_roman(914)",
                "output": "'cmxiv'"
            },
            {
                "input": "int_to_mini_roman(964)",
                "output": "'cmlxiv'"
            },
            {
                "input": "int_to_mini_roman(679)",
                "output": "'dclxxix'"
            },
            {
                "input": "int_to_mini_roman(907)",
                "output": "'cmvii'"
            },
            {
                "input": "int_to_mini_roman(464)",
                "output": "'cdlxiv'"
            },
            {
                "input": "int_to_mini_roman(620)",
                "output": "'dcxx'"
            },
            {
                "input": "int_to_mini_roman(333)",
                "output": "'cccxxxiii'"
            },
            {
                "input": "int_to_mini_roman(904)",
                "output": "'cmiv'"
            },
            {
                "input": "int_to_mini_roman(212)",
                "output": "'ccxii'"
            },
            {
                "input": "int_to_mini_roman(137)",
                "output": "'cxxxvii'"
            },
            {
                "input": "int_to_mini_roman(345)",
                "output": "'cccxlv'"
            },
            {
                "input": "int_to_mini_roman(872)",
                "output": "'dccclxxii'"
            },
            {
                "input": "int_to_mini_roman(621)",
                "output": "'dcxxi'"
            },
            {
                "input": "int_to_mini_roman(149)",
                "output": "'cxlix'"
            },
            {
                "input": "int_to_mini_roman(50)",
                "output": "'l'"
            },
            {
                "input": "int_to_mini_roman(19)",
                "output": "'xix'"
            },
            {
                "input": "int_to_mini_roman(290)",
                "output": "'ccxc'"
            },
            {
                "input": "int_to_mini_roman(194)",
                "output": "'cxciv'"
            },
            {
                "input": "int_to_mini_roman(70)",
                "output": "'lxx'"
            },
            {
                "input": "int_to_mini_roman(723)",
                "output": "'dccxxiii'"
            },
            {
                "input": "int_to_mini_roman(649)",
                "output": "'dcxlix'"
            },
            {
                "input": "int_to_mini_roman(895)",
                "output": "'dcccxcv'"
            },
            {
                "input": "int_to_mini_roman(4)",
                "output": "'iv'"
            },
            {
                "input": "int_to_mini_roman(99)",
                "output": "'xcix'"
            },
            {
                "input": "int_to_mini_roman(143)",
                "output": "'cxliii'"
            },
            {
                "input": "int_to_mini_roman(450)",
                "output": "'cdl'"
            },
            {
                "input": "int_to_mini_roman(629)",
                "output": "'dcxxix'"
            },
            {
                "input": "int_to_mini_roman(219)",
                "output": "'ccxix'"
            },
            {
                "input": "int_to_mini_roman(1)",
                "output": "'i'"
            },
            {
                "input": "int_to_mini_roman(991)",
                "output": "'cmxci'"
            },
            {
                "input": "int_to_mini_roman(401)",
                "output": "'cdi'"
            },
            {
                "input": "int_to_mini_roman(533)",
                "output": "'dxxxiii'"
            },
            {
                "input": "int_to_mini_roman(294)",
                "output": "'ccxciv'"
            },
            {
                "input": "int_to_mini_roman(801)",
                "output": "'dccci'"
            },
            {
                "input": "int_to_mini_roman(426)",
                "output": "'cdxxvi'"
            },
            {
                "input": "int_to_mini_roman(727)",
                "output": "'dccxxvii'"
            },
            {
                "input": "int_to_mini_roman(585)",
                "output": "'dlxxxv'"
            },
            {
                "input": "int_to_mini_roman(110)",
                "output": "'cx'"
            },
            {
                "input": "int_to_mini_roman(983)",
                "output": "'cmlxxxiii'"
            },
            {
                "input": "int_to_mini_roman(892)",
                "output": "'dcccxcii'"
            },
            {
                "input": "int_to_mini_roman(899)",
                "output": "'dcccxcix'"
            },
            {
                "input": "int_to_mini_roman(532)",
                "output": "'dxxxii'"
            },
            {
                "input": "int_to_mini_roman(698)",
                "output": "'dcxcviii'"
            },
            {
                "input": "int_to_mini_roman(744)",
                "output": "'dccxliv'"
            },
            {
                "input": "int_to_mini_roman(471)",
                "output": "'cdlxxi'"
            },
            {
                "input": "int_to_mini_roman(958)",
                "output": "'cmlviii'"
            },
            {
                "input": "int_to_mini_roman(848)",
                "output": "'dcccxlviii'"
            },
            {
                "input": "int_to_mini_roman(165)",
                "output": "'clxv'"
            },
            {
                "input": "int_to_mini_roman(374)",
                "output": "'ccclxxiv'"
            },
            {
                "input": "int_to_mini_roman(578)",
                "output": "'dlxxviii'"
            },
            {
                "input": "int_to_mini_roman(251)",
                "output": "'ccli'"
            },
            {
                "input": "int_to_mini_roman(64)",
                "output": "'lxiv'"
            },
            {
                "input": "int_to_mini_roman(970)",
                "output": "'cmlxx'"
            },
            {
                "input": "int_to_mini_roman(221)",
                "output": "'ccxxi'"
            },
            {
                "input": "int_to_mini_roman(640)",
                "output": "'dcxl'"
            },
            {
                "input": "int_to_mini_roman(394)",
                "output": "'cccxciv'"
            },
            {
                "input": "int_to_mini_roman(883)",
                "output": "'dccclxxxiii'"
            },
            {
                "input": "int_to_mini_roman(478)",
                "output": "'cdlxxviii'"
            },
            {
                "input": "int_to_mini_roman(1000)",
                "output": "'m'"
            },
            {
                "input": "int_to_mini_roman(766)",
                "output": "'dcclxvi'"
            },
            {
                "input": "int_to_mini_roman(662)",
                "output": "'dclxii'"
            },
            {
                "input": "int_to_mini_roman(233)",
                "output": "'ccxxxiii'"
            },
            {
                "input": "int_to_mini_roman(756)",
                "output": "'dcclvi'"
            },
            {
                "input": "int_to_mini_roman(286)",
                "output": "'cclxxxvi'"
            },
            {
                "input": "int_to_mini_roman(938)",
                "output": "'cmxxxviii'"
            },
            {
                "input": "int_to_mini_roman(90)",
                "output": "'xc'"
            },
            {
                "input": "int_to_mini_roman(994)",
                "output": "'cmxciv'"
            },
            {
                "input": "int_to_mini_roman(166)",
                "output": "'clxvi'"
            },
            {
                "input": "int_to_mini_roman(516)",
                "output": "'dxvi'"
            },
            {
                "input": "int_to_mini_roman(339)",
                "output": "'cccxxxix'"
            },
            {
                "input": "int_to_mini_roman(500)",
                "output": "'d'"
            },
            {
                "input": "int_to_mini_roman(755)",
                "output": "'dcclv'"
            },
            {
                "input": "int_to_mini_roman(398)",
                "output": "'cccxcviii'"
            },
            {
                "input": "int_to_mini_roman(309)",
                "output": "'cccix'"
            },
            {
                "input": "int_to_mini_roman(600)",
                "output": "'dc'"
            },
            {
                "input": "int_to_mini_roman(772)",
                "output": "'dcclxxii'"
            },
            {
                "input": "int_to_mini_roman(488)",
                "output": "'cdlxxxviii'"
            },
            {
                "input": "int_to_mini_roman(43)",
                "output": "'xliii'"
            },
            {
                "input": "int_to_mini_roman(658)",
                "output": "'dclviii'"
            },
            {
                "input": "int_to_mini_roman(112)",
                "output": "'cxii'"
            },
            {
                "input": "int_to_mini_roman(545)",
                "output": "'dxlv'"
            },
            {
                "input": "int_to_mini_roman(741)",
                "output": "'dccxli'"
            },
            {
                "input": "int_to_mini_roman(934)",
                "output": "'cmxxxiv'"
            },
            {
                "input": "int_to_mini_roman(377)",
                "output": "'ccclxxvii'"
            },
            {
                "input": "int_to_mini_roman(666)",
                "output": "'dclxvi'"
            },
            {
                "input": "int_to_mini_roman(115)",
                "output": "'cxv'"
            },
            {
                "input": "int_to_mini_roman(153)",
                "output": "'cliii'"
            },
            {
                "input": "int_to_mini_roman(240)",
                "output": "'ccxl'"
            },
            {
                "input": "int_to_mini_roman(94)",
                "output": "'xciv'"
            },
            {
                "input": "int_to_mini_roman(407)",
                "output": "'cdvii'"
            }
        ]
    },
    {
        "problem_description": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
        "ground truth": "def right_angle_triangle(a, b, c):\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
        "instances": [
            {
                "input": "right_angle_triangle(285, 380, 475)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(1155, 616, 1309)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(20, 12, 16)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(8, 10, 10)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(230, 552, 598)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(6, 5, 3)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(1, 3, 15)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(1, 1, 2)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(1, 7, 4)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(5, 12, 13)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(70, 42, 56)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(5, 4, 4)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(280, 960, 1000)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(1, 3, 4)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(235, 564, 611)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(175, 600, 625)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(15, 9, 11)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(3, 1, 7)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(3, 7, 2)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(140, 336, 364)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(1035, 552, 1173)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(1000, 600, 800)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(581, 1992, 2075)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(5, 5, 4)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(12, 16, 20)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(243, 324, 405)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(4, 4, 4)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(5, 7, 1)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(1, 5, 5)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(610, 366, 488)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(14, 8, 10)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(234, 312, 390)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(2, 4, 11)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(705, 376, 799)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(21, 72, 75)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(230, 138, 184)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(2, 2, 10)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(6, 1, 9)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(5, 3, 2)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(3, 3, 4)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(3, 2, 3)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(3, 3, 1)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(12, 4, 2)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(3, 6, 3)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(10, 9, 3)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(2880, 3300, 4380)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(360, 864, 936)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(69, 92, 115)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(4, 1, 4)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(2, 4, 6)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(21, 28, 35)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(4752, 5445, 7227)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(4, 5, 5)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(780, 468, 624)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(2, 4, 8)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(5, 5, 2)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(900, 480, 1020)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(65, 156, 169)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(2736, 3135, 4161)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(3, 1, 4)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(240, 144, 192)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(285, 684, 741)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(2544, 2915, 3869)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(160, 384, 416)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(380, 912, 988)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(81, 108, 135)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(15, 8, 17)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(3, 3, 9)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(320, 192, 256)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(10, 5, 7)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(455, 1560, 1625)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(518, 1776, 1850)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(1, 2, 1)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(2, 2, 2)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(765, 408, 867)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(219, 292, 365)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(3, 2, 5)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(350, 840, 910)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(2256, 2585, 3431)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(960, 576, 768)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(12, 1, 2)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(525, 280, 595)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(6, 1, 7)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(168, 576, 600)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(3888, 4455, 5913)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(6, 7, 7)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(490, 1680, 1750)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(204, 272, 340)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(5, 2, 4)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(1185, 632, 1343)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(170, 408, 442)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(8, 5, 6)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(5, 1, 2)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(1, 1, 1)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(6, 7, 6)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(528, 605, 803)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(1, 2, 3)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(54, 72, 90)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(305, 732, 793)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(273, 936, 975)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(2, 4, 5)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(5, 4, 10)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(2, 3, 1)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(192, 220, 292)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(11, 5, 8)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(1455, 776, 1649)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(3, 4, 5)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(7, 24, 25)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(1, 4, 4)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(3, 6, 11)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(3, 3, 3)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(6, 4, 4)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(2, 6, 9)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(210, 112, 238)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(15, 5, 11)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(15, 2, 10)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(15, 8, 3)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(870, 464, 986)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(3504, 4015, 5329)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(820, 492, 656)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(6, 4, 1)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(259, 888, 925)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(3792, 4345, 5767)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(1095, 584, 1241)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(201, 268, 335)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(4656, 5335, 7081)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(7, 7, 5)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(2, 7, 6)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(4, 5, 4)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(7, 1, 6)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(5, 5, 6)",
                "output": "False"
            },
            {
                "input": "right_angle_triangle(1536, 1760, 2336)",
                "output": "True"
            },
            {
                "input": "right_angle_triangle(10, 6, 8)",
                "output": "True"
            }
        ]
    },
    {
        "problem_description": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
        "ground truth": "def find_max(words):\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
        "instances": [
            {
                "input": "find_max(['rmbt', 'gdwtshzt', 'gsb', 'fur'])",
                "output": "'gdwtshzt'"
            },
            {
                "input": "find_max(['crwip', 'wtaxe', 'm', 'emqsmkwj'])",
                "output": "'emqsmkwj'"
            },
            {
                "input": "find_max(['foweyb', 'qnwpbur'])",
                "output": "'qnwpbur'"
            },
            {
                "input": "find_max(['vhkyv', 'fzzgzqyzo', 'amyce'])",
                "output": "'fzzgzqyzo'"
            },
            {
                "input": "find_max(['ildvzfb', 'cgdb', 'nmxj'])",
                "output": "'ildvzfb'"
            },
            {
                "input": "find_max(['qmvmzph', 'pzkmmibi', 'aavpu'])",
                "output": "'pzkmmibi'"
            },
            {
                "input": "find_max(['dak', 'ttceml', 'j', 'swaqrrlcg', 'ful'])",
                "output": "'swaqrrlcg'"
            },
            {
                "input": "find_max(['lijjqy', 'rwqmew'])",
                "output": "'lijjqy'"
            },
            {
                "input": "find_max(['fhhnk', 'aaqhutjni'])",
                "output": "'aaqhutjni'"
            },
            {
                "input": "find_max(['hdruovosng', 'esspiz', 'ztc'])",
                "output": "'hdruovosng'"
            },
            {
                "input": "find_max(['wxhqf', 'jhpsj', 'amlkaehne', 'hke', 'jkktbvujm'])",
                "output": "'amlkaehne'"
            },
            {
                "input": "find_max(['shmvzae', 'qeflck', 'r', 'tnndxpmlf'])",
                "output": "'tnndxpmlf'"
            },
            {
                "input": "find_max(['cfoiof', 'vzjbcwv', 'qffzxxku'])",
                "output": "'qffzxxku'"
            },
            {
                "input": "find_max(['tsldb', 'gjcio', 'kvnnond', 'vzu', 'vzik'])",
                "output": "'gjcio'"
            },
            {
                "input": "find_max(['qok', 'somrrtogu', 'dakp'])",
                "output": "'somrrtogu'"
            },
            {
                "input": "find_max(['hqvdkpsi', 'fmsr', 't', 'ifopzrwcm'])",
                "output": "'ifopzrwcm'"
            },
            {
                "input": "find_max(['atijo', 'jiedpr', 'd', 'mpglwxazx'])",
                "output": "'mpglwxazx'"
            },
            {
                "input": "find_max(['xgms', 'bmrxvv', 'hdte'])",
                "output": "'bmrxvv'"
            },
            {
                "input": "find_max(['e'])",
                "output": "'e'"
            },
            {
                "input": "find_max(['pljzl', 'dythcav'])",
                "output": "'dythcav'"
            },
            {
                "input": "find_max(['agcme', 'eitvog', 'pvd', 'gady'])",
                "output": "'eitvog'"
            },
            {
                "input": "find_max(['jwcwigmna', 'ekww', 'irsuzq'])",
                "output": "'jwcwigmna'"
            },
            {
                "input": "find_max(['agva', 'dtoz', 'mlxgr', 'qcg'])",
                "output": "'mlxgr'"
            },
            {
                "input": "find_max(['doim', 'mywv', 'h', 'bsp', 'oxqiutxywfda'])",
                "output": "'oxqiutxywfda'"
            },
            {
                "input": "find_max(['k'])",
                "output": "'k'"
            },
            {
                "input": "find_max(['zeskya', 'evvd', 'azjfjahr', 'yxqjr', 'zjonzrxgphju'])",
                "output": "'zjonzrxgphju'"
            },
            {
                "input": "find_max(['iqia', 'kejd', 'och'])",
                "output": "'kejd'"
            },
            {
                "input": "find_max(['vabfs', 'vqk', 'cdl'])",
                "output": "'vabfs'"
            },
            {
                "input": "find_max(['exj', 'xpdcmkvsw', 'iwf'])",
                "output": "'xpdcmkvsw'"
            },
            {
                "input": "find_max(['jlrgosrn', 'mrbq', 's', 'cidcaga'])",
                "output": "'jlrgosrn'"
            },
            {
                "input": "find_max(['gixp', 'qvbokh', 'ormvgppue', 'arg'])",
                "output": "'ormvgppue'"
            },
            {
                "input": "find_max(['o'])",
                "output": "'o'"
            },
            {
                "input": "find_max(['nqqok', 'bet', 'sjx'])",
                "output": "'nqqok'"
            },
            {
                "input": "find_max(['kxn', 'nxm', 'f', 'cnowck', 'jmqqxtl'])",
                "output": "'jmqqxtl'"
            },
            {
                "input": "find_max(['hrgjujdqf', 'jnih', 'xhmkzl'])",
                "output": "'hrgjujdqf'"
            },
            {
                "input": "find_max(['jjp', 'wsyz'])",
                "output": "'wsyz'"
            },
            {
                "input": "find_max(['ngll', 'tyzfvsc', 'u', 'yqiqmswme', 'kxxyysm'])",
                "output": "'tyzfvsc'"
            },
            {
                "input": "find_max(['jmyvisjti', 'ssym', 'uzjqxeg'])",
                "output": "'jmyvisjti'"
            },
            {
                "input": "find_max(['chbndu', 'lughoi', 'pwblcar'])",
                "output": "'pwblcar'"
            },
            {
                "input": "find_max(['vqxy', 'yet', 'i', 'mtvoymnzx', 'fmwrbov'])",
                "output": "'mtvoymnzx'"
            },
            {
                "input": "find_max(['prsle', 'bxe', 'qqv', 'lyx', 'zhihdorqor'])",
                "output": "'zhihdorqor'"
            },
            {
                "input": "find_max(['grsjo', 'hedw', 'b', 'zuh', 'xhdxt'])",
                "output": "'grsjo'"
            },
            {
                "input": "find_max(['wzyych', 'wwmq', 'h', 'tcst'])",
                "output": "'wzyych'"
            },
            {
                "input": "find_max(['bkl', 'qny', 'wgit'])",
                "output": "'wgit'"
            },
            {
                "input": "find_max(['tagcc', 'wcwlgenfr', 'ljjgieud', 'vveiet'])",
                "output": "'wcwlgenfr'"
            },
            {
                "input": "find_max(['lzognlo', 'jinmd'])",
                "output": "'jinmd'"
            },
            {
                "input": "find_max(['fuperq', 'nvrgcl', 'iho'])",
                "output": "'fuperq'"
            },
            {
                "input": "find_max(['unkndf', 'lawny', 't', 'clb', 'feeyavjwcs'])",
                "output": "'feeyavjwcs'"
            },
            {
                "input": "find_max(['ddgazwvd', 'tmf', 'i', 'wpjua'])",
                "output": "'ddgazwvd'"
            },
            {
                "input": "find_max(['stjuaxoh', 'vjd', 'vhnm'])",
                "output": "'stjuaxoh'"
            },
            {
                "input": "find_max(['hqv', 'wweg', 'wgbua'])",
                "output": "'wgbua'"
            },
            {
                "input": "find_max(['hxzj', 'yudn'])",
                "output": "'hxzj'"
            },
            {
                "input": "find_max(['ezwzjo', 'utlogea', 'omuanig'])",
                "output": "'omuanig'"
            },
            {
                "input": "find_max(['ufzbuoz', 'dbaz', 'kopun'])",
                "output": "'kopun'"
            },
            {
                "input": "find_max(['ljyn', 'onwka', 'w', 'bimmc'])",
                "output": "'onwka'"
            },
            {
                "input": "find_max(['pzynm', 'awivkzkma', 'eomxzgl'])",
                "output": "'awivkzkma'"
            },
            {
                "input": "find_max(['aueuor', 'fmxkc', 'b', 'ciye', 'rlwasxtas'])",
                "output": "'rlwasxtas'"
            },
            {
                "input": "find_max(['lya', 'thducp', 'w', 'prcgphbs'])",
                "output": "'prcgphbs'"
            },
            {
                "input": "find_max(['wfpboof', 'yizi', 'swrj'])",
                "output": "'wfpboof'"
            },
            {
                "input": "find_max(['tegsx', 'ddg', 'acai'])",
                "output": "'tegsx'"
            },
            {
                "input": "find_max(['s'])",
                "output": "'s'"
            },
            {
                "input": "find_max(['qbhptf', 'ampkzd', 'jepbdkosv', 'zgtdft'])",
                "output": "'jepbdkosv'"
            },
            {
                "input": "find_max(['upes', 'kvdqns', 'sfpiaoww', 'jfewgsyzo'])",
                "output": "'jfewgsyzo'"
            },
            {
                "input": "find_max(['alwsufrg', 'zpa', 'hyvic'])",
                "output": "'alwsufrg'"
            },
            {
                "input": "find_max(['w'])",
                "output": "'w'"
            },
            {
                "input": "find_max(['lfspzmg', 'puaqq', 'kbmp', 'pvfy', 'mkvpcxj'])",
                "output": "'lfspzmg'"
            },
            {
                "input": "find_max(['pet', 'kmqoxbt', 'nuquyr', 'amgjxtzjy'])",
                "output": "'amgjxtzjy'"
            },
            {
                "input": "find_max(['uhmryc', 'bjvyicmj', 'jawmlrcn', 'vww', 'rntn'])",
                "output": "'jawmlrcn'"
            },
            {
                "input": "find_max(['krjkhpm', 'ubmvvw', 'xlsxoh'])",
                "output": "'krjkhpm'"
            },
            {
                "input": "find_max(['dskhghnb', 'mmhaa'])",
                "output": "'dskhghnb'"
            },
            {
                "input": "find_max(['uubvnz', 'pnj', 'zedmelziy'])",
                "output": "'zedmelziy'"
            },
            {
                "input": "find_max(['ecqhphdt', 'sjhu', 'w', 'iouhtz'])",
                "output": "'ecqhphdt'"
            },
            {
                "input": "find_max(['kvlbflrpx', 'dyculpfjz', 'tiotdbz'])",
                "output": "'dyculpfjz'"
            },
            {
                "input": "find_max(['hnmacvfj', 'ifibac', 'fttxfeevftc'])",
                "output": "'hnmacvfj'"
            },
            {
                "input": "find_max(['tyuzaf', 'tcnntubob', 'yjssws'])",
                "output": "'tcnntubob'"
            },
            {
                "input": "find_max(['prscjydsx', 'qqfg', 'rdbgt'])",
                "output": "'prscjydsx'"
            },
            {
                "input": "find_max(['l'])",
                "output": "'l'"
            },
            {
                "input": "find_max(['wwmewokey', 'zkjbxg', 'bmh', 'vjfrx', 'swojawequr'])",
                "output": "'swojawequr'"
            },
            {
                "input": "find_max(['iugyijgyt', 'yjxdcfi', 'mgmo', 'dwmazr', 'oxcqkzjcww'])",
                "output": "'oxcqkzjcww'"
            },
            {
                "input": "find_max(['wpxvgoxv', 'vbltiy', 'htwzhsablna'])",
                "output": "'htwzhsablna'"
            },
            {
                "input": "find_max(['flid', 'eqcx', 'puzsezkhz'])",
                "output": "'puzsezkhz'"
            },
            {
                "input": "find_max(['vhvzkhnkx', 'andas', 'brewb', 'vcqze', 'ytfsxjrjyd'])",
                "output": "'ytfsxjrjyd'"
            },
            {
                "input": "find_max(['bpp', 'pyf', 'kqnqisnok'])",
                "output": "'kqnqisnok'"
            },
            {
                "input": "find_max(['abddvgqkk', 'kqedcc', 'osa'])",
                "output": "'abddvgqkk'"
            },
            {
                "input": "find_max(['ysddpvcn', 'klvxhuet', 'xegww'])",
                "output": "'klvxhuet'"
            },
            {
                "input": "find_max(['xwz', 'hkww', 'dibbumenspuo'])",
                "output": "'dibbumenspuo'"
            },
            {
                "input": "find_max(['ttdf', 'caf', 'yahmbad'])",
                "output": "'yahmbad'"
            },
            {
                "input": "find_max(['xadczr', 'vizw', 'znkjpl', 'gac', 'hoew'])",
                "output": "'xadczr'"
            },
            {
                "input": "find_max(['cwcghsru', 'nzihzu', 'f', 'luzyj'])",
                "output": "'cwcghsru'"
            },
            {
                "input": "find_max(['nghmnegzm', 'qjtd'])",
                "output": "'nghmnegzm'"
            },
            {
                "input": "find_max(['dbxsfams', 'mkwrsdpxf', 'mzu'])",
                "output": "'mkwrsdpxf'"
            },
            {
                "input": "find_max(['fnz', 'fpzovx', 'a', 'zuaz', 'arzlzo'])",
                "output": "'fpzovx'"
            },
            {
                "input": "find_max(['hknt', 'svavejfe', 'y', 'hhyfarttj', 'ddwufuzq'])",
                "output": "'hhyfarttj'"
            },
            {
                "input": "find_max(['uxxaq', 'ngsr', 'eawspmuzb', 'xazcphs'])",
                "output": "'eawspmuzb'"
            },
            {
                "input": "find_max(['cby', 'uellzcfz', 'qsxyplgl', 'mdn'])",
                "output": "'qsxyplgl'"
            },
            {
                "input": "find_max(['cod', 'xdxyu'])",
                "output": "'xdxyu'"
            },
            {
                "input": "find_max(['nquk', 'dmucv', 'jlw', 'ytvtnusv'])",
                "output": "'ytvtnusv'"
            },
            {
                "input": "find_max(['shnmd', 'jukow', 'hcwu', 'xcm', 'gti'])",
                "output": "'jukow'"
            },
            {
                "input": "find_max(['ims', 'obb', 'eytgbk'])",
                "output": "'eytgbk'"
            },
            {
                "input": "find_max(['g'])",
                "output": "'g'"
            },
            {
                "input": "find_max(['twtilt', 'cre', 'g', 'mbbwmpdm'])",
                "output": "'mbbwmpdm'"
            },
            {
                "input": "find_max(['qqygli', 'ualw', 'avnhbvyf', 'kjizcn', 'ybdkgdlrxlf'])",
                "output": "'ybdkgdlrxlf'"
            },
            {
                "input": "find_max(['dvjmsd', 'vaj', 'lyom', 'gmuiw', 'easxkrjddr'])",
                "output": "'easxkrjddr'"
            },
            {
                "input": "find_max(['jdzgkxhr', 'cen', 'mlklue'])",
                "output": "'jdzgkxhr'"
            },
            {
                "input": "find_max(['ntffz', 'wjjpao', 'uljddczgx'])",
                "output": "'uljddczgx'"
            },
            {
                "input": "find_max(['iuairmyk', 'ocv', 'cbtwodz'])",
                "output": "'cbtwodz'"
            },
            {
                "input": "find_max(['t'])",
                "output": "'t'"
            },
            {
                "input": "find_max(['apgpgvy', 'bnpgp', 'ijpf'])",
                "output": "'apgpgvy'"
            },
            {
                "input": "find_max(['pztyt', 'fwethq', 'y', 'tmmlhlqjf'])",
                "output": "'tmmlhlqjf'"
            },
            {
                "input": "find_max(['eyjy', 'eautt', 'crehuz'])",
                "output": "'crehuz'"
            },
            {
                "input": "find_max(['rha', 'asn', 'tship', 'ess'])",
                "output": "'tship'"
            },
            {
                "input": "find_max(['rwwrcef', 'qebufez', 'cfmn'])",
                "output": "'qebufez'"
            },
            {
                "input": "find_max(['wjgtpe', 'dacsvcks', 'rtpik'])",
                "output": "'dacsvcks'"
            },
            {
                "input": "find_max(['h'])",
                "output": "'h'"
            },
            {
                "input": "find_max(['svrgwe', 'pclxe', 'o', 'bubmvpvny', 'kfjzzyyn'])",
                "output": "'bubmvpvny'"
            },
            {
                "input": "find_max(['mkolxv', 'pufd', 'o', 'nhc', 'jqphqdjtxfje'])",
                "output": "'jqphqdjtxfje'"
            },
            {
                "input": "find_max(['rls', 'bfbsyy', 'mibyf'])",
                "output": "'mibyf'"
            },
            {
                "input": "find_max(['cajfyrft', 'fpuq'])",
                "output": "'cajfyrft'"
            },
            {
                "input": "find_max(['hoxb', 'wlhqvdsa'])",
                "output": "'wlhqvdsa'"
            },
            {
                "input": "find_max(['kmv', 'xrcodpr', 'wchmmzp'])",
                "output": "'wchmmzp'"
            },
            {
                "input": "find_max(['qheozz', 'amx', 'uoddm', 'jsuisd'])",
                "output": "'jsuisd'"
            },
            {
                "input": "find_max(['bflb', 'skdyz'])",
                "output": "'skdyz'"
            },
            {
                "input": "find_max(['sye', 'sizxd', 'qfumheq'])",
                "output": "'qfumheq'"
            },
            {
                "input": "find_max(['htwmc', 'bzx', 'b', 'zeg', 'qfyz'])",
                "output": "'htwmc'"
            },
            {
                "input": "find_max(['gmnyxopyi', 'fuqnnv', 'dvbc'])",
                "output": "'gmnyxopyi'"
            },
            {
                "input": "find_max(['zspzvw', 'oklgrvr', 'bixsdp'])",
                "output": "'bixsdp'"
            },
            {
                "input": "find_max(['b'])",
                "output": "'b'"
            }
        ]
    },
    {
        "problem_description": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n",
        "ground truth": "def eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
        "instances": [
            {
                "input": "eat(8, 1, 9)",
                "output": "[9, 8]"
            },
            {
                "input": "eat(7, 7, 9)",
                "output": "[14, 2]"
            },
            {
                "input": "eat(6, 7, 5)",
                "output": "[11, 0]"
            },
            {
                "input": "eat(1, 4, 2)",
                "output": "[3, 0]"
            },
            {
                "input": "eat(6, 7, 15)",
                "output": "[13, 8]"
            },
            {
                "input": "eat(4, 10, 8)",
                "output": "[12, 0]"
            },
            {
                "input": "eat(5, 3, 3)",
                "output": "[8, 0]"
            },
            {
                "input": "eat(7, 6, 11)",
                "output": "[13, 5]"
            },
            {
                "input": "eat(4, 12, 6)",
                "output": "[10, 0]"
            },
            {
                "input": "eat(8, 3, 6)",
                "output": "[11, 3]"
            },
            {
                "input": "eat(3, 6, 7)",
                "output": "[9, 1]"
            },
            {
                "input": "eat(2, 3, 9)",
                "output": "[5, 6]"
            },
            {
                "input": "eat(7, 10, 3)",
                "output": "[10, 0]"
            },
            {
                "input": "eat(7, 10, 7)",
                "output": "[14, 0]"
            },
            {
                "input": "eat(6, 11, 11)",
                "output": "[17, 0]"
            },
            {
                "input": "eat(8, 4, 1)",
                "output": "[9, 0]"
            },
            {
                "input": "eat(5, 7, 6)",
                "output": "[11, 0]"
            },
            {
                "input": "eat(6, 5, 12)",
                "output": "[11, 7]"
            },
            {
                "input": "eat(6, 12, 12)",
                "output": "[18, 0]"
            },
            {
                "input": "eat(5, 3, 2)",
                "output": "[7, 0]"
            },
            {
                "input": "eat(8, 9, 5)",
                "output": "[13, 0]"
            },
            {
                "input": "eat(4, 3, 5)",
                "output": "[7, 2]"
            },
            {
                "input": "eat(3, 7, 8)",
                "output": "[10, 1]"
            },
            {
                "input": "eat(1, 9, 12)",
                "output": "[10, 3]"
            },
            {
                "input": "eat(9, 1, 6)",
                "output": "[10, 5]"
            },
            {
                "input": "eat(5, 6, 5)",
                "output": "[10, 0]"
            },
            {
                "input": "eat(4, 11, 9)",
                "output": "[13, 0]"
            },
            {
                "input": "eat(8, 1, 12)",
                "output": "[9, 11]"
            },
            {
                "input": "eat(7, 2, 6)",
                "output": "[9, 4]"
            },
            {
                "input": "eat(5, 12, 6)",
                "output": "[11, 0]"
            },
            {
                "input": "eat(10, 6, 7)",
                "output": "[16, 1]"
            },
            {
                "input": "eat(7, 12, 14)",
                "output": "[19, 2]"
            },
            {
                "input": "eat(1, 3, 7)",
                "output": "[4, 4]"
            },
            {
                "input": "eat(5, 8, 9)",
                "output": "[13, 1]"
            },
            {
                "input": "eat(4, 14, 13)",
                "output": "[17, 0]"
            },
            {
                "input": "eat(7, 6, 14)",
                "output": "[13, 8]"
            },
            {
                "input": "eat(1, 9, 2)",
                "output": "[3, 0]"
            },
            {
                "input": "eat(3, 11, 9)",
                "output": "[12, 0]"
            },
            {
                "input": "eat(1, 6, 5)",
                "output": "[6, 0]"
            },
            {
                "input": "eat(7, 3, 14)",
                "output": "[10, 11]"
            },
            {
                "input": "eat(8, 2, 12)",
                "output": "[10, 10]"
            },
            {
                "input": "eat(4, 6, 6)",
                "output": "[10, 0]"
            },
            {
                "input": "eat(9, 4, 10)",
                "output": "[13, 6]"
            },
            {
                "input": "eat(1, 13, 7)",
                "output": "[8, 0]"
            },
            {
                "input": "eat(4, 7, 3)",
                "output": "[7, 0]"
            },
            {
                "input": "eat(1, 4, 6)",
                "output": "[5, 2]"
            },
            {
                "input": "eat(4, 3, 6)",
                "output": "[7, 3]"
            },
            {
                "input": "eat(3, 12, 5)",
                "output": "[8, 0]"
            },
            {
                "input": "eat(6, 7, 6)",
                "output": "[12, 0]"
            },
            {
                "input": "eat(2, 13, 3)",
                "output": "[5, 0]"
            },
            {
                "input": "eat(7, 7, 12)",
                "output": "[14, 5]"
            },
            {
                "input": "eat(1, 16, 6)",
                "output": "[7, 0]"
            },
            {
                "input": "eat(6, 9, 6)",
                "output": "[12, 0]"
            },
            {
                "input": "eat(3, 9, 2)",
                "output": "[5, 0]"
            },
            {
                "input": "eat(6, 6, 3)",
                "output": "[9, 0]"
            },
            {
                "input": "eat(4, 13, 10)",
                "output": "[14, 0]"
            },
            {
                "input": "eat(3, 13, 4)",
                "output": "[7, 0]"
            },
            {
                "input": "eat(5, 10, 12)",
                "output": "[15, 2]"
            },
            {
                "input": "eat(5, 5, 3)",
                "output": "[8, 0]"
            },
            {
                "input": "eat(5, 10, 5)",
                "output": "[10, 0]"
            },
            {
                "input": "eat(3, 9, 5)",
                "output": "[8, 0]"
            },
            {
                "input": "eat(9, 8, 8)",
                "output": "[17, 0]"
            },
            {
                "input": "eat(3, 8, 6)",
                "output": "[9, 0]"
            },
            {
                "input": "eat(4, 9, 9)",
                "output": "[13, 0]"
            },
            {
                "input": "eat(9, 6, 3)",
                "output": "[12, 0]"
            },
            {
                "input": "eat(8, 13, 9)",
                "output": "[17, 0]"
            },
            {
                "input": "eat(2, 2, 10)",
                "output": "[4, 8]"
            },
            {
                "input": "eat(6, 9, 9)",
                "output": "[15, 0]"
            },
            {
                "input": "eat(9, 6, 9)",
                "output": "[15, 3]"
            },
            {
                "input": "eat(2, 8, 6)",
                "output": "[8, 0]"
            },
            {
                "input": "eat(1, 7, 7)",
                "output": "[8, 0]"
            },
            {
                "input": "eat(1, 15, 8)",
                "output": "[9, 0]"
            },
            {
                "input": "eat(1, 9, 6)",
                "output": "[7, 0]"
            },
            {
                "input": "eat(2, 11, 9)",
                "output": "[11, 0]"
            },
            {
                "input": "eat(6, 10, 14)",
                "output": "[16, 4]"
            },
            {
                "input": "eat(3, 9, 12)",
                "output": "[12, 3]"
            },
            {
                "input": "eat(1, 3, 11)",
                "output": "[4, 8]"
            },
            {
                "input": "eat(3, 2, 6)",
                "output": "[5, 4]"
            },
            {
                "input": "eat(6, 14, 10)",
                "output": "[16, 0]"
            },
            {
                "input": "eat(6, 9, 14)",
                "output": "[15, 5]"
            },
            {
                "input": "eat(5, 9, 11)",
                "output": "[14, 2]"
            },
            {
                "input": "eat(4, 8, 10)",
                "output": "[12, 2]"
            },
            {
                "input": "eat(5, 11, 12)",
                "output": "[16, 1]"
            },
            {
                "input": "eat(2, 10, 14)",
                "output": "[12, 4]"
            },
            {
                "input": "eat(2, 4, 6)",
                "output": "[6, 2]"
            },
            {
                "input": "eat(6, 4, 9)",
                "output": "[10, 5]"
            },
            {
                "input": "eat(8, 12, 13)",
                "output": "[20, 1]"
            },
            {
                "input": "eat(4, 11, 14)",
                "output": "[15, 3]"
            },
            {
                "input": "eat(8, 5, 7)",
                "output": "[13, 2]"
            },
            {
                "input": "eat(3, 6, 8)",
                "output": "[9, 2]"
            },
            {
                "input": "eat(2, 16, 9)",
                "output": "[11, 0]"
            },
            {
                "input": "eat(3, 9, 7)",
                "output": "[10, 0]"
            },
            {
                "input": "eat(2, 5, 11)",
                "output": "[7, 6]"
            },
            {
                "input": "eat(8, 6, 13)",
                "output": "[14, 7]"
            },
            {
                "input": "eat(2, 2, 2)",
                "output": "[4, 0]"
            },
            {
                "input": "eat(9, 11, 10)",
                "output": "[19, 0]"
            },
            {
                "input": "eat(4, 4, 13)",
                "output": "[8, 9]"
            },
            {
                "input": "eat(5, 12, 10)",
                "output": "[15, 0]"
            },
            {
                "input": "eat(1, 4, 13)",
                "output": "[5, 9]"
            },
            {
                "input": "eat(5, 6, 2)",
                "output": "[7, 0]"
            },
            {
                "input": "eat(4, 5, 11)",
                "output": "[9, 6]"
            },
            {
                "input": "eat(4, 8, 8)",
                "output": "[12, 0]"
            },
            {
                "input": "eat(3, 16, 6)",
                "output": "[9, 0]"
            },
            {
                "input": "eat(1, 1, 10)",
                "output": "[2, 9]"
            },
            {
                "input": "eat(1, 14, 1)",
                "output": "[2, 0]"
            },
            {
                "input": "eat(3, 8, 14)",
                "output": "[11, 6]"
            },
            {
                "input": "eat(2, 8, 11)",
                "output": "[10, 3]"
            },
            {
                "input": "eat(1, 6, 4)",
                "output": "[5, 0]"
            },
            {
                "input": "eat(6, 6, 14)",
                "output": "[12, 8]"
            },
            {
                "input": "eat(5, 5, 11)",
                "output": "[10, 6]"
            },
            {
                "input": "eat(7, 4, 9)",
                "output": "[11, 5]"
            },
            {
                "input": "eat(2, 3, 13)",
                "output": "[5, 10]"
            },
            {
                "input": "eat(7, 16, 7)",
                "output": "[14, 0]"
            },
            {
                "input": "eat(3, 3, 13)",
                "output": "[6, 10]"
            },
            {
                "input": "eat(7, 15, 3)",
                "output": "[10, 0]"
            },
            {
                "input": "eat(10, 9, 12)",
                "output": "[19, 3]"
            },
            {
                "input": "eat(5, 10, 8)",
                "output": "[13, 0]"
            }
        ]
    },
    {
        "problem_description": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n",
        "ground truth": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
        "instances": [
            {
                "input": "do_algebra(['*', '//', '//'], [5, 2, 7, 9])",
                "output": "0"
            },
            {
                "input": "do_algebra(['**', '*', '-'], [7, 6, 4, 6])",
                "output": "470590"
            },
            {
                "input": "do_algebra(['//', '//', '**'], [7, 1, 9, 1])",
                "output": "0"
            },
            {
                "input": "do_algebra(['*', '+', '//'], [4, 6, 7, 10])",
                "output": "24"
            },
            {
                "input": "do_algebra(['*', '-', '//'], [4, 4, 2, 6])",
                "output": "16"
            },
            {
                "input": "do_algebra(['*', '+', '+'], [3, 2, 6, 5])",
                "output": "17"
            },
            {
                "input": "do_algebra(['+', '*'], [7, 3, 6])",
                "output": "25"
            },
            {
                "input": "do_algebra(['+', '**', '-'], [5, 2, 5, 9])",
                "output": "28"
            },
            {
                "input": "do_algebra(['+', '**'], [3, 2, 4])",
                "output": "19"
            },
            {
                "input": "do_algebra(['-', '//'], [7, 3, 2])",
                "output": "6"
            },
            {
                "input": "do_algebra(['+', '**', '+'], [4, 2, 7, 1])",
                "output": "133"
            },
            {
                "input": "do_algebra(['**', '//'], [12, 1, 6])",
                "output": "2"
            },
            {
                "input": "do_algebra(['-', '**'], [6, 2, 2])",
                "output": "2"
            },
            {
                "input": "do_algebra(['+', '-'], [3, 7, 6])",
                "output": "4"
            },
            {
                "input": "do_algebra(['-', '**'], [8, 2, 7])",
                "output": "-120"
            },
            {
                "input": "do_algebra(['*', '//', '//'], [7, 7, 6, 6])",
                "output": "1"
            },
            {
                "input": "do_algebra(['*', '-', '**'], [5, 5, 2, 8])",
                "output": "-231"
            },
            {
                "input": "do_algebra(['//', '-', '*'], [4, 3, 3, 1])",
                "output": "-2"
            },
            {
                "input": "do_algebra(['+', '//'], [3, 6, 4])",
                "output": "4"
            },
            {
                "input": "do_algebra(['-', '+', '**'], [5, 3, 5, 6])",
                "output": "15627"
            },
            {
                "input": "do_algebra(['+', '**', '+'], [6, 6, 4, 7])",
                "output": "1309"
            },
            {
                "input": "do_algebra(['+', '**', '*'], [6, 2, 1, 1])",
                "output": "8"
            },
            {
                "input": "do_algebra(['**', '-', '//'], [7, 8, 1, 10])",
                "output": "5764801"
            },
            {
                "input": "do_algebra(['**', '-', '*'], [6, 4, 5, 1])",
                "output": "1291"
            },
            {
                "input": "do_algebra(['**', '-', '//'], [6, 1, 6, 7])",
                "output": "6"
            },
            {
                "input": "do_algebra(['+', '//', '+'], [5, 8, 2, 1])",
                "output": "10"
            },
            {
                "input": "do_algebra(['//', '*', '+'], [3, 5, 2, 3])",
                "output": "3"
            },
            {
                "input": "do_algebra(['**', '-', '-'], [7, 1, 4, 9])",
                "output": "-6"
            },
            {
                "input": "do_algebra(['**', '//'], [9, 5, 2])",
                "output": "29524"
            },
            {
                "input": "do_algebra(['**', '*'], [8, 2, 2])",
                "output": "128"
            },
            {
                "input": "do_algebra(['-', '+', '-'], [3, 5, 9, 7])",
                "output": "0"
            },
            {
                "input": "do_algebra(['**', '*', '*'], [7, 2, 4, 7])",
                "output": "1372"
            },
            {
                "input": "do_algebra(['**', '+', '*'], [1, 5, 5, 1])",
                "output": "6"
            },
            {
                "input": "do_algebra(['-', '+'], [8, 4, 3])",
                "output": "7"
            },
            {
                "input": "do_algebra(['**', '*'], [10, 2, 8])",
                "output": "800"
            },
            {
                "input": "do_algebra(['-', '**', '-'], [4, 5, 5, 9])",
                "output": "-3130"
            },
            {
                "input": "do_algebra(['*', '*', '-'], [7, 8, 1, 9])",
                "output": "47"
            },
            {
                "input": "do_algebra(['-', '**', '*'], [5, 2, 7, 8])",
                "output": "-1019"
            },
            {
                "input": "do_algebra(['-', '//'], [5, 3, 8])",
                "output": "5"
            },
            {
                "input": "do_algebra(['**', '//', '//'], [1, 7, 6, 2])",
                "output": "0"
            },
            {
                "input": "do_algebra(['-', '**'], [3, 5, 2])",
                "output": "-22"
            },
            {
                "input": "do_algebra(['//', '*', '**'], [7, 6, 2, 1])",
                "output": "2"
            },
            {
                "input": "do_algebra(['**', '-'], [3, 2, 9])",
                "output": "0"
            },
            {
                "input": "do_algebra(['**', '//'], [9, 5, 9])",
                "output": "6561"
            },
            {
                "input": "do_algebra(['//', '-'], [6, 1, 2])",
                "output": "4"
            },
            {
                "input": "do_algebra(['+', '*', '-'], [2, 3, 4, 5])",
                "output": "9"
            },
            {
                "input": "do_algebra(['*', '*', '+'], [1, 3, 2, 9])",
                "output": "15"
            },
            {
                "input": "do_algebra(['**', '-', '*'], [5, 1, 2, 3])",
                "output": "-1"
            },
            {
                "input": "do_algebra(['//', '*'], [7, 3, 4])",
                "output": "8"
            },
            {
                "input": "do_algebra(['*', '+', '-'], [2, 2, 9, 6])",
                "output": "7"
            },
            {
                "input": "do_algebra(['*', '-', '**'], [2, 7, 7, 1])",
                "output": "7"
            },
            {
                "input": "do_algebra(['+', '*', '//'], [6, 5, 1, 3])",
                "output": "7"
            },
            {
                "input": "do_algebra(['*', '+'], [2, 5, 7])",
                "output": "17"
            },
            {
                "input": "do_algebra(['**', '+', '-'], [1, 5, 1, 1])",
                "output": "1"
            },
            {
                "input": "do_algebra(['**', '+'], [8, 2, 7])",
                "output": "71"
            },
            {
                "input": "do_algebra(['*', '*', '-'], [2, 1, 8, 4])",
                "output": "12"
            },
            {
                "input": "do_algebra(['**', '-', '+'], [2, 1, 7, 9])",
                "output": "4"
            },
            {
                "input": "do_algebra(['//', '//', '+'], [1, 2, 8, 10])",
                "output": "10"
            },
            {
                "input": "do_algebra(['*', '+'], [4, 8, 4])",
                "output": "36"
            },
            {
                "input": "do_algebra(['*', '-'], [6, 5, 7])",
                "output": "23"
            },
            {
                "input": "do_algebra(['//', '//', '*'], [2, 1, 7, 6])",
                "output": "0"
            },
            {
                "input": "do_algebra(['*', '+', '**'], [5, 5, 2, 9])",
                "output": "537"
            },
            {
                "input": "do_algebra(['+', '//', '*'], [7, 3, 7, 1])",
                "output": "7"
            },
            {
                "input": "do_algebra(['+', '-', '*'], [6, 8, 6, 1])",
                "output": "8"
            },
            {
                "input": "do_algebra(['+', '**'], [7, 6, 6])",
                "output": "46663"
            },
            {
                "input": "do_algebra(['//', '+', '//'], [5, 1, 9, 4])",
                "output": "7"
            },
            {
                "input": "do_algebra(['//', '**', '+'], [3, 7, 9, 3])",
                "output": "3"
            },
            {
                "input": "do_algebra(['**', '*'], [2, 3, 1])",
                "output": "8"
            },
            {
                "input": "do_algebra(['-', '**', '-'], [7, 4, 1, 8])",
                "output": "-5"
            },
            {
                "input": "do_algebra(['*', '//', '-'], [7, 1, 5, 10])",
                "output": "-9"
            },
            {
                "input": "do_algebra(['*', '**'], [3, 2, 8])",
                "output": "768"
            },
            {
                "input": "do_algebra(['-', '//', '-'], [6, 8, 1, 10])",
                "output": "-12"
            },
            {
                "input": "do_algebra(['-', '+'], [3, 4, 4])",
                "output": "3"
            },
            {
                "input": "do_algebra(['//', '//', '+'], [5, 2, 8, 2])",
                "output": "2"
            },
            {
                "input": "do_algebra(['*', '*', '-'], [3, 4, 1, 4])",
                "output": "8"
            },
            {
                "input": "do_algebra(['//', '-', '**'], [4, 8, 2, 2])",
                "output": "-4"
            },
            {
                "input": "do_algebra(['-', '*', '-'], [1, 1, 2, 3])",
                "output": "-4"
            },
            {
                "input": "do_algebra(['//', '**'], [4, 4, 4])",
                "output": "0"
            },
            {
                "input": "do_algebra(['-', '*', '-'], [2, 7, 3, 9])",
                "output": "-28"
            },
            {
                "input": "do_algebra(['//', '//', '+'], [2, 5, 8, 8])",
                "output": "8"
            },
            {
                "input": "do_algebra(['*', '-', '+'], [6, 7, 4, 4])",
                "output": "42"
            },
            {
                "input": "do_algebra(['**', '*', '+'], [2, 3, 4, 5])",
                "output": "37"
            },
            {
                "input": "do_algebra(['*', '+'], [9, 3, 8])",
                "output": "35"
            },
            {
                "input": "do_algebra(['**', '//', '//'], [1, 7, 4, 8])",
                "output": "0"
            },
            {
                "input": "do_algebra(['-', '//', '**'], [4, 5, 8, 3])",
                "output": "4"
            },
            {
                "input": "do_algebra(['//', '+', '*'], [2, 6, 4, 4])",
                "output": "16"
            },
            {
                "input": "do_algebra(['**', '-', '-'], [1, 7, 7, 10])",
                "output": "-16"
            },
            {
                "input": "do_algebra(['-', '**', '//'], [1, 8, 3, 3])",
                "output": "-169"
            },
            {
                "input": "do_algebra(['+', '**', '-'], [1, 1, 9, 4])",
                "output": "-2"
            },
            {
                "input": "do_algebra(['*', '//', '+'], [7, 1, 8, 9])",
                "output": "9"
            },
            {
                "input": "do_algebra(['-', '+', '**'], [5, 4, 2, 3])",
                "output": "9"
            },
            {
                "input": "do_algebra(['+', '**'], [7, 3, 5])",
                "output": "250"
            },
            {
                "input": "do_algebra(['**', '+', '-'], [3, 8, 1, 2])",
                "output": "6560"
            },
            {
                "input": "do_algebra(['**', '//', '-'], [5, 6, 6, 1])",
                "output": "2603"
            },
            {
                "input": "do_algebra(['-', '+', '+'], [1, 1, 9, 9])",
                "output": "18"
            },
            {
                "input": "do_algebra(['//', '//', '*'], [4, 8, 9, 6])",
                "output": "0"
            },
            {
                "input": "do_algebra(['-', '*'], [3, 3, 6])",
                "output": "-15"
            },
            {
                "input": "do_algebra(['//', '*'], [8, 4, 2])",
                "output": "4"
            },
            {
                "input": "do_algebra(['+', '*', '**'], [6, 8, 1, 2])",
                "output": "14"
            },
            {
                "input": "do_algebra(['-', '+', '*'], [5, 5, 4, 8])",
                "output": "32"
            },
            {
                "input": "do_algebra(['*', '*'], [5, 2, 7])",
                "output": "70"
            },
            {
                "input": "do_algebra(['+', '-'], [10, 3, 8])",
                "output": "5"
            },
            {
                "input": "do_algebra(['-', '**'], [3, 3, 4])",
                "output": "-78"
            },
            {
                "input": "do_algebra(['**', '//'], [7, 8, 8])",
                "output": "720600"
            },
            {
                "input": "do_algebra(['*', '**'], [7, 3, 3])",
                "output": "189"
            },
            {
                "input": "do_algebra(['-', '*', '*'], [7, 4, 7, 8])",
                "output": "-217"
            },
            {
                "input": "do_algebra(['*', '**', '+'], [7, 1, 5, 1])",
                "output": "8"
            },
            {
                "input": "do_algebra(['+', '-', '**'], [6, 8, 4, 10])",
                "output": "-1048562"
            },
            {
                "input": "do_algebra(['//', '-', '*'], [5, 4, 7, 1])",
                "output": "-6"
            },
            {
                "input": "do_algebra(['**', '+'], [8, 4, 1])",
                "output": "4097"
            },
            {
                "input": "do_algebra(['-', '+'], [10, 7, 1])",
                "output": "4"
            },
            {
                "input": "do_algebra(['+', '+', '+'], [1, 4, 9, 9])",
                "output": "23"
            },
            {
                "input": "do_algebra(['//', '-', '-'], [3, 3, 3, 6])",
                "output": "-8"
            },
            {
                "input": "do_algebra(['**', '//', '+'], [5, 8, 3, 3])",
                "output": "130211"
            },
            {
                "input": "do_algebra(['+', '-', '//'], [5, 4, 6, 2])",
                "output": "6"
            },
            {
                "input": "do_algebra(['//', '**', '-'], [3, 7, 7, 1])",
                "output": "-1"
            },
            {
                "input": "do_algebra(['//', '+', '**'], [7, 1, 5, 1])",
                "output": "12"
            },
            {
                "input": "do_algebra(['+', '+'], [4, 4, 1])",
                "output": "9"
            },
            {
                "input": "do_algebra(['+', '//', '*'], [5, 4, 8, 10])",
                "output": "5"
            },
            {
                "input": "do_algebra(['**', '+'], [10, 3, 5])",
                "output": "1005"
            },
            {
                "input": "do_algebra(['//', '//'], [8, 8, 7])",
                "output": "0"
            },
            {
                "input": "do_algebra(['-', '+', '**'], [1, 4, 2, 7])",
                "output": "125"
            },
            {
                "input": "do_algebra(['*', '**'], [5, 1, 6])",
                "output": "5"
            },
            {
                "input": "do_algebra(['*', '//', '*'], [7, 3, 1, 10])",
                "output": "210"
            },
            {
                "input": "do_algebra(['*', '+', '+'], [6, 3, 5, 5])",
                "output": "28"
            },
            {
                "input": "do_algebra(['//', '**', '-'], [7, 2, 9, 3])",
                "output": "-3"
            },
            {
                "input": "do_algebra(['//', '//'], [2, 7, 1])",
                "output": "0"
            },
            {
                "input": "do_algebra(['//', '-', '*'], [7, 2, 7, 5])",
                "output": "-32"
            },
            {
                "input": "do_algebra(['**', '*', '+'], [5, 2, 1, 9])",
                "output": "34"
            }
        ]
    },
    {
        "problem_description": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
        "ground truth": "def solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "instances": [
            {
                "input": "solve(\"jZVuQ\")",
                "output": "'JzvUq'"
            },
            {
                "input": "solve(\"w@l+zd\")",
                "output": "'W@L+ZD'"
            },
            {
                "input": "solve(\"6971168\")",
                "output": "'8611796'"
            },
            {
                "input": "solve(\"bkd\")",
                "output": "'BKD'"
            },
            {
                "input": "solve(\"2058786\")",
                "output": "'6878502'"
            },
            {
                "input": "solve(\"~@8%\")",
                "output": "'%8@~'"
            },
            {
                "input": "solve(\"+:#\")",
                "output": "'#:+'"
            },
            {
                "input": "solve(\"??rwE\")",
                "output": "'??RWe'"
            },
            {
                "input": "solve(\"HMYxK\")",
                "output": "'hmyXk'"
            },
            {
                "input": "solve(\"wSdcA\")",
                "output": "'WsDCa'"
            },
            {
                "input": "solve(\"^dHUM-y\")",
                "output": "'^Dhum-Y'"
            },
            {
                "input": "solve(\"Pj+3w:31N!s6\")",
                "output": "'pJ+3W:31n!S6'"
            },
            {
                "input": "solve(\"55=9/9\")",
                "output": "'9/9=55'"
            },
            {
                "input": "solve(\"yErHfPuhE\")",
                "output": "'YeRhFpUHe'"
            },
            {
                "input": "solve(\"prytYOIw\")",
                "output": "'PRYTyoiW'"
            },
            {
                "input": "solve(\"!tmFhu\")",
                "output": "'!TMfHU'"
            },
            {
                "input": "solve(\"kLA#y:NC\")",
                "output": "'Kla#Y:nc'"
            },
            {
                "input": "solve(\"?UGciW\")",
                "output": "'?ugCIw'"
            },
            {
                "input": "solve(\"MUSKIE\")",
                "output": "'muskie'"
            },
            {
                "input": "solve(\"$883%3/\")",
                "output": "'/3%388$'"
            },
            {
                "input": "solve(\"qyAKc\")",
                "output": "'QYakC'"
            },
            {
                "input": "solve(\"48954\")",
                "output": "'45984'"
            },
            {
                "input": "solve(\"i!X&/T\")",
                "output": "'I!x&/t'"
            },
            {
                "input": "solve(\"mOn\")",
                "output": "'MoN'"
            },
            {
                "input": "solve(\"BjdhsNs\")",
                "output": "'bJDHSnS'"
            },
            {
                "input": "solve(\"huo^\")",
                "output": "'HUO^'"
            },
            {
                "input": "solve(\"n$tkw\")",
                "output": "'N$TKW'"
            },
            {
                "input": "solve(\"k&!_\")",
                "output": "'K&!_'"
            },
            {
                "input": "solve(\"vr_d$kBQ\")",
                "output": "'VR_D$Kbq'"
            },
            {
                "input": "solve(\"jlycko\")",
                "output": "'JLYCKO'"
            },
            {
                "input": "solve(\"pstVx\")",
                "output": "'PSTvX'"
            },
            {
                "input": "solve(\"827_~+=6:\")",
                "output": "':6=+~_728'"
            },
            {
                "input": "solve(\"ifafP-OoTK%\")",
                "output": "'IFAFp-oOtk%'"
            },
            {
                "input": "solve(\"gsl\")",
                "output": "'GSL'"
            },
            {
                "input": "solve(\"*^JOyeSI\")",
                "output": "'*^joYEsi'"
            },
            {
                "input": "solve(\"*u~\")",
                "output": "'*U~'"
            },
            {
                "input": "solve(\"389627754\")",
                "output": "'457726983'"
            },
            {
                "input": "solve(\"856\")",
                "output": "'658'"
            },
            {
                "input": "solve(\"oGzZO!NOb@Lty\")",
                "output": "'OgZzo!noB@lTY'"
            },
            {
                "input": "solve(\"~2~@0\")",
                "output": "'0@~2~'"
            },
            {
                "input": "solve(\"VmVDPkI\")",
                "output": "'vMvdpKi'"
            },
            {
                "input": "solve(\"ji$rpiwCJ\")",
                "output": "'JI$RPIWcj'"
            },
            {
                "input": "solve(\"UMm:m\")",
                "output": "'umM:M'"
            },
            {
                "input": "solve(\"gtvtsr\")",
                "output": "'GTVTSR'"
            },
            {
                "input": "solve(\"luG9*?%\")",
                "output": "'LUg9*?%'"
            },
            {
                "input": "solve(\"g*chm\")",
                "output": "'G*CHM'"
            },
            {
                "input": "solve(\"49623838\")",
                "output": "'83832694'"
            },
            {
                "input": "solve(\"5$0!@\")",
                "output": "'@!0$5'"
            },
            {
                "input": "solve(\"ePOjFeuu\")",
                "output": "'EpoJfEUU'"
            },
            {
                "input": "solve(\"Xug\")",
                "output": "'xUG'"
            },
            {
                "input": "solve(\"~+/#\")",
                "output": "'#/+~'"
            },
            {
                "input": "solve(\"232948\")",
                "output": "'849232'"
            },
            {
                "input": "solve(\"/@-\")",
                "output": "'-@/'"
            },
            {
                "input": "solve(\"wDgT\")",
                "output": "'WdGt'"
            },
            {
                "input": "solve(\"j$&Wd\")",
                "output": "'J$&wD'"
            },
            {
                "input": "solve(\"qon\")",
                "output": "'QON'"
            },
            {
                "input": "solve(\"~~%==41\")",
                "output": "'14==%~~'"
            },
            {
                "input": "solve(\"$u%lZTsz\")",
                "output": "'$U%LztSZ'"
            },
            {
                "input": "solve(\"GPJae+?*a\")",
                "output": "'gpjAE+?*A'"
            },
            {
                "input": "solve(\"glgh\")",
                "output": "'GLGH'"
            },
            {
                "input": "solve(\"|n*e~bx-\")",
                "output": "'|N*E~BX-'"
            },
            {
                "input": "solve(\"=E!NyLi\")",
                "output": "'=e!nYlI'"
            },
            {
                "input": "solve(\"sxFaMa\")",
                "output": "'SXfAmA'"
            },
            {
                "input": "solve(\"761~^_%~4\")",
                "output": "'4~%_^~167'"
            },
            {
                "input": "solve(\"mlB-*F\")",
                "output": "'MLb-*f'"
            },
            {
                "input": "solve(\"UKg@xpM~G\")",
                "output": "'ukG@XPm~g'"
            },
            {
                "input": "solve(\"LlWj5FD\")",
                "output": "'lLwJ5fd'"
            },
            {
                "input": "solve(\"giiqdy\")",
                "output": "'GIIQDY'"
            },
            {
                "input": "solve(\"iiyw\")",
                "output": "'IIYW'"
            },
            {
                "input": "solve(\"dgksb\")",
                "output": "'DGKSB'"
            },
            {
                "input": "solve(\"zt*#m&v\")",
                "output": "'ZT*#M&V'"
            },
            {
                "input": "solve(\"gcflna\")",
                "output": "'GCFLNA'"
            },
            {
                "input": "solve(\"QDF:CXB\")",
                "output": "'qdf:cxb'"
            },
            {
                "input": "solve(\"5-=@&*\")",
                "output": "'*&@=-5'"
            },
            {
                "input": "solve(\"++A^/?xV\")",
                "output": "'++a^/?Xv'"
            },
            {
                "input": "solve(\"4hzTAP_e\")",
                "output": "'4HZtap_E'"
            },
            {
                "input": "solve(\"73713138\")",
                "output": "'83131737'"
            },
            {
                "input": "solve(\"++skzZ\")",
                "output": "'++SKZz'"
            },
            {
                "input": "solve(\"ghgnw\")",
                "output": "'GHGNW'"
            },
            {
                "input": "solve(\"?gn~\")",
                "output": "'?GN~'"
            },
            {
                "input": "solve(\"17000556\")",
                "output": "'65500071'"
            },
            {
                "input": "solve(\"6812832\")",
                "output": "'2382186'"
            },
            {
                "input": "solve(\"Q&LKD*BmV\")",
                "output": "'q&lkd*bMv'"
            },
            {
                "input": "solve(\"Uc$$xCSQ0cN~\")",
                "output": "'uC$$Xcsq0Cn~'"
            },
            {
                "input": "solve(\"nfl*&=+$@\")",
                "output": "'NFL*&=+$@'"
            },
            {
                "input": "solve(\"#ryv@$l*\")",
                "output": "'#RYV@$L*'"
            },
            {
                "input": "solve(\"+fDs:f\")",
                "output": "'+FdS:F'"
            },
            {
                "input": "solve(\"13431299\")",
                "output": "'99213431'"
            },
            {
                "input": "solve(\"cjG~zXx\")",
                "output": "'CJg~ZxX'"
            },
            {
                "input": "solve(\"613\")",
                "output": "'316'"
            },
            {
                "input": "solve(\"enxhq\")",
                "output": "'ENXHQ'"
            },
            {
                "input": "solve(\"4kqV&&/6+Lc\")",
                "output": "'4KQv&&/6+lC'"
            },
            {
                "input": "solve(\"gne\")",
                "output": "'GNE'"
            },
            {
                "input": "solve(\"@!93/5**@\")",
                "output": "'@**5/39!@'"
            },
            {
                "input": "solve(\"%_uoz/#?L\")",
                "output": "'%_UOZ/#?l'"
            },
            {
                "input": "solve(\"?ao\")",
                "output": "'?AO'"
            },
            {
                "input": "solve(\"u:kx!*\")",
                "output": "'U:KX!*'"
            },
            {
                "input": "solve(\"54138\")",
                "output": "'83145'"
            },
            {
                "input": "solve(\"DNOZ2XKDMJZSwC$\")",
                "output": "'dnoz2xkdmjzsWc$'"
            },
            {
                "input": "solve(\"+1/05*!?+\")",
                "output": "'+?!*50/1+'"
            },
            {
                "input": "solve(\"=epet*orq\")",
                "output": "'=EPET*ORQ'"
            },
            {
                "input": "solve(\"-|MSfK\")",
                "output": "'-|msFk'"
            },
            {
                "input": "solve(\"fqY\")",
                "output": "'FQy'"
            },
            {
                "input": "solve(\"cqiau\")",
                "output": "'CQIAU'"
            },
            {
                "input": "solve(\"o3LWaIl4\")",
                "output": "'O3lwAiL4'"
            },
            {
                "input": "solve(\"ctpx\")",
                "output": "'CTPX'"
            },
            {
                "input": "solve(\":TDr\")",
                "output": "':tdR'"
            },
            {
                "input": "solve(\"%cCcq#\")",
                "output": "'%CcCQ#'"
            },
            {
                "input": "solve(\"~/uc/@p^h\")",
                "output": "'~/UC/@P^H'"
            },
            {
                "input": "solve(\"%kmlC*s\")",
                "output": "'%KMLc*S'"
            },
            {
                "input": "solve(\"059646105\")",
                "output": "'501646950'"
            },
            {
                "input": "solve(\"7_%\")",
                "output": "'%_7'"
            },
            {
                "input": "solve(\"XAdrNtUNr\")",
                "output": "'xaDRnTunR'"
            },
            {
                "input": "solve(\"^@B\")",
                "output": "'^@b'"
            },
            {
                "input": "solve(\"340988\")",
                "output": "'889043'"
            },
            {
                "input": "solve(\"npKwSAD\")",
                "output": "'NPkWsad'"
            },
            {
                "input": "solve(\"yzzdc\")",
                "output": "'YZZDC'"
            },
            {
                "input": "solve(\"EsvNrg\")",
                "output": "'eSVnRG'"
            },
            {
                "input": "solve(\"QnNQfv\")",
                "output": "'qNnqFV'"
            },
            {
                "input": "solve(\"5%@\")",
                "output": "'@%5'"
            }
        ]
    },
    {
        "problem_description": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
        "ground truth": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
        "instances": [
            {
                "input": "string_to_md5(\"jgkjTZ\")",
                "output": "'f059b276ea01208f7985992ac94ec10b'"
            },
            {
                "input": "string_to_md5(\"a\")",
                "output": "'0cc175b9c0f1b6a831c399e269772661'"
            },
            {
                "input": "string_to_md5(\"qvzszqobvfmb\")",
                "output": "'7e9300be67b3bba4c461450a31b9f699'"
            },
            {
                "input": "string_to_md5(\"ayonokqiing\")",
                "output": "'ae404defebefbd172976705fe42a6cc3'"
            },
            {
                "input": "string_to_md5(\"xtmyzkvzksx\")",
                "output": "'20686834435288eff091d416601d9f20'"
            },
            {
                "input": "string_to_md5(\"kxb\")",
                "output": "'9473bf3279aaaade35e410e4084db49e'"
            },
            {
                "input": "string_to_md5(\"fYDthxAGBi\")",
                "output": "'b856cc94dd78ae0ddc62ae7c2193c682'"
            },
            {
                "input": "string_to_md5(\"MFRY\")",
                "output": "'60696d391319094df10c4a40317a748d'"
            },
            {
                "input": "string_to_md5(\"tVxMRyCbqkMjN\")",
                "output": "'1aad59314304ea0a64fcf28f73274904'"
            },
            {
                "input": "string_to_md5(\"xe\")",
                "output": "'956f8a3a1e6c05797e152fc2b2a0729b'"
            },
            {
                "input": "string_to_md5(\"o\")",
                "output": "'d95679752134a2d9eb61dbd7b91c4bcc'"
            },
            {
                "input": "string_to_md5(\"CYNPPxVbwc\")",
                "output": "'ec09f955fd202b3cd204bd62f74a801c'"
            },
            {
                "input": "string_to_md5(\"VWMM\")",
                "output": "'15420d0335408c75578cae887ccd82ba'"
            },
            {
                "input": "string_to_md5(\"usp\")",
                "output": "'75581170ffc0cc5ae2d7c2823fe21d6a'"
            },
            {
                "input": "string_to_md5(\"VORBKDEPW\")",
                "output": "'8e5249f3fd9d3985cfa01913c146953b'"
            },
            {
                "input": "string_to_md5(\"ye\")",
                "output": "'00c66f1a036bd8f9cb709cb8d925d3d9'"
            },
            {
                "input": "string_to_md5(\"gsv\")",
                "output": "'79613fb8e7ea792c36d318bb4b2ac641'"
            },
            {
                "input": "string_to_md5(\"xkq\")",
                "output": "'6bd37d382fed677c4e90117903d54dcd'"
            },
            {
                "input": "string_to_md5(\"KYHyTpMq HE\")",
                "output": "'99d9382fff950447ed38670ccccfdc13'"
            },
            {
                "input": "string_to_md5(\"AFTXSN\")",
                "output": "'be953e2dc57c6b15d4ad6668fb8f2fd3'"
            },
            {
                "input": "string_to_md5(\"jrkkvnfcojt\")",
                "output": "'0e19291c8150ef4cd9e430cf737cda26'"
            },
            {
                "input": "string_to_md5(\"lNTfZa\")",
                "output": "'2ba491e66313ab7eac5a38a1e324ec99'"
            },
            {
                "input": "string_to_md5(\"suh\")",
                "output": "'59ef778a74aa43312d57a832901efbbb'"
            },
            {
                "input": "string_to_md5(\"g\")",
                "output": "'b2f5ff47436671b6e533d8dc3614845d'"
            },
            {
                "input": "string_to_md5(\"tk\")",
                "output": "'b6717b91c7595cc07f30aa9a784e6390'"
            },
            {
                "input": "string_to_md5(\"RZK\")",
                "output": "'357f775f6fa1150ee751433691fe1adf'"
            },
            {
                "input": "string_to_md5(\"fPEYAnhliwYkV\")",
                "output": "'b481aa4685da6beb85f82c1145ccc4e0'"
            },
            {
                "input": "string_to_md5(\"MudxSfkMwtstmUK\")",
                "output": "'2d9de72eca4e49f2036cf92f916cfaf5'"
            },
            {
                "input": "string_to_md5(\"vm\")",
                "output": "'686c821a80914aef822465b48019cd34'"
            },
            {
                "input": "string_to_md5(\"ic\")",
                "output": "'f05a225e14ff5e194a8eef0c6990cefb'"
            },
            {
                "input": "string_to_md5(\"eu\")",
                "output": "'4829322d03d1606fb09ae9af59a271d3'"
            },
            {
                "input": "string_to_md5(\"GqtrXXiHwQt\")",
                "output": "'0efda166b22fcd0b9c124a0eefc40b2b'"
            },
            {
                "input": "string_to_md5(\"yhk\")",
                "output": "'a3dbe1d83b6caf90701237c674e25e20'"
            },
            {
                "input": "string_to_md5(\"ULYRdQdgYyKvr\")",
                "output": "'f9edfea582c38545d992caa017a47cfc'"
            },
            {
                "input": "string_to_md5(\"raycf\")",
                "output": "'87454cc36a29a3b495e0370278f35ea3'"
            },
            {
                "input": "string_to_md5(\"BGS\")",
                "output": "'3b7f57d0beb30d8eb58ce2e1a24cb7d4'"
            },
            {
                "input": "string_to_md5(\"qpw\")",
                "output": "'0d107b5fc5cb42327db91cf9b7eebbb4'"
            },
            {
                "input": "string_to_md5(\"DZX BWORK\")",
                "output": "'291df03432b3b0c8e87537b8454bcb33'"
            },
            {
                "input": "string_to_md5(\"amo\")",
                "output": "'3d5390642ff7a7fd9b7ab8bac4ec3ec5'"
            },
            {
                "input": "string_to_md5(\"VDST\")",
                "output": "'2d9b5ab0a4868d61dd401f3a8b6f9035'"
            },
            {
                "input": "string_to_md5(\"NGNL\")",
                "output": "'ea9dc311cb9c0eba560b149e98da0d79'"
            },
            {
                "input": "string_to_md5(\" HOC\")",
                "output": "'f336f91cf78937b17147118f963f885c'"
            },
            {
                "input": "string_to_md5(\"yycsgllnyq\")",
                "output": "'135a57c7afbd55b0761b9af0ec3e94ec'"
            },
            {
                "input": "string_to_md5(\"lbcneofdnw\")",
                "output": "'dd1382df6f425db00ef51e02d3abd6cb'"
            },
            {
                "input": "string_to_md5(\"RnAgsNQYpdYDfDZ\")",
                "output": "'7919b1d4d171867f36b0440f57c1cfeb'"
            },
            {
                "input": "string_to_md5(\"yOEUDlaAVvW\")",
                "output": "'3c0b7f8e2dc36c4dcca063b561cb3b58'"
            },
            {
                "input": "string_to_md5(\"TO ZtNcewj\")",
                "output": "'74472c4d750baacc3bee980a699d6714'"
            },
            {
                "input": "string_to_md5(\"BSDxYJptDL\")",
                "output": "'a83048fc58eeaf69698f39d4d91e039f'"
            },
            {
                "input": "string_to_md5(\"ODELWFRV\")",
                "output": "'6585db1075bd8c6af21ab1991c9b3ef4'"
            },
            {
                "input": "string_to_md5(\"OTUB\")",
                "output": "'2aa6b636d7df0143879b5b98e12901f1'"
            },
            {
                "input": "string_to_md5(\"gai\")",
                "output": "'c8cdc5f3d46143b664d72d039b5832fc'"
            },
            {
                "input": "string_to_md5(\"btxzvnrxff\")",
                "output": "'6942ed804e8567dfd9eee5703665499f'"
            },
            {
                "input": "string_to_md5(\"oou\")",
                "output": "'d5ad000b6930cfdfbc2512f79379a0d3'"
            },
            {
                "input": "string_to_md5(\"ZtBaMWM\")",
                "output": "'1f8becd31f659dc3180b82412c052fb6'"
            },
            {
                "input": "string_to_md5(\"ukypumlar\")",
                "output": "'e946a5b014a8ad7a1d3df13d5e62ed5f'"
            },
            {
                "input": "string_to_md5(\"esishggicol\")",
                "output": "'b2094518286b45d5272baa6ccd00f942'"
            },
            {
                "input": "string_to_md5(\"znftgxw\")",
                "output": "'f2c68677d91d5fef4d51a5e4ec6f8e87'"
            },
            {
                "input": "string_to_md5(\"x\")",
                "output": "'9dd4e461268c8034f5c8564e155c67a6'"
            },
            {
                "input": "string_to_md5(\"Q MOKZHXU\")",
                "output": "'e5ce6c21b90130a1166ccdd1c4bf29d8'"
            },
            {
                "input": "string_to_md5(\"lyjJuN\")",
                "output": "'799dbc4a750bd8bb86db6564248a0303'"
            },
            {
                "input": "string_to_md5(\"FWWK\")",
                "output": "'d295e57ca9b03d7ae988bb3a9be96416'"
            },
            {
                "input": "string_to_md5(\"bxaeneozucv\")",
                "output": "'4c65531fd7306ff5533e1ea16bfb0cce'"
            },
            {
                "input": "string_to_md5(\"SNTM\")",
                "output": "'64354b4843c615754803f33af6fc83f3'"
            },
            {
                "input": "string_to_md5(\"noc\")",
                "output": "'4a5e687705bc436b698d9c28cffe9e26'"
            },
            {
                "input": "string_to_md5(\"ambcshxwljh\")",
                "output": "'76c387e45777e530b60b6d86f3435303'"
            },
            {
                "input": "string_to_md5(\"R LHSKWX\")",
                "output": "'cdf8ebf81e06448220e46a06ef7b755e'"
            },
            {
                "input": "string_to_md5(\"yu\")",
                "output": "'385d04e7683a033fcc6c6654529eb7e9'"
            },
            {
                "input": "string_to_md5(\"NBHXTMWN\")",
                "output": "'37f381a64c465c9cfdaf6a12ec92aacd'"
            },
            {
                "input": "string_to_md5('A B C')",
                "output": "'0ef78513b0cb8cef12743f5aeb35f888'"
            },
            {
                "input": "string_to_md5(\"LROyxujsRPd\")",
                "output": "'0459af70991ed75a4f7317a6a432f0bd'"
            },
            {
                "input": "string_to_md5(\"vRhQwQXRAXYXk\")",
                "output": "'4abaef25ba6fa86e66a7aed32bd07b6f'"
            },
            {
                "input": "string_to_md5('Hello world')",
                "output": "'3e25960a79dbc69b674cd4ec67a72c62'"
            },
            {
                "input": "string_to_md5(\"krytoz\")",
                "output": "'728bd6849b94ce3bee87d1d688a21286'"
            },
            {
                "input": "string_to_md5(\"cqe\")",
                "output": "'2d5b0d0f1ca9699d712cfe330e6b3b60'"
            },
            {
                "input": "string_to_md5(\"KJNMLU\")",
                "output": "'c0524ab09d7461fc08a67e9f3c1a79a7'"
            },
            {
                "input": "string_to_md5(\"JCV\")",
                "output": "'3329474393ecc80ee3c3b92f4ac414b2'"
            },
            {
                "input": "string_to_md5(\"OJPOI ZHE\")",
                "output": "'1ff6a83386e9364ee5282dc5a4cecb35'"
            },
            {
                "input": "string_to_md5(\"iAhGuHgG\")",
                "output": "'a4654a70be2c7ab01fe10feac675a900'"
            },
            {
                "input": "string_to_md5(\"zss\")",
                "output": "'aad1db35f0b1aa1072936d9977fa3cb5'"
            },
            {
                "input": "string_to_md5(\" FRWZWQ\")",
                "output": "'5c0ce9dd99a75e9dd7559361e66a2a54'"
            },
            {
                "input": "string_to_md5(\"VSROZVQJ\")",
                "output": "'bd284620aa3a2fee11a2306a259fcd31'"
            },
            {
                "input": "string_to_md5(\"h\")",
                "output": "'2510c39011c5be704182423e3a695e91'"
            },
            {
                "input": "string_to_md5(\"UakQdq\")",
                "output": "'e37307dc975f4670f5abb03655bc3c52'"
            },
            {
                "input": "string_to_md5(\"MDJI\")",
                "output": "'3283222321086faa8a5624e7d72c9bf5'"
            },
            {
                "input": "string_to_md5(\"njnfpiremy\")",
                "output": "'6edd026a6702bf00ea5e7ad7e39e21cc'"
            },
            {
                "input": "string_to_md5(\"YRdnAyRTb y\")",
                "output": "'ce5111a1384c8e457b0939ae29fa6b5b'"
            },
            {
                "input": "string_to_md5(\"zmtkwpjssm\")",
                "output": "'e142e3a9eabb8c6d2e051ddcec4da146'"
            },
            {
                "input": "string_to_md5(\"lixwbwonyge\")",
                "output": "'d2978bb846b45390b2652264c1061e1d'"
            },
            {
                "input": "string_to_md5(\"upzouv\")",
                "output": "'77122f6475a79d7d85d228e20ec2ebfe'"
            },
            {
                "input": "string_to_md5(\"ebjmilcprg\")",
                "output": "'87b35ca4004ff49efecb6f90986bed1f'"
            },
            {
                "input": "string_to_md5(\"nwg\")",
                "output": "'abe97dbb57b6944196ac7eb099a59c89'"
            },
            {
                "input": "string_to_md5(\"XQRN RZ\")",
                "output": "'51fd4b68ced0af3bb8b80e04e1f20cbd'"
            },
            {
                "input": "string_to_md5(\"RNG Fp\")",
                "output": "'c0abce6ec1437590811b930232b49b0e'"
            },
            {
                "input": "string_to_md5(\"in\")",
                "output": "'13b5bfe96f3e2fe411c9f66f4a582adf'"
            },
            {
                "input": "string_to_md5(\"IrJZorcljfKs\")",
                "output": "'16139d61f498ce5894280a5e5698e36d'"
            },
            {
                "input": "string_to_md5(\"ObKvFxRMBLPbwVt\")",
                "output": "'7811a108f0faba7b80722f1bfd79f5b5'"
            },
            {
                "input": "string_to_md5(\"jn\")",
                "output": "'17cedeccc3a6555b9a5826e4d726eae3'"
            },
            {
                "input": "string_to_md5(\"lfe\")",
                "output": "'c2ce4fe80e2598c76706864b30bf041f'"
            },
            {
                "input": "string_to_md5(\"DFOGRE\")",
                "output": "'16acc14673bc90d88bf422ab339853f6'"
            },
            {
                "input": "string_to_md5(\"kduesijtuh\")",
                "output": "'94713284aca8a114b85c3edcd1ac98a9'"
            },
            {
                "input": "string_to_md5(\"zkmskpstdgad\")",
                "output": "'d6f641f63e39c29372cd7cffb05625ae'"
            },
            {
                "input": "string_to_md5(\"oKvWMeUZ\")",
                "output": "'f9d54350a3b1c70f382f0e5a5b63a275'"
            },
            {
                "input": "string_to_md5(\"tqudrevutw\")",
                "output": "'a749d9b6a10f8323ec418ee33186f5d7'"
            },
            {
                "input": "string_to_md5(\" YHZCIE\")",
                "output": "'6e08b0ffaf891241e1cd65003734678a'"
            },
            {
                "input": "string_to_md5(\"FLJD\")",
                "output": "'cf35c5593ed680044942ea8521867912'"
            },
            {
                "input": "string_to_md5(\"ixlwfvwlcq\")",
                "output": "'2fe54086b4a6e94b2a4827f41034acce'"
            },
            {
                "input": "string_to_md5(\"vhk\")",
                "output": "'6de4659459c90eb26d7fc4e7f307055f'"
            },
            {
                "input": "string_to_md5(\"anrPPmb\")",
                "output": "'56363dbba302c0ead87e8c695b8fc47e'"
            },
            {
                "input": "string_to_md5(\"WGCJWEUA\")",
                "output": "'00e78877b3373720890110d1b297d370'"
            },
            {
                "input": "string_to_md5(\"VaHxIhDUrvTOJRI\")",
                "output": "'29b090376ebc459327d9c754c481b114'"
            },
            {
                "input": "string_to_md5(\"hrfa\")",
                "output": "'8634b2d56f69e3262532e4cfd736dc97'"
            },
            {
                "input": "string_to_md5(\"HcQnr KDBjXW e\")",
                "output": "'2034b414ccba9e3a75a7d7c502e56a7b'"
            },
            {
                "input": "string_to_md5(\"cykhnyr\")",
                "output": "'75a727897a92c7223d260e57e0b2b3e8'"
            },
            {
                "input": "string_to_md5(\"nde\")",
                "output": "'a422413d9ca1bcff6c1b5ba7074d9be3'"
            },
            {
                "input": "string_to_md5(\"gnkhsnspxxz\")",
                "output": "'75f375259d4dc9f5a7b46c9ad25fdb9a'"
            },
            {
                "input": "string_to_md5(\"TNEDBLXAD\")",
                "output": "'dc4ca5f7a9c1fa04c8c12897e67993b5'"
            },
            {
                "input": "string_to_md5(\"VMCacB\")",
                "output": "'647231c97539d0bae003bdb7c9905ad3'"
            },
            {
                "input": "string_to_md5(\"pbelwmk\")",
                "output": "'7d48ca9cf4f80873af2b337cb462824c'"
            },
            {
                "input": "string_to_md5(\"kpaiXNYXyA\")",
                "output": "'f520fc36e7bf3e77760bfa28c13b38dd'"
            },
            {
                "input": "string_to_md5(\"ZNCHUZLX\")",
                "output": "'f7ddb89419a3bf0b11910832591eb324'"
            },
            {
                "input": "string_to_md5(\" QHLNEU\")",
                "output": "'8a01a03aaac6af784853ae67da94a194'"
            },
            {
                "input": "string_to_md5(\"dwnyF boOsdo\")",
                "output": "'a726a16fe6396fedc63aab3ed030dc3f'"
            },
            {
                "input": "string_to_md5(\"bpn\")",
                "output": "'b6982d2bb25edac541a9611541d0900e'"
            },
            {
                "input": "string_to_md5(\"t\")",
                "output": "'e358efa489f58062f10dd7316b65649e'"
            },
            {
                "input": "string_to_md5(\"HGBLNZHGD\")",
                "output": "'db6145eab6f0c7584160bf0494635633'"
            },
            {
                "input": "string_to_md5(\"voSeoS\")",
                "output": "'08822b542e28e6c6ab8d4eedf1dca242'"
            },
            {
                "input": "string_to_md5(\"vl\")",
                "output": "'28b3aabbdbbe9733da0a27c8c80a0eb7'"
            },
            {
                "input": "string_to_md5(\"v\")",
                "output": "'9e3669d19b675bd57058fd4664205d2a'"
            },
            {
                "input": "string_to_md5(\"rve\")",
                "output": "'6ca7a16d5aa37de5d8d20d0be63fe89c'"
            }
        ]
    },
    {
        "problem_description": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
        "ground truth": "def generate_integers(a, b):\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
        "instances": [
            {
                "input": "generate_integers(134, 7)",
                "output": "[8]"
            },
            {
                "input": "generate_integers(11, 5)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(16, 88)",
                "output": "[]"
            },
            {
                "input": "generate_integers(135, 3)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(12, 6)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(19, 93)",
                "output": "[]"
            },
            {
                "input": "generate_integers(6, 6)",
                "output": "[6]"
            },
            {
                "input": "generate_integers(137, 6)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(136, 3)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(13, 90)",
                "output": "[]"
            },
            {
                "input": "generate_integers(132, 4)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(14, 92)",
                "output": "[]"
            },
            {
                "input": "generate_integers(6, 3)",
                "output": "[4, 6]"
            },
            {
                "input": "generate_integers(2, 15)",
                "output": "[2, 4, 6, 8]"
            },
            {
                "input": "generate_integers(11, 7)",
                "output": "[8]"
            },
            {
                "input": "generate_integers(14, 4)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(20, 93)",
                "output": "[]"
            },
            {
                "input": "generate_integers(5, 8)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(12, 88)",
                "output": "[]"
            },
            {
                "input": "generate_integers(16, 89)",
                "output": "[]"
            },
            {
                "input": "generate_integers(15, 91)",
                "output": "[]"
            },
            {
                "input": "generate_integers(1, 14)",
                "output": "[2, 4, 6, 8]"
            },
            {
                "input": "generate_integers(14, 6)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(132, 3)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(7, 6)",
                "output": "[6]"
            },
            {
                "input": "generate_integers(22, 91)",
                "output": "[]"
            },
            {
                "input": "generate_integers(135, 5)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(16, 92)",
                "output": "[]"
            },
            {
                "input": "generate_integers(10, 6)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(7, 15)",
                "output": "[8]"
            },
            {
                "input": "generate_integers(127, 7)",
                "output": "[8]"
            },
            {
                "input": "generate_integers(132, 2)",
                "output": "[2, 4, 6, 8]"
            },
            {
                "input": "generate_integers(129, 7)",
                "output": "[8]"
            },
            {
                "input": "generate_integers(6, 11)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(13, 2)",
                "output": "[2, 4, 6, 8]"
            },
            {
                "input": "generate_integers(130, 1)",
                "output": "[2, 4, 6, 8]"
            },
            {
                "input": "generate_integers(12, 89)",
                "output": "[]"
            },
            {
                "input": "generate_integers(21, 85)",
                "output": "[]"
            },
            {
                "input": "generate_integers(3, 7)",
                "output": "[4, 6]"
            },
            {
                "input": "generate_integers(8, 7)",
                "output": "[8]"
            },
            {
                "input": "generate_integers(21, 92)",
                "output": "[]"
            },
            {
                "input": "generate_integers(12, 91)",
                "output": "[]"
            },
            {
                "input": "generate_integers(136, 2)",
                "output": "[2, 4, 6, 8]"
            },
            {
                "input": "generate_integers(133, 5)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(6, 15)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(5, 6)",
                "output": "[6]"
            },
            {
                "input": "generate_integers(3, 14)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(1, 15)",
                "output": "[2, 4, 6, 8]"
            },
            {
                "input": "generate_integers(130, 3)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(13, 86)",
                "output": "[]"
            },
            {
                "input": "generate_integers(14, 89)",
                "output": "[]"
            },
            {
                "input": "generate_integers(5, 5)",
                "output": "[]"
            },
            {
                "input": "generate_integers(15, 92)",
                "output": "[]"
            },
            {
                "input": "generate_integers(9, 4)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(17, 86)",
                "output": "[]"
            },
            {
                "input": "generate_integers(15, 4)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(3, 13)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(8, 5)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(6, 7)",
                "output": "[6]"
            },
            {
                "input": "generate_integers(9, 6)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(11, 4)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(19, 89)",
                "output": "[]"
            },
            {
                "input": "generate_integers(10, 4)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(6, 9)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(134, 5)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(137, 7)",
                "output": "[8]"
            },
            {
                "input": "generate_integers(4, 12)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(127, 2)",
                "output": "[2, 4, 6, 8]"
            },
            {
                "input": "generate_integers(5, 4)",
                "output": "[4]"
            },
            {
                "input": "generate_integers(11, 2)",
                "output": "[2, 4, 6, 8]"
            },
            {
                "input": "generate_integers(131, 1)",
                "output": "[2, 4, 6, 8]"
            },
            {
                "input": "generate_integers(8, 2)",
                "output": "[2, 4, 6, 8]"
            },
            {
                "input": "generate_integers(3, 12)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(5, 9)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(130, 7)",
                "output": "[8]"
            },
            {
                "input": "generate_integers(22, 86)",
                "output": "[]"
            },
            {
                "input": "generate_integers(16, 86)",
                "output": "[]"
            },
            {
                "input": "generate_integers(4, 8)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(6, 12)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(129, 4)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(7, 7)",
                "output": "[]"
            },
            {
                "input": "generate_integers(133, 1)",
                "output": "[2, 4, 6, 8]"
            },
            {
                "input": "generate_integers(137, 5)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(17, 93)",
                "output": "[]"
            },
            {
                "input": "generate_integers(18, 92)",
                "output": "[]"
            },
            {
                "input": "generate_integers(4, 13)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(5, 15)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(1, 13)",
                "output": "[2, 4, 6, 8]"
            },
            {
                "input": "generate_integers(6, 5)",
                "output": "[6]"
            },
            {
                "input": "generate_integers(9, 5)",
                "output": "[6, 8]"
            },
            {
                "input": "generate_integers(7, 1)",
                "output": "[2, 4, 6]"
            },
            {
                "input": "generate_integers(133, 2)",
                "output": "[2, 4, 6, 8]"
            },
            {
                "input": "generate_integers(4, 15)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(128, 7)",
                "output": "[8]"
            },
            {
                "input": "generate_integers(15, 7)",
                "output": "[8]"
            },
            {
                "input": "generate_integers(131, 3)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(4, 11)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(15, 86)",
                "output": "[]"
            },
            {
                "input": "generate_integers(133, 3)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(128, 3)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(14, 85)",
                "output": "[]"
            },
            {
                "input": "generate_integers(134, 1)",
                "output": "[2, 4, 6, 8]"
            },
            {
                "input": "generate_integers(16, 84)",
                "output": "[]"
            },
            {
                "input": "generate_integers(135, 4)",
                "output": "[4, 6, 8]"
            },
            {
                "input": "generate_integers(22, 92)",
                "output": "[]"
            }
        ]
    }
]